{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"About Me","text":"<p> about me </p> <p>Charles Chi Le  (\u4e50\u9a70 in simplified Chinese)</p> <p>         Hi there! I am currently a Master's Student in Electrical and Computer Engineering with a concentration in software development at Duke University . I graduated from Zhejiang University (ZJU) and the University of Edinburgh (UoE) in June 2022. I received dual bachelor's degrees in Biomedical Sciences from both ZJU and UoE.        </p> <p>         I am also an enthusiastic self-learner and interested in various fields of computer science. Here are my [course notes] for all the courses that I have taken where I share my self-learning experiences and resources.        </p> <p>         For future career interests, I am particularly interested in software engineering and AI for science, especially Biology.       </p> <p>         Contact: CV / Github / email </p>"},{"location":"About/interesting/","title":"something interesting","text":"<p>prompt engineering for developers https://www.deeplearning.ai/short-courses/ deep learning \u5434\u6069\u8fbe \u5f00\u53d1\u8005\u7528gpt\u5199\u4ee3\u7801</p>"},{"location":"About/me/","title":"About Me","text":"<p> Charles Chi Le (\u4e50\u9a70) Graduated @ ZJU &amp; UoE majoring in Biomedical Sciences Currently Master's student @ Duke majoring in Electrical and Computer Engineering (specialized in software development)</p>"},{"location":"About/test/","title":"Test","text":""},{"location":"About/test/#_1","title":"\u6d4b\u8bd5\u4ee3\u7406","text":""},{"location":"About/test/#0918-rog-windows","title":"0918 \u65b0rog windows\u7b14\u8bb0\u672c\u6d4b\u8bd5","text":""},{"location":"About/test/#0803-934","title":"0803 9:34","text":""},{"location":"About/test/#this-is-a-test-web-page","title":"This is a test web page","text":""},{"location":"About/test/#test-the-github","title":"Test the github","text":""},{"location":"About/test/#20230712-mac","title":"20230712 \u6d4b\u8bd5\u65b0mac\u80fd\u5426\u987a\u5229\u8fd0\u884c","text":""},{"location":"About/test/#0","title":"0. \u6d4b\u8bd5\u65b0\u7535\u8111\u662f\u5426\u80fd\u591f\u540c\u6b65\u7b14\u8bb0","text":""},{"location":"About/test/#1-b","title":"1. \u6d4b\u8bd5b\u7ad9\u89c6\u9891\u5d4c\u5165","text":"<p>\u4ee3\u7801\u5757\uff1a</p> <pre><code>&lt;iframe src=\"//player.bilibili.com/player.html?aid=14909587&amp;bvid=BV1Hx411V7n9&amp;cid=24297387&amp;page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" width=\"800\" height=\"500\"&gt; &lt;/iframe&gt;\n</code></pre>"},{"location":"About/test/#2","title":"2. \u6d4b\u8bd5\u56fe\u7247\u63d2\u5165","text":"<p>\u6b63\u786e\u4ee3\u7801\u5757\uff1a</p> <pre><code>![\u5317\u957f\u5c3e\u5c71\u96c0](1.jpeg)\n</code></pre> <p>\u4ee5\u4e0b\u90fd\u662f\u9519\u8bef\u4ee3\u7801</p> <pre><code>![/docs/pics/\u5fbd\u7ae0.png](/docs/pics/\u5fbd\u7ae0.png)\n![/pics/\u5fbd\u7ae0.png](/pics/\u5fbd\u7ae0.png)\n![docs/pics/\u5fbd\u7ae0.png](docs/pics/\u5fbd\u7ae0.png)\n![pics/\u5fbd\u7ae0.png](pics/\u5fbd\u7ae0.png)\n</code></pre>"},{"location":"About/test/#3","title":"3. \u6d4b\u8bd5\u97f3\u4e50\u63d2\u5165","text":"<p>\u4ee3\u7801\u5757\uff1a</p> <pre><code>&lt;iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"450\" src=\"//music.163.com/outchain/player?type=0&amp;id=5156824747&amp;auto=0&amp;height=430\"&gt;&lt;/iframe&gt;\n</code></pre> <p>height\u4e3a\u63d2\u5165\u6a21\u5757\u7684\u9ad8\u5ea6</p> <p>auto\u4e3a\u4e00\u65f6\uff0c\u4e3a\u81ea\u52a8\u64ad\u653e\u6a21\u5f0f\uff0c\u4e3a0\u65f6\uff0c\u4e3a\u975e\u81ea\u52a8\u64ad\u653e\u6a21\u5f0f</p> <p>\u4ee3\u7801\u5757\uff1a</p> <pre><code>&lt;iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"100%\" height=\"100\" src=\"https://music.163.com/outchain/player?type=2&amp;amp;id=38018486&amp;amp;auto=0&amp;amp;height=100\"&gt;&lt;/iframe&gt;\n</code></pre> <p>https://music.163.com/#/song?id=1808040375&amp;userid=1455818378</p> <p>https://music.163.com/playlist?id=7799509690&amp;userid=1455818378</p> Future bass <p>type=0\u662f\u64ad\u653e\u5217\u8868</p> <p>type=2\u662f\u5355\u66f2</p> <p>hello! here is Chi Le</p>"},{"location":"Course/","title":"Computer Science Course","text":"<p>Abstract</p> <p>\u8fd9\u91cc\u662fCS\u8bfe\u7a0b\u76f8\u5173\u7684\u7b14\u8bb0</p> <p>\u5305\u62ec\u4e86\u4ece\u8ba1\u7b97\u673a\u3001\u6570\u5b66\u5165\u95e8\u8bfe\u5230\u540e\u7eedcs\u8fdb\u9636\u8bfe\u7a0b\uff0c</p> <p>\u6b63\u5728\u4e0d\u65ad\u603b\u7ed3\u66f4\u65b0\u7b14\u8bb0\u4e2d...</p>"},{"location":"Course/#table-of-contents","title":"Table of Contents","text":"<ul> <li> <p>Duke Introductory C Programming</p> <ul> <li>Course information</li> <li>Module 1 Programming Fundamentals</li> </ul> </li> <li> <p>Harvard CS50's introduction to computer science</p> <ul> <li>cs50 notes</li> </ul> </li> <li> <p>Berkeley CS61A: Structure and Interpretation of Computer Programs</p> <ul> <li>Course information</li> <li>week 1</li> </ul> </li> <li> <p>Berkeley CS61B: Data Structures and Algorithms</p> <ul> <li>Course information</li> <li>week 1</li> </ul> </li> </ul>"},{"location":"Course/15445/1/","title":"CMU 15445","text":"<p>\u6570\u636e\u5e93\uff1aorganized collection of inter-related data that models some aspect of the real-world</p> <p>sqlLite</p> <p>\u6570\u636e\u5e93\u662f\u5927\u90e8\u5206\u8ba1\u7b97\u673a\u8f6f\u4ef6\u7684\u6838\u5fc3</p> <p>Flat File Strawman\uff1a\u666e\u901a\u7684\u5b58\u653e\u65b9\u6cd5\u4f7f\u7528\u6587\u4ef6\u5b58\u6570\u636e</p> <p>\u4e00\u4e2a\u4e13\u8f91\u600e\u4e48\u53ea\u5bf9\u5e94\u4e00\u4e2a\u97f3\u4e50\u5bb6\uff1f</p> <p>\u5982\u679c\u6709\u4eba\u5c06\u5e74\u4efd\u91cd\u5199\u6210invalid\u5b57\u7b26\u4e32\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1f</p> <p>\u5982\u679c\u4e00\u5f20\u4e13\u8f91\u6709\u5f88\u591a\u4e2a\u97f3\u4e50\u5bb6\u8be5\u600e\u4e48\u529e\uff1f</p> <p>\u5982\u679c\u5728\u4e00\u4e2a\u4e13\u8f91\u4e0a\u5220\u9664\u4e00\u4e2a\u6b4c\u624b\uff1f</p> <p>\u5982\u4f55\u627e\u4e00\u6761\u7279\u5b9a\u7684\u8bb0\u5f55\uff1f</p> <p>\u5982\u4f55\u5efa\u7acb\u4e00\u4e2a\u65b0\u7684\u5e94\u7528\u6765\u7528\u8fd9\u4e2a\u6570\u636e\u5e93\uff1f</p> <p>\u5982\u4f55\u8ba9\u591a\u4e2a\u4eba\u540c\u65f6\u6539\u4e00\u4efd\u6587\u4ef6\uff1f</p> <p>\u5982\u679c\u66f4\u65b0\u6570\u636e\u7684\u65f6\u5019\u6302\u4e86\u600e\u4e48\u529e\uff1f</p> <p>\u5982\u679c\u6587\u4ef6\u8981\u590d\u5236\u6210\u591a\u4efd\u8be5\u600e\u4e48\u529e\uff1f</p> <p>database management system (DBMS)</p> <p>is software that allows applications to store and analyze information in a database</p> <p>definition, creation, querying, update, administration</p> <p>\u5b9a\u4e49\uff0c\u521b\u5efa\uff0c\u67e5\u8be2\uff0c\u66f4\u65b0\u548c\u7ba1\u7406\u6570\u636e</p> <p>Relational Model</p> <p>\u5173\u7cfb\u578b\u6570\u636e\u5e93:</p> <p>\u9700\u8981\u5728\u7b80\u5355\u6613\u7528\u7684\u6570\u636e\u7ed3\u6784\u4e2d\u5b58\u50a8</p> <p>\u9700\u8981\u7528\u9ad8\u7ea7\u7684\u8bed\u8a00\uff0c\u63a5\u8fd1\u81ea\u7136\u8bed\u8a00</p> <p>\u7269\u7406\u4e0a\u5b58\u50a8\u6570\u636e\u65f6\u5f00\u53d1\u6570\u636e\u5e93\u7684\u4eba\u8003\u8651\u7684\u4e8b\u60c5</p> <p>data model \u8868\u8fbe\u7684\u5b57\u6bb5</p> <p>schema \u4e00\u7ec4\u6570\u636e\u7ec4\u6210\u8d77\u6765\u7528model\u7684\u65b9\u6cd5</p>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE1/","title":"\u7b2c1\u8bb2 C++\u5165\u95e8\u53ca\u7b80\u5355\u7684\u987a\u5e8f\u7ed3\u6784","text":""},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE1/#1","title":"1. \u53d8\u91cf\u7684\u5b9a\u4e49","text":"<ol> <li>\u53d8\u91cf\u7684\u5b9a\u4e49 \u53d8\u91cf\u5fc5\u987b\u5148\u5b9a\u4e49\uff0c\u624d\u53ef\u4ee5\u4f7f\u7528\u3002\u4e0d\u80fd\u91cd\u540d\u3002 \u53d8\u91cf\u5b9a\u4e49\u7684\u65b9\u5f0f\uff1a <pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main()\n{\nint a = 5;\nint b, c = a, d = 10 / 2;\n\nreturn 0;\n\n}\n</code></pre></li> </ol>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE1/#2","title":"2. \u8f93\u5165\u8f93\u51fa","text":"<p>\u6574\u6570\u7684\u8f93\u5165\u8f93\u51fa\uff1a <pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main()\n{\nint a, b;\ncin &gt;&gt; a &gt;&gt; b;\ncout &lt;&lt; a + b &lt;&lt; endl;\nreturn 0;\n}\n</code></pre> \u5b57\u7b26\u4e32\u7684\u8f93\u5165\u8f93\u51fa\uff1a <pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nusing namespace std;\n\nint main()\n{\nstring str;\ncin &gt;&gt; str;\ncout &lt;&lt; str;\nreturn 0;\n}\n</code></pre> \u8f93\u5165\u8f93\u51fa\u591a\u4e2a\u4e0d\u540c\u7c7b\u578b\u7684\u53d8\u91cf\uff1a <pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nusing namespace std;\n\nint main()\n{\nint a, b;\nstring str;\n\ncin &gt;&gt; a;\ncin &gt;&gt; b &gt;&gt; str;\n\ncout &lt;&lt; str &lt;&lt; \" !!! \" &lt;&lt; a + b &lt;&lt; endl;\n\nreturn 0;\n}\n</code></pre></p>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE1/#3","title":"3. \u8868\u8fbe\u5f0f","text":"<p>\u6574\u6570\u7684\u52a0\u51cf\u4e58\u9664\u56db\u5219\u8fd0\u7b97\uff1a <pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nusing namespace std;\n\nint main()\n{\nint a = 6 + 3 * 4 / 2 - 2;\n\ncout &lt;&lt; a &lt;&lt; endl;\n\nint b = a * 10 + 5 / 2;\n\ncout &lt;&lt; b &lt;&lt; endl;\n\ncout &lt;&lt; 23 * 56 - 78 / 3 &lt;&lt; endl;\n\nreturn 0;\n}\n</code></pre></p> <p>\u6d6e\u70b9\u6570\uff08\u5c0f\u6570\uff09\u7684\u8fd0\u7b97\uff1a <pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nusing namespace std;\n\nint main()\n{\nfloat x = 1.5, y = 3.2;\n\ncout &lt;&lt; x * y &lt;&lt; ' ' &lt;&lt; x + y &lt;&lt; endl;\n\ncout &lt;&lt; x - y &lt;&lt; ' ' &lt;&lt; x / y &lt;&lt; endl;\n\nreturn 0;\n}\n</code></pre> \u6574\u578b\u53d8\u91cf\u7684\u81ea\u589e\u3001\u81ea\u51cf\uff1a <pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nusing namespace std;\n\nint main()\n{\nint a = 1;\nint b = a ++ ;\n\ncout &lt;&lt; a &lt;&lt; ' ' &lt;&lt; b &lt;&lt; endl;\n\nint c = ++ a;\n\ncout &lt;&lt; a &lt;&lt; ' ' &lt;&lt; c &lt;&lt; endl;\n\nreturn 0;\n}\n</code></pre> \u53d8\u91cf\u7684\u7c7b\u578b\u8f6c\u6362\uff1a <pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nusing namespace std;\n\nint main()\n{\nfloat x = 123.12;\n\nint y = (int)x;\n\ncout &lt;&lt; x &lt;&lt; ' ' &lt;&lt; y &lt;&lt; endl;\n\nreturn 0;\n}\n</code></pre></p>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE1/#4","title":"4. \u987a\u5e8f\u8bed\u53e5","text":"<p>(1) \u8f93\u51fa\u7b2c\u4e8c\u4e2a\u6574\u6570\uff1a <pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nusing namespace std;\n\nint main()\n{\nint a, b, c;\ncin &gt;&gt; a &gt;&gt; b &gt;&gt; c;\ncout &lt;&lt; b &lt;&lt; endl;\nreturn 0;\n}\n</code></pre></p> <p>(2) \u8ba1\u7b97 (a + b) * c\u7684\u503c <pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nusing namespace std;\n\nint main()\n{\nint a, b, c;\n\ncin &gt;&gt; a &gt;&gt; b &gt;&gt; c;\n\ncout &lt;&lt; (a + b) * c &lt;&lt; endl;\n\nreturn 0;\n}\n</code></pre></p> <p>(3) \u5e26\u4f59\u9664\u6cd5 <pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nusing namespace std;\n\nint main()\n{\nint a, b;\n\ncin &gt;&gt; a &gt;&gt; b;\n\nint c = a / b, d = a % b;\n\ncout &lt;&lt; c &lt;&lt; ' ' &lt;&lt; d &lt;&lt; endl;\n\nreturn 0;\n}\n</code></pre> (4) \u6c42\u53cd\u4e09\u4f4d\u6570\uff1a <pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nusing namespace std;\n\nint main()\n{\nint n;\ncin &gt;&gt; n;\n\nint a = n % 10;\nn = n / 10;\nint b = n % 10;\nn = n / 10;\nint c = n;\n\ncout &lt;&lt; a &lt;&lt; b &lt;&lt; c &lt;&lt; endl;\n\nreturn 0;\n}\n</code></pre> (5) \u4ea4\u6362\u4e24\u4e2a\u6574\u6570 <pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nusing namespace std;\n\nint main()\n{\nint a = 3, b = 4;\n\nint t = a;\na = b;\nb = t;\n\ncout &lt;&lt; a &lt;&lt; ' ' &lt;&lt; b &lt;&lt; endl;\n\nreturn 0;\n}\n</code></pre> (6) \u8f93\u51fa\u83f1\u5f62 <pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nusing namespace std;\n\nint main()\n{\nchar c;\n\ncin &gt;&gt; c;\n\ncout &lt;&lt; \"  \" &lt;&lt; c &lt;&lt; endl;\ncout &lt;&lt; \" \" &lt;&lt; c &lt;&lt; c &lt;&lt; c &lt;&lt; endl;\ncout &lt;&lt; c &lt;&lt; c &lt;&lt; c &lt;&lt; c &lt;&lt; c &lt;&lt; endl;\ncout &lt;&lt; \" \" &lt;&lt; c &lt;&lt; c &lt;&lt; c &lt;&lt; endl;\ncout &lt;&lt; \"  \" &lt;&lt; c &lt;&lt; endl;\n\nreturn 0;\n}\n</code></pre></p>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE5/","title":"\u7b2c\u4e94\u8bb2 \u5b57\u7b26\u4e32","text":"<p>\u5b57\u7b26\u4e32\u662f\u8ba1\u7b97\u673a\u4e0e\u4eba\u7c7b\u6c9f\u901a\u7684\u91cd\u8981\u624b\u6bb5\u3002\u2014\u2014\u95eb\u5b66\u707f</p> <p>\u5df2\u7ecf\u5728\u6570\u5b66\u4e0a\u8bc1\u660e\u4e86\u7a0b\u5e8f\u53ef\u4ee5\u5b9e\u73b0\u4efb\u610f\u7684\u903b\u8f91</p>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE5/#1-ascii","title":"1. \u5b57\u7b26\u4e0e\u6574\u6570\u7684\u8054\u7cfb\u2014\u2014ASCII\u7801","text":"<p>\u6bcf\u4e2a\u5e38\u7528\u5b57\u7b26\u90fd\u5bf9\u5e94\u4e00\u4e2a-128 ~ 127\u7684\u6570\u5b57\uff0c\u4e8c\u8005\u4e4b\u95f4\u53ef\u4ee5\u76f8\u4e92\u8f6c\u5316\u3002\u6ce8\u610f\uff1a\u76ee\u524d\u8d1f\u6570\u6ca1\u6709\u4e0e\u4e4b\u5bf9\u5e94\u7684\u5b57\u7b26\u3002</p> <pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main()\n{\nchar c = 'a';\ncout &lt;&lt; (int)c &lt;&lt; endl;\n\nint a = 66;\ncout &lt;&lt; (char)97 &lt;&lt; endl;\n\nreturn 0;\n}\n</code></pre> <p>(\u91cd\u8981)\u5e38\u7528ASCII\u503c\uff1a'A'- 'Z'\u662f65 ~ 90\uff0c'a' - 'z'\u662f97 - 122\uff0c0 - 9\u662f 48 - 57\u3002 \u5b57\u7b26\u53ef\u4ee5\u53c2\u4e0e\u8fd0\u7b97\uff0c\u8fd0\u7b97\u65f6\u4f1a\u5c06\u5176\u5f53\u505a\u6574\u6570\uff1a</p> <pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main()\n{\nint a = 'B' - 'A';\nint b = 'A' * 'B';\nchar c = 'A' + 2;\n\ncout &lt;&lt; a &lt;&lt; endl;\ncout &lt;&lt; b &lt;&lt; endl;\ncout &lt;&lt; c &lt;&lt; endl;\n\nreturn 0;\n}\n</code></pre>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE5/#2","title":"2. \u5b57\u7b26\u6570\u7ec4","text":"<p>\u5b57\u7b26\u4e32\u5c31\u662f\u5b57\u7b26\u6570\u7ec4\u52a0\u4e0a\u7ed3\u675f\u7b26<code>\\0</code></p> <p>\u53ef\u4ee5\u4f7f\u7528\u5b57\u7b26\u4e32\u6765\u521d\u59cb\u5316\u5b57\u7b26\u6570\u7ec4\uff0c\u4f46\u6b64\u65f6\u8981\u6ce8\u610f\uff0c\u6bcf\u4e2a\u5b57\u7b26\u4e32\u7ed3\u5c3e\u4f1a\u6697\u542b\u4e00\u4e2a'\\0'\u5b57\u7b26\uff0c\u56e0\u6b64\u5b57\u7b26\u6570\u7ec4\u7684\u957f\u5ea6\u81f3\u5c11\u8981\u6bd4\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u591a 1!</p> <pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main()\n{\nchar a1[] = {'C', '+', '+'};            // \u5217\u8868\u521d\u59cb\u5316\uff0c\u6ca1\u6709\u7a7a\u5b57\u7b26\nchar a2[] = {'C', '+', '+', '\\0'};      // \u5217\u8868\u521d\u59cb\u5316\uff0c\u542b\u6709\u663e\u793a\u7684\u7a7a\u5b57\u7b26\nchar a3[] = \"C++\";                      // \u81ea\u52a8\u6dfb\u52a0\u8868\u793a\u5b57\u7b26\u4e32\u7ed3\u5c3e\u7684\u7a7a\u5b57\u7b26\nchar a4[6] = \"Daniel\";                  // \u9519\u8bef\uff1a\u6ca1\u6709\u7a7a\u95f4\u53ef\u4ee5\u5b58\u653e\u7a7a\u5b57\u7b26\nreturn 0;\n}\n</code></pre>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE5/#21","title":"2.1 \u5b57\u7b26\u6570\u7ec4\u7684\u8f93\u5165\u8f93\u51fa\uff1a","text":"<pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main()\n{\nchar str[100];\n\ncin &gt;&gt; str;             // \u8f93\u5165\u5b57\u7b26\u4e32\u65f6\uff0c\u9047\u5230\u7a7a\u683c\u6216\u8005\u56de\u8f66\u5c31\u4f1a\u505c\u6b62\ncout &lt;&lt; str &lt;&lt; endl;    // \u8f93\u51fa\u5b57\u7b26\u4e32\u65f6\uff0c\u9047\u5230\u7a7a\u683c\u6216\u8005\u56de\u8f66\u4e0d\u4f1a\u505c\u6b62\uff0c\u9047\u5230'\\0'\u65f6\u505c\u6b62\nprintf(\"%s\\n\", str); // \u6ce8\u610f\u5b57\u7b26\u4e32\u672c\u8eab\u5c31\u662f\u5730\u5740\uff0c\u4e0d\u9700\u8981\u52a0&amp;\n\nreturn 0;\n}\n</code></pre> <p>\u8bfb\u5165\u4e00\u884c\u5b57\u7b26\u4e32\uff0c\u5305\u62ec\u7a7a\u683c\uff1a</p> <pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main()\n{\nchar str[100];\n\nfgets(str, 100, stdin);  // gets\u51fd\u6570\u5728\u65b0\u7248C++\u4e2d\u88ab\u79fb\u9664\u4e86\uff0c\u56e0\u4e3a\u4e0d\u5b89\u5168\u3002\n// \u53ef\u4ee5\u7528fgets\u4ee3\u66ff\uff0c\u4f46\u6ce8\u610ffgets\u4e0d\u4f1a\u5220\u9664\u884c\u672b\u7684\u56de\u8f66\u5b57\u7b26\n// 100\u8868\u793a\u8f93\u5165\u6700\u591a\u591a\u5c11\u4e2a\u5b57\u7b26\n\ncout &lt;&lt; str &lt;&lt; endl;\n\nreturn 0;\n}\n</code></pre> <p>string \u7684\u8bdd\u8981\u7528get line(cin, s)]</p> <p>Char s[100]\u7684\u8bdd\u8981\u7528cin.getline(s, 100)</p> <p>Puts(s) \u7b49\u4ef7\u4e8eprint(\"%s\\n\", s)\uff0c \u6ce8\u610f\u5305\u62ec\u4e86\u6362\u884c\u7b26</p>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE5/#22","title":"2.2 \u5b57\u7b26\u6570\u7ec4\u7684\u5e38\u7528\u64cd\u4f5c","text":"<p>\u4e0b\u9762\u51e0\u4e2a\u51fd\u6570\u9700\u8981\u5f15\u5165\u5934\u6587\u4ef6\uff1a</p> <p><code>#include &lt;string.h&gt;</code></p> <p>\u6216\u8005<code>#include &lt;cstring&gt;</code></p> <pre><code>(1) strlen(str)\uff0c\u6c42\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\n(2) strcmp(a, b)\uff0c\u6bd4\u8f83\u4e24\u4e2a\u5b57\u7b26\u4e32\u7684\u5927\u5c0f\uff0ca &lt; b\u8fd4\u56de-1\uff0ca == b\u8fd4\u56de0\uff0ca &gt; b\u8fd4\u56de1\u3002\u8fd9\u91cc\u7684\u6bd4\u8f83\u65b9\u5f0f\u662f\u5b57\u5178\u5e8f\uff01\n(3) strcpy(a, b)\uff0c\u5c06\u5b57\u7b26\u4e32b\u590d\u5236\u7ed9\u4ecea\u5f00\u59cb\u7684\u5b57\u7b26\u6570\u7ec4\u3002\u6ce8\u610f\u987a\u5e8f\uff01\n</code></pre> <p>\u5b57\u5178\u5e8f\uff0c\u4ece\u5934\u5f00\u59cb\uff0c\u6bd4ASCII\u7801\uff0c\u6bd4\u5982abc &lt; abde 10 &lt; 2\uff08\u4e00\u4f4d\u4e00\u4f4d\u7684\u6bd4\u8f83\uff09strcmp\u8fd4\u56de\u7684\u662f-1</p> <p>\u5b57\u5178\u5e8f\u672c\u8eab\u5177\u6709\u8d2a\u5fc3\u7684\u6027\u8d28\uff0c\u6240\u4ee5\u591a\u548c\u8d2a\u5fc3\u76f8\u5173</p> <p>strlen\u662f\u4e0d\u5305\u542b\\0\u7684</p> <p>\u56de\u8f66\u4e00\u822c\u662f\u5237\u65b0\u7f13\u5b58\uff0c\u6240\u4ee5\u6309\u4e86\u56de\u8f66\u4e4b\u540e\uff0c\u4f1a\u5c06\u7f13\u5b58\u4e2d\u7684\u4e1c\u897f\u4f20\u9012\u7ed9\u7a0b\u5e8f</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;string.h&gt;\n\nusing namespace std;\n\nint main()\n{\nchar a[100] = \"hello world!\", b[100];\n\ncout &lt;&lt; strlen(a) &lt;&lt; endl; // 12\n\nstrcpy(b, a);\n\ncout &lt;&lt; strcmp(a, b) &lt;&lt; endl; //0\n\nreturn 0;\n}\n</code></pre>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE5/#23","title":"2.3\u904d\u5386\u5b57\u7b26\u6570\u7ec4\u4e2d\u7684\u5b57\u7b26","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n\nusing namespace std;\n\nint main()\n{\nchar s1[100], s2[100];\nscanf(\"%s\", s1);\nfor (int i = 0, len = strlen(s1); i &lt; len; i++) cout &lt;&lt; s1[i] &lt;&lt; endl;\n\nreturn 0;\n}\n</code></pre>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE5/#3-string","title":"3. \u6807\u51c6\u5e93\u7c7b\u578bstring","text":"<p>\u53ef\u53d8\u957f\u7684\u5b57\u7b26\u5e8f\u5217\uff0c\u6bd4\u5b57\u7b26\u6570\u7ec4\u66f4\u52a0\u597d\u7528\uff0c\u9700\u8981\u5f15\u5165\u5934\u6587\u4ef6\uff1a <code>#include &lt;string&gt;</code></p>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE5/#31","title":"3.1 \u5b9a\u4e49\u548c\u521d\u59cb\u5316","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nusing namespace std;\n\nint main()\n{\nstring s1;              // \u9ed8\u8ba4\u521d\u59cb\u5316\uff0cs1\u662f\u4e00\u4e2a\u7a7a\u5b57\u7b26\u4e32\nstring s2 = s1;         // s2\u662fs1\u7684\u526f\u672c\uff0c\u6ce8\u610fs2\u53ea\u662f\u4e0es1\u7684\u503c\u76f8\u540c\uff0c\u5e76\u4e0d\u6307\u5411\u540c\u4e00\u6bb5\u5730\u5740\nstring s3 = \"hiya\";     // s3\u662f\u8be5\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u7684\u526f\u672c\nstring s4(10, 'c');     // s4\u7684\u5185\u5bb9\u662f \"cccccccccc\"\n\nreturn 0;\n}\n</code></pre>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE5/#32-string","title":"3.2 string\u4e0a\u7684\u64cd\u4f5c","text":"<p>\uff081\uff09 string\u7684\u8bfb\u5199</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;string.h&gt;\nusing namespace std;\n\nint main () {\nstring a;\ncin &gt;&gt; a;\n//    cout &lt;&lt; a &lt;&lt; endl;\nprintf(\"%s\", a.c_str());\nreturn 0;\n}\n</code></pre> <p>\u6ce8\u610f\uff1a\u4e0d\u80fd\u7528scanf(\"%s\", &amp;s)\u6765\u8bfb\u5165string</p> <p>\u6ce8\u610f\uff1a\u4e0d\u80fd\u7528printf\u76f4\u63a5\u8f93\u51fastring\uff0c\u9700\u8981\u5199\u6210\uff1aprintf(\u201c%s\u201d, s.c_str());</p> <p>\uff082\uff09 \u4f7f\u7528getline\u8bfb\u53d6\u4e00\u6574\u884c</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nusing namespace std;\n\nint main () {\nstring a;\ngetline(cin, a);\ncout &lt;&lt; a &lt;&lt; endl;\nreturn 0;\n}\n</code></pre> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;cstdio&gt;\n\nusing namespace std;\n\nint main()\n{\nchar s[100]; // \u80fd\u4e00\u76f4\u8bfb\u5165\uff0c\u5305\u62ec\u7a7a\u683c\ncin.getline(s, 100); // \u8bfb\u5165\u5b57\u7b26\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\n\n// \u5f15\u5165string\nstring s1, s2;\ncin &gt;&gt; s1; // \u53ea\u80fd\u8bfb\u5165\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u9047\u5230\u7a7a\u683c\u548c\u56de\u8f66\u4f1a\u76f4\u63a5\u505c\u6b62\ngetline (cin, s2); // \u524d\u9762\u5199cin,\u540e\u9762\u5199\u8bfb\u5165\u7684\u5b57\u7b26\u4e32\uff0c\u4f1a\u76f4\u63a5\u5f00\u59cb\u8bfb\u5165\uff0c\u54ea\u6015\u7b2c\u4e00\u4e2a\u5b57\u7b26\u662f\u7a7a\u683c\n\ncout &lt;&lt; s &lt;&lt; endl &lt;&lt; s1 &lt;&lt; endl &lt;&lt; s2 &lt;&lt; endl;\nreturn 0;\n}\n</code></pre> <p>\uff083\uff09 string\u7684\u7684empty\u548csize\u64cd\u4f5c\uff08\u6ce8\u610fsize\u662f\u65e0\u7b26\u53f7\u6574\u6570\uff0c\u56e0\u6b64 s.size() &lt;= -1\u4e00\u5b9a\u6210\u7acb\uff09?????</p> <p>empty\u544a\u8bc9\u6211\u4eec\u5b57\u7b26\u4e32\u662f\u4e0d\u662f\u7a7a\u7684\uff0c\u7a7a\u7684\u5c31\u662ftrue(0)\uff0c\u5426\u5219\u662ffalse(1)</p> <p>string\u7684size\u529f\u80fd\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO1\uff0c\u6bd4strlen\u597d\u591a\u4e86\uff01</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nusing namespace std;\n\nint main()\n{\nstring s1, s2 = \"abc\";\n\ncout &lt;&lt; s1.empty() &lt;&lt; endl; // 1\ncout &lt;&lt; s2.empty() &lt;&lt; endl; // 0\ncout &lt;&lt; s1.size() &lt;&lt; endl; // 0\ncout &lt;&lt; s2.size() &lt;&lt; endl; // 3\n\nreturn 0;\n}\n</code></pre> <p>\uff084\uff09 string\u7684\u6bd4\u8f83</p> <p>\u652f\u6301 &gt;, &lt;, &gt;=, &lt;=, ==, !=\u7b49\u6240\u6709\u6bd4\u8f83\u64cd\u4f5c\uff0c\u6309<code>\u5b57\u5178\u5e8f</code>\u8fdb\u884c\u6bd4\u8f83\u3002</p> <p>\uff085\uff09 \u4e3astring\u5bf9\u8c61\u8d4b\u503c</p> <pre><code>string s1(10, 'c'), s2;     // s1\u7684\u5185\u5bb9\u662f cccccccccc\uff1bs2\u662f\u4e00\u4e2a\u7a7a\u5b57\u7b26\u4e32\ns1 = s2;                    // \u8d4b\u503c\uff1a\u7528s2\u7684\u526f\u672c\u66ff\u6362s1\u7684\u526f\u672c\n// \u6b64\u65f6s1\u548cs2\u90fd\u662f\u7a7a\u5b57\u7b26\u4e32\n</code></pre> <p>\uff086\uff09 \u4e24\u4e2a<code>string</code>\u5bf9\u8c61\u76f8\u52a0</p> <pre><code>string s1 = \"hello,  \"\", s2 = \"world\\n\";\nstring s3 = s1 + s2;                    // s3\u7684\u5185\u5bb9\u662f hello, world\\n\ns1 += s2;                               // s1 = s1 + s2\n</code></pre> <p>\uff087\uff09 \u5b57\u9762\u503c\u548cstring\u5bf9\u8c61\u76f8\u52a0\uff1a</p> <p>\u505a\u52a0\u6cd5\u8fd0\u7b97\u65f6\uff0c\u5b57\u9762\u503c\u548c\u5b57\u7b26\u90fd\u4f1a\u88ab\u8f6c\u5316\u6210string\u5bf9\u8c61\uff0c\u56e0\u6b64\u76f4\u63a5\u76f8\u52a0\u5c31\u662f\u5c06\u8fd9\u4e9b\u5b57\u9762\u503c\u4e32\u8054\u8d77\u6765\uff1a</p> <pre><code>string s1 = \"hello\", s2 = \"world\";      // \u5728s1\u548cs2\u4e2d\u90fd\u6ca1\u6709\u6807\u70b9\u7b26\u53f7\nstring s3 = s1 + \", \" + s2 + '\\n';\n</code></pre> <p>\u5f53\u628astring\u5bf9\u8c61\u548c\u5b57\u7b26\u5b57\u9762\u503c\u53ca\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u6df7\u5728\u4e00\u6761\u8bed\u53e5\u4e2d\u4f7f\u7528\u65f6\uff0c\u5fc5\u987b\u786e\u4fdd\u6bcf\u4e2a\u52a0\u6cd5\u8fd0\u7b97\u7b26\u7684\u4e24\u4fa7\u7684\u8fd0\u7b97\u5bf9\u8c61\u81f3\u5c11\u6709\u4e00\u4e2a\u662fstring\uff1a</p> <p>\u666e\u901a\u5b57\u7b26\u4e32\u548cstring\u4e0d\u662f\u4e00\u4e2a\u4e1c\u897f\uff01</p> <pre><code>string s4 = s1 + \", \";  // \u6b63\u786e\uff1a\u628a\u4e00\u4e2astring\u5bf9\u8c61\u548c\u6709\u4e00\u4e2a\u5b57\u9762\u503c\u76f8\u52a0\nstring s5 = \"hello\" + \", \"; // \u9519\u8bef\uff1a\u4e24\u4e2a\u8fd0\u7b97\u5bf9\u8c61\u90fd\u4e0d\u662fstring\n\nstring s6 = s1 + \", \" + \"world\";  // \u6b63\u786e\uff0c\u6bcf\u4e2a\u52a0\u6cd5\u8fd0\u7b97\u90fd\u6709\u4e00\u4e2a\u8fd0\u7b97\u7b26\u662fstring\nstring s7 = \"hello\" + \", \" + s2;  // \u9519\u8bef\uff1a\u4e0d\u80fd\u628a\u5b57\u9762\u503c\u76f4\u63a5\u76f8\u52a0\uff0c\u8fd0\u7b97\u662f\u4ece\u5de6\u5230\u53f3\u8fdb\u884c\u7684\n</code></pre>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE5/#33-string","title":"3.3 \u5904\u7406string\u5bf9\u8c61\u4e2d\u7684\u5b57\u7b26","text":"<p>\u53ef\u4ee5\u5c06<code>string</code>\u5bf9\u8c61\u5f53\u6210\u5b57\u7b26\u6570\u7ec4\u6765\u5904\u7406\uff1a</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;;\nusing namespace std;\n\nint main () {\nstring s = \"hello, world!\";\nfor (int i = s.size() - 1; i &gt;= 0; i--) cout &lt;&lt; s[i];\nreturn 0;\n}\n</code></pre> <p>\u6216\u8005\u4f7f\u7528\u57fa\u4e8e\u8303\u56f4\u7684for \u8bed\u53e5\uff1a</p> <p>\u8fd9\u4e2a\u53ebC++\u7684\u8303\u56f4\u904d\u5386\uff0cfor (char c : s)\uff0c\u524d\u9762\u662f\u5b57\u7b26\u6570\u7ec4\u91cc\u6bcf\u4e2a\u5b57\u7b26\u7684\u7c7b\u578b</p> <p>\u6ce8\u610f\u5f97\u5230\u7684\u4e1c\u897f\u662f\uff0cstring\u91cc\u9762\u590d\u5236\u8fc7\u6765\u7684\u503c\uff0c\u6240\u4ee5\u4e0d\u80fd\u7528\uff1a</p> <pre><code>for (char c : s) {\nc = 'a';\n}\n</code></pre> <p>\u800c\u8981\u7528</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nusing namespace std;\n\nint main()\n{\nstring s = \"Hello, world!\";\nfor (char c: s) cout &lt;&lt; c;\ncout &lt;&lt; endl;\nfor (char &amp;c: s) c = 'a';\ncout &lt;&lt; s;\nreturn 0;\n}\n</code></pre> <p>cpp\u4e2d\u8fd8\u63d0\u4f9b<code>auto</code>\u81ea\u52a8\u8bc6\u522b\u7c7b\u578b</p> <p>\u6bd4\u5982\uff1a</p> <pre><code>for (auto &amp;c : c) {\nc = 'a'\n}\n</code></pre> <p>\u540e\u9762\u590d\u6742\u8d77\u6765\u4e4b\u540e\u7528auto\u4f1a\u975e\u5e38\u7b80\u5355</p> <p>\u6ce8\u610f\uff1afgets\u4f1a\u628a\u672b\u5c3e\u7684\u56de\u8f66\u8bfb\u8fdb\u6765</p> <p>\u5220\u6389\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\uff1a</p> <pre><code>s.pop_back();\n</code></pre> <p>\u53d6\u5b57\u7b26\u4e32\uff1a</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;string&gt;\nusing namespace std;\nint main () {\nstring a, b;\nwhile (cin &gt;&gt; a &gt;&gt; b) {\nint p = 0;\nfor (int i = 0; i &lt; a.size(); i++) {\nif (a[i] &gt; a[p]) {\np = i;\n}\n}\ncout &lt;&lt; a.substr(0, p + 1) + b +  a.substr(p + 1) &lt;&lt; endl;\n}\n\nreturn 0;\n}\n</code></pre>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE5/#760","title":"760. \u5b57\u7b26\u4e32\u957f\u5ea6","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\nusing namespace std;\n\nint main () {\nstring s;\ngetline(cin, s); // \u6ce8\u610fgetline\u8f93\u5165\u4e00\u6574\u884c\nprintf(\"%d\", s.size());\nreturn 0;\n}\n</code></pre>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE5/#772","title":"772. \u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26","text":"<p>char\u5728\u8fd0\u7b97\u4e2d\u4f1a\u88ab\u81ea\u52a8\u8f6c\u5316\u4e3a\u6570\u5b57</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\nusing namespace std;\nchar str[100010];\nint cnt[26];\n\nint main () {\nscanf(\"%s\", str);\n\nfor (int i = 0; str[i]; i++) {\ncnt[str[i] - 'a']++;\n}\nfor (int i = 0; str[i]; i++) {\nif (cnt[str[i] - 'a'] == 1) {\ncout &lt;&lt; str[i] &lt;&lt; endl;\nreturn 0;\n}\n\n}\nputs(\"no\");\n\nreturn 0;\n}\n</code></pre> <p>\u542c\u52301.5\u5b57\u7b26\u4e32\u5339\u914d1:47:32</p>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE6/","title":"\u7b2c\u516d\u8bb2 \u51fd\u6570","text":"<p>\u51fd\u6570\u8ba9\u4ee3\u7801\u53d8\u5f97\u66f4\u52a0\u7b80\u6d01</p>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE6/#1","title":"1. \u51fd\u6570","text":"<p>\u4e00\u4e2a\u5178\u578b\u7684\u51fd\u6570\u5b9a\u4e49\u5305\u62ec\u4ee5\u4e0b\u90e8\u5206\uff1a\u8fd4\u56de\u7c7b\u578b\u3001\u51fd\u6570\u540d\u5b57\u3001\u75310\u4e2a\u6216\u591a\u4e2a\u5f62\u53c2\u7ec4\u6210\u7684\u5217\u8868\u4ee5\u53ca\u51fd\u6570\u4f53\u3002</p>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE6/#11","title":"1.1 \u7f16\u5199\u51fd\u6570","text":"<p>\u6211\u4eec\u6765\u7f16\u5199\u4e00\u4e2a\u6c42\u9636\u4e58\u7684\u7a0b\u5e8f\u3002\u7a0b\u5e8f\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;cstdio&gt;\n\nusing namespace std;\n//\u51fd\u6570\u58f0\u660e\nint fact(int n);  //\u5f62\u53c2\n\n//\u51fd\u6570\u5b9a\u4e49\nint fact(int val) // \u5b9e\u53c2\n{\nint ret = 1;\nwhile (val &gt; 1)\nret *= val -- ;\nreturn ret;\n}\n\nint main()\n{\nint t = fact(5);\ncout &lt;&lt; t;\nreturn 0;\n}\n</code></pre> <p>\u51fd\u6570\u540d\u5b57\u662ffact\uff0c\u5b83\u4f5c\u7528\u4e8e\u4e00\u4e2a\u6574\u578b\u53c2\u6570\uff0c\u8fd4\u56de\u4e00\u4e2a\u6574\u578b\u503c\u3002return\u8bed\u53e5\u8d1f\u8d23\u7ed3\u675ffact\u5e76\u8fd4\u56deret\u7684\u503c\u3002</p>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE6/#12","title":"1.2 \u8c03\u7528\u51fd\u6570","text":"<pre><code>int main()\n{\nint j = fact(5);\ncout &lt;&lt; \"5! is \" &lt;&lt; j &lt;&lt; endl;\n\nreturn 0;\n</code></pre> <p>\u4e0d\u5199return\u4f1a\u8fd4\u56de\u968f\u673a\u503c</p>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE6/#13","title":"1.3 \u5f62\u53c2\u548c\u5b9e\u53c2","text":"<p>\u5b9e\u53c2\u662f\u5f62\u53c2\u7684\u521d\u59cb\u503c\u3002\u7b2c\u4e00\u4e2a\u5b9e\u53c2\u521d\u59cb\u5316\u7b2c\u4e00\u4e2a\u5f62\u53c2\uff0c\u7b2c\u4e8c\u4e2a\u5b9e\u53c2\u521d\u59cb\u5316\u7b2c\u4e8c\u4e2a\u5f62\u53c2\uff0c\u4f9d\u6b21\u7c7b\u63a8\u3002\u5f62\u53c2\u548c\u5b9e\u53c2\u7684\u7c7b\u578b\u548c\u4e2a\u6570\u5fc5\u987b\u5339\u914d\u3002</p> <pre><code>fact(\"hello\");      // \u9519\u8bef\uff1a\u5b9e\u53c2\u7c7b\u578b\u4e0d\u6b63\u786e\nfact();             // \u9519\u8bef\uff1a\u5b9e\u53c2\u6570\u91cf\u4e0d\u8db3\nfact(42, 10, 0);    // \u9519\u8bef\uff1a\u5b9e\u53c2\u6570\u91cf\u8fc7\u591a\nfact(3.14);         // \u6b63\u786e\uff1a\u8be5\u5b9e\u53c2\u80fd\u8f6c\u6362\u6210int\u7c7b\u578b\uff0c\u7b49\u4ef7\u4e8efact(3);\n</code></pre> <p>\u5f62\u53c2\u4e5f\u53ef\u4ee5\u8bbe\u7f6e\u9ed8\u8ba4\u503c\uff0c\u4f46\u6240\u6709\u9ed8\u8ba4\u503c\u5fc5\u987b\u662f\u6700\u540e\u51e0\u4e2a\u3002\u5f53\u4f20\u5165\u7684\u5b9e\u53c2\u4e2a\u6570\u5c11\u4e8e\u5f62\u53c2\u4e2a\u6570\u65f6\uff0c\u6700\u540e\u6ca1\u6709\u88ab\u4f20\u5165\u503c\u7684\u5f62\u53c2\u4f1a\u4f7f\u7528\u9ed8\u8ba4\u503c\u3002</p>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE6/#14","title":"1.4 \u51fd\u6570\u7684\u5f62\u53c2\u5217\u8868","text":"<p>\u51fd\u6570\u7684\u5f62\u53c2\u5217\u8868\u53ef\u4ee5\u4e3a\u7a7a\uff0c\u4f46\u662f\u4e0d\u80fd\u7701\u7565\u3002</p> <pre><code>oid f1() {/* \u2026. */}            // \u9690\u5f0f\u5730\u5b9a\u4e49\u7a7a\u5f62\u53c2\u5217\u8868\nvoid f2(void) {/* \u2026 */}         // \u663e\u5f0f\u5730\u5b9a\u4e49\u7a7a\u5f62\u53c2\u5217\u8868\n</code></pre> <p>\u5f62\u53c2\u5217\u8868\u4e2d\u7684\u5f62\u53c2\u901a\u5e38\u7528\u9017\u53f7\u9694\u5f00\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5f62\u53c2\u90fd\u662f\u542b\u6709\u4e00\u4e2a\u58f0\u660e\u7b26\u7684\u58f0\u660e\u3002\u5373\u4f7f\u4e24\u4e2a\u5f62\u53c2\u7684\u7c7b\u578b\u4e00\u6837\uff0c\u4e5f\u5fc5\u987b\u628a\u4e24\u4e2a\u7c7b\u578b\u90fd\u5199\u51fa\u6765\uff1a</p> <pre><code>int f3(int v1, v2) {/* \u2026 */}        // \u9519\u8bef\nint f4(int v1, int v2) {/* \u2026 */}    // \u6b63\u786e\n</code></pre>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE6/#16","title":"1.6 \u5c40\u90e8\u53d8\u91cf\u3001\u5168\u5c40\u53d8\u91cf\u4e0e\u9759\u6001\u53d8\u91cf","text":"<p>\u5c40\u90e8\u53d8\u91cf\u53ea\u53ef\u4ee5\u5728\u51fd\u6570\u5185\u90e8\u4f7f\u7528\uff0c\u5168\u5c40\u53d8\u91cf\u53ef\u4ee5\u5728\u6240\u6709\u51fd\u6570\u5185\u4f7f\u7528\u3002\u5f53\u5c40\u90e8\u53d8\u91cf\u4e0e\u5168\u5c40\u53d8\u91cf\u91cd\u540d\u65f6\uff0c\u4f1a\u4f18\u5148\u4f7f\u7528\u5c40\u90e8\u53d8\u91cf\u3002</p> <p>\u9759\u6001\u53d8\u91cf\uff1a</p> <pre><code>static int cnt; //\u521d\u59cb\u4e3a0\n</code></pre> <p>\u9759\u6001\u53d8\u91cf\u76f8\u5f53\u4e8e\u51fd\u6570\u5185\u90e8\u5f00\u4e86\u4e00\u4e2a\u53ea\u6709\u8be5\u51fd\u6570\u80fd\u7528\u7684\u5168\u5c40\u53d8\u91cf</p> <p>\u9759\u6001\u53d8\u91cf\u5f00\u5728\u5806\u91cc\u9762\uff0c\u4e0d\u7528\u62c5\u5fc3\u7206\u6808</p>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE6/#2","title":"2. \u53c2\u6570\u4f20\u9012","text":""},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE6/#21","title":"2.1 \u4f20\u9012\u53c2\u6570","text":"<p>\u5f53\u521d\u59cb\u5316\u4e00\u4e2a\u975e\u5f15\u7528\u7c7b\u578b\u7684\u53d8\u91cf\u65f6\uff0c\u521d\u59cb\u503c\u88ab\u62f7\u8d1d\u7ed9\u53d8\u91cf\u3002\u6b64\u65f6\uff0c\u5bf9\u53d8\u91cf\u7684\u6539\u52a8\u4e0d\u4f1a\u5f71\u54cd\u521d\u59cb\u503c\u3002</p> <pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nint f(int x)\n{\nx = 5;\n}\n\nint main()\n{\nint x = 10;\n\nf(x);\ncout &lt;&lt; x &lt;&lt; endl;\n\nreturn 0;\n}\n</code></pre>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE6/#22","title":"2.2 \u4f20\u5f15\u7528\u53c2\u6570","text":"<p>\u5f53\u51fd\u6570\u7684\u5f62\u53c2\u4e3a\u5f15\u7528\u7c7b\u578b\u65f6\uff0c\u5bf9\u5f62\u53c2\u7684\u4fee\u6539\u4f1a\u5f71\u54cd\u5b9e\u53c2\u7684\u503c\u3002\u4f7f\u7528\u5f15\u7528\u7684\u4f5c\u7528\uff1a\u907f\u514d\u62f7\u8d1d\u3001\u8ba9\u51fd\u6570\u8fd4\u56de\u989d\u5916\u4fe1\u606f\u3002</p> <pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nint f(int &amp;x)\n{\nx = 5;\n}\n\nint main()\n{\nint x = 10;\n\nf(x);\ncout &lt;&lt; x &lt;&lt; endl;\n\nreturn 0;\n}\n</code></pre>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE6/#23","title":"2.3 \u6570\u7ec4\u5f62\u53c2","text":"<p>\u5728\u51fd\u6570\u4e2d\u5bf9\u6570\u7ec4\u4e2d\u7684\u503c\u7684\u4fee\u6539\uff0c\u4f1a\u5f71\u54cd\u51fd\u6570\u5916\u9762\u7684\u6570\u7ec4\u3002</p> <p>\u4e00\u7ef4\u6570\u7ec4\u5f62\u53c2\u7684\u5199\u6cd5\uff1a</p> <pre><code>// \u5c3d\u7ba1\u5f62\u5f0f\u4e0d\u540c\uff0c\u4f46\u8fd9\u4e09\u4e2aprint\u51fd\u6570\u662f\u7b49\u4ef7\u7684\nvoid print(int *a) {/* \u2026 */} // \u6570\u7ec4\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u6307\u9488\nvoid print(int a[]) {/* \u2026 */}\nvoid print(int a[10]) {/* \u2026 */}\n</code></pre> <pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nvoid print(int a[])\n{\nfor (int i = 0; i &lt; 10; i ++ )\ncout &lt;&lt; a[i] &lt;&lt; endl;\n}\n\nint main()\n{\nint a[10];\n\nfor (int i = 0; i &lt; 10; i ++ )\na[i] = i;\n\nprint(a);\n\nreturn 0;\n}\n</code></pre> <p>\u591a\u7ef4\u6570\u7ec4\u5f62\u53c2\u7684\u5199\u6cd5\uff1a</p> <pre><code>// \u591a\u7ef4\u6570\u7ec4\u4e2d\uff0c\u9664\u4e86\u7b2c\u4e00\u7ef4\u4e4b\u5916\uff0c\u5176\u4f59\u7ef4\u5ea6\u7684\u5927\u5c0f\u5fc5\u987b\u6307\u5b9a\nvoid print(int (*a)[10]) {/* \u2026 */}\nvoid print(int a[][10]) {/* \u2026 */}\n</code></pre> <pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nvoid print(int a[][10])\n{\nfor (int i = 0; i &lt; 10; i ++ )\n{\nfor (int j = 0; j &lt; 10; j ++ )\ncout &lt;&lt; a[i][j] &lt;&lt; ' ';\ncout &lt;&lt; endl;\n}\n}\n\nint main()\n{\nint a[10][10];\n\nfor (int i = 0; i &lt; 10; i ++ )\nfor (int j = 0; j &lt; 10; j ++ )\na[i][j] = j;\n\nprint(a);\n\nreturn 0;\n}\n</code></pre>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE6/#3-return","title":"3. \u8fd4\u56de\u7c7b\u578b\u548creturn\u8bed\u53e5","text":"<p>return\u8bed\u53e5\u7ec8\u6b62\u5f53\u524d\u6b63\u5728\u6267\u884c\u7684\u51fd\u6570\u5e76\u5c06\u63a7\u5236\u6743\u8fd4\u56de\u5230\u8c03\u7528\u8be5\u51fd\u6570\u7684\u5730\u65b9\u3002return\u8bed\u53e5\u6709\u4e24\u79cd\u5f62\u5f0f\uff1a</p> <pre><code>return; // void,\u53ef\u4ee5\u7701\u7565\nreturn expression;\n</code></pre>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE6/#31","title":"3.1 \u65e0\u8fd4\u56de\u503c\u51fd\u6570","text":"<p>\u6ca1\u6709\u8fd4\u56de\u503c\u7684return\u8bed\u53e5\u53ea\u80fd\u7528\u5728\u8fd4\u56de\u7c7b\u578b\u662fvoid\u7684\u51fd\u6570\u4e2d\u3002\u8fd4\u56devoid\u7684\u51fd\u6570\u4e0d\u8981\u6c42\u975e\u5f97\u6709return\u8bed\u53e5\uff0c\u56e0\u4e3a\u5728\u8fd9\u7c7b\u51fd\u6570\u7684\u6700\u540e\u4e00\u53e5\u540e\u9762\u4f1a\u9690\u5f0f\u5730\u6267\u884creturn\u3002</p> <p>\u901a\u5e38\u60c5\u51b5\u4e0b\uff0cvoid\u51fd\u6570\u5982\u679c\u60f3\u5728\u5b83\u7684\u4e2d\u95f4\u4f4d\u7f6e\u63d0\u524d\u9000\u51fa\uff0c\u53ef\u4ee5\u4f7f\u7528return\u8bed\u53e5\u3002return\u7684\u8fd9\u79cd\u7528\u6cd5\u6709\u70b9\u7c7b\u4f3c\u4e8e\u6211\u4eec\u7528break\u8bed\u53e5\u9000\u51fa\u5faa\u73af\u3002</p> <pre><code>void swap(int &amp;v1, int &amp;v2)\n{\n// \u5982\u679c\u4e24\u4e2a\u503c\u76f8\u7b49\uff0c\u5219\u4e0d\u9700\u8981\u4ea4\u6362\uff0c\u76f4\u63a5\u9000\u51fa\nif (v1 == v2)\nreturn;\n// \u5982\u679c\u7a0b\u5e8f\u6267\u884c\u5230\u4e86\u8fd9\u91cc\uff0c\u8bf4\u660e\u8fd8\u9700\u8981\u7ee7\u7eed\u5b8c\u6210\u67d0\u4e9b\u529f\u80fd\n\nint tmp = v2;\nv2 = v1;\nv1 = tmp;\n// \u6b64\u5904\u65e0\u987b\u663e\u793a\u7684return\u8bed\u53e5\n}\n</code></pre>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE6/#32","title":"3.2 \u6709\u8fd4\u56de\u503c\u7684\u51fd\u6570","text":"<p>\u53ea\u8981\u51fd\u6570\u7684\u8fd4\u56de\u7c7b\u578b\u4e0d\u662fvoid\uff0c\u5219\u8be5\u51fd\u6570\u5185\u7684\u6bcf\u6761return\u8bed\u53e5\u5fc5\u987b\u8fd4\u56de\u4e00\u4e2a\u503c\u3002return\u8bed\u53e5\u8fd4\u56de\u503c\u7684\u7c7b\u578b\u5fc5\u987b\u4e0e\u51fd\u6570\u7684\u8fd4\u56de\u7c7b\u578b\u76f8\u540c\uff0c\u6216\u8005\u80fd\u9690\u5f0f\u5730\u8f6c\u6362\u51fd\u6570\u7684\u8fd4\u56de\u7c7b\u578b\u3002</p> <pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nint max(int x, int y)\n{\nif (x &gt; y) return x;\n\nreturn y;\n}\n\nint main()\n{\nint x, y;\ncin &gt;&gt; x &gt;&gt; y;\n\ncout &lt;&lt; max(x, y) &lt;&lt; endl;\n\nreturn 0;\n}\n</code></pre>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE6/#4","title":"4. \u51fd\u6570\u9012\u5f52","text":"<p>\u5728\u4e00\u4e2a\u51fd\u6570\u5185\u90e8\uff0c\u4e5f\u53ef\u4ee5\u8c03\u7528\u51fd\u6570\u672c\u8eab\u3002</p> <p>\u5c31\u662f\u51fd\u6570\u81ea\u5df1\u8c03\u7528\u81ea\u5df1</p> <pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nint fact(int n)\n{\nif (n &lt;= 1) return 1;\nreturn n * fact(n - 1);\n}\n\nint main()\n{\nint n;\ncin &gt;&gt; n;\n\ncout &lt;&lt; fact(n) &lt;&lt; endl;\n\nreturn 0;\n}\n</code></pre> <p>\u770b\u52301.6\u51fd\u65701:54:19</p>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE7/","title":"\u7b2c\u4e03\u8bb2 \u7c7b\u3001\u7ed3\u6784\u4f53\u3001\u6307\u9488\u4e0e\u5f15\u7528","text":"<p>\u7c7b\u53ef\u4ee5\u5c06\u53d8\u91cf\u3001\u6570\u7ec4\u548c\u51fd\u6570\u5b8c\u7f8e\u5730\u6253\u5305\u5728\u4e00\u8d77\u3002</p>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE7/#1","title":"1. \u7c7b\u4e0e\u7ed3\u6784\u4f53","text":"<p>\u7c7b\u5b8c\u5168\u662f\u4e3a\u4eba\u7c7b\u670d\u52a1\u7684</p> <p>\u53ef\u4ee5\u6253\u5305\u5f88\u591a\u590d\u6742\u7684\u4e1c\u897f</p> <p>\u7c7b\u7684\u5b9a\u4e49\uff1a</p> <pre><code>class Person\n{\nprivate:\nint age, height;\ndouble money;\nstring books[100];\n\npublic:\nstring name;\n\nvoid say()\n{\ncout &lt;&lt; \"I'm \" &lt;&lt; name &lt;&lt; endl;\n}\n\nint get_age()\n{\nreturn age;\n}\n\nvoid add_money(double x)\n{\nmoney += x;\n}\n};\n</code></pre> <p>\u7c7b\u4e2d\u7684\u53d8\u91cf\u548c\u51fd\u6570\u88ab\u7edf\u4e00\u79f0\u4e3a\u7c7b\u7684<code>\u6210\u5458\u53d8\u91cf</code>\u3002</p> <p>private\u540e\u9762\u7684\u5185\u5bb9\u662f\u79c1\u6709\u6210\u5458\u53d8\u91cf\uff0c\u5728\u7c7b\u7684\u5916\u90e8\u4e0d\u80fd\u8bbf\u95ee\uff1bpublic\u540e\u9762\u7684\u5185\u5bb9\u662f\u516c\u6709\u6210\u5458\u53d8\u91cf\uff0c\u5728\u7c7b\u7684\u5916\u90e8\u53ef\u4ee5\u8bbf\u95ee\u3002</p> <p>\u7c7b\u7684\u4f7f\u7528\uff1a</p> <pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nconst int N = 1000010;\n\nclass Person\n{\nprivate:\nint age, height;\ndouble money;\nstring books[100];\n\npublic:\nstring name;\n\nvoid say()\n{\ncout &lt;&lt; \"I'm \" &lt;&lt; name &lt;&lt; endl;\n}\n\nint set_age(int a)\n{\nage = a;\n}\n\nint get_age()\n{\nreturn age;\n}\n\nvoid add_money(double x)\n{\nmoney += x;\n}\n} person_a, person_b, persons[100];\n\nint main()\n{\nPerson c;\n\nc.name = \"yxc\";      // \u6b63\u786e\uff01\u8bbf\u95ee\u516c\u6709\u53d8\u91cf\nc.age = 18;          // \u9519\u8bef\uff01\u8bbf\u95ee\u79c1\u6709\u53d8\u91cf\nc.set_age(18);       // \u6b63\u786e\uff01set_age()\u662f\u5171\u6709\u6210\u5458\u53d8\u91cf\nc.add_money(100);\n\nc.say();\ncout &lt;&lt; c.get_age() &lt;&lt; endl;\n\nreturn 0;\n}\n</code></pre> <p>\u7ed3\u6784\u4f53\u548c\u7c7b\u7684\u4f5c\u7528\u662f\u4e00\u6837\u7684\u3002\u4e0d\u540c\u70b9\u5728\u4e8e\u7c7b\u9ed8\u8ba4\u662fprivate\uff0c\u7ed3\u6784\u4f53\u9ed8\u8ba4\u662fpublic\u3002</p> <pre><code>struct Person\n{\nprivate:\nint age, height;\ndouble money;\nstring books[100];\n\npublic:\nstring name;\n\nvoid say()\n{\ncout &lt;&lt; \"I'm \" &lt;&lt; name &lt;&lt; endl;\n}\n\nint set_age(int a)\n{\nage = a;\n}\n\nint get_age()\n{\nreturn age;\n}\n\nvoid add_money(double x)\n{\nmoney += x;\n}\n} person_a, person_b, persons[100];\n</code></pre> <p>\u7ed3\u6784\u4f53\u6784\u9020\u51fd\u6570:</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;cstdio&gt;\n\nusing namespace std;\nstruct Person {\nint age, height;\ndouble money;\nPerson() {}\nPerson(int _age, int _height) : age(_age), height(_height) {}\nPerson(int _age, int _height, double _money) : age(_age), height(_height), money(_money) {}\n};\n\nint main () {\nPerson p = {18, 180};\ncout &lt;&lt; p.money &lt;&lt; endl;\n}\n</code></pre> <p>\u4ee3\u7801\u957f\u7684\u65f6\u5019\u624d\u4f1a\u663e\u793a\u51fa\u7c7b\u548c\u7ed3\u6784\u9898\u7684\u4f5c\u7528\u548c\u597d\u5904</p>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE7/#2","title":"2. \u6307\u9488\u548c\u5f15\u7528","text":"<p>\u6307\u9488\u6307\u5411\u5b58\u653e\u53d8\u91cf\u7684\u503c\u7684\u5730\u5740\u3002\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u6307\u9488\u6765\u4fee\u6539\u53d8\u91cf\u7684\u503c\u3002</p> <p>\u64cd\u4f5c\u7cfb\u7edf\u8fd0\u884c\u7a0b\u5e8f\uff0c\u6bcf\u4e2a\u7a0b\u5e8f\u90fd\u662f\u4e00\u4e2a\u8fdb\u7a0b\uff08process\uff09</p> <p>\u8fdb\u7a0b\u7684\u7a7a\u95f4\uff08\u5185\u5b58\uff09\uff0c\u6240\u6709\u8fdb\u7a0b\u8fd0\u884c\u7684\u5927\u5c0f</p> <p>\u6620\u5c04\u4e4b\u540e\uff0c\u5185\u5b58\u4f1a\u53d8\u6210\u4e00\u4e2a16g\u7684\u6570\u7ec4\uff0c\u7f16\u7801\u4e4b\u540e\u5185\u5b58\u7684\u5730\u5740\u662f16\u8fdb\u5236\u7684</p> <p>\u5047\u8bbe\u662f4G\u5185\u5b58\uff0c\u4ece0X00000000 - 0 XFFFFFFFF\uff0c 2\u768432\u6b21\u653e \uff08\u5355\u4f4d\u662f\u5b57\u8282byte\uff09</p> <p>\u5185\u5b58\u5728\u4e0a\u9762\u7684\u662f\u6808\uff0c\u5728\u4e0b\u9762\u7684\u662f\u5806\uff0c\u5c40\u90e8\u53d8\u91cf\u5168\u90e8\u5728\u6808\uff0c\u5168\u5c40\u53d8\u91cf\u5728\u5806\u7a7a\u95f4\uff08\u9ed8\u8ba4\u5168\u90e8\u521d\u59cb\u5316\u62100\uff09</p> <p>\u6307\u9488</p> <p>\u8f93\u51fa\u5730\u5740\uff1a</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\nchar a, b;\n\nint main () {\n\nchar c, d;\ncout &lt;&lt; (void*)&amp;a &lt;&lt; endl;\ncout &lt;&lt; (void*)&amp;b &lt;&lt; endl;\ncout &lt;&lt; (void*)&amp;c &lt;&lt; endl;\ncout &lt;&lt; (void*)&amp;d &lt;&lt; endl;\n\nreturn 0;\n}\n</code></pre> <p>\u8f93\u51fa\uff1a(\u6ce8\u610f\u5927\u5c0f\u987a\u5e8f)</p> <pre><code>0x10d9bd040\n0x10d9bd041\n0x7ff7b254a8fb\n0x7ff7b254a8fa\n</code></pre> <pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main()\n{\nint a = 10;\nint *p = &amp;a;  //*\u8868\u793ap\u662fint\u7c7b\u578b\u7684\u6307\u9488\n\n*p += 5; // *p\u8fd9\u4e2a\u5730\u5740\u8868\u793a\u7684\u771f\u6b63\u7684\u6570\uff0ca\u4e5f\u968f\u7740\u53d8\u5316\ncout &lt;&lt; a &lt;&lt; endl;\n\nreturn 0;\n}\n</code></pre> <p>\u6570\u7ec4\u540d\u662f\u4e2a\u6307\u9488\uff0c\u662f\u6570\u7ec4\u7b2c\u4e00\u4e2a\u53d8\u91cf\u7684\u5730\u5740\uff0c\u6570\u7ec4\u7684\u5730\u5740\u5fc5\u987b\u662f\u8fde\u7eed\u7684\u4e00\u6bb5</p> <p>\u6570\u7ec4\u540d\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u6307\u9488\u3002\u6307\u9488\u53ef\u4ee5\u505a\u8fd0\u7b97\uff1a</p> <pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main()\n{\nint a[5] = {1, 2, 3, 4, 5};\n\nfor (int i = 0; i &lt; 5; i ++ )\ncout &lt;&lt; *(a + i) &lt;&lt; endl;\n\nreturn 0;\n}\n</code></pre> <p>\u6bcf\u4e2aint\u53d8\u91cf\u5305\u542b4\u4e2a\u5b57\u8282</p> <p>\u5f15\u7528\u548c\u6307\u9488\u7c7b\u4f3c\uff0c\u76f8\u5f53\u4e8e\u7ed9\u53d8\u91cf\u8d77\u4e86\u4e2a\u522b\u540d\u3002</p> <pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main()\n{\nint a = 10;\nint &amp;p = a;\n\np += 5;\ncout &lt;&lt; a &lt;&lt; endl;\n\nreturn 0;\n}\n</code></pre> <p>\u6570\u7ec4\u91cc\u9762\u53d6a[2]\uff1a</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nchar a, b;\nint main () {\nchar c;\nint a[5] = {1, 2, 3, 4, 5};\nint *p = a;\ncout &lt;&lt; *(p + 2) &lt;&lt; endl; // a[2]\nreturn 0;\n}\n</code></pre> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\n\nint main () {\nchar c;\nint a[5] = {1, 2, 3, 4, 5};\nint *p = &amp;a[0], *q = &amp;a[2];\ncout &lt;&lt; q - p &lt;&lt; endl; // \u8fd9\u4e2a\u662f\u5730\u5740\u7684\u51cf\u6cd5\n\nreturn 0;\n}\n</code></pre> <p>\u5e38\u7528\u65b9\u6cd5\uff1a\uff08\u522b\u540d\uff09</p> <p>\u6539\u53d8a\uff0cp\u4e5f\u4f1a\u53d8\uff1b\u6539\u53d8p\uff0ca\u4e5f\u4f1a\u53d8</p> <pre><code>int *p = &amp;a; // c\u8bed\u8a00\u5199\u6cd5\nint &amp;p = a; // c++\u7684\u5f15\u7528\u3001\u522b\u540d\uff0c\u662f\u4e0a\u9762\u7684\u7b80\u7528\n</code></pre>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE7/#3","title":"3. \u94fe\u8868","text":"<p>\u7b97\u6cd5\u5f53\u4e2d\u7684\u67d0\u4e00\u79cd\u7ed3\u6784</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\nstruct Node {\nint val;\nNode* next;\nNode(int _val) : val(_val), next(NULL) {}\n};\n\nint main () {\nNode* p = new Node(1); // new \u52a8\u6001\u5f00\u8f9f\u4e00\u4e2a\u5185\u5b58\u7a7a\u95f4\n//    p-&gt;next = p; // \u524d\u9762\u8fd9\u4e2a\u53d8\u91cf\u662f\u5730\u5740\u7684\u8bdd\uff0c\u5c31\u7528-&gt;\u5426\u5219\u4f1a\u7528p.next\nNode* q = new Node(2);\nauto o = new Node(3);\n\np-&gt;next = q;\nq-&gt;next = o;\nNode* head = p;\n//\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u70b9\u53eb\u505a\u5934\u8282\u70b9\uff0c\u4e60\u60ef\u5c06\u7b2c\u4e00\u4e2a\u8282\u70b9\u7684\u5730\u5740\u5b58\u5230head\u91cc\u9762\n//\u94fe\u8868\u7684\u904d\u5386\u65b9\u5f0f\n\n// \u6dfb\u52a0\u4e00\u4e2a\u8282\u70b9\nNode* u = new Node(4);\nu-&gt;next = head;\nhead = u;\n\n// \u5220\u9664\u4e00\u4e2a\u8282\u70b9\uff0c\u94fe\u8868\u7684\u5220\u9664\u662f\u6307\u5728\u539f\u94fe\u8868\u7684\u904d\u5386\u8fc7\u7a0b\u4e2d\uff0c\u628a\u8fd9\u4e2a\u70b9\u8df3\u8fc7\u53bb\uff0c\u904d\u5386\u4e0d\u5230\u8fd9\u4e2a\u70b9\u5c31\u53ef\u4ee5\u4e86\nhead-&gt;next = head-&gt;next-&gt;next;\n\nfor(Node* i = head; i != NULL;i = i-&gt;next)\ncout &lt;&lt; i-&gt;val &lt;&lt; endl;\nreturn 0;\n}\n</code></pre> <pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nstruct Node\n{\nint val;\nNode* next; // \u53ef\u4ee5\u5b9a\u4e49\u7ed3\u6784\u4f53\u7684\u6307\u9488\uff0c\u4f46\u662f\u4e0d\u80fd\u5b9a\u4e49\u8fd9\u4e2a\u7ed3\u6784\u4f53\u7684\u53d8\u91cf\uff0c\u5c31\u662f\u4e00\u4e2a64\u4f4d\u7684\u6574\u6570\n} *head;\n\nint main()\n{\nfor (int i = 1; i &lt;= 5; i ++ )\n{\nNode* p = new Node();\np-&gt;val = i;\np-&gt;next = head;\nhead = p;\n}\n\nfor (Node* p = head; p; p = p-&gt;next)\ncout &lt;&lt; p-&gt;val &lt;&lt; ' ';\ncout &lt;&lt; endl;\n\nreturn 0;\n}\n</code></pre> <p>\u542c\u52301.7\u7c7b\u7ed3\u6784\u4f53\u4e0e\u6307\u9488\u76841:13</p>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE8/","title":"\u7b2c\u516b\u8bb2 STL\u3001\u4f4d\u8fd0\u7b97\u548c\u5e38\u7528\u5e93\u51fd\u6570","text":"<p>STL\u662f\u63d0\u9ad8C++\u7f16\u5199\u6548\u7387\u7684\u4e00\u4e2a\u5229\u5668\u3002</p>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE8/#1-include","title":"1. #include  <p>vector\u662f\u53d8\u957f\u6570\u7ec4\uff0c\u652f\u6301\u968f\u673a\u8bbf\u95ee\uff0c\u4e0d\u652f\u6301\u5728\u4efb\u610f\u4f4d\u7f6e O(1)O(1) \u63d2\u5165\u3002\u4e3a\u4e86\u4fdd\u8bc1\u6548\u7387\uff0c\u5143\u7d20\u7684\u589e\u5220\u4e00\u822c\u5e94\u8be5\u5728\u672b\u5c3e\u8fdb\u884c\u3002</p>","text":""},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE8/#11","title":"1.1 \u58f0\u660e","text":"<pre><code>#include &lt;vector&gt;   // \u5934\u6587\u4ef6\nvector&lt;int&gt; a;      // \u76f8\u5f53\u4e8e\u4e00\u4e2a\u957f\u5ea6\u52a8\u6001\u53d8\u5316\u7684int\u6570\u7ec4\nvector&lt;int&gt; b[233]; // \u76f8\u5f53\u4e8e\u7b2c\u4e00\u7ef4\u957f233\uff0c\u7b2c\u4e8c\u4f4d\u957f\u5ea6\u52a8\u6001\u53d8\u5316\u7684int\u6570\u7ec4\nstruct rec{\nint x, y;\n};\nvector&lt;rec&gt; c;      // \u81ea\u5b9a\u4e49\u7684\u7ed3\u6784\u4f53\u7c7b\u578b\u4e5f\u53ef\u4ee5\u4fdd\u5b58\u5728vector\u4e2d\n</code></pre>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE8/#12-sizeempty","title":"1.2 size/empty","text":"<p>size\u51fd\u6570\u8fd4\u56devector\u7684\u5b9e\u9645\u957f\u5ea6\uff08\u5305\u542b\u7684\u5143\u7d20\u4e2a\u6570\uff09\uff0cempty\u51fd\u6570\u8fd4\u56de\u4e00\u4e2abool\u7c7b\u578b\uff0c\u8868\u660evector\u662f\u5426\u4e3a\u7a7a\u3002\u4e8c\u8005\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662f O(1)O(1)\u3002 \u6240\u6709\u7684STL\u5bb9\u5668\u90fd\u652f\u6301\u8fd9\u4e24\u4e2a\u65b9\u6cd5\uff0c\u542b\u4e49\u4e5f\u76f8\u540c\uff0c\u4e4b\u540e\u6211\u4eec\u5c31\u4e0d\u518d\u91cd\u590d\u7ed9\u51fa\u3002</p> <pre><code>a.size()\na.empty() // \u5982\u679c\u662f\u7a7a\u5c31\u662ftrue\n</code></pre>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE8/#13-clear","title":"1.3 clear","text":"<p>clear\u51fd\u6570\u628avector\u6e05\u7a7a\u3002</p>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE8/#14","title":"1.4 \u8fed\u4ee3\u5668","text":"<p>\u8fed\u4ee3\u5668\u5c31\u50cfSTL\u5bb9\u5668\u7684\u201c\u6307\u9488\u201d\uff0c\u53ef\u4ee5\u7528\u661f\u53f7*\u64cd\u4f5c\u7b26\u89e3\u9664\u5f15\u7528\u3002</p> <p>\u4e00\u4e2a\u4fdd\u5b58int\u7684vector\u7684\u8fed\u4ee3\u5668\u58f0\u660e\u65b9\u6cd5\u4e3a\uff1a</p> <pre><code>vector&lt;int&gt;::iterator it = a.begin();\n</code></pre> <p>vector\u7684\u8fed\u4ee3\u5668\u662f\u201c\u968f\u673a\u8bbf\u95ee\u8fed\u4ee3\u5668\u201d\uff0c\u53ef\u4ee5\u628avector\u7684\u8fed\u4ee3\u5668\u4e0e\u4e00\u4e2a\u6574\u6570\u76f8\u52a0\u51cf\uff0c\u5176\u884c\u4e3a\u548c\u6307\u9488\u7684\u79fb\u52a8\u7c7b\u4f3c\u3002\u53ef\u4ee5\u628avector\u7684\u4e24\u4e2a\u8fed\u4ee3\u5668\u76f8\u51cf\uff0c\u5176\u7ed3\u679c\u4e5f\u548c\u6307\u9488\u76f8\u51cf\u7c7b\u4f3c\uff0c\u5f97\u5230\u4e24\u4e2a\u8fed\u4ee3\u5668\u5bf9\u5e94\u4e0b\u6807\u4e4b\u95f4\u7684\u8ddd\u79bb\u3002</p>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE8/#15-beginend","title":"1.5 begin/end","text":"<p>begin\u51fd\u6570\u8fd4\u56de\u6307\u5411vector\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668\u3002\u4f8b\u5982a\u662f\u4e00\u4e2a\u975e\u7a7a\u7684vector\uff0c\u5219*a.begin()\u4e0ea[0]\u7684\u4f5c\u7528\u76f8\u540c\u3002</p> <p>\u6240\u6709\u7684\u5bb9\u5668\u90fd\u53ef\u4ee5\u89c6\u4f5c\u4e00\u4e2a\u201c\u524d\u95ed\u540e\u5f00\u201d\u7684\u7ed3\u6784\uff0cend\u51fd\u6570\u8fd4\u56devector\u7684\u5c3e\u90e8\uff0c\u5373\u7b2cn \u4e2a\u5143\u7d20\u518d\u5f80\u540e\u7684\u201c\u8fb9\u754c\u201d\u3002*a.end()\u4e0ea[n]\u90fd\u662f\u8d8a\u754c\u8bbf\u95ee\uff0c\u5176\u4e2dn = a.size()\u3002</p> <p>\u4e0b\u9762\u4e24\u4efd\u4ee3\u7801\u90fd\u904d\u5386\u4e86vector a\uff0c\u5e76\u8f93\u51fa\u5b83\u7684\u6240\u6709\u5143\u7d20\u3002 <p>*a.begin()\u548ca[1]\u4e00\u4e2a\u610f\u601d</p> <pre><code>for (int i = 0; i &lt; a.size(); i ++)\ncout &lt;&lt; a[i] &lt;&lt; endl;\n\nfor (vector&lt;int&gt;::iterator it = a.begin(); it != a.end(); it ++)\ncout &lt;&lt; *it &lt;&lt; endl;\n</code></pre>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE8/#16-frontback","title":"1.6 front/back","text":"<p>front\u51fd\u6570\u8fd4\u56devector\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c\u7b49\u4ef7\u4e8ea.begin()\u548ca[0]\u3002 back\u51fd\u6570\u8fd4\u56devector\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff0c\u7b49\u4ef7\u4e8e--a.end()\u548ca[a.size() \u2013 1]\u3002</p>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE8/#17-push_backpop_back","title":"1.7 push_back()\u548cpop_back()","text":"<p>a.push_back(x)\u628a\u5143\u7d20x\u63d2\u5165\u5230vector a\u7684\u5c3e\u90e8\u3002 b.pop_back()\u5220\u9664vector a\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u3002</p> <p>vector\u7684\u5e95\u5c42\u539f\u7406\u662f\u500d\u589e</p> <p>\u4f1a\u5747\u644a\u65f6\u95f4\u590d\u6742\u5ea6</p>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE8/#2-include","title":"2. #include  <p>\u5934\u6587\u4ef6queue\u4e3b\u8981\u5305\u62ec\u5faa\u73af\u961f\u5217queue\u548c\u4f18\u5148\u961f\u5217priority_queue\u4e24\u4e2a\u5bb9\u5668\u3002</p> <p>\u961f\u5217\u6027\u8d28\uff0c\u5148\u8fdb\u5148\u51fa</p>","text":""},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE8/#21","title":"2.1 \u58f0\u660e","text":"<pre><code>queue&lt;int&gt; q;\nstruct rec{\u2026}; queue&lt;rec&gt; q;                        //\u7ed3\u6784\u4f53rec\u4e2d\u5fc5\u987b\u5b9a\u4e49\u5c0f\u4e8e\u53f7\npriority_queue&lt;int&gt; q;                              // \u5927\u6839\u5806\npriority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; q;   // \u5c0f\u6839\u5806\npriority_queue&lt;pair&lt;int, int&gt;&gt;q;\n</code></pre> <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;queue&gt;\nusing namespace std;\n\nint main () {\nqueue&lt;int&gt; q; // \u961f\u5217\npriority_queue&lt;int&gt; a; // \u5927\u6839\u5806\npriority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; b; // \u5c0f\u6839\u5806\nstruct Rec {\nint a, b;\nbool operator&lt; (const Rec&amp; t) const {\nreturn a &lt; t.a;\n}\n};\npriority_queue&lt;Rec&gt; d;\nd.push({1, 2});\nreturn 0;\n}\n</code></pre>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE8/#22-queue","title":"2.2 \u5faa\u73af\u961f\u5217queue","text":"<pre><code>push    // \u4ece\u961f\u5c3e\u63d2\u5165\npop     // \u4ece\u961f\u5934\u5f39\u51fa\nfront   // \u8fd4\u56de\u961f\u5934\u5143\u7d20\nback    // \u8fd4\u56de\u961f\u5c3e\u5143\u7d20\n</code></pre>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE8/#23-priority_queue","title":"2.3 \u4f18\u5148\u961f\u5217priority_queue","text":"<pre><code>push    // \u628a\u5143\u7d20\u63d2\u5165\u5806\npop     // \u5220\u9664\u5806\u9876\u5143\u7d20\ntop     // \u67e5\u8be2\u5806\u9876\u5143\u7d20\uff08\u6700\u5927\u503c\uff09\n</code></pre> <p>queue\u662f\u6ca1\u6709clear\u51fd\u6570\u7684</p>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE8/#3-include","title":"3. #include  <p>\u5934\u6587\u4ef6stack\u5305\u542b\u6808\u3002\u58f0\u660e\u548c\u524d\u9762\u7684\u5bb9\u5668\u7c7b\u4f3c\u3002</p> <pre><code>push    // \u5411\u6808\u9876\u63d2\u5165\npop     // \u5f39\u51fa\u6808\u9876\u5143\u7d20\n</code></pre>","text":""},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE8/#4-include","title":"4. #include  <p>\u53cc\u7aef\u961f\u5217\u5728\u4e24\u8fb9\u90fd\u5148\u8fdb\u540e\u51fa</p> <p>\u53cc\u7aef\u961f\u5217deque\u662f\u4e00\u4e2a\u652f\u6301\u5728\u4e24\u7aef\u9ad8\u6548\u63d2\u5165\u6216\u5220\u9664\u5143\u7d20\u7684\u8fde\u7eed\u7ebf\u6027\u5b58\u50a8\u7a7a\u95f4\u3002\u5b83\u5c31\u50cf\u662fvector\u548cqueue\u7684\u7ed3\u5408\u3002\u4e0evector\u76f8\u6bd4\uff0cdeque\u5728\u5934\u90e8\u589e\u5220\u5143\u7d20\u4ec5\u9700\u8981 O(1)O(1) \u7684\u65f6\u95f4\uff1b\u4e0equeue\u76f8\u6bd4\uff0cdeque\u50cf\u6570\u7ec4\u4e00\u6837\u652f\u6301\u968f\u673a\u8bbf\u95ee\u3002</p> <pre><code>[]              // \u968f\u673a\u8bbf\u95ee\nbegin/end       // \u8fd4\u56dedeque\u7684\u5934/\u5c3e\u8fed\u4ee3\u5668\nfront/back      // \u961f\u5934/\u961f\u5c3e\u5143\u7d20\npush_back       // \u4ece\u961f\u5c3e\u5165\u961f\npush_front      // \u4ece\u961f\u5934\u5165\u961f\npop_back        // \u4ece\u961f\u5c3e\u51fa\u961f\npop_front       // \u4ece\u961f\u5934\u51fa\u961f\nclear           // \u6e05\u7a7a\u961f\u5217\n</code></pre>","text":""},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE8/#5-include","title":"5. #include  <p>\u5934\u6587\u4ef6set\u4e3b\u8981\u5305\u62ecset\u548cmultiset\u4e24\u4e2a\u5bb9\u5668\uff0c\u5206\u522b\u662f\u201c\u6709\u5e8f\u96c6\u5408\u201d\u548c\u201c\u6709\u5e8f\u591a\u91cd\u96c6\u5408\u201d\uff0c\u5373\u524d\u8005\u7684\u5143\u7d20\u4e0d\u80fd\u91cd\u590d\uff0c\u800c\u540e\u8005\u53ef\u4ee5\u5305\u542b\u82e5\u5e72\u4e2a\u76f8\u7b49\u7684\u5143\u7d20\u3002set\u548cmultiset\u7684\u5185\u90e8\u5b9e\u73b0\u662f\u4e00\u68f5\u7ea2\u9ed1\u6811\uff0c\u5b83\u4eec\u652f\u6301\u7684\u51fd\u6570\u57fa\u672c\u76f8\u540c\u3002</p> <p>set\u52a8\u6001\u7ef4\u62a4\u4e00\u4e2a\u6709\u5e8f\u7684\u96c6\u5408</p>","text":""},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE8/#51","title":"5.1 \u58f0\u660e","text":"<pre><code>set&lt;int&gt; s;\nstruct rec{\u2026}; set&lt;rec&gt; s;  // \u7ed3\u6784\u4f53rec\u4e2d\u5fc5\u987b\u5b9a\u4e49\u5c0f\u4e8e\u53f7\nmultiset&lt;double&gt; s;\n</code></pre>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE8/#52-sizeemptyclear","title":"5.2 size/empty/clear","text":"<p>\u4e0evector\u7c7b\u4f3c</p>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE8/#53","title":"5.3 \u8fed\u4ee3\u5668","text":"<p>set\u548cmultiset\u7684\u8fed\u4ee3\u5668\u79f0\u4e3a\u201c\u53cc\u5411\u8bbf\u95ee\u8fed\u4ee3\u5668\u201d\uff0c\u4e0d\u652f\u6301\u201c\u968f\u673a\u8bbf\u95ee\u201d\uff0c\u652f\u6301\u661f\u53f7*\u89e3\u9664\u5f15\u7528\uff0c\u4ec5\u652f\u6301++\u548c--\u4e24\u4e2a\u4e0e\u7b97\u672f\u76f8\u5173\u7684\u64cd\u4f5c\u3002</p> <p>\u8bbeit\u662f\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u4f8b\u5982set::iterator it; <p>\u82e5\u628ait ++\uff0c\u5219it\u4f1a\u6307\u5411\u201c\u4e0b\u4e00\u4e2a\u201d\u5143\u7d20\u3002\u8fd9\u91cc\u7684\u201c\u4e0b\u4e00\u4e2a\u201d\u5143\u7d20\u662f\u6307\u5728\u5143\u7d20\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u7684\u7ed3\u679c\u4e2d\uff0c\u6392\u5728it\u4e0b\u4e00\u540d\u7684\u5143\u7d20\u3002\u540c\u7406\uff0c\u82e5\u628ait --\uff0c\u5219it\u5c06\u4f1a\u6307\u5411\u6392\u5728\u201c\u4e0a\u4e00\u4e2a\u201d\u7684\u5143\u7d20\u3002</p>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE8/#54-beginend","title":"5.4 begin/end","text":"<p>\u8fd4\u56de\u96c6\u5408\u7684\u9996\u3001\u5c3e\u8fed\u4ee3\u5668\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5747\u4e3a O(1)O(1)\u3002</p> <p>s.begin()\u662f\u6307\u5411\u96c6\u5408\u4e2d\u6700\u5c0f\u5143\u7d20\u7684\u8fed\u4ee3\u5668\u3002</p> <p>s.end()\u662f\u6307\u5411\u96c6\u5408\u4e2d\u6700\u5927\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u8fed\u4ee3\u5668\u3002\u6362\u8a00\u4e4b\uff0c\u5c31\u50cfvector\u4e00\u6837\uff0c\u662f\u4e00\u4e2a\u201c\u524d\u95ed\u540e\u5f00\u201d\u7684\u5f62\u5f0f\u3002\u56e0\u6b64-- s.end()\u662f\u6307\u5411\u96c6\u5408\u4e2d\u6700\u5927\u5143\u7d20\u7684\u8fed\u4ee3\u5668\u3002</p>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE8/#55-insert","title":"5.5 insert","text":"<p>s.insert(x)\u628a\u4e00\u4e2a\u5143\u7d20x\u63d2\u5165\u5230\u96c6\u5408s\u4e2d\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(logn)O(logn)\u3002</p> <p>\u5728set\u4e2d\uff0c\u82e5\u5143\u7d20\u5df2\u5b58\u5728\uff0c\u5219\u4e0d\u4f1a\u91cd\u590d\u63d2\u5165\u8be5\u5143\u7d20\uff0c\u5bf9\u96c6\u5408\u7684\u72b6\u6001\u65e0\u5f71\u54cd\u3002</p>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE8/#56-find","title":"5.6 find","text":"<p>s.find(x)\u5728\u96c6\u5408s\u4e2d\u67e5\u627e\u7b49\u4e8ex\u7684\u5143\u7d20\uff0c\u5e76\u8fd4\u56de\u6307\u5411\u8be5\u5143\u7d20\u7684\u8fed\u4ee3\u5668\u3002\u82e5\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56des.end()\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(logn)O(logn)\u3002</p> <pre><code>if (a.find(x) == a.end()) // \u7528\u6765\u5224\u65ad\u662f\u5426\u5b58\u5728\u8fd9\u4e2a\u6570x\n</code></pre>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE8/#57-lower_boundupper_bound","title":"5.7 lower_bound/upper_bound","text":"<p>\u8fd9\u4e24\u4e2a\u51fd\u6570\u7684\u7528\u6cd5\u4e0efind\u7c7b\u4f3c\uff0c\u4f46\u67e5\u627e\u7684\u6761\u4ef6\u7565\u6709\u4e0d\u540c\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(logn)O(logn)\u3002</p> <p>s.lower_bound(x)\u67e5\u627e\u5927\u4e8e\u7b49\u4e8ex\u7684\u5143\u7d20\u4e2d\u6700\u5c0f\u7684\u4e00\u4e2a\uff0c\u5e76\u8fd4\u56de\u6307\u5411\u8be5\u5143\u7d20\u7684\u8fed\u4ee3\u5668\u3002</p> <p>s.upper_bound(x)\u67e5\u627e\u5927\u4e8ex\u7684\u5143\u7d20\u4e2d\u6700\u5c0f\u7684\u4e00\u4e2a\uff0c\u5e76\u8fd4\u56de\u6307\u5411\u8be5\u5143\u7d20\u7684\u8fed\u4ee3\u5668\u3002</p> <p>\u6ce8\u610f\u4e0a\u9762\u5e76\u4e0d\u662f\u76f8\u53cd\uff0c\u800c\u662f\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8e\uff0c\u4e00\u4e2a\u5927\u4e8e</p>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE8/#58-erase","title":"5.8 erase","text":"<p>\u8bbeit\u662f\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0cs.erase(it)\u4eces\u4e2d\u5220\u9664\u8fed\u4ee3\u5668it\u6307\u5411\u7684\u5143\u7d20\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(logn)O(logn)\u3002</p> <p>\u8bbex\u662f\u4e00\u4e2a\u5143\u7d20\uff0cs.erase(x)\u4eces\u4e2d\u5220\u9664\u6240\u6709\u7b49\u4e8ex\u7684\u5143\u7d20\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(k+logn)O(k+logn)\uff0c\u5176\u4e2d kk \u662f\u88ab\u5220\u9664\u7684\u5143\u7d20\u4e2a\u6570\u3002</p>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE8/#59-count","title":"5.9 count","text":"<p>s.count(x)\u8fd4\u56de\u96c6\u5408s\u4e2d\u7b49\u4e8ex\u7684\u5143\u7d20\u4e2a\u6570\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(k+logn)O(k+logn)\uff0c\u5176\u4e2d kk \u4e3a\u5143\u7d20x\u7684\u4e2a\u6570\u3002</p>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE8/#6-include","title":"6. #include  <p>map\u5bb9\u5668\u662f\u4e00\u4e2a\u952e\u503c\u5bf9key-value\u7684\u6620\u5c04\uff0c\u5176\u5185\u90e8\u5b9e\u73b0\u662f\u4e00\u68f5\u4ee5key\u4e3a\u5173\u952e\u7801\u7684\u7ea2\u9ed1\u6811\u3002Map\u7684key\u548cvalue\u53ef\u4ee5\u662f\u4efb\u610f\u7c7b\u578b\uff0c\u5176\u4e2dkey\u5fc5\u987b\u5b9a\u4e49\u5c0f\u4e8e\u53f7\u8fd0\u7b97\u7b26\u3002</p> <p>map a; <p>a[1] = 2;</p> <p>a[1000000] = 3;</p> <p>cout &lt;&lt; a[1000000];</p>","text":""},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE8/#61","title":"6.1 \u58f0\u660e","text":"<pre><code>map&lt;key_type, value_type&gt; name;\n\n//\u4f8b\u5982\uff1a\nmap&lt;long long, bool&gt; vis;\nmap&lt;string, int&gt; hash;\nmap&lt;pair&lt;int, int&gt;, vector&lt;int&gt;&gt; test;\n</code></pre>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE8/#62-sizeemptyclearbeginend","title":"6.2 size/empty/clear/begin/end","text":"<p>\u5747\u4e0eset\u7c7b\u4f3c\u3002</p>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE8/#63-inserterase","title":"6.3 insert/erase","text":"<p>\u4e0eset\u7c7b\u4f3c\uff0c\u4f46\u5176\u53c2\u6570\u5747\u662fpair\u3002"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE8/#64-find","title":"6.4 find","text":"<p>h.find(x)\u5728\u53d8\u91cf\u540d\u4e3ah\u7684map\u4e2d\u67e5\u627ekey\u4e3ax\u7684\u4e8c\u5143\u7ec4\u3002</p>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE8/#65","title":"6.5 []\u64cd\u4f5c\u7b26","text":"<p>h[key]\u8fd4\u56dekey\u6620\u5c04\u7684value\u7684\u5f15\u7528\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(logn)O(logn)\u3002</p> <p>[]\u64cd\u4f5c\u7b26\u662fmap\u6700\u5438\u5f15\u4eba\u7684\u5730\u65b9\u3002\u6211\u4eec\u53ef\u4ee5\u5f88\u65b9\u4fbf\u5730\u901a\u8fc7h[key]\u6765\u5f97\u5230key\u5bf9\u5e94\u7684value\uff0c\u8fd8\u53ef\u4ee5\u5bf9h[key]\u8fdb\u884c\u8d4b\u503c\u64cd\u4f5c\uff0c\u6539\u53d8key\u5bf9\u5e94\u7684value\u3002</p> <p>\u770b\u52301.7\u4e60\u9898\u53ca\u7ec3\u4e601.8STL \u76841:40</p>"},{"location":"Course/cppPrimer/cppPrimer/","title":"\u7cbe\u8bfb Cpp Primer","text":""},{"location":"Course/cppPrimer/cppPrimer/#_1","title":"\u7cbe\u8bfb Cpp Primer","text":""},{"location":"Course/cs144/information/","title":"CS144 information","text":"<p>\u524d5\u4e2aLab\u4ecebyte_stream\u5f00\u59cb\uff0c\u4e00\u6b65\u4e00\u6b65\u5730\u6307\u5bfc\u4f60\u5b9e\u73b0\u51fa\u4e00\u4e2a\u80fd\u771f\u5b9e\u4f7f\u7528\u7684TCP\uff0c\u603b\u5f97\u6765\u8bf4\u6709\u8da3\u800c\u53c8\u6709\u7528\uff0c\u4e14\u96be\u5ea6\u4e5f\u4e0d\u7b97\u5f88\u5927\u3002</p> <p>Lab2\u548cLab3\u7684test case\u4e0d\u591f\u591a\uff0c\u5bfc\u81f4\u9519\u8bef\u6216\u8005\u662f\u4e0eLab\u671f\u671b\u7684\u8bbe\u8ba1\u4e0d\u7b26\u7684\u5b9e\u73b0\u4e5f\u80fd\u901a\u8fc7\u5168\u90e8\u7684test case\u3002\u7136\u540e\u5728Lab4\u91cc\uff0c\u8fd9\u4e9b\u95ee\u9898\u4f1a\u5168\u90e8\u66b4\u9732\u51fa\u6765......\u7ed3\u679c\u5c31\u662f\u5728\u505aLab4\u7684\u65f6\u5019\u5b8c\u5168\u4e0d\u80fd\u4fe1\u4efb\u81ea\u5df1\u5728Lab2\u548cLab3\u91cc\u7684\u76f8\u5e94\u5b9e\u73b0\uff0c\u8fd9\u6837\u4e5f\u5927\u5927\u589e\u52a0\u4e86debug\u96be\u5ea6\u3002</p> <p>Lab4\u91cc\u6709\u4e24\u4e2atest case\u5373fsm_ack_rst\u548cfsm_ack_rst_relaxed\u671f\u5f85\u7684\u884c\u4e3a\u662f\u5b8c\u5168\u76f8\u53cd\u7684\u3002\u5b9e\u9645\u4e0a\u5728\u5b98\u65b9\u7684FAQ\u9875\u9762\u4e0a\u7ed9\u51fa\u7684\u72b6\u6001\u673a\u662f\u4e0efsm_ack_rst\u671f\u5f85\u7684\u884c\u4e3a\u4e00\u81f4\uff0c\u4f46Lab4\u9ed8\u8ba4\u542f\u7528\u7684\u5374\u662ffsm_ack_rst_relaxed......</p> <p>\u5b98\u65b9\u63d0\u4f9b\u7684VirtualBox Image\u4e2d\u7684GDB\u662f\u6709bug\u7684\uff0c\u5728cmake_build_type=Debug\u751f\u6210\u7684binary\u4e0a\u4e0d\u80fd\u6b63\u786e\u5730\u6253\u65ad\u70b9\u3002\u5728Lab4\u4e4b\u524d\u6211\u8fd8\u80fd\u9760\u8089\u773c\u8c03\u8bd5\uff0c\u4f46\u662fLab4\u5b9e\u5728\u662f\u8089\u773c\u8c03\u4e0d\u52a8\u4e86\uff0c\u4e0d\u5f97\u4e0d\u5bfb\u6c42\u89e3\u51b3\u65b9\u6848\u3002\u540e\u6765\u95ee\u4e86\u4e00\u4f4d\u4e4b\u524d\u4e5f\u505a\u8fc7\u8fd9\u4e2aLab\u7684\u6e05\u534e\u5927\u4f6c @RT Huang\uff0c\u4ed6\u544a\u8bc9\u6211\u8bf4\u4ed6\u7528\u7684\u662fLLDB\u3002\u6211\u5c31\u8d76\u7d27\u6362\u4e86LLDB\uff0c\u8fd9\u624d\u80fd\u6109\u5feb\u7684\u8fdb\u884c\u8c03\u8bd5\u3002\u987a\u5e26\u4e00\u63d0\uff0c\u8fd9\u4f4d\u5927\u4f6c\u5728GitHub\u4e0a\u6709\u81ea\u5df1\u5b8c\u6210\u8fd9\u95e8\u8bfe\u7a0b\u548cLab\u7684\u7b14\u8bb0\uff0c\u4e5f\u662f\u503c\u5f97\u53c2\u8003\u7684Orz \u6211\u5ba4\u53cb @Comzyh\u540e\u6765\u6015\u6211\u641e\u5b9a\u4e0d\u4e86\u53c8\u6ca1\u4eba\u6559\u6211\uff0c\u5c31\u4e5f\u6765\u505a\u8fd9\u4e2aLab\u4e86\uff0c\u636e\u4ed6\u8bf4\u5f00\u4e86-O0\u4e4b\u540eGDB\u5c31\u80fd\u6b63\u5e38\u5de5\u4f5c\u4e86\uff0c\u4f46\u6211\u81ea\u5df1\u4e4b\u524d\u5c1d\u8bd5\u7684\u65f6\u5019\u8fd9\u6837\u8fd8\u662f\u4e0d\u80fd\u6b63\u5e38\u5de5\u4f5c\u3002</p> <p>\u200b                   </p>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/","title":"CS50 notebook","text":""},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#cs50","title":"CS50\u7f51\u7ad9\u3001\u8d44\u6599","text":"<ul> <li>manual pages to find CS50's libraries and functions</li> <li>C style from CS50</li> </ul>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#cs50_1","title":"CS50\u65b9\u6cd5\u8bba","text":"<ol> <li>\u770bnotes 2h</li> <li>\u770blecture 2.5h \u63a8\u8350\u4e0a\u7528edx\u4e0a\u7684\u94fe\u63a5\u53bbYouTube\u770b\uff0c\u800c\u4e0d\u662f\u7528edx\u81ea\u5e26\u7684\u64ad\u653e\u5668\uff0c\u56e0\u4e3a\u603b\u662f\u4f1a\u5361</li> <li>\u770bshorts 1.5h\uff0cshorts\u5f88\u91cd\u8981\uff0c\u5728\u4f5c\u4e1a\u91cc\u9762\u7ecf\u5e38\u4f1a\u7528\u5230</li> <li>\u505alab\uff08week2\u5f00\u59cb\u6709\uff09 \u65f6\u95f4\u4e0d\u5b9a</li> <li>\u505a\u4f5c\u4e1a\uff08\u5c3d\u91cf\u9009\u62e9feel more comfortable\u7684\u96be\u5ea6 \uff09 \u65f6\u95f4\u7ecf\u5e38\u8d85\u8fc73\u5c0f\u65f6</li> </ol> <p>\u5f88\u591a\u8bb2\u89e3\u975e\u5e38\u5f62\u8c61\uff0c\u6bd4\u5982week0\u6495\u4e66\uff0cweek3\u8bb2\u89e3merge sort\u65f6\u5c06\u5b57\u6bcd\u4ece\u7b2c0\u5c42sort\u5230\u7b2c\u4e09\u5c42\u5f97\u51fa\u590d\u6742\u5ea6nlogn</p> <p>\u5410\u69fd\uff1aweek3\u7684tideman\u4f5c\u4e1a\u4e00\u5927\u5806\u9009\u4e3e\u89c4\u5219\uff0c\u975e\u5e38\u96be\uff0c\u5bf9\u4e8e\u521a\u5b66\u7684\u4eba\u4e0d\u53c2\u8003\u5176\u4ed6\u4eba\u7684\u601d\u8def\uff0c\u5361\u597d\u51e0\u5929\u751a\u81f3\u51e0\u661f\u671f\u90fd\u6709\u53ef\u80fd</p>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#tips","title":"\u5c0ftips","text":"<p>atof()\u7528\u4e8e\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570(double)</p>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#_1","title":"\u5355\u8bcd","text":"<p>heck \u7cdf\u7cd5\uff0c\u89c1\u9b3c</p> <p>Exclamation \u611f\u53f9\u53f7</p> <p>Period \u53e5\u53f7</p> <p>Pedantically \u5356\u5f04\u5b66\u95ee\u5730\uff1b\u5b66\u7a76\u5f0f\u5730\uff0c\u8fc2\u8150\u5730</p> <p>Trait \u7279\u8d28\uff0c\u7279\u5f81</p> <p>Round to the nearest integer \u56db\u820d\u4e94\u5165\u5230\u6700\u8fd1\u7684\u6574\u6570</p> <p>Retrace the steps \u91cd\u6eaf\u4ee5\u524d\u7684\u6b65\u9aa4</p> <p>substitution cipher \u66ff\u6362\u5bc6\u7801</p> <p>encrypt \u628a\u2026\u2026\u52a0\u5bc6\uff0c\u5c06\u2026\u2026\u8bd1\u6210\u5bc6\u7801</p> <p>conceal \u9690\u85cf\uff1b\u9690\u7792</p> <p>Divide and conquer \u5206\u800c\u6cbb\u4e4b\uff0c\u5404\u4e2a\u51fb\u7834</p> <p>Zoom out \u7f29\u5c0f</p> <p>curly braces \u82b1\u62ec\u53f7{}</p> <p>on the order of \u8fd1\u4f3c</p> <p>Iterate \u8fed\u4ee3</p> <p>Resemble \u7c7b\u4f3c</p> <p>Prompt \u4fc3\u4f7f</p> <p>Shuffled \u6253\u4e71\u7684\uff0c\u6d17\u724c</p> <p>Elapsed \u7ecf\u8fc7</p> <p>Plurality \u591a\u6570\uff1b\u590d\u6570\uff1b\u517c\u804c\uff1b\u80dc\u51fa\u7968\u6570</p> <p>appointed by the monarch \u7531\u541b\u4e3b\u4efb\u547d</p> <p>First-past-the-post \u6700\u9ad8\u7968\u8005\u5f53\u9009</p> <p>Ballot \u9009\u4e3e</p> <p>Head-to-head \u767d\u5203\u6218</p> <p>Margin \u5dee\u8ddd</p> <p>glint \u95ea\u70c1\uff0c\u53d1\u5149</p> <p>scan line \u626b\u63cf\u7ebf</p> <p>precondition \u524d\u63d0\uff0c\u5148\u51b3\u6761\u4ef6</p> <p>equated with \u76f8\u7b49\u4e8e</p> <p>wrap around to \u73af\u7ed5\u00b7</p> <p>tinker with \u80e1\u4e71\u5730\u4fee\u8865\uff1btinker \u5c0f\u4fee\u8865\uff1b\u7b28\u624b\u7b28\u811a\u5730\u505a\u4e8b</p> <p>ampersand &amp;\u8bb0\u53f7\u540d\u79f0(address operator)</p> <p>asterisk *\u8bb0\u53f7\u540d\u79f0</p> <p>toggle \u5207\u6362\uff0c\u8f6c\u6362</p> <p>allocate \u5206\u914d</p> <p>poke around \u95f2\u901b</p> <p>whittle down \u524a\u5f31</p> <p>intimidating \u4ee4\u4eba\u671b\u800c\u751f\u754f\u7684</p> <p>screw up \u62e7\u7d27\uff1b\u9f13\u821e\uff1b\u5f04\u7cdf</p> <p>discipline \u7eaa\u5f8b\uff0c\u98ce\u7eaa\uff1b\u60e9\u7f5a\uff0c\u5904\u5206\uff1b\u8bad\u5bfc\uff0c\u7ba1\u6559</p> <p>creep up \u8815\u5347\uff1b\u6e17\u4e0a\u6765</p> <p>volatile \u6613\u53d8\u7684</p> <p>factorial \u9636\u4e58\u7684</p> <p>ephemeral \u77ed\u6682\u7684\uff0c\u77ed\u751f\u7684</p> <p>companion \u540c\u4f34\uff0c\u4f34\u4fa3</p> <p>grid \u683c\u6805 a grid of pixels</p> <p>metadata \u5143\u6570\u636e</p> <p>debute \u9996\u6b21\u53c2\u4e0e,\u9996\u6b21\u767b\u53f0</p> <p>tradeoff \u6743\u8861\uff0c\u6298\u4e2d</p> <p>snippet \u4ee3\u7801\u7247\u6bb5</p>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#assignments","title":"Assignments","text":""},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#week1-mario-more","title":"week1 mario-more","text":"<pre><code>#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\nint height, row, column, space;\n// Prompt user for height\ndo\n{\nheight = get_int(\"Enter Your Height: \");\n}\nwhile (height &lt; 1 || height &gt; 8);\n\n// For each row\nfor (row = 0; row &lt; height; row++)\n{\n// For each space\nfor (space = 0; space &lt; height - row - 1; space++)\n{\nprintf(\" \");\n}\n// For each column\nfor (column = 0; column &lt;= row; column++)\n{\nprintf(\"#\");\n}\n// Constant two spaces\nprintf(\"  \");\n// The right part\nfor (column = 0; column &lt;= row; column++)\n{\nprintf(\"#\");\n}\n// Move to next row\nprintf(\"\\n\");\n}\n\n}\n</code></pre>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#week1-credit","title":"week1 credit","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;cs50.h&gt;\n\nbool check_card(long card);\nint get_length(long card);\nbool checksum(long card);\nvoid print_card_type(long card);\n\nint main(void)\n{\nlong card_number;\n// Prompt user for credit card number\ndo\n{\ncard_number = get_long(\"Number: \");\n}\nwhile (card_number &lt; 0);\n// Print card type\nif (check_card(card_number) == true)\n{\nprint_card_type(card_number);\n}\nelse\n{\nprintf(\"INVALID\\n\");\n}\n}\n// Check card lenth and check sum\nbool check_card(long card)\n{\nint length = get_length(card);\nreturn (length == 13 || length == 15 || length == 16) &amp;&amp; checksum(card);\n}\n// Get the length of credit card\nint get_length(long card)\n{\nint i;\nfor (i = 0; card != 0; card /= 10, i++);\nreturn i;\n}\n// Check sum\nbool checksum(long card)\n{\nint sum = 0;\nint i;\nfor (i = 0; card != 0; card /= 10, i++)\n{\nif (i % 2 == 0)\n{\nsum += card % 10;\n}\nelse\n{\nint multiple = 2 * (card % 10);\nsum += multiple / 10 + multiple % 10;\n}\n}\nreturn (sum % 10) == 0;\n}\n// Identify and print card type\nvoid print_card_type(long card)\n{\nif ((card &gt;= 34e13 &amp;&amp; card &lt; 35e13) || (card &gt;= 37e13 &amp;&amp; card &lt; 38e13))\n{\nprintf(\"AMEX\\n\");\n}\nelse if (card &gt;= 51e14 &amp;&amp; card &lt; 56e14)\n{\nprintf(\"MASTERCARD\\n\");\n}\nelse if ((card &gt;= 4e12 &amp;&amp; card &lt; 5e12) || (card &gt;= 4e15 &amp;&amp; card &lt; 5e15))\n{\nprintf(\"VISA\\n\");\n}\nelse\n{\nprintf(\"INVALID\\n\");\n}\n}\n</code></pre>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#week2-lab","title":"week2 lab","text":"<p>\u601d\u8def\uff1a</p> <ol> <li> <p>\u628a\u4e00\u4e2a\u5355\u8bcd\u6240\u6709\u7684\u5b57\u6bcd\u5168\u90e8\u8f6c\u6362\u6210\u5927\u5199</p> </li> <li> <p>A\u5bf9\u5e94\u7684\u662f65\uff0c\u6240\u4ee5\u76f8\u52a0\u7684\u4e3aword[i - 65]</p> </li> </ol> <pre><code>#include &lt;ctype.h&gt;\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\n// Points assigned to each letter of the alphabet\nint POINTS[] = {1, 3, 3, 2, 1, 4, 2, 4, 1, 8, 5, 1, 3, 1, 1, 3, 10, 1, 1, 1, 1, 4, 4, 8, 4, 10};\n\nint compute_score(string word);\n\nint main(void)\n{\n// Get input words from both players\nstring word1 = get_string(\"Player 1: \");\nstring word2 = get_string(\"Player 2: \");\n\n// Score both words\nint score1 = compute_score(word1);\nint score2 = compute_score(word2);\n\n// TODO: Print the winner\nif (score1 &gt; score2)\n{\nprintf(\"Player 1 wins!\\n\");\n}\nif (score1 &lt; score2)\n{\nprintf(\"Player 2 wins\\n\");\n}\nelse\n{\nprintf(\"Tie!\\n\");\n}\n}\n\nint compute_score(string word)\n{\n// TODO: Compute and return score for string\nint length = strlen(word);\nint sum = 0;\nfor (int i = 0; i &lt;length; i++)\n{\nword[i] = toupper(word[i]);\n}\n\nfor (int j = 0; j &lt; length; j++)\n{\nint m = (int)word[j]-65;\nsum = sum + POINTS[m];\n}\nreturn sum;\n}\n</code></pre>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#week2-readability","title":"week2 readability","text":"<p>\u6ce8\u610f\u8fd9\u9053\u9898\u4e2d\u7684\u8ba1\u7b97\u7ed3\u679c\u662f\u56db\u820d\u4e94\u5165\u7684\uff0c\u56db\u820d\u4e94\u5165\u7684\u5de7\u5999\u65b9\u6cd5\u662f(int)(x + 0.5)</p> <pre><code>#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n#include &lt;ctype.h&gt;\n\nint count_letters(string text);\nint count_words(string text);\nint count_sentences(string text);\n\nint main(void)\n{\n// prompt user for imput\nstring input = get_string(\"Text: \");\nint letters = count_letters(input);\nint words = count_words(input);\nint sentences = count_sentences(input);\n// printf(\"%i letters\\n\", letters);\n// printf(\"%i words\\n\", words);\n// printf(\"%i sentences\\n\", sentences);\n// index = 0.0588 * L - 0.296 * S - 15.8\ndouble L = (double)letters / (double)words * 100;\ndouble S = (double)sentences / (double)words * 100;\ndouble index1 = 0.0588 * L - 0.296 * S - 15.8;\nint index = (int)(index1 + 0.5);\n// printf(\"L is %f\\n\", L);\n// printf(\"S is %f\\n\", S);\n// printf(\"index1 is %f\\n\", index1);\n// printf(\"index is %i\\n\",index);\n\nif (index &gt;= 16)\n{\nprintf(\"Grade 16+\\n\");\n}\nelse if (index &lt; 1)\n{\nprintf(\"Before Grade 1\\n\");\n}\nelse\n{\nprintf(\"Grade %i\\n\", index);\n}\n}\n\n// count the number of letters in the text\nint count_letters(string text)\n{\nint count_of_letters = 0;\nint length = strlen(text);\nfor (int i = 0; i &lt; length; i++)\n{\nif (isalpha(text[i]))\n{\ncount_of_letters = count_of_letters + 1;\n}\n}\nreturn count_of_letters;\n}\n\n// count the number of words in the text\nint count_words(string text)\n{\nint count_of_words = 1;\nint length = strlen(text);\nfor (int i = 0; i &lt; length; i++)\n{\nif (text[i] == ' ')\n{\ncount_of_words = count_of_words + 1;\n}\n}\nreturn count_of_words;\n}\n\n// count the number of sentences in the text\nint count_sentences(string text)\n{\nint count_of_sentences = 0;\nint length = strlen(text);\nfor (int i = 0; i &lt; length; i++)\n{\nif (text[i] == '.')\n{\ncount_of_sentences = count_of_sentences + 1;\n}\nelse if (text[i] == '!')\n{\ncount_of_sentences = count_of_sentences + 1;\n}\nelse if (text[i] == '?')\n{\ncount_of_sentences = count_of_sentences + 1;\n}\nelse\n{\ncount_of_sentences = count_of_sentences + 0;\n}\n}\nreturn count_of_sentences;\n}\n</code></pre>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#week2-substitution","title":"week2 substitution","text":"<ol> <li>\u539f\u5b57\u6bcd\u7684\u5927\u5c0f\u5199\u72b6\u6001\u4fdd\u7559\uff0c\u4e14key\u6709\u53ef\u80fd\u662f\u5927\u5c0f\u6df7\u6742\u7684\uff0c\u4f46\u662f\u8f93\u51fa\u7684\u5927\u5c0f\u5199\u662f\u4ee5plain text\u4e3a\u4f9d\u636e\u7684</li> <li>\u53ea\u6709alphabetical character\u9700\u8981\u88ab\u8f6c\u6362\uff0c\u5176\u4ed6\u7684\u90fd\u4e0d\u9700\u8981</li> <li>\u957f\u5ea6\u4e0d\u6b63\u786e\uff08\u957f\u4e8e\uff0c\u5c0f\u4e8e\uff09\u7684\u53ef\u4ee5\u8981\u62a5error</li> <li>\u6ca1\u6709\u8f93\u5165\uff0c\u9700\u8981\u62a5usage</li> <li>\u8f93\u5165\u591a\u4e2aargv[]\u4e5f\u9700\u8981\u62a5usage</li> <li>\u8981\u6709exit status\u76f4\u63a5\u9000\u51fa\u7a0b\u5e8f</li> </ol> <p>\u601d\u8def\uff1a</p> <ol> <li>\u5148\u5224\u65adkey\u662f\u5426\u7b26\u5408\u539f\u5219</li> <li>\u518d\u5bf9plaintext\u5206\u7c7b\u8ba8\u8bba</li> </ol> <pre><code>#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n#include &lt;ctype.h&gt;\n\nstring encrypt(string text, string substitute);\nbool check_duplicate(string text);\nbool check_invalid(string text);\n\nint main(int argc, string argv[])\n{\n// check if there is no command-line argument\nif (argc == 1)\n{\n// if no command-line argument, exit\nprintf(\"Usage: ./substitution key\\n\");\nreturn 1;\n}\n\nstring key = argv[1];\nint length = strlen(key);\n\n// check whether the key is valid\nif (argc == 2)\n{\nif (length != 26)\n{\n// if length does not equal to 26, exit\nprintf(\"Key must contain 26 characters.\\n\");\nreturn 1;\n}\nelse if (check_duplicate(key))\n{\n// if there are duplicate characters, exit\nprintf(\"Key must not contain duplicate characters.\\n\");\nreturn 1;\n}\nelse if (check_invalid(key))\n{\n// if there are invalid characters, exit\nprintf(\"Invalid character in key.\\n\");\nreturn 1;\n}\nelse\n{\n// plain text should be provided and encrypted if the key is valid\nstring plain_text = get_string(\"plaintext: \");\nstring cipher_text = encrypt(plain_text, key);\nprintf(\"ciphertext: %s\\n\", cipher_text);\nreturn 0;\n}\n}\nelse\n{\nprintf(\"Usage: ./substitution key\\n\");\nreturn 1;\n}\n}\n\n// implementation of substitution cipher\nstring encrypt(string text, string substitute)\n{\nint text_len = strlen(text);\nint substitute_len = strlen(substitute);\n// convert all the letters of key to uppercase\nfor (int i = 0; i &lt; substitute_len; i++)\n{\nsubstitute[i] = toupper(substitute[i]);\n}\n// substitution\nfor (int j = 0; j &lt; text_len; j++)\n{\nif (text[j] &gt;= 'A' &amp;&amp; text[j] &lt;= 'Z')\n{\ntext[j] = substitute[(int)text[j] - 65];\n}\nelse if (text[j] &gt;= 'a' &amp;&amp; text[j] &lt;= 'z')\n{\ntext[j] = substitute[(int)text[j] - 97] + 32;\n}\nelse\n{\ntext[j] = text[j];\n}\n}\nreturn text;\n}\n\n// check if there are duplicate characters\nbool check_duplicate(string text)\n{\nint text_len = strlen(text);\nint check = 0;\nfor (int i = 0; i &lt; text_len; i++)\n{\nfor (int j = i + 1; j &lt; text_len; j++)\n{\nif (text[i] == text[j])\n{\ncheck = check + 1;\n}\n}\n}\nreturn check != 0;\n}\n\n// check if there are invalid characters\nbool check_invalid(string text)\n{\nint text_len = strlen(text);\nint check2 = 0;\nfor (int i = 0; i &lt; text_len; i++)\n{\nif (isalpha(text[i]))\n{\ncheck2 = check2 + 0;\n}\nelse\n{\ncheck2 = check2 + 1;\n}\n}\nreturn check2 != 0;\n}\n</code></pre>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#week3-lab","title":"week3 lab","text":"<pre><code>sort1 uses: bubble sort\n\nHow do you know?: when sorting sorted50000.txt, bubble sort does not need to swap any of the numbers and just exits, so it should cost less than selection sort.\n\nsort2 uses: merge sort\n\nHow do you know?: the time of sorting 50000 random numbers cost by sort2 algoritm is the smallest. Merge sort has the smallest big O when sorting large amount of numbers.\n\nsort3 uses: selection sort\n\nHow do you know?: when sorting reversed50000.txt, selection sort should cost less than the bubble sort.\n</code></pre>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#week3-plurality","title":"week3 plurality","text":"<pre><code>#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\n// Max number of candidates\n#define MAX 9\n\n// Candidates have name and vote count\ntypedef struct\n{\nstring name;\nint votes;\n}\ncandidate;\n\n// Array of candidates\ncandidate candidates[MAX];\n\n// Number of candidates\nint candidate_count;\n\n// Function prototypes\nbool vote(string name);\nvoid print_winner(void);\n\nint main(int argc, string argv[])\n{\n// Check for invalid usage\nif (argc &lt; 2)\n{\nprintf(\"Usage: plurality [candidate ...]\\n\");\nreturn 1;\n}\n\n// Populate array of candidates\ncandidate_count = argc - 1;\nif (candidate_count &gt; MAX)\n{\nprintf(\"Maximum number of candidates is %i\\n\", MAX);\nreturn 2;\n}\nfor (int i = 0; i &lt; candidate_count; i++)\n{\ncandidates[i].name = argv[i + 1];\ncandidates[i].votes = 0;\n}\n\nint voter_count = get_int(\"Number of voters: \");\n\n// Loop over all voters\nfor (int i = 0; i &lt; voter_count; i++)\n{\nstring name = get_string(\"Vote: \");\n\n// Check for invalid vote\nif (!vote(name))\n{\nprintf(\"Invalid vote.\\n\");\n}\n}\n\n// Display winner of election\nprint_winner();\n}\n\n// Update vote totals given a new vote\nbool vote(string name)\n{\nint b = 0;\nfor (int i = 0; i &lt; candidate_count; i++)\n{\nif (strcmp(candidates[i].name, name) == 0)\n{\ncandidates[i].votes = candidates[i].votes + 1;\nb = b + 1;\nreturn true;\n}\n}\n\nreturn b != 0;\n}\n\n// Print the winner (or winners) of the election\nvoid print_winner(void)\n{\nint max = candidates[0].votes;\n\nfor (int i = 1; i &lt; candidate_count; i++)\n{\nif (candidates[i].votes &gt; max)\n{\nmax = candidates[i].votes;\n}\n}\n\nfor (int i = 0; i &lt; candidate_count; i++)\n{\nif (candidates[i].votes == max)\n{\nprintf(\"%s\\n\", candidates[i].name);\n}\n}\n\n}\n</code></pre>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#week3-tideman","title":"week3 tideman","text":"<p>\u50a8\u5b58\u540d\u5b57\u7684\u662f string candidates[]</p> <p>\u540d\u5b57\u7684\u6570\u91cf\u662f candidate_count</p> <p>ranks[]\u91cc\u9762\u50a8\u5b58\u540d\u6b21</p> <p>bool vote:</p> <pre><code>#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\n// Max number of candidates\n#define MAX 9\n\n// preferences[i][j] is number of voters who prefer i over j\nint preferences[MAX][MAX];\n\n// locked[i][j] means i is locked in over j\nbool locked[MAX][MAX];\n\n// Each pair has a winner, loser\ntypedef struct\n{\nint winner;\nint loser;\n}\npair;\n\n// check whether the edges will create a cycle\nbool check_cycle(int winner, int loser);\n\n// Array of candidates\nstring candidates[MAX];\npair pairs[MAX * (MAX - 1) / 2];\n\nint pair_count;\nint candidate_count;\n\n// Function prototypes\nbool vote(int rank, string name, int ranks[]);\nvoid record_preferences(int ranks[]);\nvoid add_pairs(void);\nvoid sort_pairs(void);\nvoid lock_pairs(void);\nvoid print_winner(void);\n\nint main(int argc, string argv[])\n{\n// Check for invalid usage\nif (argc &lt; 2)\n{\nprintf(\"Usage: tideman [candidate ...]\\n\");\nreturn 1;\n}\n\n// Populate array of candidates\ncandidate_count = argc - 1;\nif (candidate_count &gt; MAX)\n{\nprintf(\"Maximum number of candidates is %i\\n\", MAX);\nreturn 2;\n}\nfor (int i = 0; i &lt; candidate_count; i++)\n{\ncandidates[i] = argv[i + 1];\n}\n\n// Clear graph of locked in pairs\nfor (int i = 0; i &lt; candidate_count; i++)\n{\nfor (int j = 0; j &lt; candidate_count; j++)\n{\nlocked[i][j] = false;\n}\n}\n\npair_count = 0;\nint voter_count = get_int(\"Number of voters: \");\n\n// Query for votes\nfor (int i = 0; i &lt; voter_count; i++)\n{\n// ranks[i] is voter's ith preference\nint ranks[candidate_count];\n\n// Query for each rank\nfor (int j = 0; j &lt; candidate_count; j++)\n{\nstring name = get_string(\"Rank %i: \", j + 1);\n\nif (!vote(j, name, ranks))\n{\nprintf(\"Invalid vote.\\n\");\nreturn 3;\n}\n}\n\nrecord_preferences(ranks);\n\nprintf(\"\\n\");\n}\n\nadd_pairs();\nsort_pairs();\nlock_pairs();\nprint_winner();\nreturn 0;\n}\n\n// Update ranks given a new vote\nbool vote(int rank, string name, int ranks[])\n{\nfor (int i = 0; i &lt; candidate_count; i++)\n{\nif (strcmp(candidates[i], name) == 0)\n{\nranks[rank] = i;\nreturn true;\n}\n}\nreturn false;\n}\n\n// Update preferences given one voter's ranks\nvoid record_preferences(int ranks[])\n{\nfor (int i = 0; i &lt; candidate_count; i++)\n{\nfor (int j = i + 1; j &lt; candidate_count; j++)\n{\npreferences[ranks[i]][ranks[j]]++;\n}\n}\nreturn;\n}\n\n// Record pairs of candidates where one is preferred over the other\nvoid add_pairs(void)\n{\nfor (int i = 0; i &lt; candidate_count; i++)\n{\nfor (int j = i + 1; j &lt; candidate_count; j++)\n{\nif (preferences[i][j] &gt; preferences[j][i])\n{\npairs[pair_count].winner = i;\npairs[pair_count].loser = j;\npair_count = pair_count + 1;\n}\nelse if (preferences[i][j] &lt; preferences[j][i])\n{\npairs[pair_count].winner = j;\npairs[pair_count].loser = i;\npair_count = pair_count + 1;\n}\n}\n}\nreturn;\n}\n\n// Sort pairs in decreasing order by strength of victory\nvoid sort_pairs(void)\n{\nbool swapped;\nfor (int i = 0; i &lt; pair_count - 1; i++)\n{\nswapped = false;\nfor (int j = 0; j &lt; pair_count - 1; j++)\n{\nif (preferences[pairs[j].winner][pairs[j].loser] &lt; preferences[pairs[j + 1].winner][pairs[j + 1].loser])\n{\npair temp = pairs[j];\npairs[j] = pairs[j + 1];\npairs[j + 1] = temp;\nswapped = true;\n}\n}\nif (swapped == false)\n{\nbreak;\n}\n}\nreturn;\n}\n\n// Lock pairs into the candidate graph in order, without creating cycles\nvoid lock_pairs(void)\n{\nfor (int i = 0; i &lt; pair_count; i++)\n{\nif (!check_cycle(pairs[i].loser, pairs[i].winner))\n{\nlocked[pairs[i].winner][pairs[i].loser] = true;\n}\n}\nreturn;\n}\n\n// Print the winner of the election\nvoid print_winner(void)\n{\nfor (int i = 0; i &lt; candidate_count; i++)\n{\nint locked_edge_numbers = 0;\nfor (int j = 0; j &lt; candidate_count; j++)\n{\nif (locked[j][i] == false)\n{\nlocked_edge_numbers++;\nif (locked_edge_numbers == candidate_count)\n{\nprintf(\"%s\\n\", candidates[i]);\n}\n}\n}\n}\nreturn;\n}\n\n// check whether the edges will create a cycle\nbool check_cycle(int loser, int winner)\n{\nif (loser == winner)\n{\nreturn true;\n}\nfor (int i = 0; i &lt; candidate_count; i++)\n{\nif (locked[loser][i])\n{\nif (check_cycle(i, winner))\n{\nreturn true;\n}\n}\n}\nreturn false;\n}\n\nbool cycle(int end, int cycle_start)\n{\n// Return True if there is a cycle created (recursion base case)\nif (end == cycle_start)\n{\nreturn true;\n}\n// Loop through candidates\nfor (int i = 0; i &lt; candidate_count; i++)\n{\nif (locked[end][i])\n{\nif (cycle(i, cycle_start))\n{\nreturn true;\n}\n}\n}\nreturn false;\n}\n</code></pre>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#week4-lab","title":"week4 lab","text":"<pre><code>// Modifies the volume of an audio file\n\n#include &lt;stdint.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\n// Number of bytes in .wav header\nconst int HEADER_SIZE = 44;\n\n// Create an array to store header file\nuint8_t header[HEADER_SIZE];\n\n// using the int16_t type to store audio sample\nint16_t buffer;\n\nint main(int argc, char *argv[])\n{\n// Check command-line arguments\nif (argc != 4)\n{\nprintf(\"Usage: ./volume input.wav output.wav factor\\n\");\nreturn 1;\n}\n\n// Open files and determine scaling factor\nFILE *input = fopen(argv[1], \"r\");\nif (input == NULL)\n{\nprintf(\"Could not open file.\\n\");\nreturn 1;\n}\n\nFILE *output = fopen(argv[2], \"w\");\nif (output == NULL)\n{\nprintf(\"Could not open file.\\n\");\nreturn 1;\n}\n\nfloat factor = atof(argv[3]);\n\n// TODO: Copy header from input file to output file\nfread(&amp;header, sizeof(header), 1, input);\nfwrite(&amp;header, sizeof(header), 1, output);\n\n// TODO: Read samples from input file and write updated data to output file\nwhile (fread(&amp;buffer, sizeof(buffer), 1, input))\n{\nbuffer *= factor;\nfwrite(&amp;buffer, sizeof(buffer), 1, output);\n}\n// Close files\nfclose(input);\nfclose(output);\n}\n</code></pre>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#week4-filter-more","title":"week4 filter-more","text":"<pre><code>#include \"helpers.h\"\n#include &lt;math.h&gt;\n\n// Convert image to grayscale\nvoid grayscale(int height, int width, RGBTRIPLE image[height][width])\n{\nfor (int i = 0; i &lt; height; i++)\n{\nfor (int j = 0; j &lt; width; j++)\n{\nint average = round((image[i][j].rgbtRed + image[i][j].rgbtGreen + image[i][j].rgbtBlue) / 3.0);\nimage[i][j].rgbtRed = average;\nimage[i][j].rgbtBlue = average;\nimage[i][j].rgbtGreen = average;\n}\n}\nreturn;\n}\n\n// Reflect image horizontally\nvoid reflect(int height, int width, RGBTRIPLE image[height][width])\n{\nfor (int i = 0; i &lt; height; i++)\n{\nif (width % 2 == 1)\n{\nfor (int j = 0; j &lt; ((width + 1) / 2) - 1; j ++)\n{\nRGBTRIPLE replace[i][j];\nreplace[i][j] = image[i][j];\nimage[i][j] = image[i][width - 1 - j];\nimage[i][width - 1 - j] = replace[i][j];\n}\n}\nelse\n{\nfor (int j = 0; j &lt; width / 2; j ++)\n{\nRGBTRIPLE replace[i][j];\nreplace[i][j] = image[i][j];\nimage[i][j] = image[i][width - 1 - j];\nimage[i][width - 1 - j] = replace[i][j];\n}\n}\n}\nreturn;\n}\n\n// Blur image\nvoid blur(int height, int width, RGBTRIPLE image[height][width])\n{\nRGBTRIPLE replace[height][width];\nfor (int i = 0; i &lt; height; i++)\n{\nfor (int j = 0; j &lt; width; j++)\n{\nfloat blueSum = 0;\nfloat greenSum = 0;\nfloat redSum = 0;\nfloat counter = 0;\nfor (int x = i - 1; x &lt; i + 2; x++)\n{\nfor (int y = j - 1; y &lt; j + 2; y++)\n{\nif (x &lt; 0 || x &gt; height - 1)\n{\ncontinue;\n}\nif (y &lt; 0 || y &gt; width - 1)\n{\ncontinue;\n}\nblueSum += image[x][y].rgbtBlue;\ngreenSum += image[x][y].rgbtGreen;\nredSum += image[x][y].rgbtRed;\ncounter++;\n}\n}\nreplace[i][j].rgbtBlue = round(blueSum / counter);\nreplace[i][j].rgbtGreen = round(greenSum / counter);\nreplace[i][j].rgbtRed = round(redSum / counter);\n}\n}\nfor (int i = 0; i &lt; height; i++)\n{\nfor (int j = 0; j &lt; width; j++)\n{\nimage[i][j].rgbtBlue = replace[i][j].rgbtBlue;\nimage[i][j].rgbtGreen = replace[i][j].rgbtGreen;\nimage[i][j].rgbtRed = replace[i][j].rgbtRed;\n}\n}\nreturn;\n}\n\n// Detect edges\nvoid edges(int height, int width, RGBTRIPLE image[height][width])\n{\nRGBTRIPLE replace[height][width];\nint kernelX[3][3] = {{-1, 0, 1}, {-2, 0, 2}, {-1, 0, 1}};\nint kernelY[3][3] = {{-1, -2, -1}, {0, 0, 0}, {1, 2, 1}};\nfor (int i = 0; i &lt; height; i++)\n{\nfor (int j = 0; j &lt; width; j++)\n{\nint gxBlue = 0;\nint gyBlue = 0;\nint gxGreen = 0;\nint gyGreen = 0;\nint gxRed = 0;\nint gyRed = 0;\nfor (int x = i - 1; x &lt; i + 2; x++)\n{\nfor (int y = j - 1; y &lt; j + 2; y++)\n{\nif (x &lt; 0 || x &gt; height - 1)\n{\ncontinue;\n}\nif (y &lt; 0 || y &gt; width - 1)\n{\ncontinue;\n}\ngxBlue += image[x][y].rgbtBlue * kernelX[x - i + 1][y - j + 1];\ngyBlue += image[x][y].rgbtBlue * kernelY[x - i + 1][y - j + 1];\ngxGreen += image[x][y].rgbtGreen * kernelX[x - i + 1][y - j + 1];\ngyGreen += image[x][y].rgbtGreen * kernelY[x - i + 1][y - j + 1];\ngxRed += image[x][y].rgbtRed * kernelX[x - i + 1][y - j + 1];\ngyRed += image[x][y].rgbtRed * kernelY[x - i + 1][y - j + 1];\n}\n}\n// calculate Sobel operator\nint blue = round(sqrt(gxBlue * gxBlue + gyBlue * gyBlue));\nint green = round(sqrt(gxGreen * gxGreen + gyGreen * gyGreen));\nint red = round(sqrt(gxRed * gxRed + gyRed * gyRed));\n// cap at 255\nif (blue &gt; 255)\n{\nblue = 255;\n}\nif (green &gt; 255)\n{\ngreen = 255;\n}\nif (red &gt; 255)\n{\nred = 255;\n}\nreplace[i][j].rgbtBlue = blue;\nreplace[i][j].rgbtGreen = green;\nreplace[i][j].rgbtRed = red;\n}\n}\nfor (int i = 0; i &lt; height; i++)\n{\nfor (int j = 0; j &lt; width; j++)\n{\n// assign new values to pixels\nimage[i][j].rgbtBlue = replace[i][j].rgbtBlue;\nimage[i][j].rgbtGreen = replace[i][j].rgbtGreen;\nimage[i][j].rgbtRed = replace[i][j].rgbtRed;\n}\n}\n\n\nreturn;\n}\n</code></pre>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#week4-recover","title":"week4 recover","text":"<pre><code>#include&lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\n\n\n\nint main(int argc, char *argv[])\n{\n//Make sure that you have one command line argument\nif (argc != 2)\n{\nprintf( \"Please enter file to open.\\n\");\nreturn 1;\n}\n\n// open memory card file\nFILE *file=fopen(argv[1],\"r\");\nif(file == NULL)\n{ printf(\"not a file\\n\");\n}\n\n// set jpg count\nint jpg_found=0;\n\n// set filecount\nint filecount=0;\n\n// set buffer with 512 bytes. \nunsigned char buffer[512]; // alternate : unsigned char buffer[BUFFER_SIZE]  but you have to :#define BUFFER_SIZE 512 at top\n\n// define file for images\nFILE *img=NULL;\n\n// set filename \nchar filename[8]; // 8= 3 digits(000-049) 1 dot 3 char(jpg) 1 /0(null terminating char)\n\n// read file\nwhile(fread(buffer,512,1,file)==1) // data,size,qty,file; while this condition is satisfied\n\n// check if jpg using 1st four bytes\n{\nif (buffer[0] == 0xff &amp;&amp; buffer[1] == 0xd8 &amp;&amp; buffer[2] == 0xff &amp;&amp; (buffer[3] &amp; 0xf0) == 0xe0) // for buffer[3] condition watch walkthrough video explanation\n{\nif( jpg_found==1) // already opened a prior jpg byte then close it\n{\nfclose(img);\n}\nelse // if not then you found a jpeg so increment counter\n{ jpg_found=1;\n}\n\nsprintf(filename,\"%03i.jpg\",filecount); // print filename 000.jpg and increasing each time\nimg=fopen(filename,\"w\"); // open file for images to append/write \nfilecount++; // after each file is opened increment file count counter\n}\nif(jpg_found==1) // once found jpeg write from buffer to img file \n{\nfwrite(&amp;buffer,512,1,img);\n}\n}\nfclose(file); // close file(memory card to buffer) and img(buffer to img file)\nfclose(img);\n\n// done\nreturn 0;\n\n}\n</code></pre>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#week-2-arrays","title":"WEEK 2 Arrays","text":""},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#compiling","title":"compiling","text":"<p>Compiling source codes into machine codes is actually made up of four smaller steps:</p> <ul> <li>preprocessing</li> <li>compiling</li> <li>assembling</li> <li>linking</li> </ul> <p>preprocessing: replacing the lines that starts with a #.</p> <p>Exp. #include  will tell clang to look for that header file, because it contains content, such as prototypes of functions. <p>Compiling: taking our source code in C and converting it into assembly language</p> <p>Assembling: take the code in assemble and translate it into binary.</p> <p>Compiling: combine the compiled libraries and compiled binary of our program </p>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#debugging","title":"debugging","text":"<ol> <li>use printf</li> <li>There is a debugger in VS code: red dot or called breakpoint Debug50 ./filename</li> <li>rubber duck  talk to it</li> </ol> <pre><code>#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint get_negative_int(void);\n\nint main(void)\n{\nint i = get_negative_int();\nprintf(\"%i\\n\",i);\n}\n\nint get_negative_int(void)\n{\nint n;\ndo\n{\nn = get_int(\"waht's the number: \");\n}\nwhile (n &gt;= 0);\nreturn n;\n}\n</code></pre>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#memory","title":"memory","text":"<p>Bool: 1byte</p> <p>Char: 1byte (8bits in 1 byte), by ASCII 256 different characters can be represented</p> <p>Double: 8 bytes</p> <p>Float: 4bytes</p> <p>int: 4bytes</p> <p>Long: 8bytes</p> <p>String: variable</p> <p>RAM: random-access memory, stores zeroes and ones </p>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#arrays","title":"arrays","text":"<p>Declaration: tepe name[size]</p> <p>Float lechi[50]</p> <pre><code>bool truthtable[3] = { false, false, true};\n</code></pre> <pre><code>bool battleship[10][10];\n</code></pre> <p>\u5728C\u91cc\u9762\uff0c\u5c06\u4e00\u4e2aarray\u590d\u5236\u5230\u53e6\u4e00\u4e2a\u65f6\uff0c\u4e0d\u80fd\u76f4\u63a5\u7528=\u8d4b\u503c\uff0c\u800c\u662f\u8981\u7528loop</p> <p>\u6574\u4e2aarray\u4e0d\u662f\u4e00\u4e2avariable\uff0c\u4f46\u662farray\u91cc\u7684\u6bcf\u4e2aelement\u662f\u4e00\u4e2a\u53d8\u91cf</p> <pre><code>int foo[3] = {1, 2, 3};\nint bar[3];\n\nfor (int j = 0; j &lt; 3; j++)\n{\nbar[j] = int[j];\n}\n</code></pre> <p>Square bracket: [ ]</p> <p>It turns out we can refer to multiple variables with one name with another type called an array</p> <p>Array is 0-indexed</p> <pre><code>#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\nint n = get_int(\"How many scores? \");\n\nint scores[n];\n\nfor (int i = 0; i &lt; n; i++)\n{\nscores[i] = get_int(\"Score: \");\n}\n\nprintf(\"Average: %f\\n\", (scores[0] + scores[1] + scores[2]) / 3.0);\n} </code></pre>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#characters","title":"characters","text":"<p>We can explicitly convert chars to ints by:</p> <pre><code>printf(\"i%i%i%\\n\", (int)c1, (int)c2, (int)c3);\n</code></pre>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#strings","title":"strings","text":"<p>Strings are actually just arrays of characters </p> <pre><code>    string s = \"HI!\";\nprintf(\"%i %i %i %i\\n\", s[0], s[1], s[2], s[3]);\n</code></pre> <p>the output is 72 73 33 0</p> <p>In C, strings end with a sopecial chatacter '\\0', so 4 bytes are needed to store a string with 3 bytes.</p> <p>Eight 0s called NUL</p> <p>**a program to capitalize the letters in a string: **</p> <pre><code>#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint main()void\n{\nstring name = get_string(\"your name in lower case: \");\nfor (int i = 0, n = strlen(name); i &lt; n; i++)\n{\nif ( s[i] &gt;= 'a' &amp;&amp; s[i] &lt;= 'z')\n{\nprintf(\"%c\", s[i] - 32);\n}\nelse\n{\nprintf(\"%c\", s[i]);\n}\n}\n}\n</code></pre>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#small-tips-to-improve-the-loop","title":"small tips to improve the loop","text":"<p>Use:</p> <pre><code>for (int i = 0, n = strlen(s); i &lt; n; i++)\n</code></pre> <p>Rather than:</p> <pre><code>for (int i = 0; i &lt; strlen(s); i++)\n</code></pre>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#command-line-arguments","title":"command-line arguments","text":"<p>argc: argument count</p> <p>argv: argument vector (is an array of the arguments)</p> <pre><code>#include &lt;stdio.h&gt;\nint main(int argc, string argv[])\n{\nprintf(\"hello, %s\\n\", argv[1]);\n}\n</code></pre> <p>and then in terminal:</p> <pre><code>make filename\n./filename Lechi\nhello, Lechi\n</code></pre> <p>\u6ce8\u610f\uff1a</p> <ol> <li>\u4e0d\u662fargv[0]</li> <li>argc\u662f\u4f20\u9012\u7ed9\u5e94\u7528\u7a0b\u5e8f\u7684\u53c2\u6570\u4e2a\u6570\uff0cargv\u662f\u4f20\u9012\u7ed9\u5e94\u7528\u7a0b\u5e8f\u7684\u53c2\u6570\uff0c\u4e14\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\u7a0b\u5e8f\u540d\u3002</li> </ol> <pre><code>#include &lt;stdio.h&gt;\n\nint main(int argc, string argv[])\n{\nif (argc == 2)\n{\nprintf(\"hello, %s\\n\", argv[1]);\n}\nelse\n{\nprint(\"hello, world!\");\n}\n}\n</code></pre> <p>\u4ee5\u4e0a\u7a0b\u5e8f\u5224\u65ad\u662f\u5426\u4e3a\u4e00\u4e2a\u8f93\u5165\u53c2\u6570\u65f6\uff0cargc\u9700\u8981\u548c2\u6bd4\u8f83</p>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#exit-status","title":"Exit status","text":"<p>Return non-zero value from main to exit from the program</p> <p>Exp. return 1;</p> <pre><code>#include &lt;stdio.h&gt;\n\nint main(int argc, string argv[])\n{\nif (argc != 2)\n{\nprintf(\"sorry, something went wrong!\");\nreturn 1;\n}\nelse\n{\nprint(\"hello, %s\\n\", argv[1]);\nreturn 0; }\n}\n</code></pre> <p>Error code \u5c31\u662fexit status</p>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#functions","title":"functions","text":"<p>Function declarations</p> <p>Return-type function-name(argument-list)</p> <pre><code>// includes\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\n// declare function prototype\nint add_two_ints(int a, int b);\n\nint main(void)\n{\n// ask user for input\nint x = get_int(\"Give me an integer: \");\nint y = get_int(\"Give me another integer: \");\n\n// add the two numbers together via a function call\nint z = add_two_ints(x, y);\n\n// output the result\nprintf(\"The sum of %i and %i is %i!\\n\", x, y, z);\n\n}\n\nint add_two_ints(int a, int b)\n{\nint sum = a + b;\nreturn sum;\n}\n</code></pre> <p>Valid_triangle</p> <pre><code>bool valid_triangle(float a, float b, float c);\n\nbool valid_triangle(float a, float b, float c)\n{\n// check for all positive sides\nif (a &lt;= 0 || b &lt;= 0 || c &lt;= 0)\n{\nreturn false;\n}\n// check that sum of any two sides greater than the third\nif ((a + b &lt;= c) || (a + c &lt;= b) || (b + C &lt;= a))\n{\nreturn false;\n}\n// if the sides passed both two tests, then the triangle is valid\nreturn true;\n}\n</code></pre>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#variable-scope","title":"variable scope","text":"<p>local variable </p> <p>global variable</p>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#compare-string-in-c","title":"compare string in C","text":"<p>use strcmp()</p> <pre><code>if (strcmp(phrase, password) == 0)\n</code></pre>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#pass-by-value","title":"pass by value","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;cs50.h&gt;\n\nint set_int(int x);\n\nint main(void)\n{\nint a = 5;\na = set_int(a);\nprintf(\"%i\\n\", a);\n}\n\nint set_int(int x)\n{\nx = 20;\nreturn x;\n}\n</code></pre> <p>\u8f93\u51fa\u7684\u662f20</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;cs50.h&gt;\n\nvoid set_int(int x);\n\nint main(void)\n{\nint a = 5;\nset_int(a);\nprintf(\"%i\\n\", a);\n}\n\nvoid set_int(int x)\n{\nx = 20;\n}\n</code></pre> <p>\u8f93\u51fa\u65f65</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;cs50.h&gt;\n\nvoid set_array(int x[4]);\n\nint main(void)\n{\nint number[4] = {1, 2, 3, 4};\nset_array(number);\nprintf(\"%i\\n\", number[0]);\n}\n\nvoid set_array(int x[4])\n{\nx[0] = 20;\n}\n</code></pre> <p>\u8f93\u51fa\u4e3a20\uff0carray\u65f6pass by reference\uff0cint\u662fpass by value</p>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#_2","title":"\u4e24\u79cd\u4e0d\u540c\u7684\u5c06\u5b57\u6bcd\u8f6c\u6362\u6210\u5927\u5199\u7684\u65b9\u6cd5","text":"<ol> <li>\u53ea\u8f93\u51fa\u5927\u5199\uff0c\u4f46\u662f\u4e0d\u6539\u53d8\u539f\u6765\u7684\u5b57\u7b26\u4e32\uff08\u6709\u4e24\u79cd\u8f93\u51fa\u65b9\u5f0f\uff09</li> </ol> <pre><code>#include &lt;ctype.h&gt;\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\nstring s = get_string(\"Before: \");\nint n = strlen(s);\nfor (int i = 0; i &lt; n; i++)\n{\n// \u7b2c\u4e00\u79cd\u8f93\u51fa\u65b9\u5f0f\nprintf(\"%c\", toupper(s[i]));\n// \u7b2c\u4e8c\u79cd\u8f93\u51fa\u65b9\u5f0f\nputchar(toupper(s[i]));\n}\n}\n</code></pre> <ol> <li>\u76f4\u63a5\u5c06\u6574\u4e2a\u5b57\u7b26\u4e32\u53d8\u6210\u5927\u5199\uff08\u4e5f\u662f\u4e24\u79cd\u64cd\u4f5c\u65b9\u5f0f\uff09</li> </ol> <pre><code>#include &lt;ctype.h&gt;\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\nstring s = get_string(\"Before: \");\nint n = strlen(s);\nfor (int i = 0; i &lt; n; i++)\n{\n// \u76f4\u63a5\u4f7f\u7528ascii(\u8fd9\u79cd\u65b9\u6cd5\u7684\u4e0d\u8db3\u4e4b\u5904\u662f\u9700\u8981\u4f7f\u7528for\u8bed\u53e5\u6765\u907f\u514d\u975e\u5c0f\u5199\u7684\u60c5\u51b5\uff0c\u6bd4\u5982\u5927\u5199\u7684E\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u4f1a\u53d8\u6210%)\ns[i] = s[i] - 32;\n// \u8c03\u7528toupper()\ns[i] = toupper(s[i]);\n}\nprintf(\"%s\", s);\n}\n</code></pre>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#week-3-algorithms","title":"WEEK 3 Algorithms","text":""},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#searching","title":"searching","text":"<p>Focus on algorithms that solve problems with arrays</p> <p>Efficiency - running time</p> <p>Computer scientists tend to describe running time with big O notation, which we can think of as \u201con the order of\u201d something, as though we want to convey an idea of running time and not an exact number of milliseconds or steps.</p> <p>y = n x: Describe them both as having big O of n or on the order of n running time</p> <p>y = lgx: it takes \"big O of logn\" steps (The base of the logarithm, 2, is also removed since it\u2019s a constant factor.</p> <p>common running times are as followed: $$ O(n^2) \\ O(n\\log_nn) \\ O(n) \\ O(log_nn) \\ O(1) \\ $$ Computer scientist also use big omega notation $$ \\omega $$ Big Omega notation describes the lower bound of number of steps for our algorithm, or how few steps it might take, in  the best case. Big O, on the order of, is the upper bound of number of steps, or how many steps it might take, in the worst case. $$ \\omega(n^2) \\ \\omega(n\\log_nn) \\ \\omega(n) \\ \\omega(log_nn) \\ \\omega(1) \\ $$ big Theta, which we use to describe running times of algorithms if the upper bound and lower bound is the same. $$ \\theta(n^2) \\ \\theta(n\\log_nn) \\ \\theta(n) \\ \\theta(log_nn) \\ \\theta(1) \\ $$</p> <p>if the running time is O(1), a constant of steps in a program is required no matter how big the problem is.</p>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#linear-search-binary-search","title":"linear search, binary search","text":"<p>Linear search: \u4ece\u5de6\u5230\u53f3\u4e00\u4e2a\u4e2a\u627e</p> <pre><code>For i from 0 to n-1\n    If number behind doors[i]\n        Return true\nReturn false\n</code></pre> <p>The big O running time is O(n)</p> <p>the lower bound, big Omega would be omega(1)</p> <p>If the numbers are sorted, we can use binary search</p> <pre><code>If no doors\n    Return false\nIf number behind doors[middle]\n    Return true\nElse if number &lt; doors[middle]\n    Search doors[0] through doors[middle - 1]\nElse if number &gt; doors[middle]\n    Search doors [middle + 1] through doors[n - 1]\n</code></pre> <p>the big O running time is O(log n)</p> <p>the lower bound, big Omega would be omega(1)</p> <p>\u5982\u679c\u8981\u7528\u4e8c\u5206\u641c\u7d22\u7684\u8bdd\uff0c\u5fc5\u987b\u8981\u5148\u5bf9\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f</p>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#searching-with-code","title":"searching with code","text":"<p>\u5728c\u91cc\u9762\u4e0d\u80fd\u76f4\u63a5\u6bd4\u8f83\u5b57\u7b26\u4e32\u662f\u5426\u76f8\u540c\uff0c\u6bd4\u5982\u4f7f\u7528(name[1] == \"Charlie\")</p> <p>\u4f46\u662f\u53ef\u4ee5\u4f7f\u7528<code>strcmp</code>\u6765\u6bd4\u8f83\u5b57\u7b26\u4e32</p> <p><code>strcmp</code> returns a negative value if the first string comes before the second string, <code>0</code> if the strings are the same, and a positive value if the first string comes after the second string.</p> <p>\u5982\u679c\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32\u5728\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u4e32\u4e4b\u524d\uff0c' strcmp '\u8fd4\u56de\u8d1f\u503c\uff0c\u5982\u679c\u4e24\u4e2a\u5b57\u7b26\u4e32\u76f8\u540c\uff0c\u5219\u8fd4\u56de' 0 '\uff0c\u5982\u679c\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32\u5728\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u4e32\u4e4b\u540e\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u6b63\u503c\u3002</p> <p>\u5f53\u5b57\u7b26\u4e32\u76f8\u540c\u65f6\u8fd4\u56de\u627e\u5230\uff1a</p> <pre><code>if (strcmp(names[i], \"Ron\") == 0)\n{\nprintf(\"Found\\n\");\nreturn 0;\n}\n</code></pre> <p>\u6216\u8005</p> <pre><code>if (!strcmp(names[i], \"Ron\"))\n{\nprintf(\"Found\\n\");\nreturn 0;\n}\n</code></pre>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#structs-data-structure","title":"structs (data structure)","text":"<p>a not well-designed way to maintain both names and their phone numbers in 2 arrays</p> <pre><code>string names[] = {\"Carter\", \"David\"};\nstring numbers[] = {\"+1-617-495-1000\", \"+1-949-468-2750\"};\n</code></pre> <p>We can create a struct with a data type person that includes both names and phone numbers. define our own data structure with <code>typedef struct</code></p> <pre><code>typedef struct\n{\nstring name;\nstring number;\n}\nperson;\n</code></pre> <p>Exp. Phonebook</p> <pre><code>#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\ntypedef struct\n{\nstring name;\nstring number;\n}\nperson;\n\nint main(void)\n{\nperson people[2];\n\npeople[0].name = \"Carter\";\npeople[0].number = \"+1-617-495-1000\";\n\npeople[1].name = \"David\";\npeople[1].number = \"+1-949-468-2750\";\n\nfor (int i = 0; i &lt; 2; i++)\n{\nif (strcmp(people[i].name, \"David\") == 0)\n{\nprintf(\"Found %s\\n\", people[i].number);\nreturn 0;\n}\n}\nprintf(\"Not found\\n\");\nreturn 1;\n}\n</code></pre> <p>\u5c01\u88c5\uff1aencapulation is idea that related data is grouped together, and here we\u2019ve encapsulated two pieces of information, <code>name</code> and <code>number</code> into the same data structure.</p>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#sorting","title":"sorting","text":"<p>Taking in an unsorted list of numbers as an imput and produce an output of a sorted list of numbers</p>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#selection-sort-demonstration","title":"selection sort demonstration","text":"<p>\u6bcf\u6b21\u6311\u51falist\u91cc\u6700\u5c0f\u7684\u90a3\u4e2a\u6570\u7136\u540e\u548c\u7b2c\u4e00\u4f4d\u7684\u6570\u8fdb\u884c\u4ea4\u6362</p> <pre><code>For i from 0 to n\u20131\n    Find smallest number between numbers[i] and numbers[n-1]\n    Swap smallest number with numbers[i]\n</code></pre> <p>\u7b2c\u4e00\u6b65\u662f\u627e\u51fan\u4e2a\u6570\u91cc\u7684\u6700\u5c0f\u503c\uff0c\u7b2c\u4e8c\u6b65\u662fn-1</p> <p>\u6240\u4ee5\u603b\u7684\u662fn+(n-1)+(n-2)+\u2026(1)</p> <p>\u8ba1\u7b97\u4e3an(n+1)/2=n^2/2+n/2\uff0c\u5f53\u6570\u636e\u65e0\u9650\u5927\u65f6\uff0cupper bound of running time\u662fO(n^2)</p> <p>\u6700\u5c0f\u6b65\u9aa4\u7684\u60c5\u51b5\u662f\u6574\u4e2alist\u5c31\u662f\u6309\u7167\u4ece\u5c0f\u5230\u5927\u6392\u5217\u7684\uff0c\u4f46\u662f\u8fd9\u4e2a\u7b97\u6cd5\u672c\u8eab\u4e0d\u4f1a\u56e0\u4e3a\u4ece\u5c0f\u5230\u5927\u6392\u5217\u800c\u81ea\u52a8\u9000\u51fa\uff0c\u4ecd\u7136\u4f1a\u628a\u6240\u6709\u8fc7\u7a0b\u8d70\u4e00\u904d\uff0c\u6240\u4ee5it has the lower bound of running time of \\omega(n^2)</p>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#bubble-sort-demonstration","title":"bubble sort demonstration","text":"<p>\u6bcf\u6b21\u4ee5\u76f8\u90bb\u7684\u8fde\u4e2a\u6570\u4e3a\u5355\u4f4d\uff0c\u5927\u5c0f\u6392\u5e8f\uff0c\u7136\u540e\u4e00\u904d\u4e00\u904d\u6392\u76f4\u5230\u7ed3\u675f</p> <p>\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u4ee552741630\uff08\u4e00\u51718\u4e2a\u6570\uff09\u4e3a\u4f8b\uff0c\u7b2c\u4e00\u6b21\u4e24\u4e24\u6bd4\u8f83\u6392\u5e8f\u540e\uff0c\u6700\u5927\u503c7\u5fc5\u7136\u4f1a\u5230\u8fbe\u961f\u5c3e\uff1b\u4f46\u662f\u7b2c\u4e8c\u6b21\u64cd\u4f5c\u64cd\u4f5c\u4ecd\u7136\u4f1a\u5bf9\u6574\u4e2alist\u64cd\u4f5c\u4e00\u904d\uff0c\u5305\u62ec\u6700\u540e\u4e00\u4f4d\u76847</p> <pre><code>Repeat n-1 times\n    For i from 0 to n\u20132\n        If numbers[i] and numbers[i+1] out of order\n            Swap them\n     If no waps\n     Quit\n</code></pre> <p>\u4e00\u5171\u9700\u8981n-1\u6b21\uff0c\u6bcf\u6b21n-1\u6b21\u6bd4\u8f83</p> <p>\u4e00\u5171\u662fn^2-2n+1</p> <p>upper bound of running time\u662fO(n^2)</p> <p>The lower bound \u5c31\u662f\\omega(n)</p>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#recursion","title":"recursion","text":"<p>\u5c31\u662ffunction\u81ea\u5df1\u8c03\u7528\u81ea\u5df1</p> <p>\u539f\u6765\u7684\u5199\u65b9\u5757</p> <pre><code>#\n##\n###\n####\n</code></pre> <p>\u662f\u8fd9\u6837</p> <pre><code>#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nvoid draw(int n);\n\nint main(void)\n{\nint height = get_int(\"Height: \");\n\ndraw(height);\n}\n\nvoid draw(int n)\n{\nfor (int i = 0; i &lt; n; i++)\n{\nfor (int j = 0; j &lt; i + 1; j++)\n{\nprintf(\"#\");\n}\nprintf(\"\\n\");\n}\n}\n</code></pre> <p>\u8fd0\u7528\u9012\u5f52\uff08\u5c06n\u5c42\u4e1c\u897f\u770b\u6210\uff0cn-1\u5c42\u52a0\u4e0an\u4e2a#\uff09\uff0c\u81ea\u5df1\u8c03\u7528\u81ea\u5df1\uff08\u6574\u4e2adraw\uff08\uff09\u90e8\u5206\u662f\u4ece\u4e0b\u5f80\u4e0a\u5199\u7684\uff09</p> <pre><code>#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nvoid draw(int n);\n\nint main(void)\n{\nint height = get_int(\"Height: \");\n\ndraw(height);\n}\n\nvoid draw(int n)\n{\nif (n &lt;= 0)\n{\nreturn;\n}\ndraw(n-1);\nfor (int i = 0; i &lt; n; i++)\n{\nprintf(\"#\");\n}\nprintf(\"\\n\");\n}\n</code></pre> <p>\u5728\u6bd4\u5982\u9636\u4e58\uff1a\u5199\u4e00\u4e2afactorial function\u6765\u5b9e\u73b0\u9636\u4e58, \u5373\uff1a</p> <p>fact(1)=1</p> <p>Fact(2)=1*2</p> <p>Fact(3)=1* 2 *3</p> <p>Fact(n)=n*fact(n-1)</p> <pre><code>int fact(int n);\nint fact(int n)\n{\n// base case\nif (n == 1)\n{\nreturn 1;\n}\n//recursive case\nelse\n{\nreturn n * fact(n-1);\n}\n}\n</code></pre> <p>\u518d\u518d\u6bd4\u5982\u6590\u6ce2\u90a3\u5951\u6570\u5217\uff1a\u5199\u4e2aFibonacci number sequence</p> <pre><code>int fibo(int n);\nint fibo(int n)\n{\nif (n ==1)\nreturn 0;\n\nelse if (n == 2)\nreturn 1;\n\nelse\nreturn fibo(n-1) + fibo(n-2)\n}\n</code></pre> <p>\u518d\u6bd4\u5982\uff1aCollatz conjecture</p> <p></p> <pre><code>int collatz(int n);\nint collatz(int n)\n{\nif (n == 1)\nreturn 0;\n\nelse if ((n % 2) == 0)\nreturn collatz(n = n/2) + 1;\n\nelse\nreturn collatz(3*n + 1) + 1;\n\n}\n</code></pre>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#merge-sort","title":"merge sort","text":"<p>Merge sort\u662f\u5c06\u9012\u5f52\u601d\u60f3\u8fd0\u7528\u5728sort\u91cc</p> <pre><code>If only one number\n  Quit\nElse\n    Sort left half of number\n    Sort right half of number\n    Merge sorted halves\n</code></pre> <p>the upper bound of merge sort is O(nlogn)</p> <p>the lower bound is also \\omega(nlogn)</p> <p>\u56de\u5fc6cs50\u91cc\u516b\u4e2a\u6570\u4ece\u6700\u4e0a\u9762\u4e00\u5c42\u6446\u5230\u6700\u4e0b\u9762\u4e00\u5c42\u8981\u7ecf\u53863\u6b21\u4e0b\u964d\uff08log2 8\uff09\uff0c\u6bcf\u6b21\u4e0b\u964d\u8fd98\u4e2a\u6570\u6bcf\u4e2a\u90fd\u8981\u6bd4\u8f83\u7136\u540e\u653e\u5230\u4e0b\u4e00\u5c42</p> <p>\u6240\u4ee5\u662f8log8\uff0c\u5373n logn</p>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#week-4","title":"WEEK 4","text":""},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#pixels","title":"pixels","text":"<ul> <li>white, with R: 255, G: 255, and B: 255, and #FFFFFF</li> <li>red, with R: 255, G: 0, and B: 0, and #FF0000</li> <li>green, with R: 0, G: 255, and B: 0, and #00FF00</li> <li>blue, with R: 0, G: 0, and B: 255, and #0000FF</li> <li>black, #000000</li> </ul>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#hexadecimal","title":"hexadecimal (\u5341\u516d\u8fdb\u5236)","text":"<pre><code>0 1 2 3 4 5 6 7 8 9 A B C D E F\n</code></pre> <p>helps us humans represent larger numeric values with fewer digits needed.</p>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#addresses-pointers","title":"addresses, pointers","text":"<ul> <li> <p>A pointer is a variable that stores an address in memory, where some other variable might be stored.</p> </li> <li> <p>The <code>&amp;</code> operator can be used to get the address of some variable, as with <code>&amp;n</code>. And the <code>*</code> operator declares a variable as a pointer, as with <code>int *p</code>, indicating that we have a variable called <code>p</code> that points to an <code>int</code>. So, to store the address of a variable <code>n</code> into a pointer <code>p</code>, we would write:</p> </li> <li> <p>&amp;\u5728\u544a\u8bc9\u7535\u8111\u8fd9\u4e2a\u503c\u4e0d\u662f\u4e00\u4e2aint\u800c\u662f\u67d0\u4e2a\u53d8\u91cf\u7684\u5730\u5740</p> </li> </ul> <pre><code>int *p = &amp;n;\n</code></pre> <pre><code>#include &lt;stdio.h&gt;\n\nint main(void)\n{\nint n = 50;\nint *p = &amp;n;\nprintf(\"%p\\n\", p);  // 0x7ffda0a4767c\nprintf(\"%i\\n\", *p);  // 50\n}\n\n$ ./address\n0x7ffda0a4767c\n50\n</code></pre> <p>segmentation faults, where we\u2019ve tried to read or write to memory we don\u2019t have permission to.</p>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#strings_1","title":"strings","text":"<p>We can declare a string with <code>string s = \"HI!\";</code>, which will be stored one character at a time in memory. And we can access each character with <code>s[0]</code>, <code>s[1]</code>, <code>s[2]</code>, and <code>s[3]</code></p> <p>s<code>is a variable of type</code>string`, which is a pointer to a character.</p> <pre><code>#include &lt;stdio.h&gt;\n\nint main(void)\n{\nchar *s = \"HI!\";\nprintf(\"%s\\n\", s);\n}\n</code></pre> <p>to see the addresses of characters in a string</p> <pre><code>#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\nstring s = \"HI!\";\nchar *p = &amp;s[0];\nprintf(\"%p\\n\", p);\nprintf(\"%p\\n\", s);\n}\n</code></pre>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#pointer-arithmetic","title":"pointer arithmetic","text":"<pre><code>#include &lt;stdio.h&gt;\n\nint main(void)\n{\nchar *s = \"Hi!\";\nprintf(\"%c\\n\", *s);\nprintf(\"%c\\n\", *\uff08s + 1\uff09);\nprintf(\"%c\\n\", *\uff08s + 2\uff09);\n\n// \u6216\u8005\u7b49\u6548\u4ee5\u4e0b\nchar *s = \"HI!\";\nprintf(\"%c\\n\", s[0]);\nprintf(\"%c\\n\", s[1]);\nprintf(\"%c\\n\", s[2]);\n}\n</code></pre> <p><code>*s</code> goes to the address stored in <code>s</code>, and <code>*(s + 1)</code> goes to the location in memory with the next character, an address that is one byte higher.</p> <p><code>s[1]</code> is syntactic sugar, like an abstraction for <code>*(s + 1)</code>, equivalent in function but more human-friendly to read and write.</p>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#pointers","title":"pointers","text":"<p>pointers provide an alternative way to pass data between functions</p> <ul> <li>when we pass data by value, we only pass a copy of that data</li> </ul> <p>if we use pointers instead, we have power to pass the actual variable itself</p> data type size int 4 char 1 float 4 double 8 long long 8 string ? <p>&amp; is used to extract the exact address of an already existing variable</p> <p>array\u7684\u540d\u79f0\u672c\u8eab\u5c31\u662fpointer  </p> <p>segmentation fault: go to the NULL place </p> <p>dereferenfce: int* p \u5c31\u662f\u53bb\u5230p\u7684\u5730\u5740\uff0c\u7136\u540e\u627e\u5230\u5bf9\u5e94\u7684p\u503c</p> <p>if i want to identify multiple pointers in one line, we can use </p> <pre><code>int* pa, *pb, *pc;\n</code></pre>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#compare-and-copy","title":"compare and copy","text":"<pre><code>#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\nchar *s = get_string(\"s: \");\nchar *t = get_string(\"t: \");\n\nif (s == t)\n{\nprintf(\"Same\\n\");\n}\nelse\n{\nprintf(\"Different\\n\");\n}\n}\n\n\n$ make compare\n$ ./compare\ns: HI!\nt: BYE!\nDifferent\n$ ./compare\ns: HI!\nt: HI!\nDifferent\n</code></pre> <ul> <li>Even when our inputs are the same, we see \u201cDifferent\u201d printed.</li> <li>Each \u201cstring\u201d is a pointer, <code>char *</code>, to a different location in memory, where the first character of each string is stored. So even if the characters in the string are the same, this will always print \u201cDifferent\u201d.</li> </ul>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#memory-allocation","title":"memory allocation","text":"<ul> <li>We\u2019ll need to use a new function, <code>malloc</code>, to allocate some number of bytes in memory. And we\u2019ll use <code>free</code> to mark memory as usable when we\u2019re done with it, so the operating system can do something else with it.</li> <li>Our computers might slow down if a program we\u2019re running has a bug where it allocates more and more memory but never frees it. The operating system will take longer and longer to find enough available memory for our program.</li> </ul> <pre><code>#include &lt;cs50.h&gt;\n#include &lt;ctype.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\nchar *s = get_string(\"s: \");\n\nchar *t = malloc(strlen(s) + 1);\n\nfor (int i = 0, n = strlen(s) + 1; i &lt; n; i++)\n{\nt[i] = s[i];\n}\n\nt[0] = toupper(t[0]);\n\nprintf(\"s: %s\\n\", s);\nprintf(\"t: %s\\n\", t);\n}\n</code></pre> <p>\u5feb\u6377\u5b57\u7b26\u4e32\u66ff\u6362</p> <pre><code>#include &lt;cs50.h&gt;\n#include &lt;ctype.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\nchar *s = get_string(\"s: \");\n\nchar *t = malloc(strlen(s) + 1);\n\nstrcpy(t, s);\n\nt[0] = toupper(t[0]);\n\nprintf(\"s: %s\\n\", s);\nprintf(\"t: %s\\n\", t);\n\nfree(t);\n}\n</code></pre> <p>We can add some error-checking to our program:</p> <pre><code>#include &lt;cs50.h&gt;\n#include &lt;ctype.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\nchar *s = get_string(\"s: \");\n\nchar *t = malloc(strlen(s) + 1);\nif (t == NULL)\n{\nreturn 1;\n}\n\nstrcpy(t, s);\n\nif (strlen(t) &gt; 0)\n{\nt[0] = toupper(t[0]);\n}\n\nprintf(\"s: %s\\n\", s);\nprintf(\"t: %s\\n\", t);\n\nfree(t);\n}\n</code></pre> <ul> <li>If our computer is out of memory, <code>malloc</code> will return <code>NULL</code>, the null pointer, or a special value of all <code>0</code> bits that indicates there isn\u2019t an address to point to. So we should check for that case, and exit if <code>t</code> is <code>NULL</code>.</li> <li>We should also check that <code>t</code> has a length, before trying to capitalize the first character.</li> </ul>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#valgrind","title":"valgrind \u5185\u5b58\u6cc4\u9732","text":"<ul> <li><code>valgrind</code> is a command-line tool that we can use to run our program and see if it has any memory-related issues.</li> <li>We\u2019ll run <code>valgrind ./filename</code> after compiling, and we\u2019ll see a lot of output</li> </ul> <pre><code>int *x = malloc(3 * sizeof(int));\n</code></pre>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#garbage-values","title":"garbage values","text":"<pre><code>int main(void)\n{   int *x;  int *y; x = malloc(sizeof(int));                    *x = 42;\n*y = 13;    y = x;        *y = 13;   }\n</code></pre> <ul> <li>In the first two lines, we declare two pointers. Then, we allocate memory for <code>x</code>, but not <code>y</code>, so we can assign a value to the memory <code>x</code> is pointing to with <code>*x = 42;</code>. But <code>*y = 13;</code> is problematic, since we haven\u2019t allocated any memory for <code>y</code>, and the garbage value there points to some area in memory we likely don\u2019t have access to.</li> <li>We can write <code>y = x;</code> so that <code>y</code> points to the same allocated memory as <code>x</code>, and use <code>*y = 13;</code> to set the value there.</li> </ul>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#define-custom-types","title":"define custom types","text":"<p>typedef  ; <pre><code>struct car\n{\nint year;\nchar model[10];\nchar plate[7];\nint odometer;\ndouble engine_size;\n\n}\n\ntypedef struct car car_t;\n\nor we can use:\n\ntypedef struct car\n{\nint year;\nchar model[10];\nchar plate[7];\nint odometer;\ndouble engine_size;\n}\ncar_t;\n</code></pre>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#dynamic-memory-allocation","title":"dynamic memory allocation","text":"<p>text</p> <p>initialized data</p> <p>uninitialized data</p> <p>heap</p> <p>stack</p> <p>environment variables</p> <p>statically obtain an integer</p> <p>int x;</p> <p>dynamically obtain an intetger</p> <p>int *px = malloc(sizeof(int));</p> <pre><code>// get an integer from the user\nint x = GetInt();\n// array of floats on the stack\nfloat stack_array[x];\n// array of floats on the heap\nfloat* heap_array = malloc(x * sizeof (float));\n</code></pre>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#free-memory","title":"free memory","text":"<p>every block of memory that you malloc(), should be free()</p>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#swap","title":"swap","text":"<pre><code>void swap(int *a, int *b)\n{\nint tmp = *a;\n*a = *b;\n*b = tmp;\n}\n</code></pre> <pre><code>#include &lt;stdio.h&gt;\n\nvoid swap(int *a, int *b);\n\nint main(void)\n{\nint x = 1;\nint y = 2;\n\nprintf(\"x is %i, y is %i\\n\", x, y);\nswap(&amp;x, &amp;y);\nprintf(\"x is %i, y is %i\\n\", x, y);\n}\n\nvoid swap(int *a, int *b)\n{\nint tmp = *a;\n*a = *b;\n*b = tmp;\n}\n</code></pre> <p>With <code>&amp;x</code>, we can get the address of <code>x</code> to pass in.</p> <ul> <li>The machine code section is our compiled program\u2019s binary code. When we run our program, that code is loaded into memory.</li> <li>Just below, or in the next part of memory, are global variables we declared in our program.</li> <li>The heap section is an empty area from where <code>malloc</code> can get free memory for our program to use. As we call <code>malloc</code>, we start allocating memory from the top down.</li> <li>The stack section is used by functions and local variables in our program as they are called, and grows upwards.</li> <li>If we call <code>malloc</code> for too much memory, we will have a heap overflow, since we end up going past our heap. Or, if we call too many functions without returning from them, we will have a stack overflow, where our stack has too much memory allocated as well.</li> </ul>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#scnaf","title":"scnaf","text":"<pre><code>#include &lt;stdio.h&gt;\n\nint main(void)\n{\nint x;\nprintf(\"x: \");\nscanf(\"%i\", &amp;x);\nprintf(\"x: %i\\n\", x);\n}\n</code></pre> <pre><code>#include &lt;stdio.h&gt;\n\nint main(void)\n{\nchar *s;\nprintf(\"s: \");\nscanf(\"%s\", s);\nprintf(\"s: %s\\n\", s);\n}\n</code></pre> <p>We can call <code>malloc</code> to allocate memory:</p> <pre><code>#include &lt;stdio.h&gt;\n\nint main(void)\n{\nchar *s = malloc(4);\nprintf(\"s: \");\nscanf(\"%s\", s);\nprintf(\"s: %s\\n\", s);\n}\n</code></pre>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#files","title":"files","text":"<pre><code>// Saves names and numbers to a CSV file\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\n// Open CSV file\nFILE *file = fopen(\"phonebook.csv\", \"a\");\nif (!file)\n{\nreturn 1;\n}\n\n// Get name and number\nstring name = get_string(\"Name: \");\nstring number = get_string(\"Number: \");\n\n// Print to file\nfprintf(file, \"%s,%s\\n\", name, number);\n\n// Close file\nfclose(file);\n}\n</code></pre> <ul> <li><code>fopen</code> is a new function we can use to open a file with a new type, <code>FILE</code>.</li> <li>We can use <code>fprintf</code> to write to a file.</li> </ul> <p>the file manipulation functions all live in stdio.h</p> <p>fopen() FILE* ptr = fopen(, ); <p>FILE* ptr1 = fopen(, ); <p>read append</p> <p>fclose()</p> <p>fclose(ptr1)</p> <p>fgetc() file get a character</p> <p>char ch = fgetc() <p>read all the characters fron a file:</p> <pre><code>char ch;\nwhile ((ch = fgetc(ptr)) != EOF);\nprintf(\"%c\", ch);\n</code></pre> <p>EOF end of file</p> <p>fputc()</p> <p>fread()</p> <p>fread(, , , );  <pre><code>int arr[10];\nfread(arr, sizeof(int), 10, ptr);\n\ndouble* arr2 = malloc(sizeof(double) * 80);\nfread(arr2, sizeof(double), 80, ptr);\n\nchar c;\nfread(&amp;c, sizeof(char), 1, ptr); // \u7b2c\u4e00\u4e2a\u7a7a\u5fc5\u987b\u6307\u5411\u4e00\u4e2a\u5730\u5740(pointed by &lt;buffer&gt;)\n</code></pre> <p>fwrite()</p> <p>fwrite(, , , );  <pre><code>int arr[10];\n\nfwrite(arr, sizeof(int), 10, ptr);\n</code></pre>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#jpeg","title":"jpeg","text":"<p>Let\u2019s look at a program that opens a file and tells us if it\u2019s a JPEG file, a particular format for image files, with <code>jpeg.c</code>:</p> <pre><code>// Detects if a file is a JPEG\n\n#include &lt;stdint.h&gt;\n#include &lt;stdio.h&gt;\n\ntypedef uint8_t BYTE;\n\nint main(int argc, char *argv[])\n{\n// Check usage\nif (argc != 2)\n{\nreturn 1;\n}\n\n// Open file\nFILE *file = fopen(argv[1], \"r\");\nif (!file)\n{\nreturn 1;\n}\n\n// Read first three bytes\nBYTE bytes[3];\nfread(bytes, sizeof(BYTE), 3, file);\n\n// Check first three bytes\nif (bytes[0] == 0xff &amp;&amp; bytes[1] == 0xd8 &amp;&amp; bytes[2] == 0xff)\n{\nprintf(\"Yes, possibly\\n\");\n}\nelse\n{\nprintf(\"No\\n\");\n}\n\n// Close file\nfclose(file);\n}\n\n\n\n$ make jpeg\n$ ./jpeg .src4/lecture.jpg\nYes, possibly\n</code></pre> <p>We\u2019ll learn more about these in this week\u2019s problem set as well, and even implement our own version of image filters, like one that only shows the color red:</p> <pre><code>#include \"helpers.h\"\n\n// Only let red through\nvoid filter(int height, int width, RGBTRIPLE image[height][width])\n{\n// Loop over all pixels\nfor (int i = 0; i &lt; height; i++)\n{\nfor (int j = 0; j &lt; width; j++)\n{\nimage[i][j].rgbtBlue = 0x00;\nimage[i][j].rgbtGreen = 0x00;\n}\n}\n}\n\nmake filter\n./filter hidden.bmp newfilename.bmp\ncode newfilename.bmp\n</code></pre>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#week-5","title":"WEEK 5","text":""},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#linked-lists","title":"linked lists \u94fe\u8868","text":"<pre><code>typedef struct node\n{\nint number;\nstruct node *next;\n}\nnode;\n\nnode *list = NULL;\nnode *n = malloc(sizeof(node));\n\nif (n != NULL)\n{\n(*n).number = 1;\n}\n\nif (n != NULL)\n{\nn-&gt;number = 1;\nn-&gt;next = NULL;\n}\n\nlist = n; </code></pre> <ul> <li>We start this struct with <code>typedef struct node</code> so that we can refer to a <code>struct node</code> inside our struct.</li> <li>Then, we\u2019ll have an <code>int</code> called <code>number</code>, for the value we want to store, and then a pointer to the next node with <code>struct node</code>. (We haven\u2019t fully defined <code>node</code> yet, so the compiler needs to know it\u2019s a custom struct still.)</li> <li>Finally, <code>node</code> at the end lets us use just <code>node</code> in the rest of our program.</li> </ul>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#grwoing-arrays","title":"grwoing arrays","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main(void)\n{\nint *list = malloc(3 * sizeof(int));\nif (list == NULL)\n{\nreturn 1;\n}\n\nlist[0] = 1;\nlist[1] = 2;\nlist[2] = 3;\n}\n</code></pre> <p><code>if (list = NULL)</code> \u8fd9\u53e5\u662f\u4e3a\u4e86\u9632\u6b62\u5728memory allocation\u7684\u65f6\u5019\u4ea7\u751f\u9519\u8bef\u6ca1\u6709\u6210\u529f\u4e3alist \u4ea7\u751f\u7a7a\u95f4\uff0c\u56e0\u4e3amalloc\u529f\u80fd\u4f1afail</p> <p>\u8fd9\u4e2a\u65b9\u6cd5\u548c\u4ee5\u4e0b\u4ee3\u7801\u7684\u533a\u522b\u662f\u8fd9\u4e2a\u662f\u4eceheap\u4e2d\u7684memory\u6765\u4ea7\u751f\u8fd9\u4e2alist\u7684</p> <pre><code>int list[3];\nlist[0] = 1;\nlist[1] = 2;\nlist[2] = 3;\n</code></pre> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main(void)\n{\nint *list = malloc(3 * sizeof(int));\nif (list == NULL)\n{\nreturn 1;\n}\n\nlist[0] = 1;\nlist[1] = 2;\nlist[2] = 3;\n\nint *temp = malloc(4 * sizeof(int));\nif (temp == NULL)\n{\nfree(list);\nreturn 1;\n}\n\nfor (int i = 0; i &lt; 3; i++)\n{\ntemp[i] = list[i];\n}\ntemp[3] = 4;\n\nfree(list);\nlist = temp;\nfor (int i = 0; i &lt; 4; i++)\n{\nprintf(\"%i\\n\", list[i]);\n}\nfree(list);\nreturn 0;\n\n\n\n}\n</code></pre> <p>use <code>realloc</code> resize old aaray to be certain size</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main(void)\n{ // Dynamically allocate an array of size 3\nint *list = malloc(3 * sizeof(int));\nif (list == NULL)\n{\nreturn 1;\n}\n\n// Assign three numbers to that array\nlist[0] = 1;\nlist[1] = 2;\nlist[2] = 3;\n\n// Time passes\n\n// Resize old array to be of size 4\nint *tmp = realloc(list, 4 * sizeof(int));\nif (tmp == NULL)\n{\nfree(list);\nreturn 1;\n}\n\n// Add fourth number to new array\ntmp[3] = 4;\n\n// Remember new array\nlist = tmp;\n\n// Print new array\nfor (int i = 0; i &lt; 4; i++)\n{\nprintf(\"%i\\n\", list[i]);\n}\n\n// Free new array\nfree(list);\nreturn 0;\n}\n</code></pre>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#growing-linked-lists","title":"growing linked lists","text":"<pre><code>typedef struct node\n{\nint number;\nstruct node *next;\n}\nnode;\n\nnode *list = NULL;\nnode *n = malloc(sizeof(node));\n\nif (n != NULL)\n{\n(*n).number = 1;\n}\n\nif (n != NULL)\n{\nn-&gt;number = 1;\nn-&gt;next = NULL;\n}\n\nlist = n; n = malloc(sizeof(node));\nif (n != NULL)\n{\nn-&gt;number = 2;\nn-&gt;next = NULL;\n}\nlist-&gt;next = n;\n\nnode *n = malloc(sizeof(node));\nif (n != NULL)\n{\nn-&gt;number = 3;\nn-&gt;next = NULL;\n}\n\nlist-&gt;next-&gt;next = n;\n</code></pre>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#implementing-linked-lists","title":"implementing linked lists","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\ntypedef struct node\n{\nint number;\nstruct node *next;\n}\nnode;\n\nint main(void)\n{\nnode *list = NULL;\nnode *n = malloc(sizeof(node));\nif (n == NULL)\n{\nreturn 1;\n}\nn-&gt;number = 1;\nn-&gt;next = NULL;\nlist = n;\n\nn = malloc(sizeof(node));\nif (n == NULL)\n{\nfree(list);\nreturn 1;\n}\nn-&gt;number = 2;\nn-&gt;next = NULL;\nlist-&gt;next = n;\n\nn = malloc(sizeof(node));\nif(n == NULL)\n{\nfree(list-&gt;next);\nfree(list);\nreturn 1;\n}\nn-&gt;number = 3;\nn-&gt;next = NULL;\nlist-&gt;next-&gt;next = n;\n\nfor (node *temp = list; temp != NULL; temp = temp-&gt;next)\n{\nprintf(\"%i\", temp-&gt;number);\n}\nwhile (list != NULL)\n{\nnode *temp = list-&gt;next;\nfree(list);\nlist = tmp;\n}\nreturn 0;\n\n\n}\n</code></pre>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#trees","title":"trees","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\ntypedef struct node\n{\nint number;\nstruct node *left;\nstruct node *right;\n\n}\nnode;\n\nint main(void)\n{\n// set the tree size to 0\nnode *tree = NULL;\n\n// add number to list\nnode *n = malloc(sizeof(node));\nif(n == NULL)\n{\nreturn 1;\n}\nn-&gt;number = 2;\nn-&gt;left = NULL;\nn-&gt;right = NULL;\ntree = n;\n\nn = malloc(sizeof(node));\nif(n == NULL)\n{\nfree_tree(tree);\nreturn 1;\n\n}\nn-&gt;number = 1;\nn-&gt;left = NULL;\nn-&gt;right = NULL;\ntree-&gt;left = n;\n\nn = malloc(sizeof(node));\nif(n == NULL)\n{\nfree_tree(tree);\nreturn 1;\n\n}\nn-&gt;number = 3;\nn-&gt;left = NULL;\nn-&gt;right = NULL;\ntree-&gt;right = n;\n\nprint_tree(tree);\nreturn 0;\n\n}\n</code></pre>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#more-data-structres","title":"more data structres","text":""},{"location":"Course/cs61a/information/","title":"CS61a Course Information","text":"<p>HobbitQia \u7684\u4ee3\u7801\u5b9e\u73b0\uff1a https://github.com/HobbitQia/CS61A-Fall-2020</p> <p>\u9700\u8981solution\u7684\u53ef\u4ee5\u53bbArchive.org\u91cc\u9762\u641c\u5b58\u6863\uff0c\u9700\u8981\u641c\u7684\u5185\u5bb9\u7c7b\u4f3c<code>cs61a.org/lab/sol-lab02</code></p> <p>\u6309\u7167reading-playlist\uff08lecture\uff09-lab-disc-hw-q&amp;a-project reading\u662f\u6700\u7cbe\u534e\u7684\u90e8\u5206</p> <p>\u6559\u6750\u7684pdf\u7248\u672c\u53ef\u4ee5\u5728 https://github.com/josemreis/composing-programs-to-pdf/blob/main/sample/composing-programs.pdf \u627e\u5230</p> <p>\u6216\u8005https://github.com/daxwann/ComposingPrograms-to-PDF \uff08\u6709\u76ee\u5f55\u7248\u672c\uff09</p>"},{"location":"Course/cs61a/week1/","title":"CS 61A FALL 2022","text":""},{"location":"Course/cs61a/week1/#1026","title":"\u524d\u671f\u8d44\u6599\u6536\u96c6\uff0810/26\u5f00\u59cb\uff09","text":"<p>\u8fd9\u95e8\u8bfe\u662fSICP\u7684\u53d8\u79cd\uff0c\u4f7f\u7528Python 3\u6765\u5c55\u793a\u62bd\u8c61\u65b9\u6cd5\u3001\u7f16\u7a0b\u8303\u5f0f\u548c\u7ba1\u7406\u5927\u578b\u7a0b\u5e8f\u7684\u6280\u672f\u3002</p> <p>CS61A \u5bf9\u5e94\u7684\u6559\u6750\u662f\u300a\u8ba1\u7b97\u673a\u7a0b\u5e8f\u7684\u6784\u9020\u548c\u89e3\u91ca\uff08SICP\uff09\u300b \uff0c\u6838\u5fc3\u601d\u60f3\u662f\u62bd\u8c61\uff0c\u4e3b\u8981\u8bb2\u7684\u662f\uff1a</p> <ol> <li>\u7f16\u7a0b\u8303\u5f0f\u2014\u2014\u5305\u62ec\u51fd\u6570\u5f0f\u7f16\u7a0b(FP)\u3001\u9762\u5411\u5bf9\u8c61\u7684\u7f16\u7a0b(OOP)\u3001\u7ed3\u6784\u5316\u67e5\u8be2\u8bed\u8a00(SQL)\uff1b</li> <li>\u5982\u4f55\u5bf9\u4e00\u4e2a\u95ee\u9898\u62c6\u5206\u548c\u7a0b\u5e8f\u5b9e\u73b0\uff08\u8fd9\u4e2a\u5f88\u5173\u952e\uff09\uff1b</li> <li>\u4e5f\u6559\u4e86\u4e00\u70b9\u7f16\u8bd1\u539f\u7406\u7684\u5185\u5bb9\u2014\u2014\u5199\u4e2ascheme \u89e3\u91ca\u5668\u3002</li> </ol> <p>\u5343\u8a00\u4e07\u8bed\u96be\u4ee5\u8868\u8fbe\u6211\u5bf9\u8fd9\u95e8\u8bfe\u7684\u559c\u7231\u548c\u5bf9UCB, Dr. John Denero, Dr. Hany Faird\u7684\u611f\u8c22\u3002\u5c31\u4ee5\u4ed6\u4eec\u7684\u4eba\u751f\u5efa\u8bae\u7ed3\u675f\u5427\u3002</p> <p>When I was getting married, I was a PhD student at the time. My mom pulled me aside on my wedding day and said \"John I want to give you some advice\". I was like oh she's going to like tell me to listen to my wife or whatever. But she didn't. She said only two words that have stuck with me for a long time. She said \"don't compare\". That's all. And then she was like okay you can go back to do whatever you're doing. At the time this was very hard for me to process because I was in a university which is all about comparing people based on like what their exam score was. It turns out that out there in the world, there are no exams that everybody takes that are standardized anymore. All that matter is what you go and get done on your own particular path. So, comparing yourselves to other people becomes meaningless rapidly as what really matter is what you could do yourself, like what you're capable of and what you bother to do and how you choose to spend your time. It took years of this two-word phrase \"don't compare\" to marinate inside of me and for me to realize that my self-worth really has nothing to do with what other people can do or whether I can do it better than them or worse than them. It has everything to do with what i've done and what i'm gonna do next and how I spend my time and better myself. I should just focus on improving myself and forget about what everybody else is doing. (John Denero) It is something that took me a long time in life to understand not to compare. And there's a trap too that we do. We compare for example how big our house is to that one friend and how much money we make to another friend, and the kind of clothes we have to this friend and how smart we are to that friend. We pick and choose these things and that's first of all, even doing that individually is meaningless right? But it's also a trap and this is the problem with social media, you see these sore of curated worlds of other people and it's a trap. One of the great things of getting older is you will get there, I promise, you will realize it's a trap and comparing means absolutely nothing. It really is a very internal thing of what are you doing, who do you want to be, how do you want to go through this world, how do you want to treat other people. At the end of the day, that, and almost nothing else, is going to matter. And you got to just trust that it's going to be there. (Hany Faird)</p> <p>\u5b66\u4e60\u987a\u5e8f\uff1a\u57fa\u672c\u4e0a\u662f\u6309\u7167reading-playlist\uff08lecture\uff09-lab-disc-hw-q&amp;a-project\uff0c\u6309\u7167\u6bcf\u5929\u7684\u4efb\u52a1\u4f9d\u6b21\u5b8c\u6210\u5373\u53ef\u3002</p> <p>\u5b98\u65b9\u7684solutions\u4f1a\u5728\u4f5c\u4e1a\u622a\u6b62\u540e\u516c\u5e03\uff0c\u4f46\u662f\u56e0\u4e3a\u51e0\u4e4e\u6bcf\u5b66\u671f\u7684\u4f5c\u4e1a\u90fd\u5dee\u4e0d\u591a\uff0c\u6240\u4ee5\u5728\u8bfe\u7a0b\u7ed3\u675f\u540e\u4f1a\u5168\u90e8\u4e0b\u67b6\u3002\u56e0\u6b64\u5982\u679c\u662f\u8ddf\u6700\u65b0\u7684\u8bfe\u5efa\u8bae\u6bcf\u6b21\u7684solutions\u5148\u4fdd\u5b58\u4e0b\u6765\uff0c\u5982\u679c\u662f\u5b66\u4ee5\u524d\u7684\u53ef\u4ee5\u627e\u627e\u7f51\u4e0a\u7684\u8d44\u6e90\uff08\u7b14\u8005\u6709\u90e8\u520620fa\u548c21fa\u7684\uff09\u5b98\u65b9\u7684\u7b54\u6848\u8fd8\u662f\u975e\u5e38\u503c\u5f97\u770b\u7684\uff0c\u5199\u7684\u975e\u5e38\u7b80\u6d01\uff0c\u503c\u5f97\u6211\u4eec\u597d\u597d\u501f\u9274\u5b66\u4e60\u3002</p> <p>reading\u662f\u6700\u7cbe\u534e\u7684\u90e8\u5206\uff0c\u53ef\u4ee5\u770b\u51fa\u6559\u6388\u6539\u7f16\u7ecf\u5178\u6559\u6750\u662f\u4e0b\u4e86\u5fc3\u601d\u7684\u3002lecture\u53ef\u4ee5\u7528\u4f5c\u8865\u5145\uff0c\u4f1a\u6709\u5177\u4f53\u7684\u4ee3\u7801\u793a\u4f8b\uff0c\u540c\u65f6\u4e5f\u4f1a\u8865\u5145\u4e00\u4e9breading\u91cc\u6ca1\u6709\u7684\u4e1c\u897f\uff0c\u800cQ&amp;A\u66f4\u591a\u7684\u662f\u8ba8\u8bba\u4e0a\u8bfe/\u4f5c\u4e1a/\u5f80\u5e74\u8003\u8bd5\u7684\u4e00\u4e9b\u95ee\u9898\uff0c\u4e5f\u7ecf\u5e38\u8ba8\u8bba\u4e00\u4e9b\u6709\u610f\u601d\u7684\u8bdd\u9898\u3002\u7b14\u8005\u8bb0\u5f97\u5728\u7b2c\u516d\u6b21\u8bfe\u65f6Q&amp;A\u4e0b\u9762\u5df2\u7ecf\u6709\u65f6\u95f4\u6233\u4e86\uff0c\u9009\u62e9\u81ea\u5df1\u60f3\u770b\u7684\u95ee\u9898\u5373\u53ef\u3002</p> <p>\u53c2\u8003\u4ee3\u7801\uff1a</p> <p>https://github.com/HobbitQia/CS61A-Fall-2020</p> <p>https://github.com/311zzb/cs61a_fall2020</p>"},{"location":"Course/cs61a/week1/#week-1","title":"Week 1","text":""},{"location":"Course/cs61a/week1/#lecture-1-wed-welcome","title":"Lecture 1-Wed Welcome","text":"<p>An introduction to computer science!</p> <p>A course about managing complexity, mastering abstraction, programming paradigms. </p> <p>computer science includes systems, artificial intelligence, graphics, security, networking, programming languages, theory and scientific computing.</p> <p>Learning happens when you don't solve the problem, when you are struggling through. When you solved the problem, you've learned it. It's over, right? </p> <p>So the process of failure, the process of struggling, the process of taking hours to solve something is where the learning is happening.</p> <p>If somebody shortcuts that for you, or you shortcut that for somebody, you've cheated them.</p> <p>You've cheated and you've cheated them.</p> <p>And so don't be frustrated by things not working, that's the way it's supposed to be. That's what the process of learning is and it's okay</p> <p><code>Build good habits</code></p> <p>lab: the most important part of this course</p> <p>Lecture -&gt; Q&amp;A -&gt; lab intro -&gt; finish the lab -&gt; try the homework -&gt; lecture -&gt; discussion intro -&gt; tutorials -&gt; finish the homework -&gt; lecture Q&amp;A</p> <p>Lab 1h</p> <p>3 programming languages: python, scheme, SQL</p>"},{"location":"Course/cs61a/week1/#chapter-11-programming-in-python","title":"chapter 1.1 programming in python","text":"<p>And, as imagination bodies forth</p> <p>The forms of things to unknown, and the poet's pen</p> <p>Turns them to shapes, and gives to airy nothing</p> <p>A local habitation and a name      ---William Shakespeare, A Midsummer-Night's Dream</p> <p>\u60f3\u8c61\u4f1a\u628a\u4e0d\u77e5\u540d\u7684\u4e8b\u7269\u7528\u4e00\u79cd\u5f62\u5f0f\u5448\u73b0\u51fa\u6765\uff0c</p> <p>\u8bd7\u4eba\u7684\u7b14\u518d\u4f7f\u5b83\u4eec\u6709\u5982\u5b9e\u7684\u5f62\u8c61\uff0c</p> <p>\u7a7a\u865a\u7684\u65e0\u7269\u4e5f\u4f1a\u6709\u4e86\u5c45\u5904\u548c\u540d\u5b57</p> <p>Structure and Interpretation of Computer Programs (SICP)</p> <p>Python excels as an instructional language</p> <p>prompt, &gt;&gt;&gt;</p> <p>press -P (previous) and -N (next). -D exits a session <pre><code>from urllib.request import urlopen\nshakespeare = urlopen(\"http://composingprograms.com/shakespeare.txt\")\nwords = set(shakespeare.read().decode().split()) \n{w for w in words if len(w) == 6 and w[::-1] in words}\n</code></pre>"},{"location":"Course/cs61a/week1/#lab00","title":"lab00","text":"<p>\u4f7f\u7528exit()\u6216\u8005control+d\u9000\u51fa\u5230\u547d\u4ee4\u884c\u754c\u9762</p> <p>shell\u4e2d\u6587\u4ef6\u540d\u5e26\u6709\u7a7a\u683c\u7684\u5904\u7406\u529e\u6cd5\uff1a</p> <pre><code>cd Desktop/CS\\ Notebook\n</code></pre> <pre><code>mkdir # \u65b0\u5efa\u4e00\u4e2a\u6587\u4ef6\u5939\nmv ~/Downloads/lab00 ~/Desktop/cs61a/lab # \u79fb\u52a8\u6587\u4ef6\u5939\ncd # change into the specific direcory\n</code></pre> <p>Numbers may be combined with mathematical operators to form compound expressions. In addition to the <code>+</code> operator (addition), the <code>-</code> operator (subtraction), the <code>*</code> operator (multiplication) and the <code>**</code> operator (exponentiation), there are three division-like operators to remember:</p> <ul> <li>Floating point division (<code>/</code>): divides the first number number by the second, evaluating to a number with a decimal point even if the numbers divide evenly.</li> <li>Floor division (<code>//</code>): divides the first number by the second and then rounds down, evaluating to an integer.</li> <li>Modulo (<code>%</code>): evaluates to the positive remainder left over from division.</li> </ul> <p>Floating point division (/) \u5f97\u5230\u6d6e\u70b9\u6570\uff0c\u5373\u4f7f\u662f\u6574\u9664</p> <p>Floor division (//) \u5411\u4e0b\u53d6\u6574\u6570\uff0c\u5f97\u5230\u7684\u662fint</p> <p>% \u5f97\u5230\u6b63\u6574\u4f59\u6570</p> <pre><code>&gt;&gt;&gt; 7 / 4\n1.75\n&gt;&gt;&gt; (2 + 6) / 4\n2.0\n&gt;&gt;&gt; 7 // 4        # Floor division (rounding down)\n1\n&gt;&gt;&gt; 7 % 4         # Modulus (remainder of 7 // 4)\n3\n</code></pre> <p>\u6bd4\u5982\uff1a</p> <pre><code>-7 % 5 = 3\n\u539f\u56e0\u5728\u4e8e-7 = 5 * \uff08-2\uff09+ 3\n</code></pre> <p>\u5728python interpreter \u4e2d\uff0c\u53d8\u91cf\u7684\u503c\u7b49\u4e8e\u6700\u540e\u4e00\u4e2a\u7b49\u53f7\u540e\u7684\u503c\u3002</p> <p>\u6bd4\u5982\uff1a</p> <pre><code>&gt;&gt;&gt; y = 5\n&gt;&gt;&gt; y = y + 3\n&gt;&gt;&gt; y * 2\n\ny *2\u7ed3\u675f\u540e\uff0cterminal\u4e2d\u8fd4\u56de\u7684\u662f16\uff1by*2\u53ea\u662f\u8fdb\u884c\u4e86\u8ba1\u7b97\uff0c\u5e76\u6ca1\u6709\u6539\u53d8y\u7684\u503c\n\u4f46\u662f\u73b0\u5728y\u7684\u503c\u4ecd\u7136\u662f8\n</code></pre> <p>The lines in the triple-quotes <code>\"\"\"</code> are called a docstring</p> <p>The lines that begin with <code>&gt;&gt;&gt;</code> are called doctests</p>"},{"location":"Course/cs61a/week1/#ok-autograder-commands","title":"OK autograder commands","text":"<pre><code>python3 OK\npython3 ok --submit // Could not submit: Late Submission of cal/cs61a/fa20/lab00\n</code></pre> <ul> <li><code>-i</code>: The <code>-i</code> option runs your Python script, then opens an interactive session. In an interactive session, you run Python code line by line and get immediate feedback instead of running an entire file all at once. To exit, type <code>exit()</code> into the interpreter prompt. You can also use the keyboard shortcut <code>Ctrl-D</code> on Linux/Mac machines or <code>Ctrl-Z Enter</code> on Windows.</li> </ul> <p>If you edit the Python file while running it interactively, you will need to exit and restart the interpreter in order for those changes to take effect.</p> <pre><code>python3 -i </code></pre> <ul> <li><code>-m doctest</code>: Runs doctests in a particular file. Doctests are surrounded by triple quotes (<code>\"\"\"</code>) within functions.</li> </ul> <p>Each test in the file consists of <code>&gt;&gt;&gt;</code> followed by some Python code and the expected output (though the <code>&gt;&gt;&gt;</code> are not seen in the output of the doctest command).</p> <pre><code> python3 -m doctest </code></pre>"},{"location":"Course/cs61a/week1/#chapter-12-elements-of-programming","title":"chapter 1.2 elements of programming","text":"<p>every powerful language has 3 mechanisms:</p> <ul> <li>Primitive expressions and statements -- represent the simplest building blocks that the language provides</li> <li>Means of combination -- by which compound elements are built from simpler ones</li> <li>Means of abstraction -- by which compound elements can be named and manipulated as units</li> </ul> <p>In programming, we deal with functions and data</p> <p><code>max(7.5, 9.5)</code> operator(operand, operand)</p> <p>we say that the function max is called with arguments 7.5 and 9.5, returns a value of 9.5\\</p> <p><code>pow()</code>raises its first argument to the power of its argument</p> <p>The <code>=</code> symbol is called the assignment operator in Python (and many other languages). Assignment is our simplest means of abstraction, for it allows us to use simple names to refer to the results of compound operations, such as the <code>area</code> computed above. In this way, complex programs are constructed by building, step by step, computational objects of increasing complexity.</p> <p>The possibility of binding names to values and later retrieving those values by name means that the interpreter must maintain some sort of memory that keeps track of the names, values, and bindings. This memory is called an environment.</p>"},{"location":"Course/cs61a/week1/#lecture-1-fri-functions","title":"Lecture 1-Fri Functions","text":"<p>notation</p> <p>all expressions can use functions call notation</p> <p>raise 6 to 3<sup>rd</sup> power:</p> <pre><code>6 ** 3\n\nfrom operator import add, mul\n</code></pre> <p>Add(2,3)</p> <p>Operator: add</p> <p>Operand subexpressions: 2, 3</p> <p>\u4ece\u6700\u91cc\u9762\u5230\u6700\u5916\u9762\uff0c\u5206\u522bevaluate\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u53eb\u505aevaluation procedure</p>"},{"location":"Course/cs61a/week1/#names-assignment-and-user-defined-functions","title":"names, assignment, and user-defined functions","text":"<pre><code>from math import pi, sin\n</code></pre> <p>Primitive expressions: 2, add, 'hello'</p> <p>call expression: max(2, 3,) \u7531operator\u548coprand\u7ec4\u6210</p>"},{"location":"Course/cs61a/week1/#environment-diagrams","title":"Environment diagrams","text":"<p>Visualize the interpreter's process</p> <p>code on the left,  and fames on the right</p> <p>execution rule of assignment statements:</p> <ol> <li>Evaluate all expressions to the right of = from left to right</li> <li>Bind all names to the left of = to the resulting values in the current frame</li> </ol> <p>Current frame\u8fd9\u610f\u5473\u7740\uff1a</p> <pre><code>a = 1\nb = 2\nb, a = a + b, b // b = 3, a = 2\n//\u800c\u5982\u4e0b\u4f1a\u5bfc\u81f4:\nb = a + b\na = b // a = 3\n</code></pre>"},{"location":"Course/cs61a/week1/#defining-functions","title":"defining functions","text":"<p>The assignment is a simple means of abstraction: binds names to values</p> <p>The function definition is a more powerful means of abstraction: binds names to expressions</p> <p>Indent \u7f29\u8fdb</p> <pre><code>def &lt;name&gt; (&lt;formal parameters&gt;): // function signature\n  return &lt;return expression&gt; // function body\n</code></pre> <p>an environment is a sequence of frames</p> <pre><code>&gt;&gt;&gt; def square(square):\n...     return mul(square, square)\n...\n&gt;&gt;&gt; square(4)\n16\n</code></pre> <p>\u6ce8\u610f\u5148\u5728local frame\u91cc\u9762\u627e\uff0c\u7136\u540e\u518d\u5230global frame\u4e2d\u53bb\u627e</p>"},{"location":"Course/cs61a/week1/#hw01-variables-functions-control","title":"Hw01 variables &amp; functions, control","text":"<p>To check if <code>b</code> evenly divides <code>a</code>, you can use the expression <code>a % b == 0</code>, which can be read as, \"the remainder of dividing <code>a</code> by <code>b</code> is 0.\"</p>"},{"location":"Course/cs61a/week1/#non-pure-functions","title":"non-pure functions","text":"<p>Print() is non-pure function that can generate side effects</p> <pre><code>&gt;&gt;&gt; print(print(1), print(2))\n1\n2\nNone None\n</code></pre> <p>Be careful with <code>print</code>! The fact that it returns <code>None</code> means that it should not be the expression in an assignment statement.</p> <p>pure functions are essential for writing concurrent programs</p>"},{"location":"Course/cs61a/week1/#week-2","title":"Week 2","text":""},{"location":"Course/cs61a/week1/#lecture-2","title":"Lecture 2","text":"<p>operand subexpression</p> <p>Evaluation procedure for call expressions:</p> <ol> <li>Evaluate the operator and then the operand subexpressions </li> <li>Apply the function that is the value of the operator to the arguments that are the values of the operands</li> </ol>"},{"location":"Course/cs61a/week1/#chapter-14","title":"Chapter 1.4","text":"<p>domain \u8f93\u5165\u503c\u7684\u53d8\u5316\u8303\u56f4</p> <p>range \u8f93\u51fa\u503c\u7684\u503c\u57df</p> <p>the qualities of good functions all reinforce the idea that functions are abstractions</p> <p>\u5b9a\u4e49\u51fd\u6570\u4ee5\u53ca\u5b83\u7684doctoring\uff1a</p> <pre><code>&gt;&gt;&gt; def pressure(v, t, n):\n\"\"\"Compute the pressure in pascals of an ideal gas.\n\n        Applies the ideal gas law: http://en.wikipedia.org/wiki/Ideal_gas_law\n\n        v -- volume of gas, in cubic meters\n        t -- absolute temperature in degrees kelvin\n        n -- particles of gas\n        \"\"\"\n        k = 1.38e-23  # Boltzmann's constant\n        return n * k * t / v\n\n  &gt;&gt;&gt; help(pressure)\n</code></pre> <p>\u53ef\u4ee5\u76f4\u63a5\u5728\u5b9a\u4e49\u51fd\u6570\u7684\u65f6\u5019\u8bbe\u5b9an\u7684\u9ed8\u8ba4\u503c(indicate its default value)\uff1a </p> <pre><code>def pressure(v, t, n=6.022e23):\n</code></pre> <p>\u5982\u679c\u4f7f\u7528\u9ed8\u8ba4\u503c\u7684\u8bdd\uff0c\u5728\u8f93\u5165\u7684\u65f6\u5019\u53ef\u4ee5\u53ea\u8f93\u5165\u4e24\u4e2a\u53d8\u91cf\uff1a</p> <pre><code>&gt;&gt;&gt; pressure(1, 273.15)\n2269.974834\n</code></pre>"},{"location":"Course/cs61a/week1/#chpater-15-control","title":"Chpater 1.5 Control","text":"<p>Rather than being evaluated, statements are executed. </p> <p>we have seen three kinds of statements already: assignment, <code>def</code>, and <code>return</code> statements</p> <p>A statement is executed by the interpreter to perform an action</p> <p></p> <p>conditional statements execute the suite annd skip the remaining </p>"},{"location":"Course/cs61a/week1/#boolean-contexts","title":"Boolean contexts","text":"<p>False values in Python: False, 0, '', None</p> <p>True values in Python: anything else(True)</p>"},{"location":"Course/cs61a/week1/#statement-expression","title":"statement \u548cexpression\u7684\u533a\u522b","text":"<p>statements are instructions that perform some action, while expressions are units of code that evaluate to a value.</p> <p>A statement is a line of code that performs some action, such as assigning a value to a variable, calling a function, or looping over a sequence. Statements are typically terminated by a newline character, although semicolons can be used to separate multiple statements on a single line.</p> <p>For example, the following are examples of statements in Python:</p> <pre><code>x = 5             # assign a value to x\nprint(\"hello\")    # call the print function\nwhile x &gt; 0:      # loop while x is greater than 0\n    x -= 1\n</code></pre> <p>On the other hand, an expression is a combination of values, variables, and operators that evaluates to a single value. Expressions can be used as part of a larger statement, or they can be used on their own to return a value.</p> <p>For example, the following are examples of expressions in Python:</p> <pre><code>3 + 4             # evaluates to 7\nx + 2             # evaluates to the value of x plus 2\nlen(\"hello\")      # evaluates to 5 (the length of the string)\n</code></pre>"},{"location":"Course/cs61a/week1/#short-circuting","title":"short-circuting","text":"<p>In Python, short-circuiting is a behavior exhibited by logical operators (i.e. \"and\" and \"or\") where the second operand is not evaluated if the result of the expression can be determined by evaluating the first operand alone.</p> <p>\u4f8b\u5982\uff0c\u5728\u8868\u8fbe\u5f0f\"a and b\"\u4e2d\uff0c\u5982\u679c\"a\"\u7684\u503c\u4e3aFalse\uff0c\u90a3\u4e48\u4e0d\u7ba1\"b\"\u7684\u503c\u662f\u591a\u5c11\uff0c\u6574\u4e2a\u8868\u8fbe\u5f0f\u90fd\u5c06\u4e3aFalse\u3002\u56e0\u6b64\uff0c\u4e0d\u9700\u8981\u6c42\u201cb\u201d\uff0cPython\u5c06\u201c\u77ed\u8def\u201d\u8868\u8fbe\u5f0f\u7684\u6c42\u503c\uff0c\u8282\u7701\u65f6\u95f4\u548c\u8ba1\u7b97\u8d44\u6e90\u3002</p> <p>\u7c7b\u4f3c\u5730\uff0c\u5728\u8868\u8fbe\u5f0f\"a or b\"\u4e2d\uff0c\u5982\u679c\"a\"\u7684\u503c\u4e3aTrue\uff0c\u90a3\u4e48\u4e0d\u7ba1\"b\"\u7684\u503c\u662f\u591a\u5c11\uff0c\u6574\u4e2a\u8868\u8fbe\u5f0f\u90fd\u5c06\u4e3aTrue\u3002\u540c\u6837\uff0c\u4e0d\u9700\u8981\u8ba1\u7b97\u201cb\u201d\uff0cPython\u4f1a\u7f29\u77ed\u8ba1\u7b97\u8fc7\u7a0b\u3002</p> <pre><code>1   def fib(n):\n2       \"\"\"Compute the nth Fibonacci number, for n &gt;= 2.\"\"\"\n3       pred, curr = 0, 1   # Fibonacci numbers 1 and 2\n4       k = 2               # Which Fib number is curr?\n5       while k &lt; n:\n6           pred, curr = curr, pred + curr\n7           k = k + 1\n8       return curr\n9   \n10  result = fib(8)\n</code></pre>"},{"location":"Course/cs61a/week1/#156-tesing","title":"1.5.6 tesing","text":""},{"location":"Course/cs61a/week1/#assertions","title":"assertions","text":"<pre><code>assert fib(8) == 13, 'The 8th Fibonacci number should be 13'\n</code></pre> <p>When writing Python in files, rather than directly into the interpreter, tests are typically written in the same file or a neighboring file with the suffix <code>_test.py</code>.</p>"},{"location":"Course/cs61a/week1/#doctests","title":"doctests","text":"<p>Python provides a convenient method for placing simple tests directly in the docstring of a function. The first line of a docstring should contain a one-line description of the function, followed by a blank line. A detailed description of arguments and behavior may follow. In addition, the docstring may include a sample interactive session that calls the function:</p> <pre><code>def sum_naturals(n):\n\"\"\"Return the sum of the first n natural numbers.\n\n        &gt;&gt;&gt; sum_naturals(10)\n        55\n        &gt;&gt;&gt; sum_naturals(100)\n        5050\n        \"\"\"\n        total, k = 0, 1\n        while k &lt;= n:\n            total, k = total + k, k + 1\n        return total\n</code></pre> <p><code>testmod()</code> is used to run tests in a module, while <code>run_docstring_examples()</code> is used to test a specific function or method.</p> <p>Testmod()</p> <pre><code>&gt;&gt;&gt; from doctest import testmod\n&gt;&gt;&gt; testmod()\n</code></pre> <p>Run_docstring_examples</p> <pre><code>&gt;&gt;&gt; from doctest import run_docstring_examples\n&gt;&gt;&gt; run_docstring_examples(sum_naturals, globals(), True)\n</code></pre> <p>When writing Python in files, all doctests in a file can be run by starting Python with the doctest command line option:</p> <p>\u8fd9\u4e2a\u547d\u4ee4\u4e0d\u9700\u8981\u4e0a\u9762\u4e24\u4e2a\u529f\u80fd\uff0c\u53ef\u4ee5\u5728\u6709doctests\u7684\u60c5\u51b5\u4e0b\uff0c\u76f4\u63a5\u7528\u547d\u4ee4\u884c\u4f7f\u7528\uff0c\u6709\u9519\u7684\u8bdd\u4f1a\u62a5\u9519\uff0c\u5982\u679c\u6ca1\u6709\u9519\u5c31\u4e0d\u4f1a\u8fd4\u56de\u4efb\u4f55\u4e1c\u897f</p> <pre><code>python3 -m doctest &lt;python_source_file&gt;\n</code></pre>"},{"location":"Course/cs61a/week1/#lab01","title":"lab01","text":"<p>\u8fd9\u4e2a\u662f\u6b7b\u5faa\u73af\uff1a(python\u91cc\u9762\u53ea\u67090\u662ffalse)</p> <pre><code>positive = 28\nwhile positive: # If this loops forever, just type Infinite Loop\n    print(\"positive?\")\n    positive -= 3\n</code></pre> <p>Python \u7684\u5faa\u73af\u53ea\u6709\u78b0\u52300\uff08\u76f8\u5f53\u4e8eFalse\uff09\u624d\u4f1a\u505c\u4e0b\u6765</p> <pre><code>&gt;&gt;&gt; True and 13\n&gt;&gt;&gt; 13\n\n&gt;&gt;&gt; False or 0\n&gt;&gt;&gt; 0\n\n&gt;&gt;&gt; not 10\n&gt;&gt;&gt; False\n-- OK! --\n\n&gt;&gt;&gt; not None\n&gt;&gt;&gt; True\n</code></pre> <p>python \u91cc\u9762\u4f7f\u7528and\u65f6\uff0c\u5982\u679c\u7b2c\u4e00\u4e2a\u6570\u662f\u9519\u7684\uff0c\u90a3\u4e48\u4f1a\u76f4\u63a5\u8fd4\u56de\u7b2c\u4e00\u4e2a\u6570\uff1b\u5982\u679c\u7b2c\u4e00\u4e2a\u6570\u662f\u5bf9\u7684\uff0c\u90a3\u4e48\u4f1a\u8fd4\u56de\u7b2c\u4e8c\u4e2a\u6570\uff1b\u7b2c\u4e8c\u4e2a\u6570\u53ea\u6709\u5728\u7b2c\u4e00\u4e2a\u6570\u662f\u5bf9\u7684\u60c5\u51b5\u4e0b\u624d\u4f1a\u88ab\u5224\u65ad</p> <p>\u7406\u89e3\uff1aand\u662f\u903b\u8f91\u8fd0\u7b97\uff0c\u5982\u679c\u7b2c\u4e00\u4e2a\u662f\u9519\u7684\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8868\u8fbe\u5f0f\u5c31\u662f\u9519\u7684\uff0c\u5373\u8fd4\u56de\u7b2c\u4e00\u4e2a\u503c\uff1b\u5982\u679c\u7b2c\u4e00\u4e2a\u6570\u5b57\u662f\u5bf9\u7684\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8868\u8fbe\u5f0f\u7684\u503c\u53d6\u51b3\u4e8e\u7b2c\u4e8c\u4e2a\u503c\uff1a\u6bd4\u5982\uff0c\u7b2c\u4e8c\u4e2a\u503c\u5982\u679c\u662f\u9519\u8bef\u7684\uff0c\u90a3\u4e48\u5c31\u8fd4\u56de\u9519\u8bef\uff08\u5373\u7b2c\u4e8c\u4e2a\u503c\uff09\u5982\u679c\u662f\u6b63\u786e\u7684\uff0c\u4e5f\u662f\u8fd4\u56de\u7b2c\u4e8c\u4e2a\u6b63\u786e\u7684\u503c</p> <p>\u800c\u4f7f\u7528or\u7684\u65f6\u5019\uff0c\u5982\u679c\u7b2c\u4e00\u4e2a\u6570\u662f\u5bf9\u7684\uff0c\u90a3\u4e48\u76f4\u63a5\u8fd4\u56de\u7b2c\u4e00\u4e2a\u6570\uff1b\u5982\u679c\u7b2c\u4e00\u4e2a\u6570\u662f\u9519\u7684\uff0c\u90a3\u4e48\u76f4\u63a5\u8fd4\u56de\u7b2c\u4e8c\u4e2a\u6570</p> <p>OR\u662f\u8fd9\u8981\u6709\u4e00\u4e2a\u6570true\u5c31\u662ftrue</p> <p>In Python, the <code>and</code> and <code>or</code> operators are used to evaluate logical expressions.</p> <p>The <code>and</code> operator returns the first operand if it evaluates to False, and the second operand otherwise. The second operand is only evaluated if the first operand is True. So, when we evaluate the expression <code>True and 13</code>, the first operand <code>True</code> is not False, so Python returns the second operand <code>13</code>.</p> <p>The <code>or</code> operator returns the first operand if it evaluates to True, and the second operand otherwise. The second operand is only evaluated if the first operand is False. So, when we evaluate the expression <code>False or 0</code>, the first operand <code>False</code> is not True, so Python returns the second operand <code>0</code>.</p> <p><code>-v</code>is for verbose</p> <pre><code>python3 -m doctest file.py -v\n</code></pre> <p>cs 61a \u91cc\u9762print('DEBUG: result is', result)\uff0c\u4ee5DEBUG\u5f00\u5934\u7684\u8f93\u51fa\u90fd\u4f1a\u88abok autograder\u5ffd\u7565</p>"},{"location":"Course/cs61a/week1/#debugging","title":"Debugging","text":""},{"location":"Course/cs61a/week1/#running-doctests","title":"running doctests","text":"<p>\u5728statement\u91cc\u9762\u5199\u597ddoctests\uff0c\u7136\u540e\u53ef\u4ee5assertion, Testmod(), Run_docstring_examples(), \u6216\u8005\u547d\u4ee4\u884c\uff08\u53ef\u4ee5\u53bb\u6389-v\uff09:</p> <pre><code>python3 -m doctest file.py -v\n</code></pre>"},{"location":"Course/cs61a/week1/#print","title":"\u4f7f\u7528print\u6253\u70b9","text":"<pre><code>print('DEBUG: result is', result)\n</code></pre>"},{"location":"Course/cs61a/week1/#flaglong-term-debugging","title":"\u4f7f\u7528flag\u4f5c\u4e3along-term debugging\u7684\u5de5\u5177","text":"<pre><code>debug = True\n\ndef foo(n):\ni = 0\nwhile i &lt; n:\n    i += func(i)\n    if debug:\n        print('DEBUG: i is', i)\n</code></pre>"},{"location":"Course/cs61a/week1/#interative-debugging-use-of-an-interactive-repl","title":"interative debugging (use of an interactive REPL)","text":"<pre><code>python -i file.py\n</code></pre> <p>\u7136\u540e\u76f4\u63a5\u5728\u547d\u4ee4\u884c\u4e2d\u8f93\u5165\u7c7b\u4f3c:</p> <pre><code>print(foo(2))\n</code></pre> <p>\u4f1a\u76f4\u63a5\u8fd4\u56defoo(2)\u7684\u503c</p>"},{"location":"Course/cs61a/week1/#assert","title":"assert","text":"<p>\u4e0b\u9762\u7684\u8bed\u53e5\u7528\u6765\u76f4\u63a5\u786e\u8ba4\u8f93\u5165\u7684\u662f\u6574\u6570\uff1a</p> <pre><code>def double(x):\n    assert isinstance(x, int), \"The input to double(x) must be an integer\"\n    return 2 * x\n</code></pre>"},{"location":"Course/cs61b/information/","title":"CS61b Course Information","text":"<p>\u9009\u62e9\u7684\u662f2021\u5e74\u7684spring</p> <p>2021spring\u7684\u8bfe\u7a0b\u81ea\u52a8\u8bc4\u5206\u673a\u6709\u516c\u5f00\uff08\u8bfe\u7a0b\u4ee3\u7801\uff1aMB7ZPY\uff09</p>"},{"location":"Course/cs61b/information/#labhwproject","title":"\u5148\u505aLab\u548cHW\uff0cProject\u7559\u5230\u6700\u540e\u6765\u505a","text":"<p>project\u7684\u96be\u5ea6\u548c\u4ee3\u7801\u91cf\u8fd8\u662f\u6bd4\u524d\u9762\u4e24\u4e2a\u5927\u7684\uff0c\u5982\u679c\u5c0f\u767d\u4e0a\u6765\u7b2c\u4e00\u5468\u5c31\u6b7b\u78d5\u5f88\u5bb9\u6613\u60f3\u653e\u5f03\u3002\u6211\u5efa\u8bae\u5148\u505a\u5bb9\u6613\u7684\uff0c\u57f9\u517b\u4fe1\u5fc3\u540e\u518d\u6765\u4e13\u653bproject\u3002</p> <p>\u8bfe\u672c\uff1ahttps://joshhug.gitbooks.io/hug61b/content/</p> <p>\u81ea\u52a8\u8bc4\u5206\u673a\uff1ahttps://www.gradescope.com/</p> <p>\u53c2\u8003\u7684\u7b14\u8bb0\uff1ahttps://blog.csdn.net/fourier_transformer/category_9856976.html</p> <p>\u53c2\u8003\u7684\u81ea\u5b66\u8bb0\u5f55\uff08\u77e5\u4e4e\uff09\uff1ahttps://zhuanlan.zhihu.com/p/434144861</p> <p>https://zhuanlan.zhihu.com/p/432135426</p> <p>61b\u548c\u666e\u6797\u65af\u987f\u7684algorithms\u5f02\u66f2\u540c\u5de5\uff0c\u4fe9\u8bfe\u53ef\u4ee5\u4e00\u8d77\u4e0a</p> <p>61b\u5c5e\u4e8ealgorithms\u7684\u8be6\u7ec6\u7248</p> <p>\u8d76\u65f6\u95f4\u4e0a61b\u5c31\u591f\u4e86\uff0c\u6211\u4e2a\u4eba\u89c9\u5f97algorithms\u6bd461b\u96be\u4e00\u4e9b</p>"},{"location":"Course/cs61b/information/#_1","title":"\u5173\u4e8e\u4e0a\u8bfe\u7684\u5fc3\u5f97","text":"<ol> <li>\u5728\u770breading\u7684\u65f6\u5019\u53ef\u4ee5\u5148\u770b\u89c6\u9891\uff0c\u5e76\u4e0d\u662f\u6d6a\u8d39\u65f6\u95f4\uff0c\u800c\u662f\u4f1a\u66f4\u52a0\u76f4\u89c2\u4e00\u70b9</li> </ol>"},{"location":"Course/cs61b/lab1/","title":"Lab 1","text":"<p>\u53ea\u8981\u5c06Collatz\u7684\u65b9\u6cd5\u6539\u4e00\u4e0b\u4e0a\u4f20\u5c31\u884c\uff0c\u5f88\u7b80\u5355</p>"},{"location":"Course/cs61b/project0/","title":"Project 0","text":"<p>assignment\u4e2d\u76f4\u63a5\u8bf4\u660e\u4e86\uff1a<code>tilt</code> will take you 3 to 10 hours to complete</p> <p>row: \u6392\uff0c\u884c</p> <p>Column: \u7eb5\u5217</p>"},{"location":"Course/cs61b/project0/#1-2048","title":"1. 2048\u7684\u5f97\u5206\u539f\u7406\uff1a","text":"<p>Each time two tiles merge to form a larger tile, the player earns a number of points on the new tile.</p> <p>The \u201cMax Score\u201d is the maximum score the user has achieved in that game session. It isn\u2019t updated until the game is over, so that is why it remains 0 throughout the animated GIF example.</p>"},{"location":"Course/cs61b/project0/#2","title":"2. \u7a0b\u5e8f\u8bbe\u8ba1\u601d\u8def","text":"<p>Model-View-Controller Pattern (MVC), and Observe Pattern.</p> <p>The MVC pattern divides our problem into three parts:</p> <ul> <li>The model represents the subject matter being represented and acted upon \u2013 in this case incorporating the state of a board game and the rules by which it may be modified. Our model resides in the <code>Model</code>, <code>Side</code>, <code>Board</code>, and <code>Tile</code> classes. The instance variables of <code>Model</code> fully determine what the state of the game is. Note: You\u2019ll only be modifying the <code>Model</code> class.</li> <li>A view of the model, which displays the game state to the user. Our view resides in the <code>GUI</code> and <code>BoardWidget</code> classes.</li> <li>A controller for the game, which translates user actions into operations on the model. Our controller resides mainly in the <code>Game</code> class, although it also uses the GUI class to read keystrokes.</li> </ul>"},{"location":"Course/cs61b/project0/#3","title":"3. \u9898\u76ee\u7684\u89e3\u8bfb","text":"<p>tile\u5c31\u662f\u6bcf\u4e2a\u65b9\u683c\uff0c\u4f7f\u7528<code>tile.value()</code>\u6765\u83b7\u53d6tile\u7684\u6570\u5b57</p> <p>side\u4ee3\u8868\u7684\u662f\u65b9\u5411\uff0c\u53ef\u4ee5\u4f7f\u7528<code>Side s = Side.NORTH</code>(\u8fd9\u91cc\u4e0d\u9700\u8981\u4f7f\u7528new)</p> <p>\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528<code>public static void printSide(Side.NORTH)</code></p> <p>This class represents the board of tiles itself. It has three methods that you\u2019ll use: <code>setViewingPerspective</code>, <code>tile</code>, <code>move</code>. Optionally, for experimentation, you can use <code>getRandomNonNullTile</code>.</p>"},{"location":"Course/cs61b/project0/#4","title":"4. \u95ee\u9898\u70b9","text":"<p>guiding\u91cc\u9762\u8bf4\u8981\u4f7f\u7528java 15\u4f46\u662f\u622a\u56fe\u91cc\u9762\u7528\u7684\u662f14.0.2\uff0c\u6211\u7528\u7684\u5168\u90e8\u90fd\u662f15\uff08\u52a8\u56fe\u91cc\u9762\u7528\u768415\uff09\uff0c\u6ca1\u6709\u95ee\u9898</p>"},{"location":"Course/cs61b/project0/#5","title":"5. \u524d\u4e09\u4e2a\u90fd\u76f8\u5f53\u7b80\u5355\uff0c\u63a0\u8fc7","text":""},{"location":"Course/cs61b/project0/#6-tilt","title":"6. tilt","text":"<p>Computer science is essentially about one thing: Managing complexity. Writing the <code>tilt</code> method is a rich experience that will give you a chance to try just that. </p> <p>side\u7684\u4e00\u957f\u4e32\u89e3\u91ca\u770b\u4e0a\u53bb\u6709\u70b9\u96be\u4ee5\u7406\u89e3\uff1a\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u80cc\u540e\u7684\u60f3\u6cd5\u662f\uff0c\u901a\u8fc7\u4f7f\u7528\u4e0b\u9762\u7684col()\u548crow()\u65b9\u6cd5\u4ece\u91cd\u5b9a\u5411\u8f6c\u6362\u5230\u6807\u51c6\u5750\u6807\uff0c\u53ef\u4ee5\u5b89\u6392\u4f7f\u7528\u5b8c\u5168\u76f8\u540c\u7684\u4ee3\u7801\u6765\u8ba1\u7b97\u5411\u4efb\u4f55\u7279\u5b9a\u65b9\u5411\u503e\u659c\u68cb\u76d8\u7684\u7ed3\u679c\u3002</p> <p>\u8fd8\u662f\u770b\u4e0d\u61c2</p> <p>Tile t = board.tile(1, 2); board.move(1, 3, t); t = board.tile(1, 0); board.move(1, 2, t);</p> <p>Important: Make sure to use <code>board.setViewingPerpsective</code> to set the perspective back to <code>Side.NORTH</code> before you finish your call to <code>tilt</code>, otherwise weird stuff will happen.</p> <pre><code>                if (nullRow == size) {\nboard.move(col, nullRow, t);\n} else if (board.tile(col, row).value() == board.tile(col, nullRow + 1).value()\n&amp;&amp; b[col][nullRow] == null) {\nboard.move(col, nullRow + 1, t);\n} else if (nullRow == row + 1)\n</code></pre> <pre><code>    public boolean tilt(Side side) {\nboolean changed;\nchanged = false;\n\n// TODO: Modify this.board (and perhaps this.score) to account\n// for the tilt to the Side SIDE. If the board changed, set the\n// changed local variable to true.\n\n// hello, world! program hhhhh\n//        for (int c = 0; c &lt; board.size(); c += 1) {\n//            for (int r = 0; r &lt; board.size(); r += 1) {\n//                Tile t = board.tile(c, r);\n//                if (board.tile(c, r) != null) {\n//                    // board.move(col, row, t)\u91cc\u9762\u586b\u7684\u6570\u5b57\u662f\u76ee\u6807\u7684\u884c\u548c\u5217\u6570\u5b57\n//                    board.move(c, 1, t);\n//                    changed = true;\n//                    score += 7;\n//                }\n//            }\n//        }\n\nboard.setViewingPerspective(side);\nint size = board.size();\n// \u4f7f\u7528Boolean\u77e9\u9635\u6765\u5b58\u50a8\u662f\u5426\u4fee\u6539\nBoolean[][] b = new Boolean[size][size];\nfor (int row = size - 2; row &gt;= 0; row -= 1) {\nfor (int col = 0; col &lt; size; col += 1) {\nif (board.tile(col, row) == null) {\ncontinue;\n}\nTile t = board.tile(col, row);\n// \u5148\u5c06\u76ee\u6807\u683c\u5411\u4e0a\u5e73\u79fb\u5230\u4e0d\u80fd\u5e73\u79fb\u4e86\u4e3a\u6b62\uff1b\nint nullCol = col;\nint nullRow = row + 1;\nfor (int r = row + 1; r &lt; size; r += 1) {\nif (board.tile(col, r) == null) {\nnullRow = r;\n} else {\nbreak;\n}\n}\n// \u548c\u4e34\u8fd1\u7684\u4e00\u683c\u8fdb\u884c\u6bd4\u8f83\uff0c\u5982\u679c\u4e00\u6837\u8fdb\u884c\u5408\u5e76\nif (nullRow == row + 1 &amp;&amp; board.tile(col, nullRow) == null) {\nif (nullRow + 1 &lt; size) {\nif (board.tile(col, nullRow + 1).value() == board.tile(col, row).value()) {\nboard.move(col, nullRow + 1, t);\nchanged = true;\nb[col][nullRow + 1] = true;\nscore += board.tile(col, nullRow + 1).value();\n} else {\nboard.move(col, nullRow, t);\nchanged = true;\n}\n} else {\nboard.move(col, nullRow, t);\nchanged = true;\n}\n} else if (nullRow == row + 1 &amp;&amp; board.tile(col, nullRow) != null &amp;&amp; board.tile(col, nullRow).value() == board.tile(col, row).value()) {\nboard.move(col, nullRow, t);\nchanged = true;\nb[col][nullRow] = true;\nscore += board.tile(col, nullRow ).value();\n} else if (board.tile(col, nullRow) == null &amp;&amp; nullRow == size - 1) {\nboard.move(col, nullRow, t);\nchanged = true;\n} else if (nullRow + 1 &lt; size &amp;&amp; board.tile(col, nullRow) == null &amp;&amp; board.tile(col, row).value() == board.tile(col,nullRow + 1).value() &amp;&amp; b[col][nullRow + 1] == null) {\nboard.move(col, nullRow + 1, t);\nchanged = true;\nb[col][nullRow + 1] = true;\nscore += board.tile(col, nullRow + 1).value();\n} else if (nullRow + 1 &lt; size &amp;&amp; board.tile(col, nullRow) == null &amp;&amp; board.tile(col, row).value() == board.tile(col,nullRow + 1).value() &amp;&amp; b[col][nullRow + 1] != null) {\nboard.move(col, nullRow, t);\nchanged = true;\n} else if (nullRow + 1 &lt; size &amp;&amp; board.tile(col, nullRow) == null &amp;&amp; board.tile(col, row).value() != board.tile(col,nullRow + 1).value()) {\nboard.move(col, nullRow, t);\nchanged = true;\n}\n\n}\n}\n\nboard.setViewingPerspective(Side.NORTH);\ncheckGameOver();\nif (changed) {\nsetChanged();\n}\nreturn changed;\n}\n</code></pre>"},{"location":"Course/cs61b/project0/#autograder-score6400-6400","title":"Autograder Score640.0 / 640.0","text":"<p>\u4e0d\u96be\uff0c\u4f46\u662f\u5199\u4e86\u4e00\u5ea7\u5c4e\u5c71\uff1a\uff09</p>"},{"location":"Course/cs61b/week1/","title":"CS61B week1","text":""},{"location":"Course/cs61b/week1/#lecture-1","title":"Lecture 1","text":"<p>\u5b66\u4e60\u7684\u987a\u5e8f\uff1aReading\uff08\u7cbe\u534e\u7684\u8bfe\u7a0b\u5185\u5bb9\uff09-&gt; Guide \uff08\u8bfe\u7a0b\u5185\u5bb9\u7684\u603b\u7ed3\uff09-&gt; Slides + Video -&gt; Lab -&gt; HW -&gt; project</p> <p>entry code: 93PK75</p> <p>lab1 setup\u5c31\u662f\u6559\u4e86\u4e00\u4e0b\u600e\u4e48\u914d\u7f6e\u81ea\u5df1\u7684\u7535\u8111\uff0c\u7528\u6765\u8dd1java</p> <pre><code>cd . \u56de\u5230\u73b0\u5728\u8fd9\u4e2a\u6587\u4ef6\u5939\uff0c\u76f8\u5f53\u4e8e\u4ec0\u4e48\u90fd\u6ca1\u505a\ncd .. \u56de\u5230parent\u6587\u4ef6\u5939\nls -l \u4f1a\u628a\u8bfb\u5199\u72b6\u6001\u90fd\u7ed9\u663e\u793a\u51fa\u6765\nmkdir \u65b0\u5efa\u6587\u4ef6\u5939\ncp \u590d\u5236\u4e00\u4e2a\u6587\u4ef6\nmv \u79fb\u52a8\u4e00\u4e2a\u6587\u4ef6\nopen . \u662f\u6253\u5f00file explorer\u5728\u73b0\u5728\u7684\u6587\u4ef6\u5939\nrm -r\n</code></pre> <p>println\u5305\u542b\u4e86\u4e00\u4e2a\u65b0\u7684\u884c</p> <p>Java\u6709static typing, a key feature of Java compiler is that it performs a static type check.</p> <p>\u51fa\u73b0\u7c7b\u578b\u9519\u8bef\u7684\u8bdd\uff0ccompiler\u4f1a\u62d2\u7edd\u8fd0\u884c</p> <p>python\u662fdynamically typed language</p> <p>Java\u53ef\u4ee5<code>System.out.println(5 + \" \");</code>\u4e5f\u53ef\u4ee5<code>String h = 5 + \"horse\";</code></p> <p>\u4f46\u662fpython\u4e0d\u53ef\u4ee5<code>print(5 + \"horse\")</code>\uff0c\u56e0\u4e3apython doesn't know what the statement is supposed to be, a number or a string?</p> <p>As an analogy, programming in Python can be a bit like Dan Osman free-soloing Lover's Leap. It can be very fast, but dangerous. Java, by contrast is more like using ropes, helmets, etc. as in this video.</p>"},{"location":"Course/cs61b/week1/#comment","title":"comment","text":"<p>In a Javadoc comment, the block comment starts with an extra asterisk, e.g. <code>/**</code>, and the comment often (but not always) contains descriptive tags. </p>"},{"location":"Course/cs61b/week1/#array","title":"\u5b9a\u4e49array","text":"<pre><code>public class HelloNumbers {\npublic static void main(String[] args){\nint[] numbers = new int[]{1, 3, 5, 7};\nSystem.out.println(numbers[3]);\nSystem.out.println(numbers.length);\n}\n}\n</code></pre>"},{"location":"Course/cs61b/week1/#continuebreak","title":"continue\u548cbreak","text":"<p>\u89e3\u91ca\u662f<code>continue</code>\u53ef\u4ee5\u76f4\u63a5\u8df3\u8fc7\u73b0\u5728\u6240\u5728\u7684\u8fd9\u4e2a\u5faa\u73af\uff0c\u8fdb\u5165\u5230\u4e0b\u4e00\u4e2ai\u7684\u81ea\u589e\u5faa\u73af</p> <p>The <code>continue</code> statement skips the current iteration of the loop, effectively jumping straight to the increment condition.</p> <p>\u800c<code>break</code>\u662f\u76f4\u63a5\u7ec8\u6b62\u5305\u542b\u8fd9\u4e2a<code>break</code>\u7684\u6700\u5185\u5c42\u7684\u5faa\u73af</p> <p>By contrast, the <code>break</code> keyword completely terminates the innermost loop when it is called. </p> <pre><code>public class HelloNumbers {\npublic static void main (String[] args) {\nString[] a = {\"cat\", \"horse\", \"dog\", \"elephant\"};\nfor (int i = 0; i &lt; a.length; i += 1) {\nif (a[i].contains(\"horse\")) {\ncontinue;\n}\nfor (int j = 0; j &lt; 3; j += 1) {\nSystem.out.println(a[i]);\n}\n}\n}\n}\n</code></pre> <p>\u200b   \u8f93\u51fa\u662f\uff1a</p> <pre><code>cat\ncat\ncat\ndog\ndog\ndog\nelephant\nelephant\nelephant\n</code></pre> <p>\u800c\u5c06<code>continue</code>\u6539\u6210<code>break</code>\u4e4b\u540e\uff0c\u90a3\u4e48\u4f1a\u8f93\u51fa\uff1a</p> <pre><code>cat\ncat\ncat\n</code></pre> <p>\u53e6\u5916\u4e00\u4e2a<code>break</code>\u7684\u4f8b\u5b50\uff1a</p> <pre><code>public class HelloNumbers {\npublic static void main(String[] args) {\nString[] a = {\"cat\", \"dog\", \"laser horse\", \"ketchup\", \"horse\", \"horbse\"};\n\nfor (int i = 0; i &lt; a.length; i += 1) {\nfor (int j = 0; j &lt; 3; j += 1) {\nSystem.out.println(a[i]);\nif (a[i].contains(\"horse\")) {\nbreak;\n}\n}\n}\n}\n}\n</code></pre> <p>\u8f93\u51fa\uff1a</p> <pre><code>cat\ncat\ncat\ndog\ndog\ndog\nlaser horse\nketchup\nketchup\nketchup\nhorse\nhorbse\nhorbse\nhorbse\n</code></pre> <p>\u5728\u8fd9\u4e2a\u4f8b\u5b50\u91cc\u9762\uff0c<code>horse</code>\u548c<code>laser horse</code>\u90fd\u53ea\u8f93\u51fa\u4e86\u4e00\u6b21\uff0c\u7136\u540e\u5185\u5c42\u7684\u5faa\u73af\u5c31\u76f4\u63a5\u88ab\u7ec8\u6b62\u4e86</p>"},{"location":"Course/cs61b/week1/#forenhanced-for-loop","title":"\u589e\u5f3afor\u5faa\u73af(enhanced for loop)","text":"<pre><code>public class EnhancedForBreakDemo {\npublic static void main(String[] args) {\nString[] a = {\"cat\", \"dog\", \"laser horse\", \"ketchup\", \"horse\", \"horbse\"};\n\nfor (String s : a) {\nfor (int j = 0; j &lt; 3; j += 1) {\nSystem.out.println(s);\nif (s.contains(\"horse\")) {\nbreak;\n}                }\n}\n}\n}\n</code></pre> <p>\u8f93\u51fa\u662f</p> <pre><code>cat\ncat\ncat\ndog\ndog\ndog\nlaser horse\nketchup\nketchup\nketchup\nhorse\nhorbse\nhorbse\nhorbse\n</code></pre>"},{"location":"Course/cs61b/week1/#lecture-2","title":"Lecture 2","text":"<p>\u8c03\u7528\u5176\u4ed6\u7c7b\u7684\u7c7b\u88ab\u79f0\u4e3a\u88ab\u8c03\u7528\u7c7b\u7684\u201cclient\u201d</p> <p>A class that uses another class is sometimes called a \"client\" of that class, i.e. <code>DogLauncher</code> is a client of <code>Dog</code>.</p> <pre><code>public class Dog {\n\n// instance variable\npublic int weightInPounds;\n/** one integer constructor for dogs. */\npublic Dog(int w) {\nweightInPounds = w;\n}\n// non-static method a.k.a Instance Method\npublic void makeNoise() {\nif (weightInPounds &lt; 10) {\nSystem.out.println(\"yip!\");\n} else if (weightInPounds &lt; 30) {\nSystem.out.println(\"bark.\");\n} else {\nSystem.out.println(\"wooof!\");\n}\n}\n}\n</code></pre> <pre><code>public class DogLauncher {\npublic static void main(String[] args) {\nDog d;\n// An Object in Java is an instance of any class.\nd = new Dog();\n// Members of a class are accessed using dot notation.\nd.weightInPounds = 20;\nd.makeNoise();\n}\n}\n</code></pre>"},{"location":"Course/cs61b/week1/#key-features","title":"key features","text":"<ul> <li>An <code>Object</code> in Java is an instance of any class.</li> <li>The <code>Dog</code> class has its own variables, also known as instance variables or non-static variables. These must be declared inside the class, unlike languages like Python or Matlab, where new variables can be added at runtime.</li> <li>The method that we created in the <code>Dog</code> class did not have the <code>static</code> keyword. We call such methods instance methods or non-static methods.</li> <li>To call the <code>makeNoise</code> method, we had to first instantiate a <code>Dog</code> using the <code>new</code> keyword, and then make a specific <code>Dog</code> bark. In other words, we called <code>d.makeNoise()</code> instead of <code>Dog.makeNoise()</code>.</li> <li>Once an object has been instantiated, it can be assigned to a declared variable of the appropriate type, e.g. <code>d = new Dog();</code></li> <li>Variables and methods of a class are also called members of a class.</li> <li>Members of a class are accessed using dot notation.</li> </ul> <p>\u6784\u9020\u51fd\u6570\u5176\u5b9e\u5c31\u662f\u7528\u6765\u521b\u5efa\u5bf9\u8c61\u7684\u51fd\u6570\uff0c\u53c8\u53eb\u6784\u9020\u5668\u3002\u6784\u9020\u51fd\u6570\u662f\u4e00\u4e2a\u7c7b\u521b\u5efa\u5bf9\u8c61\u7684\u6839\u672c\u9014\u5f84\uff0c\u5982\u679c\u4e00\u4e2a\u7c7b\u6ca1\u6709\u6784\u9020\u5668\uff0c\u5219\u5b83\u65e0\u6cd5\u521b\u5efa\u5b9e\u4f8b\uff08\u5bf9\u8c61\uff09\u3002\u5982\u679c\u4f60\u6ca1\u6709\u7ed9\u4e00\u4e2a\u7c7b\u663e\u5f0f\u5730\u521b\u5efa\u4e00\u4e2a\u6784\u9020\u5668\uff0c\u5219\u7cfb\u7edf\u4f1a\u81ea\u52a8\u4e3a\u5176\u521b\u5efa\u4e00\u4e2a\u9ed8\u8ba4\u7684\u6784\u9020\u5668\u3002\u5982\u679c\u4f60\u663e\u5f0f\u5730\u4e3a\u4e00\u4e2a\u7c7b\u521b\u5efa\u4e86\u6784\u9020\u5668\uff0c\u5219\u7cfb\u7edf\u4e0d\u4f1a\u518d\u4e3a\u5176\u63d0\u4f9b\u9ed8\u8ba4\u6784\u9020\u5668\u3002</p> <p>\u65e0\u53c2\u6784\u9020\u51fd\u6570\uff08\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\uff09\uff1a</p> <pre><code>public \u7c7b\u540d\u79f0(){\n\u2026\u2026\n}\n</code></pre> <p>\u5e26\u53c2\u6784\u9020\u51fd\u6570\uff1a</p> <pre><code>public \u7c7b\u540d\u79f0(\u53c2\u65701\uff0c\u53c2\u65702) {\n}\n</code></pre> <p>\u4e3a\u4e86\u5b9e\u73b0\u5728\u9762\u5411\u5bf9\u8c61\u7684\u8bed\u8a00\u91cc\u521b\u5efa\u5bf9\u8c61<code>Dog d = new Dog(20)</code>\uff1a</p> <pre><code>public class DogLauncher {\npublic static void main(String[] args) {\nDog d = new Dog(20);\nd.makeNoise();\n}\n}\n</code></pre> <p>\u6211\u4eec\u9700\u8981\u5f80\u88ab\u8c03\u7528\u7684class\u91cc\u9762\u52a0\u5165\u4e00\u4e2a\u6784\u9020\u5668constructor:</p> <pre><code>public class Dog {\npublic int weightInPounds;\n\n// constructor\n// The constructor with signature public Dog(int w) will be invoked anytime that we try to create a Dog using the new keyword and a single integer parameter.\npublic Dog(int w) {\nweightInPounds = w;\n}\n\npublic void makeNoise() {\nif (weightInPounds &lt; 10) {\nSystem.out.println(\"yipyipyip!\");\n} else if (weightInPounds &lt; 30) {\nSystem.out.println(\"bark. bark.\");\n} else {\nSystem.out.println(\"woof!\");\n}    }\n}\n</code></pre> <p>we can create arrays of instantiated objects in java</p> <pre><code>public class DogLauncher {\npublic static void main(String[] args) {\nDog d = new Dog(51);\nd.makeNoise();\n// create an array to hold two Dog objects\nDog[] dogs = new Dog[2];\n// create each actual Dog\ndogs[0] = new Dog(5);\ndogs[1] = new Dog(20);\ndogs[0].makeNoise();\ndogs[1].makeNoise();\n}\n}\n</code></pre>"},{"location":"Course/cs61b/week1/#static-vs-non-static-method-instance-method","title":"static vs. non static method (instance method)","text":"<p>Java allows us to define two types of methods:</p> <ul> <li>Class methods, a.k.a. static methods.</li> <li>Instance methods, a.k.a. non-static methods.</li> </ul> <p>Instance methods are actions that can be taken only by a specific instance of a class. Static methods are actions that are taken by the class itself. Both are useful in different circumstances. As an example of a static method, the <code>Math</code> class provides a <code>sqrt</code> method. Because it is static, we can call it as follows:</p> <pre><code>x = Math.sqrt(100);\n</code></pre> <p>If <code>sqrt</code> had been an instance method, we would have instead the awkward syntax below. Luckily <code>sqrt</code> is a static method so we don't have to do this in real programs.</p> <pre><code>Math m = new Math();\nx = m.sqrt(100);\n</code></pre> <pre><code>public class DogLauncher {\npublic static void main(String[] args) {\nDog d = new Dog(51);\nd.makeNoise();\n// create an array to hold two Dog objects\nDog[] dogs = new Dog[2];\n// create each actual Dog\ndogs[0] = new Dog(5);\ndogs[1] = new Dog(20);\ndogs[0].makeNoise();\ndogs[1].makeNoise();\ndouble x = Math.round(36);\nSystem.out.println(x);\nDog d1 = new Dog(5);\nDog d2 = new Dog(40);\n// \u6211\u4eec\u5728\u8fd9\u91cc\u4f7f\u7528Dog.maxDog\uff0c\u8fd9\u79cd\u65b9\u6cd5\u8c03\u7528\u7684Dog class\uff0c\u800c\u76f4\u63a5\u8c03\u7528Dog\u7c7b\u4e2d\u7684\u65b9\u6cd5\u662fstatic\u65b9\u6cd5\uff0c\u6240\u4ee5maxDog\u5b9a\u4e49\u7684\u65f6\u5019\u5fc5\u987b\u662fpublic static Dog maxDog\n// Dog bigger = Dog.maxDog(d1, d2);\n\n// \u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u7684\u662f\u5b9e\u4f8b\u5316\u4e4b\u540e\u7684d1.maxDog\uff0c\u6240\u4ee5\u662fnon-static\u7684\nDog bigger = d1.maxDog(d2);\nbigger.makeNoise();\n\n//\u8fd9\u79cd\u662f\u975e\u5e38\u4e0d\u597d\u7684\uff0cbad style\uff0c\u56e0\u4e3astatic\u7684\u53d8\u91cf\u6700\u597d\u662f\u901a\u8fc7Dog.bionome\u6765\u8fdb\u884c\u8c03\u7528\nSystem.out.println(d.bionome);\n// \u8fd9\u79cd\u5c31\u6bd4\u8f83\u597d\nSystem.out.println(Dog.bionome);\n}\n}\n</code></pre> <pre><code>public class Dog {\n\n// instance variable\npublic int weightInPounds;\npublic static String bionome = \"canis familiaris\";\n/** one integer constructor for dogs. */\npublic Dog(int w) {\nweightInPounds = w;\n}\n// non-static method a.k.a Instance Method\npublic void makeNoise() {\nif (weightInPounds &lt; 10) {\nSystem.out.println(\"yip!\");\n} else if (weightInPounds &lt; 30) {\nSystem.out.println(\"bark.\");\n} else {\nSystem.out.println(\"wooof!\");\n}\n}\n// in this case, we are invoking the method using the class name.\npublic static Dog maxDog(Dog d1, Dog d2) {\nif (d1.weightInPounds &gt; d2.weightInPounds) {\nreturn d1;\n} return d2;\n}\npublic Dog maxDog(Dog d2) {\nif (this.weightInPounds &gt; d2.weightInPounds) {\nreturn this;\n}\nreturn d2;\n}\n}\n</code></pre> <ul> <li>a variable or method defined in a class is also called a member of that class</li> <li>static members are accessed using class name, e.g. Dog.bionome</li> <li>Non-static members cannot be invoked using class name</li> <li>static methods must access instance variables via a specific instance, e.g. d1.</li> </ul>"},{"location":"Course/cs61b/week1/#public-static-void-main-string-args","title":"public static void main (String[] args)","text":"<ul> <li><code>public</code>: So far, all of our methods start with this keyword.</li> <li><code>static</code>: It is a static method, not associated with any particular instance.</li> <li><code>void</code>: It has no return type.</li> <li><code>main</code>: This is the name of the method.</li> <li><code>String[] args</code>: This is a parameter that is passed to the main method.</li> </ul>"},{"location":"Course/cs61b/week1/#args-summing-command-line-arguments","title":"args[]\u7684\u4f7f\u7528-summing command line arguments","text":"<pre><code>public class DemoSum {\npublic static void main (String[] args) {\nint sum = 0;\nint i = 0;\nwhile (i &lt; args.length) {\nsum = sum + Integer.parseInt(args[i]);\ni += 1;\n}\nSystem.out.println(sum);\n}\n}\n</code></pre>"},{"location":"Course/cs61b/week1/#exercise","title":"Exercise","text":"<pre><code>public class HelloNumbers {\npublic static void main (String[] args) {\nint x = 0;\nint sum = 0;\nwhile (x &lt; 10) {\nSystem.out.println(sum);\nx = x + 1;\nsum = sum + x;\n}\n}\n}\n</code></pre>"},{"location":"Course/cs61b/week1/#homework-exercise-2","title":"Homework exercise 2","text":"<pre><code>public class Max {\npublic static int max (int[] array) {\nint x = 0;\nint m = array[0];\nint length = array.length;\nwhile (x &lt; length) {\nif (array[x]&gt; m ) {\nm = array[x];\n}\nx = x + 1;\n}\nreturn m;\n}\npublic static void main (String[] args) {\nint[] numbers = new int[]{9, 2, 15, 2, 22, 10, 6};\nSystem.out.println(max(numbers));\n}\n}\n</code></pre>"},{"location":"Course/cs61b/week1/#homework-exercise-4","title":"Homework exercise 4","text":"<pre><code>public class WindowPosSum {\npublic static void windowPosSum(int[] a, int n) {\n/**\n         * replace each element a[i] with the sum of a[i] through a[i + n]\n         */\n// copy the a array to a new array b\nint[] b = new int[a.length];\nfor (int i = 0; i &lt; a.length; i += 1) {\nb[i] = a[i];\n}\n// \u904d\u5386\u6bcf\u4e2a\u5143\u7d20\nfor (int i = 0; i &lt; a.length; i += 1) {\nif (a[i] &lt;= 0) {\ncontinue;\n}\nelse {\nif ((i + n) &lt; a.length) {\nint temp = 0;\nfor (int j = i; j &lt;= i + n; j += 1) {\ntemp += b[j];\n}\na[i] = temp;\n}\nelse {\nint temp = 0;\nfor (int j = i; j &lt; a.length; j += 1) {\ntemp += b[j];\n}\na[i] = temp;\n}\n}\n}\n}\npublic static void main(String[] args) {\nint[] a = {1, 2, -3, 4, 5, 4};\nint n = 3;\nwindowPosSum(a, n);\nSystem.out.println(java.util.Arrays.toString(a));\n}\n\n}\n</code></pre>"},{"location":"Course/cs61b/week1/#break","title":"\u4f7f\u7528break:","text":"<pre><code>public class WindowPosSum {\npublic static void windowPosSum(int[] a, int n) {\n/**\n         * replace each element a[i] with the sum of a[i] through a[i + n]\n         */\n// copy the a array to a new array b\nint[] b = new int[a.length];\nfor (int i = 0; i &lt; a.length; i += 1) {\nb[i] = a[i];\n}\n// \u904d\u5386\u6bcf\u4e2a\u5143\u7d20\nfor (int i = 0; i &lt; a.length; i += 1) {\nif (a[i] &lt;= 0) {\ncontinue;\n}\nelse {\nint temp = 0;\nfor (int j = i; j &lt;= i + n; j++) {\nif (j &gt;= a.length) {\nbreak;\n}\ntemp += b[j];\n}\na[i] = temp;\n}\n}\n}\npublic static void main(String[] args) {\nint[] a = {1, 2, -3, 4, 5, 4};\nint n = 3;\nwindowPosSum(a, n);\nSystem.out.println(java.util.Arrays.toString(a));\n}\n\n}\n</code></pre>"},{"location":"Course/cs61b/week1/#exercise-121","title":"Exercise 1.2.1","text":"<pre><code>public static Dog maxDog(Dog d1, Dog d2) {\nif (weightInPounds &gt; d2.weightInPounds) {\nreturn this;\n}\nreturn d2;\n}\n</code></pre>"},{"location":"Course/cs61b/week2/","title":"CS61B Week 2","text":""},{"location":"Course/cs61b/week2/#lecture-31","title":"Lecture 3.1","text":""},{"location":"Course/cs61b/week2/#1-testing-and-selection-sort","title":"1. testing and selection sort","text":"<p>programmar believe their code works because of tests they write themselves </p> <p>\u5148\u5199test\u7a0b\u5e8f</p>"},{"location":"Course/cs61b/week2/#ad-hoc-testing","title":"Ad Hoc Testing","text":"<p>\u5728java\u91cc\u9762\uff0c==\u6bd4\u8f83\u7684\u662f\u5b58\u50a8\u7684address</p> <pre><code>public class TestSort {\npublic static void testSort() {\nString[] input = {\"i\", \"have\", \"an\", \"egg\"};\nString[] expected = {\"an\", \"egg\", \"have\", \"i\"};\nSort.sort();\nif (!java.util.Arrays.equals(input, expected)) {\nSystem.out.println(\"Error! There seems to be a problem with Sort.sort.\");\n}\nfor (int i = 0; i &lt; input.length; i++) {\nif (!input[i].equals(expected[i])) {\nSystem.out.println(\"Mismach in position \" + i + \", expected: \" + expected[i] + \", but got: \" + input[i]);\n}\n}\n}\npublic static void main(String[] args) {\ntestSort();\n}\n}\n</code></pre>"},{"location":"Course/cs61b/week2/#junit-testing","title":"JUnit Testing","text":"<pre><code>public class TestSort {\npublic static void testSort() {\nString[] input = {\"i\", \"have\", \"an\", \"egg\"};\nString[] expected = {\"an\", \"egg\", \"have\", \"i\"};\nSort.sort();\norg.junit.Assert.assertArrayEquals(expected, input);\n\n}\npublic static void main(String[] args) {\ntestSort();\n}\n}\n</code></pre> <p>And the information we would get is:</p> <pre><code>Exception in thread \"main\" arrays first differed at element [0]; expected:&lt;[an]&gt; but was:&lt;[i]&gt;\n    at org.junit.internal.ComparisonCriteria.arrayEquals(ComparisonCriteria.java:78)\nat org.junit.internal.ComparisonCriteria.arrayEquals(ComparisonCriteria.java:28)\nat org.junit.Assert.internalArrayEquals(Assert.java:534)\nat org.junit.Assert.assertArrayEquals(Assert.java:285)\nat org.junit.Assert.assertArrayEquals(Assert.java:300)\nat TestSort.testSort(TestSort.java:6)\nat TestSort.main(TestSort.java:10)\nCaused by: org.junit.ComparisonFailure: expected:&lt;[an]&gt; but was:&lt;[i]&gt;\n    at org.junit.Assert.assertEquals(Assert.java:117)\nat org.junit.Assert.assertEquals(Assert.java:146)\nat org.junit.internal.ExactComparisonCriteria.assertElementsEqual(ExactComparisonCriteria.java:8)\nat org.junit.internal.ComparisonCriteria.arrayEquals(ComparisonCriteria.java:76)\n... 6 more\n</code></pre>"},{"location":"Course/cs61b/week2/#selection-sort","title":"Selection Sort \uff08\u9009\u62e9\u6392\u5e8f\uff09","text":""},{"location":"Course/cs61b/week2/#lecture-21","title":"Lecture 2.1","text":""},{"location":"Course/cs61b/week2/#lecture-22","title":"Lecture 2.2","text":""},{"location":"Course/ddca/ddca/","title":"ETH Zurich\uff1aDigital Design and Computer Architecture","text":""},{"location":"Course/ddca/ddca/#information","title":"Information","text":"<p>\u8fd9\u95e8\u8ba1\u7b97\u5373\u4f53\u7cfb\u7ed3\u6784\u8bfe\u7528\u7684\u4e5f\u662fVerilog\u548cMIPS\uff0c\u548c\u675c\u514b\u7684ECE550\u975e\u5e38\u76f8\u4f3c\uff0c\u6240\u4ee5\u62ff\u6765\u5f53\u9884\u4e60\u548c\u590d\u4e60\u6750\u6599\u76f8\u5f53\u5408\u9002</p>"},{"location":"Course/dukeC/1_information/","title":"1. Information","text":"<p>\u6839\u636eCS\u81ea\u5b66\u6307\u5357:</p> <ul> <li>\u8bfe\u7a0b\u6bd4\u8f83\u6ce8\u91cd\u57fa\u7840\u548c\u57fa\u672c\u6982\u5ff5\uff0c\u6bd4\u5982frame\uff0ctack memory\uff0cheap memory\u7b49\uff0c\u8bb2\u5f97\u5f88\u900f</li> <li>\u9488\u5bf9C\u6700\u96be\u638c\u63e1\u7684\u6307\u9488\uff0c\u6709\u597d\u7684\u7ec3\u4e60\u548c\u7f16\u7a0b\u6765\u52a0\u6df1\u548c\u5f3a\u5316\u7406\u89e3</li> <li>\u6709\u5f88\u597d\u7684GDB\uff0cValgrind\u4e0a\u624b\u7ec3\u4e60\uff0c\u4f5c\u4e1a\u4e5f\u4f1a\u6d89\u53ca\u4e00\u4e9b\u57fa\u672c\u7684git\u7ec3\u4e60</li> <li>\u8001\u5e08\u5efa\u8bae\u4f5c\u4e1a\u4f7f\u7528Emacs\uff0c\u6240\u4ee5\u5bf9Emacs\u5c0f\u767d\u6765\u8bf4\uff0c\u662f\u4e2a\u4e0d\u9519\u7684\u5165\u95e8</li> <li>\u867d\u7136\u8bfe\u7a0b\u540d\u79f0\u662f\u5165\u95e8\uff0c\u4f46\u662f\u517c\u5177\u5e7f\u5ea6\u548c\u6df1\u5ea6</li> </ul> <p>\u5b66\u4e60\u7406\u7531\uff1a</p> <ol> <li> <p>\u675c\u514bECE\u7684\u8bfe\u7a0b<code>ECE551 Programming, Data Structures, and Algorithms in C++</code>\u4f1a\u4ece\u4eceC\u8bed\u8a00\u5feb\u901f\u5165\u95e8\uff0c\u7136\u540e\u8f6c\u5411C++\u3002\u5176\u4e2d\uff0cC\u8bed\u8a00\u90e8\u5206\u7684\u8bfe\u7a0b\u9075\u5faa\u7684\u5c31\u662fcoursera\u4e0a\u7684\u8fd9\u95e8<code>Duke Introductory C Programming Speciallization</code>\u3002</p> </li> <li> <p>\u5b66\u4e60C\u7684\u8bfe\u7a0b\u662f\u4e0acomputer organization \u7684\u57fa\u7840\uff0c\u5728intro\u91cc\u8001\u5e08\u4e5f\u4ecb\u7ecd\u4e86\u8fd9\u4e00\u70b9</p> </li> </ol>"},{"location":"Course/dukeC/2/","title":"2. Programming Fundamentals","text":""},{"location":"Course/dukeC/2/#module-1-introduction","title":"Module 1 Introduction","text":""},{"location":"Course/dukeC/2/#1","title":"1. \u4e3b\u8981\u5185\u5bb9","text":"<p>\u8fd9\u4e2amodule\u4e3b\u8981\u8bb2\u7684\u75287\u4e2a\u6b65\u9aa4\uff08the Seven Steps\uff09\u6765\u7cfb\u7edf\u7684\u89e3\u51b3\u7f16\u7a0b\u95ee\u9898\uff0c\u5e76\u4e14\u89c4\u5212\u51fa\u6709\u9488\u5bf9\u6027\u4e14\u6b63\u786e\u7684\u7b97\u6cd5\u3002</p>"},{"location":"Course/dukeC/2/#2-seven-steps","title":"2. Seven Steps","text":""},{"location":"Course/dukeC/2/#i","title":"I \u8bfe\u7a0b\u7684\u67b6\u6784","text":"<p>\u5b66\u4e60\u600e\u4e48program\uff0c\u5b66\u4e60\u5982\u4f55\u9605\u8bfb\u4ee3\u7801</p> <p>Course 1: seven steps -- \u9605\u8bfb\u4ee3\u7801\u4e2d\u7684syntax(\u53e5\u6cd5\uff0c\u53e5\u6cd5\u89c4\u5219) and semantics(\u8bed\u4e49\u5b66\uff1b\u8bed\u4e49\u8bba)</p> <p>Course 2: editing, compiling and running code; testing and debugging</p> <p>Course 3: Pointers, arrays, and strings; recursion</p> <p>Course 4: \u548c\u7528\u6237\u4ee5\u53ca\u7cfb\u7edf\u4ea4\u4e92\uff08IO\u7cfb\u7edf\uff09\uff1b\u52a8\u6001\u5185\u5b58\u89c4\u5212\uff08dynamic memory allocation\uff09</p>"},{"location":"Course/dukeC/2/#ii-programming-plan-first-then-code","title":"II Programming: Plan First, Then Code","text":"<p>\u53ef\u4ee5\u5c06 a large programming task \u5206\u89e3\u6210several small tasks\uff1b30\u5206\u949f\u7684planning \u53ef\u4ee5\u76f8\u5f53\u4e8e\u51e0\u4e2a\u5c0f\u65f6\u7684try to make the code work properly</p> <p>\u5c06\u5199\u4ee3\u7801\u6bd4\u505a\u9020\u6a21\u5929\u5927\u697c\uff0c\u9700\u8981\u73b0\u6709\u5b8c\u6574\u7684approved\u84dd\u56fe\u624d\u80fd\u5f00\u59cb\u9020\uff1acome up with a complete plan (algorithm) first and build (implement in code) second</p> <p>\u7f16\u7a0b\u7684\u6838\u5fc3\u662f\u89e3\u51b3\u4e00\u7c7b\u95ee\u9898\u800c\u4e0d\u662f\u89e3\u51b3\u4e00\u4e2a\u95ee\u9898\uff1a\u5f53\u6211\u4eec\u60f3\u77e5\u90537\u662f\u4e0d\u662fprime\u7684\u65f6\u5019\uff0c\u6211\u4eec\u4f1a\u5199\u4e00\u4e2a\u7a0b\u5e8f\u53bb\u5224\u65ad\u4efb\u610f\u4e00\u4e2aN\u662f\u4e0d\u662fprime</p> <p>\u6211\u4eec\u9700\u8981\u786e\u5b9a\u7279\u5b9a\u7684\u8f93\u5165\u503c\uff0c\u89c4\u5b9a\u8f93\u5165\u503c\u7684\u7c7b\u578b</p> <p>\u5728coding\u524d\uff0c\u6211\u4eec\u9700\u8981\u786e\u5b9a\u786e\u5207\u7684algorithm</p>"},{"location":"Course/dukeC/2/#iii-overview-of-the-seven-steps","title":"III Overview of the Seven Steps","text":""},{"location":"Course/dukeC/2/#3-the-first-four-steps","title":"3. The First Four Steps","text":""},{"location":"Course/dukeC/2/#step-1-work-an-example-yourself","title":"Step 1: work an example yourself","text":"<p>\u5c31\u662f\u81ea\u5df1\u60f3\u51fa\u4e00\u4e2a\u7279\u5b9a\u7684\u4f8b\u5b50\uff0c\u6bd4\u5982\u5728\u5199\u4e00\u4e2a\u5224\u65adN\u662f\u4e0d\u662f\u8d28\u6570\u7684\u4f8b\u5b50\u91cc\uff0c\u5148\u5047\u5b9aN\u662f7\uff0c\u7136\u540e\u628a\u5224\u65ad7\u662f\u8d28\u6570\u7684\u8fc7\u7a0b\u60f3\u51fa\u6765\u5e76\u4e14\u6700\u597d\u753b\u4e00\u4e2a\u56fe\uff08draw a diagram\uff09</p> <p></p> <p>Domain knowledge: \u9886\u57df\u77e5\u8bc6</p>"},{"location":"Course/dukeC/2/#step-2-write-down-what-you-just-did","title":"Step 2 write down what you just did","text":"<p>\u5c31\u662f\u5199\u4e0b\u4e00\u7ec4\u6e05\u6670\u7684\u8bf4\u660e\uff0c\u5176\u4ed6\u4eba\u90fd\u53ef\u4ee5\u9075\u5faa\uff0c\u4ee5\u91cd\u73b0\u4f60\u521a\u521a\u89e3\u51b3\u7684\u7279\u5b9a\u95ee\u9898\u5b9e\u4f8b\u7684\u7b54\u6848</p> <p>\u96be\u70b9\u5728\u4e8e\u4f1a\u5ffd\u7565\u4e00\u4e9b\u5c0f\u7684\u7ec6\u8282</p>"},{"location":"Course/dukeC/2/#step-3-generalize-your-steps","title":"Step 3 generalize your steps","text":"<p>\u9996\u5148\uff0c\u6211\u4eec\u5fc5\u987b\u53d6\u6211\u4eec\u4f7f\u7528\u7684\u7279\u5b9a\u503c\u5e76\u7528\u53c2\u6570\u7684\u6570\u5b66\u8868\u8fbe\u5f0f\u4ee3\u66ff\u5b83\u4eec</p> <p>\u6982\u62ec\u6b65\u9aa4\u7684\u7b2c\u4e8c\u79cd\u5e38\u89c1\u65b9\u6cd5\u662f\u5bfb\u627e\u91cd\u590d\u2014\u2014\u76f8\u540c\u7684\u6b65\u9aa4\u53cd\u590d\u91cd\u590d</p> <p>If you find it difficult to see a pattern, it is recommended to repeat steps 1 and 2 on different examples.</p>"},{"location":"Course/dukeC/2/#step-4-test-your-algorithms","title":"Step 4 test your algorithms","text":""},{"location":"Course/dukeC/2/#4-examples","title":"4. Examples","text":"<p>\u7ed9\u4e86\u4e00\u4e2a\u5173\u4e8e\u683c\u5b50\u7684example\uff0c\u53ef\u4ee5\u8fdb\u884c\u76f4\u89c2\u5730\u627e\u89c4\u5f8b</p> <p></p>"},{"location":"Course/dukeC/2/#module-2-reading-code","title":"Module 2 Reading Code","text":""},{"location":"Course/dukeC/2/#1_1","title":"1. \u4e3b\u8981\u5185\u5bb9","text":"<p>\u4e3b\u8981\u5b66\u4f1a\u9605\u8bfb\u3001\u7406\u89e3\u3001\u4f7f\u7528\u51fd\u6570\u3001\u6761\u4ef6\u8bed\u53e5\u3001\u5faa\u73af\u548c\u5176\u4ed6\u57fa\u7840\u7684\u6280\u5de7</p>"},{"location":"Course/dukeC/2/#2-variables-and-expressions","title":"2. variables and expressions","text":"<p>\u5148\u8bfb\u4e00\u4e9b\u597d\u7684\u4ee3\u7801\uff0c\u624d\u80fd\u81ea\u5df1\u5199\u597d\u4ee3\u7801</p> <p><code>programs track most of their state in variables</code></p>"},{"location":"Course/dukeC/2/#i-decalaration","title":"I decalaration","text":"<p>The name of a variable may be any <code>identifier</code>.</p> <p>Identifier: the formal programming term for a word that can be used to name something in any programming language.</p> <p>\u5728C\u91cc\u9762\uff0cidentifier\u53ef\u4ee5\u5305\u542b\u4efb\u4f55\u5b57\u6bcd\u3001\u6570\u5b57\u548c\u4e0b\u5212\u7ebf_;\u53ea\u80fd\u7528\u5b57\u6bcd\u548c\u4e0b\u5212\u7ebf\u8fdb\u884c\u5f00\u5934\uff0c\u4e0d\u80fd\u4f7f\u7528\u6570\u5b57\u5f00\u5934\uff01</p> <p>\u4e00\u53e5declaration\u662f\u4ee5\u5206\u53f7\uff08semicolon\uff09\u8fdb\u884c\u7ed3\u5c3e\u7684\uff1a</p> <pre><code>int myVariable;\n</code></pre>"},{"location":"Course/dukeC/2/#ii-assigning-a-variable-assignment-statement","title":"II assigning a variable (assignment statement)","text":"<p>\u4e00\u4e2astatement\u7684\u5de6\u8fb9\u662flvalue</p> <p>\u4e2d\u95f4\u662f\u4e00\u4e2aequals sign (\u53ebassignment operator)</p> <p>\u53f3\u8fb9\u662frvalue</p> <p>Declaration \u548c Assignment \u53ef\u4ee5\u5408\u5e76\u6210\u4e00\u4e2astatement</p>"},{"location":"Course/dukeC/2/#iii-expression","title":"III expression","text":"<p>expression\u7684\u5b9a\u4e49\uff1aan expression is a combination of values and operations which evaluates to a value</p> <p>% modular\uff1a\u53d6\u4f59\u6570\uff0cthe modulus operator evaluates to the remainder when dividing the first operand by the second; 19%15 = 4 (\u8bfb\u4f5c19 modulus \u6216\u8005mod 15 = 4)</p> <p>\u6574\u6570\u9664\u6cd5\u5f97\u5230\u7684\u662f\u6574\u6570\uff0c\u800c\u4e14\u662f\u5411\u4e0b\u53d6\u6574\u7684\u6574\u6570\uff0c\u56e0\u4e3aint\u7c7b\u578b\u53ea\u80fd\u5b58\u50a8\u6574\u6570\uff1afloor division\uff0cround down the result\uff0c5 / 2 = 2</p>"},{"location":"Course/dukeC/2/#3-functions","title":"3. functions","text":"<p>\u5982\u679c\u6211\u4eec\u91cd\u590d\u5199\u4e86\u4e24\u6bb5\u7c7b\u4f3c\u7684\u4ee3\u7801\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u9700\u8981\u5c06\u4ee3\u7801\u6982\u62ec\u6210function\u4e86</p> <p>\u4f18\u70b9\uff1a</p> <ol> <li>can re-use</li> <li>abstraction</li> </ol> <p>declaring a function and call a function</p> <p></p>"},{"location":"Course/dukeC/2/#i-frame","title":"I Frame","text":"<p>A frame (\u6216\u8005\u53ebstack frame\uff0c\u56e0\u4e3a\u4ed6\u4eec\u4f4d\u4e8ecall stack):</p> <p></p> <p>the expression involves a function call</p>"},{"location":"Course/dukeC/2/#ii-scope","title":"II Scope","text":"<p>Scope \u662f\u7528\u6765\u89e3\u51b3\u4e00\u4e2a\u5927\u9879\u76ee\u91cc\u6709\u76f8\u540c\u540d\u79f0\u7684\u53d8\u91cf\u95ee\u9898\u7684</p> <p>In C, the scope of a local variable begins with its declaration and ends at the closing curly-brace (})</p> <p>C\u91cc\u9762\u4e00\u4e2a\u5c40\u90e8\u53d8\u91cf\u7684\u4f5c\u7528\u57df\u662f\u4ecedeclartion\u5f00\u59cb\u5230}\u7ed3\u675f</p> <p></p>"},{"location":"Course/dukeC/2/#4-printing","title":"4. printing","text":"<pre><code>int x = 3;\nint y = 4;\nprintf(\"x + y = %d\", x + y);\n</code></pre> <p>escape sequences: \u5373\u8f6c\u4e49\u7b26</p> <p>The most common escape sequence you will encounter is \\n, which means \u201cnewline\u201d.</p> <p>\\ is the escape sequence for a literal backslash</p> <p>\\t\uff1atab</p> <p>Format specifier: \u7c7b\u4f3c%d\u8fd9\u79cd\u7b26\u53f7</p>"},{"location":"Course/dukeC/2/#5-conditional-statements","title":"5. conditional statements","text":"<p>clause\uff1a\u4ece\u53e5</p>"},{"location":"Course/dukeC/2/#i-ifelse","title":"I if/else","text":"<p>\"then\" clause</p> <p>\"if\" clause</p>"},{"location":"Course/dukeC/2/#ii-switchcase","title":"II switch/case","text":"<p>\u6ce8\u610f\u53ea\u6709\u5728case\u91cc\u9762\u9047\u5230<code>break;</code>\u4e4b\u540e\uff0c\u7a0b\u5e8f\u7684\u8fd0\u884c\u624d\u4f1a\u8df3\u5230\u4e0b\u4e00\u4e2a\u82b1\u62ec\u53f7\uff01\u6ca1\u6709break\u7684\u8bdd\uff0c\u4f1a\u7ee7\u7eed\u8fd0\u884c\u4e0b\u4e00\u4e2acase\uff01</p> <p>\u6216\u8005\u78b0\u5230return \u7684\u8bdd\u4e5f\u53ef\u4ee5\u76f4\u63a5\u8df3\u51fa\u5224\u65ad\u8bed\u53e5</p> <p>\u4e3e\u4f8b\uff1a</p> <pre><code># include &lt;iostream&gt;\n\nusing namespace std;\n\nint main () {\nint x;\ncin &gt;&gt; x;\nswitch (x) {\ncase 1:\nprintf(\"1\\n\");\nbreak;\ncase 2:\nprintf(\"2\\n\");\ncase 3:\nprintf(\"3\\n\");\nbreak;\ncase 4:\nprintf(\"4\\n\");\n}\nreturn 0;\n}\n</code></pre> <p>\u8fd0\u884c\u7ed3\u679c\uff1a</p> <pre><code>\u8f93\u51651 1\n\u8f93\u51652\n2\n3\n</code></pre> <p></p>"},{"location":"Course/dukeC/2/#iii-shorthand","title":"III shorthand","text":"<p>Shorthand \u53c8\u53ebsyntactic sugar</p> <p>\u6700\u5e38\u89c1\u7684\u7b80\u7565\u8868\u8fbe\u65b9\u5f0f\uff1a</p> <pre><code>x += y;\nx -= y;\nx *= y;\nx /= y;\nx ++;\n++x;\nx--;\n--x;\n</code></pre>"},{"location":"Course/dukeC/2/#6-loops","title":"6. loops","text":"<p>for repitition</p> <p></p>"},{"location":"Course/peking/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E4%B8%8E%E7%AE%97%E6%B3%95/","title":"\u7a0b\u5e8f\u8bbe\u8ba1\u4e0e\u7b97\u6cd5","text":""},{"location":"Course/peking/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E4%B8%8E%E7%AE%97%E6%B3%95/#fundamentals-of-programming-and-algorithms","title":"Fundamentals of Programming and Algorithms","text":"<p>\u7b97\u6cd5+\u6570\u636e\u7ed3\u6784=\u7a0b\u5e8f</p> <p>\u8fd9\u95e8\u8bfe\u7684\u5f88\u591a\u8bfe\u4ef6\u5f55\u5236\u4e0e2009\u5e74\u9644\u8fd1\uff0c\u5df2\u7ecf\u5341\u591a\u5e74\u8fc7\u53bb\uff0c\u4f7f\u7528\u7684C\u7684\u7248\u672c\u4e5f\u662f\u7565\u5fae\u843d\u4f0d\u7684</p> <p>\u4f46\u662f\u4e0d\u5931\u4e3a\u4e00\u95e8\u4e2d\u6587\u7684\u5b9e\u7528\u7684\u8ba1\u7b97\u673a\u5165\u95e8\u8bfe\u7a0b\uff0c\u80fd\u591f\u4e00\u6b21\u6027\u6253\u901aC\u3001C++\u3001\u7b97\u6cd5\u4e0e\u6570\u636e\u7ed3\u6784\u4ee5\u53ca\u8f6f\u4ef6\u5de5\u7a0b</p>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/","title":"\u8ba1\u7b97\u5bfc\u8bba\u4e0eC\u8bed\u8a00\u57fa\u7840","text":""},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#information","title":"information","text":"<p>\u8ba1\u7b97\u5bfc\u8bba\uff1a\u8ba1\u7b97\u673a\u7684\u57fa\u672c\u539f\u7406\u3001\u8ba1\u7b97\u673a\u7684\u53d1\u5c55\u8d8b\u52bf\u3001\u7a0b\u5e8f\u8fd0\u884c\u7684\u57fa\u672c\u539f\u7406</p> <p>C\u7a0b\u5e8f\u8bbe\u8ba1\uff1a\u611f\u6027\u8ba4\u8bc6C\u7a0b\u5e8f\u3001\u7406\u6027\u8ba4\u8bc6C\u7a0b\u5e8f</p>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#module-1","title":"Module 1 \u8ba1\u7b97\u673a\u7684\u57fa\u672c\u539f\u7406","text":""},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#_1","title":"\u8ba1\u7b97\u673a\u7684\u57fa\u672c\u539f\u7406\uff08\u4ece\u6570\u5b66\u5371\u673a\u5230\u56fe\u7075\u673a\uff09","text":"<p>\u56fe\u7075\u5956 turing award</p>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#_2","title":"\u4e09\u6b21\u6570\u5b66\u5371\u673a","text":"<p>\u7b2c\u4e00\u6b21\u6570\u5b66\u5371\u673a</p> <p>\u6bd5\u8fbe\u54e5\u62c9\u65af\u5b66\u6d3e\u2014\u2014\u6570\u662f\u4e07\u7269\u7684\u672c\u6e90</p> <p>\u6df1\u4fe1\u4e00\u5207\u6570\u5747\u53ef\u8868\u793a\u79f0\u6574\u6570\u6216\u8005\u6574\u6570\u53ea\u6bd4</p> <p>\u5728\u8bc1\u660e\u52fe\u80a1\u5b9a\u7406\u65f6\u53d1\u73b0\u5462\u67d0\u4e9b\u76f4\u89d2\u4e09\u89d2\u5f62\u7684\u4e09\u8fb9\u4e4b\u6bd4\u4e0d\u80fd\u7528\u6574\u6570\u6765\u8868\u8fbe\uff08\u5e0c\u5e15\u7d22\u65af\u6096\u8bba\uff09</p> <p>\u7b2c\u4e8c\u6b21\u6570\u5b66\u5371\u673a</p> <p>\u5fae\u79ef\u5206\u5efa\u7acb\u5728\u65e0\u7a77\u5c0f\u7684\u5206\u6790\u4e4b\u4e0a\uff08\u725b\u987f\u548c\u83b1\u5e03\u5c3c\u8328\u5206\u522b\u72ec\u7acb\u53d1\u660e\u4e86\u5fae\u79ef\u5206\uff09</p> <p>\u8d1d\u514b\u83b1\u6096\u8bba\uff08\u6c42x^2\u7684\u5bfc\u6570\u7684\u65f6\u5019\u65e0\u7a77\u5c0f\u4e00\u4f1a\u662f0\uff0c\u4e00\u4f1a\u4f5c\u4e3a\u5206\u6bcd\u53c8\u4e0d\u80fd\u4e3a0\uff09</p> <p>\u5b9e\u6570\u7406\u8bba\u5efa\u7acb\u8d77\u4e86\u6781\u9650\u8bba\u7684\u57fa\u672c\u5b9a\u7406</p> <p>\u5bfc\u81f4\u4e86\u96c6\u5408\u8bba\u7684\u8bde\u751f</p> <p>\u7b2c\u4e09\u6b21\u6570\u5b66\u5371\u673a</p> <p>\u5341\u4e5d\u4e16\u7eaa\u4e0b\u534a\u53f6\uff0c\u5eb7\u6258\u5c14\u521b\u7acb\u4e86\u96c6\u5408\u8bba</p> <p>\u201c\u4ece\u81ea\u7136\u6570\u4e0e\u5eb7\u6258\u5c14\u96c6\u5408\u8bba\u51fa\u53d1\u53ef\u4ee5\u5efa\u7acb\u8d77\u6574\u4e2a\u6570\u5b66\u5927\u53a6\u201d</p> <p>\u201c\u4e00\u5207\u6570\u5b66\u6210\u679c\u53ef\u4ee5\u5efa\u7acb\u5728\u96c6\u5408\u8bba\u4e0a\u201d</p> <p>\u7f57\u7d20\u6096\u8bba\uff1aS\u7531\u4e00\u5207\u4e0d\u662f\u81ea\u8eab\u5143\u7d20\u7684\u96c6\u5408\u6240\u7ec4\u6210\uff0cS\u662f\u5426\u5c5e\u4e8eS\u5417</p> <p>\u54e5\u5fb7\u5c14\uff08Kurt Godel\uff09\u4e0d\u5b8c\u5907\u6027\u5b9a\u7406\uff1a\u4efb\u4f55\u4e00\u4e2a\u6570\u5b66\u7cfb\u7edf\uff0c\u53ea\u8981\u5b83\u662f\u4ece\u6709\u9650\u7684\u516c\u7406\u548c\u57fa\u672c\u6982\u5ff5\u4e2d\u63a8\u5230\u51fa\u6765\u7684\uff0c\u5e76\u4e14\u53ef\u4ee5\u4ece\u4e2d\u63a8\u8bc1\u51fa\u81ea\u7136\u6570\u7cfb\u7edf\uff0c\u5c31\u53ef\u4ee5\u5728\u5176\u4e2d\u627e\u5230\u4e00\u4e2a\u547d\u9898\uff0c\u5bf9\u4e8e\u6211\u4eec\u65e2\u6ca1\u6709\u529e\u6cd5\u8bc1\u660e\uff0c\u4e5f\u6ca1\u6709\u529e\u6cd5\u8bc1\u4f2a</p> <p>\u628a\u6570\u5b66\u5f7b\u5e95\u5f62\u5f0f\u5316\u7684\u613f\u671b\u672c\u8eab\u5c31\u662f\u4e0d\u53ef\u5b9e\u73b0\u7684</p> <p>\u5224\u5b9a\u4e00\u4e2a\u672a\u89e3\u7684\u95ee\u9898\u662f\u5426\u771f\u7684\u6709\u89e3</p> <p>\u5728\u8ba1\u7b97\u673a\u4e2d\uff0c\u53eb\u505a\u53ef\u8ba1\u7b97\u95ee\u9898</p> <p>\u89e3\u51b3\u95ee\u9898\u7684\u8fb9\u754c</p> <p>\u4e3a\u8ba1\u7b97\u5efa\u7acb\u4e00\u4e2a\u6570\u5b66\u6a21\u578b\uff0c\u51e1\u662f\u8ba1\u7b97\u6a21\u578b\u80fd\u591f\u5b8c\u6210\u7684\u4efb\u52a1\u5c31\u662f\u53ef\u8ba1\u7b97\u7684\u4efb\u52a1</p>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#_3","title":"\u56fe\u7075\u7684\u8d21\u732e","text":"<p>Alan Turing</p> <p>1936\uff0c24\u5c81\u300a\u8bba\u53ef\u8ba1\u7b97\u6570\u8f7d\u5224\u5b9a\u95ee\u9898\u4e2d\u7684\u5e94\u7528\u300b\u2014\u2014\u7406\u60f3\u7684\u8ba1\u7b97\u5c31\u8d77\u7684\u6570\u5b66\u6a21\u578b\uff0c\u56fe\u7075\u673a </p> <p>1950 \u56fe\u7075\u6d4b\u8bd5</p>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#_4","title":"\u56fe\u7075\u673a\u7684\u6784\u6210","text":"<p>\u4e00\u6761\u5b58\u50a8\u5e26\u3001\u4e00\u4e2a\u63a7\u5236\u5668</p>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#_5","title":"\u8fd0\u4f5c\u673a\u7406","text":"<p>\u5b58\u50a8\u5e26\u7b26\u53f7\u521d\u59cb\u5316\u3001\u8bbe\u7f6e\u597d\u81ea\u8eab\u7684\u5f53\u524d\u72b6\u6001\u3001\u63a7\u5236\u5668\u7f6e\u4e8e\u8d77\u59cb\u4f4d\u7f6e\u3001\u51c6\u5907\u597d\u5de5\u4f5c\u7a0b\u5e8f</p> <p>\u6761\u4ef6\u3001\u52a8\u4f5c</p>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#_6","title":"\u793a\u4f8b","text":""},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#_7","title":"\u56fe\u7075\u673a\u7684\u610f\u4e49","text":"<p>\u7b80\u5355\u3001\u5f3a\u5927\u3001\u53ef\u5b9e\u73b0</p> <p>\u53ef\u8ba1\u7b97\u6027\u7684\u5224\u5b9a</p> <p>\u7ed9\u51fa\u4e86\u4e00\u4e2a\u53ef\u5b9e\u73b0\u7684\u901a\u7528\u8ba1\u7b97\u7684\u6a21\u578b</p>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#_8","title":"\u6570\u7684\u4e8c\u8fdb\u5236\u8868\u793a","text":"<p>\u8ba1\u7b97\u673a\u4e3a\u4ec0\u4e48\u80fd\u8ba1\u7b97\uff1f</p>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#_9","title":"\u201c\u6570\u201d\u5728\u8ba1\u7b97\u673a\u4e2d\u662f\u5982\u4f55\u8868\u793a\u7684","text":"<p>\u5b57\u6bcd\u8868\u4e2d\u7684\u7b26\u53f7\u8d8a\u591a\uff0c\u8bfb\u5165\u7684\u79fb\u52a8\u6b21\u6570\u51cf\u5c11\uff0c\u7a0b\u5e8f\u7684\u6570\u91cf\u5c31\u4f1a\u589e\u52a0</p> <p>\u5b57\u6bcd\u8868\u4e2d\u7684\u7b26\u53f7\u8d8a\u5c11\uff0c\u7a0b\u5e8f\u91cf\u4f1a\u51cf\u5c11\uff0c\u4f46\u8bfb\u5165\u79fb\u52a8\u6b21\u6570\u5c31\u8d8a\u591a</p> <p>\u5b57\u6bcd\u8868\u4e2d\u7684\u6700\u4f18\u6570\u91cf\uff0c\u53ef\u80fd\u662f\u6b27\u62c9\u5e38\u6570e\uff082.7182818284590\uff09\u53d6\u6574\u4e4b\u540e\u4e3a3</p> <p>\u4e0e\u4e24\u4e2a\u72b6\u6001\u7684\u7535\u5b50\u5143\u4ef6\u76f8\u6bd4\uff0c\u5177\u6709\u4e09\u4e2a\u72b6\u6001\u7684\u7535\u5b50\u5143\u4ef6\u5728\u5236\u9020\u4e0a\u66f4\u56f0\u96be\uff0c\u53ef\u9760\u6027\u66f4\u4f4e</p> <p>\u4ece\u4e8c\u8fdb\u5236\u5230\u516b\u8fdb\u5236\uff0c\u53ea\u8981\u6bcf\u4e09\u4f4d\u8fdb\u884c\u4e00\u6b21\u8f6c\u6362\u5c31\u884c</p> <p>\u5341\u516d\u8fdb\u5236\uff0c\u5c31\u662f\u6bcf\u56db\u4f4d\u8fdb\u884c\u4e00\u6b21\u8f6c\u6362</p>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#_10","title":"\u903b\u8f91\u4e0a\u201c\u6570\u201d\u662f\u5982\u4f55\u8ba1\u7b97\u7684","text":"<p>\u6570\u7684\u8868\u793a\uff1a\u4e8c\u8fdb\u5236</p> <p>\u82f1\u56fd\u6570\u5b66\u5bb6Boole \u5e03\u5c14\u4ee3\u6570\uff0c\u4e3a\u8ba1\u7b97\u673a\u7684\u7535\u8def\u8bbe\u8ba1\u5960\u5b9a\u4e86\u7406\u8bba\u57fa\u7840</p>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#_11","title":"\u4e8c\u8fdb\u5236\u7684\u5e03\u5c14\u8fd0\u7b97","text":"<p>\u57fa\u672c\u7684\u903b\u8f91\u8fd0\u7b97\uff1a\u4e0e\u3001\u6216\u3001\u975e</p> <p>\u590d\u5408\u903b\u8f91\u8fd0\u7b97\uff1a\u540c\u6216/\u5f02\u6216\u3001\u4e0e\u975e\u3001\u6216\u975e\u3001\u4e0e\u6216\u975e</p> <p>\u4e0e\u8fd0\u7b97\uff1a\u4e32\u8054</p> <p>\u6216\u8fd0\u7b97\uff1a\u5e76\u8054</p> <p>\u975e\u8fd0\u7b97\uff1a\u77ed\u8def\u4ed6</p> <p>\u5f02\u6216\uff1a\u4e24\u4e2a\u53d8\u91cf\u76f8\u540c\u7ed3\u679c\u4e3a0\uff0c\u76f8\u5f02\u7ed3\u679c\u4e3a1</p> <p>\u540c\u6216\uff1a\u4e0e\u5f02\u6216\u76f8\u53cd</p> <p>\u4e8c\u8fdb\u5236\u4e0b\uff1a</p> <p>1 + 1 = 10</p> <p>1 + 0 = 01</p> <p>0 + 1 = 01</p> <p>0 + 0 = 00</p> <p>\u53d1\u73b0\u672b\u5c3e\u7684\u6570\u76f8\u5f02\u7684\u65f6\u5019\u7ed3\u679c\u4e3a1\uff0c\u76f8\u540c\u7684\u65f6\u5019\u7ed3\u679c\u4e3a0\uff0c\u8bf4\u660e\u4e8c\u8fdb\u5236\u7684\u52a0\u6cd5\u8fd0\u7b97\u662f\u5f02\u6216\u8fd0\u7b97</p> <p>\u800c\u89c2\u5bdf\u8fdb\u4f4d\uff0c\u53ef\u4ee5\u53d1\u73b0\u53ea\u6709\u672b\u5c3e\u4e24\u4e2a\u6570\u5b57\u90fd\u662f1\u7684\u60c5\u51b5\u4e0b\u624d\u4f1a\u6709\u8fdb\u4f4d\uff0c\u6240\u4ee5\u8fd9\u662f\u4e00\u4e2a\u4e0e\u8fd0\u7b97</p> <p>\u7b80\u800c\u8a00\u4e4b\uff0c\u4e8c\u8fdb\u5236\u7684\u52a0\u6cd5\uff0c\u672c\u4f4d\u662f\u5f02\u6216\u8fd0\u7b97\u7684\u7ed3\u679c\uff0c\u8fdb\u4f4d\u662f\u4e0e\u8fd0\u7b97\u7684\u7ed3\u679c</p> <p>\u4ee5\u4e0a\u7684\u673a\u5668\u5c31\u662f\u534a\u52a0\u5668</p> <p>\u591a\u4e2a\u534a\u52a0\u5668\u4e32\u8054\uff0c\u5f97\u5230\u5168\u52a0\u5668\u5c31\u80fd\u7528\u6765\u8ba1\u7b97\u5e26\u8fdb\u4f4d\u7684\u60c5\u51b5</p>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#_12","title":"\u7269\u7406\u4e0a\u5982\u4f55\u5b9e\u73b0\u6570\u7684\u8ba1\u7b97","text":"<p>\u5f02\u6216\u95e8\u3001\u4e0e\u95e8\u3001\u6216\u95e8</p> <p>\u57fa\u672c\u7684\u5e03\u5c14\u8fd0\u7b97\u90fd\u53ef\u4ee5\u7531\u7535\u8def\u5b9e\u73b0</p>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#module-2","title":"Module 2 \u8ba1\u7b97\u673a\u7684\u5386\u53f2\u4e0e\u672a\u6765","text":""},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#_13","title":"\u8ba1\u7b97\u673a\u7684\u53d1\u5c55\u5386\u7a0b","text":"<p>\u73b0\u4ee3\u8ba1\u7b97\u673a</p> <p>\u7535\u5b50\u7ba1\u8ba1\u7b97\u673a\u3001\u6676\u4f53\u7ba1\u8ba1\u7b97\u3001\u96c6\u6210\u7535\u8def\u8ba1\u7b97\u673a\u3001\u8d85\u5927\u89c4\u6a21\u7ee7\u627f\u7535\u8def</p> <p>\u5e15\u65af\u536112\u5c81\u72ec\u7acb\u53d1\u73b0\u4e09\u89d2\u5f62\u5185\u89d2\u548c\u7b49\u4e8e180\u5ea6</p> <p>\u5e15\u65af\u5361\u4e0e\u8d39\u9a6c\u7684\u901a\u4fe1\u5f62\u6210\u4e86\u6982\u7387\u8bba\u7684\u57fa\u7840</p> <p>\u5e15\u65af\u5361\u52a0\u6cd5\u56681642\u5e74</p> <p>\u9f7f\u8f6e\u88c5\u7f6e\uff0c\u80fd\u591f\u5b8c\u62106\u4f4d\u7684\u52a0\u6cd5\u548c\u51cf\u6cd5\uff0c\u662f\u4e00\u79cd\u7cfb\u5217\u9f7f\u8f6e\u7ec4\u6210\u7684\u88c5\u7f6e\uff0c\u4f9d\u9760\u53d1\u6761\u8f6c\u52a8</p> <p>1673\u5e74\uff0c\u83b1\u5e03\u5c3c\u8328\u5728\u5e15\u65af\u5361\u52a0\u6cd5\u5668\u7684\u57fa\u7840\u4e0a\uff0c\u5efa\u9020\u4e86\u4e00\u53f0\u80fd\u591f\u8fdb\u884c\u56db\u5219\u8fd0\u7b97\u7684\u673a\u68b0\u8ba1\u7b97\u673a\u5668\uff0c\u4ecd\u7136\u7528\u9f7f\u8f6e\u53ca\u523b\u5ea6\u76d8\u64cd\u4f5c\uff0c\u80fd\u591f\u8fbe\u523016\u4f4d\u91cc</p> <p>1822\u5e74\uff0c\u5df4\u8d1d\u5947\uff0c\u5236\u9020\u51fa\u7b2c\u4e00\u53f0\u5dee\u5206\u673a\uff0c\u53ef\u4ee5\u5904\u74063\u4e2a\u4e0d\u540c\u76845\u4f4d\u6570\u3001\u8ba1\u7b97\u7cbe\u5ea6\u53ef\u4ee5\u8fbe\u52306\u4f4d\u5c0f\u6570</p> <p>1834\u5e74\uff0c\u5df4\u8d1d\u5947\u63d0\u51fa\u4e86\u5206\u6790\u673a\u7684\u6982\u5ff5</p> <p>\u5206\u6790\u673a\u4e00\u5171\u5206\u4e3a\u4e09\u4e2a\u90e8\u5206\uff1a\u5806\u6808\u3001\u8fd0\u7b97\u5668\u3001\u63a7\u5236\u5668</p> <p>\u5c1d\u8bd5\u4f7f\u7528\u673a\u68b0\u65b9\u5f0f\uff08\u84b8\u6c7d\u52a8\u529b\uff09\u5b9e\u73b0\u8ba1\u7b97\u8fc7\u7a0b</p> <p>\u8ba1\u7b97\u7528\u7684\u7a0b\u5e8f\u548c\u6570\u636e\u5b58\u50a8\u5728\u7a7f\u5b54\u5361\u7247\u4e0a </p> <p>\u963f\u8fbe\u5965\u53e4\u65af\u5854\uff08augusta\uff09\u4e3a\u5206\u6790\u673a\u7f16\u5236\u4e86\u4eba\u7c7b\u5386\u53f2\u4e0a\u7b2c\u4e00\u6279\u8ba1\u7b97\u673a\u7a0b\u5e8f</p> <p>\u624b\u5de5\u7684\u65b9\u5f0f\u5de5\u827a\u662f\u6709\u6781\u9650\u7684</p> <p>\u970d\u5217\u745e\u65af\uff08Hollerith\uff09\uff0cIBM\u521b\u59cb\u4eba</p> <p>\u53d1\u660e\u4e86\u5236\u8868\u673a\uff0c\u7535\u5b50\u7a7f\u5b54\u5361\u7247\u6c47\u603b</p> <p>1935\u5e74\uff0cIBM\u5236\u9020\u4e86IBM601\uff0c\u80fd\u591f\u5728\u4e00\u79d2\u949f\u4e4b\u5185\u8ba1\u7b97\u51fa\u4e58\u6cd5\u8fd0\u7b97</p> <p>1941\u5e74\uff0c\u5fb7\u56fdZuse\u5b8c\u6210\u4e86Z3\u7684\u7814\u5236\u5de5\u4f5c</p> <p>\u7b2c\u4e00\u53f0\u53ef\u7f16\u7a0b\u7684\u7535\u5b50\u8ba1\u7b97\u673a</p> <p>\u53ef\u5904\u74067\u4f4d\u6307\u6570\u300114\u4f4d\u5c0f\u6570</p> <p>\u5927\u91cf\u771f\u7a7a\u7ba1\u7684\u5e94\u7528</p> <p>\u6bcf\u79d2\u949f\u80fd\u505a3\u52304\u6b21\u52a0\u6cd5\uff0c\u4e00\u6b21\u4e58\u6cd5\u57283\u52305\u79d2</p>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#eniac","title":"\u666e\u904d\u8ba4\u4e3a\u7684\u7b2c\u4e00\u53f0\u8ba1\u7b97\u673aENIAC","text":"<p>\u5bbe\u5915\u6cd5\u5c3c\u4e9a\u5927\u5b66\u83ab\u5c14\u5b66\u96621945\u5e74\u5b8c\u6210\uff0c1946\u5e742\u670814\u65e5\u6b63\u5f0f\u542f\u52a8</p> <p>ENIAC\u4e0d\u662f\u5b58\u50a8\u7a0b\u5e8f\u5f0f\u7684\u8ba1\u7b97\u673a</p> <p>\u7f16\u7a0b\u662f\u901a\u8fc7\u624b\u5de5\u63d2\u63a5\u7ebf\u7684\u65b9\u5f0f\u8fdb\u884c\u7684</p>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#eniacedvac","title":"ENIAC\u5230EDVAC","text":"<p>\u51af\u8bfa\u4f9d\u66fc 1952\u5e74EDVAC\u5236\u9020\u5b8c\u6210\uff0c\u4e16\u754c\u4e0a\u7b2c\u4e00\u53f0\u5b58\u50a8\u7a0b\u5e8f\u8ba1\u7b97\u673a</p>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#_14","title":"\u7b2c\u4e8c\u4ee3\u8ba1\u7b97\u673a","text":"<p>1947\u5e74\uff0c\u8d1d\u5c14\u5b9e\u9a8c\u5ba4\u53d1\u660e\u4e86\u6676\u4f53\u7ba1\uff0c\u66f4\u5c0f\u3001\u66f4\u4fbf\u5b9c\u3001\u529f\u8017\u66f4\u5c11\u3001\u66f4\u53ef\u9760</p> <p>\u4ea7\u751f\u4e86\u64cd\u4f5c\u7cfb\u7edf</p> <p>\u4ea7\u751f\u4e86\u9ad8\u7ea7\u7f16\u7a0b\u8bed\u8a00Fotran, Cobol</p>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#_15","title":"\u7b2c\u4e09\u4ee3\u8ba1\u7b97\u673a","text":"<p>1958\u5e74\uff0c\u5fb7\u5dde\u4eea\u5668 \u57fa\u5c14\u6bd4\u53d1\u660e\u4e86\u96c6\u6210\u7535\u8def\uff0c\u76f4\u63a5\u7528\u7845\u7247\u5236\u9020\u82af\u7247</p> <p>\u64cd\u4f5c\u7cfb\u7edf\u53ef\u79fb\u690d</p> <p>C\u8bed\u8a00\u5f00\u59cb\u4ea7\u751f</p>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#_16","title":"\u7b2c\u56db\u4ee3\u8ba1\u7b97\u673a","text":"<p>\u59cb\u4e8e20\u4e16\u7eaa70\u5e74\u4ee3</p> <p>\u4f7f\u7528\u8d85\u5927\u89c4\u6a21\u7684\u96c6\u6210\u7535\u8def</p> <p>\u7b2c\u4e00\u5757\u5fae\u5904\u7406\u5668\u662f1971\u5e74\u5236\u9020\u7684intel4004</p> <p>2400\u4e2a\u6676\u4f53\u7ba1\uff0c\u8ba1\u7b97\u80fd\u529b\u4e0eENIAC\u76f8\u5f53</p> <p>\u5c3a\u5bf8\u53ea\u67093mm * 2mm</p> <p>\u8ba1\u7b97\u673a\u7684\u53d1\u5c55\u5728\u786c\u4ef6\u3001\u8f6f\u4ef6\u5168\u65b9\u4f4d\u51fa\u73b0\u74f6\u9888</p> <p>\u6469\u5c14\u5b9a\u5f8b\uff1aCPU\u7684\u6027\u80fd\u4ef7\u683c\u6bd4\u6bcf18\u4e2a\u6708\u7ffb\u4e00\u756a</p> <p>Moore\u2018s LAW</p>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#_17","title":"\u7b2c\u4e94\u4ee3\u8ba1\u7b97\u673a","text":"<p>\u8d85\u7b97</p> <p>\u201c\u7eff\u8272\u8ba1\u7b97\u201d\uff1a2009\u5e74\u65f6\uff0c\u6bcf\u6b21google\u6240\u6d88\u8017\u7684\u80fd\u6e90\u80fd\u591f\u716e\u719f\u4e00\u676f\u5496\u5561</p> <p>\u65b0\u578b\u7684\u8ba1\u7b97\u6a21\u5f0f\u2014\u2014\u4e91\u8ba1\u7b97</p>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#_18","title":"\u6469\u5c14\u5b9a\u5f8b\u4e0b\u7684\u8ba1\u7b97\u5371\u673a","text":"<p>\u5355\u4f4d\u9762\u79ef\u4e2d\u80fd\u591f\u5236\u9020\u7684\u6676\u4f53\u7ba1\u7684\u6570\u76ee\u6bcf18\u4e2a\u6708\u7ffb\u4e00\u756a</p> <p>1970\u5e74intel 4004</p> <p>1990\u5e74intel 80486</p> <p>\u6469\u5c14\u5b9a\u5f8b\u8fd8\u80fd\u575a\u6301\u591a\u4e45\uff1f</p> <p>\u7b2c\u4e00\u70b9\uff1a\u6563\u70ed\uff0c\u6676\u4f53\u7ba1\u5bc6\u5ea6\u548c\u901f\u5ea6\u7684\u589e\u52a0\uff0c\u4f1a\u6d88\u8017\u66f4\u591a\u7684\u7535\u529b\uff0c\u4ea7\u751f\u66f4\u591a\u7684\u70ed\u80fd</p> <p>\u6269\u5927\u4f53\u79ef\uff0c\u867d\u7136\u80fd\u6269\u5927\u8868\u9762\u79ef\uff0c\u4f46\u662f\u610f\u5473\u7740\u9700\u8981\u66f4\u9ad8\u7684\u7535\u538b\uff0c\u4f1a\u4f7f\u70ed\u91cf\u4ea7\u751f\u7684\u66f4\u591a</p> <p>\u7b2c\u4e8c\u70b9\uff1a\u6676\u4f53\u7ba1\u5927\u5c0f\u7684\u9650\u5236\uff0c\u6676\u4f53\u7ba1\u5f88\u5feb\u5c31\u4f1a\u53d8\u6210\u4e00\u4e2a\u539f\u5b50\u5927\u5c0f\uff0c\u4efb\u4f55\u7eb3\u7c73\u548c\u4f20\u7edf\u5de5\u827a\u5bf9\u8fd9\u79cd\u60c5\u51b5\u90fd\u6ca1\u6709\u529e\u6cd5</p> <p>\u7b2c\u4e09\u70b9\uff1a\u7535\u6cc4\u6f0f\uff0c\u968f\u7740\u6676\u4f53\u7ba1\u63d0\u53ca\u7684\u7f29\u5c0f\uff0c\u7535\u6cc4\u6f0f\u7684\u6e05\u9192\u4e5f\u4e0d\u65ad\u589e\u52a0\uff0c\u8d8a\u6765\u8d8a\u5f71\u54cd\u82af\u7247\u7684\u8ba1\u7b97\u80fd\u529b</p> <p>\u91cf\u5b50\u8ba1\u7b97\u673a\u3001\u751f\u7269\u8ba1\u7b97\u673a\u3001DNA\u8ba1\u7b97\u673a\u3001\u5149\u5b50\u8ba1\u7b97\u673a\u3001\u5206\u5b50\u8ba1\u7b97\u673a</p>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#_19","title":"\u91cf\u5b50\u8ba1\u7b97\u673a\u7684\u57fa\u672c\u539f\u7406","text":"<p>\u7406\u67e5\u5fb7\u8d39\u66fc\uff0c1982\u5e74\u63d0\u51fa\u5229\u7528\u91cf\u5b50\u4f53\u7cfb\u5b9e\u73b0\u901a\u7528\u8ba1\u7b97</p> <p>\u5206\u6790\u6a21\u62df\u91cf\u5b50\u7269\u7406\u4e16\u754c\u6240\u9700\u8981\u7684\u8ba1\u7b97\u80fd\u529b\u8fdc\u8fdc\u8d85\u8fc7\u4e86\u7ecf\u5178\u8ba1\u7b97\u673a\u6240\u80fd\u8fbe\u5230\u7684\u80fd\u529b</p> <p>\u7528\u5b9e\u9a8c\u5ba4\u4e2d\u4e00\u4e2a\u53ef\u63a7\u7684\u91cf\u5b50\u7cfb\u7edf</p> <p>\u4e00\u4e2a\u91cf\u5b50\u6bd4\u7279\u80fd\u591f\u540c\u65f6\u4fdd\u6301\u591a\u79cd\u72b6\u6001</p> <p>\u4e3e\u4f8b\uff1a\u7ecf\u5178\u8ba1\u7b97\u673a2\u4e2a\u6bd4\u7279\u67d0\u4e00\u7279\u5b9a\u65f6\u523b\u53ea\u80fd\u5b58\u50a8\u4e00\u5bf90\u6216\u80051\uff0c\u4f46\u662f\u91cf\u5b50\u8ba1\u7b97\u673a\u53ef\u4ee5\u540c\u65f6\u5b58\u50a84\u5bf90\u6216\u80051</p> <p>\u7406\u8bba\u4e0a300\u4e2a\u91cf\u5b50\u6bd4\u7279\u80fd\u627f\u8f7d\u7684\u6570\u636e\u65f62\u7684300\u6b21\u65b9\uff0c\u8fd9\u5c06\u8d85\u8fc7\u6574\u4e2a\u5b87\u5b99\u7684\u539f\u5b50\u6570\u91cf\u603b\u548c</p> <p>\u9700\u8981\u5bf9\u8ba1\u7b97\u8fc7\u7a0b\u8fdb\u884c\u7ea0\u9519\uff0c\u5373\u7528\u5927\u91cf\u7684\u8ba1\u7b97\u6765\u5197\u4f59\u8ba1\u7b97\uff0c\u786e\u5b9a\u51fa\u6b63\u786e\u7684\u7b54\u6848</p> <p>\u96be\u70b9\uff1a\u4e0e\u5916\u754c\u73af\u5883\u9694\u79bb\u624d\u80fd\u4fdd\u6301\u826f\u597d\u7684\u76f8\u5e72\u6027\uff0c\u4e0e\u5916\u754c\u73af\u5883\u826f\u597d\u8026\u5408\u624d\u80fd\u63a7\u5236\u6f14\u5316\u5e76\u8bfb\u51fa\u7ed3\u679c</p>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#module-3","title":"Module 3 \u7a0b\u5e8f\u8fd0\u884c\u7684\u57fa\u672c\u539f\u7406","text":"<p>\u51af\u8bfa\u4f9d\u66fc\uff1a</p> <p>\u7535\u8def\u80fd\u591f\u5b8c\u6210\u8ba1\u7b97</p> <p>\u4f46\u662f\u4e0d\u80fd\u901a\u8fc7\u91cd\u65b0\u201c\u7ec4\u5408\u4e0d\u540c\u7535\u8def\u201d\u7684\u65b9\u5f0f\uff0c\u53bb\u5b8c\u6210\u65b0\u7684\u8ba1\u7b97\u4efb\u52a1</p> <p>\u901a\u8fc7\u67d0\u79cd\u547d\u4ee4\u6765\u63a7\u5236\u8ba1\u7b97\u673a\uff0c\u8ba9\u8ba1\u7b97\u673a\u6309\u7167\u8fd9\u79cd\u547d\u4ee4\u6765\u8fd0\u884c\uff0c\u8fd9\u79cd\u547d\u4ee4\u53ef\u4ee5\u7528\u7535\u4fe1\u53f7\u8868\u793a</p> <p>\u8fd9\u79cd\u547d\u4ee4\u4e0d\u662f\u201c\u4e34\u65f6\u8f93\u5165\u201d\u8ba1\u7b97\u673a\uff0c\u800c\u662f\u5b58\u653e\u5728\u67d0\u4e2a\u5730\u65b9\uff0c\u968f\u65f6\u53ef\u4ee5\u66f4\u6539</p> <p>\u5b58\u50a8\u7a0b\u5e8f\u5f0f\u8ba1\u7b97\u673a\uff1aEDVAC</p> <p>\u51af\u8bfa\u4f9d\u66fc\u7ed3\u6784\uff1a\u63a7\u5236\u5668\u3001\u8fd0\u7b97\u5668\u3001\u5b58\u50a8\u5668\u3001\u8f93\u5165\u8bbe\u5907\u3001\u8f93\u51fa\u8bbe\u5907</p> <p>\u63a7\u5236\u5668\uff1a\u7edf\u4e00\u6307\u6325\u5e76\u63a7\u5236\u8ba1\u7b97\u673a\u4e2a\u90e8\u4ef6\u534f\u8c03\u5de5\u4f5c (\u547d\u4ee4\u8bb0\u5f55\u5458\u3001\u63a7\u5236\u4fe1\u53f7\u4ea7\u751f\u5668\u3001\u547d\u4ee4\u89e3\u91ca\u5668)</p> <p>\u8fd0\u7b97\u5668\uff1a\u5bf9\u6570\u636e\u8fdb\u884c\u7b97\u6570\u8fd0\u7b97\u548c\u903b\u8f91\u8fd0\u7b97\uff08\u8ba1\u7b97\u7ed3\u679c\u3001\u8ba1\u7b97\u7535\u8def\u3001\u6570\u636e\u6682\u5b58\uff09</p> <p>\u5b58\u50a8\u5668\uff1a\u5b58\u50a8\u5f85\u64cd\u4f5c\u7684\u4fe1\u606f\u4e0e\u4e2d\u95f4\u7ed3\u679c\uff0c\u5305\u62ec\u673a\u5668\u6307\u4ee4\u548c\u6570\u636e\uff08\u9ad8\u901f\u7f13\u5b58\u3001\u5185\u5b58\u3001\u5916\u5b58\uff09</p> <p>\u8fd0\u7b97\u5668\u3001\u5b58\u50a8\u5668\u7684\u4e00\u90e8\u5206\u548c\u63a7\u5236\u5668\u96c6\u5408\u5728CPU\u91cc</p>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#_20","title":"\u5b58\u50a8\u5668","text":"<p>\u4e00\u4e2a\u5b580\u62161\u7684\u5355\u4f4d\u53ebbit \uff0c\u4f4d</p> <p>8\u4e2abit\u53ebbyte\uff0c\u5b57\u8282\uff0c\u662f\u7a0b\u5e8f\u91cc\u80fd\u63a7\u5236\u7684\u6700\u5c0f\u5355\u4f4d</p> <p>1kb 1024\u5b57\u8282</p> <p>1MB</p> <p>1GB</p> <p>1TB</p> <p>1PB</p> <p>\u8ba1\u7b97\u673a\u4e2d\u5b58\u50a8\u5668\u7684\u5206\u7c7b\uff1a\u5bc4\u5b58\u5668\u3001\u9ad8\u901f\u7f13\u5b58\u3001\u5185\u5b58\u3001\u5916\u5b58</p> <p>\u5bc4\u5b58\u5668\uff1aCPU\u5185\u90e8\uff0c\u7528\u4e8e\u5b58\u653e\u5f85\u64cd\u4f5c\u6570\u548c\u7ed3\u679c</p> <p>\u9ad8\u901f\u7f13\u5b58\uff08cache\uff09\uff1a\u901a\u5e38\u5728CPU\u5185\u90e8\uff0c\u7528\u505a\u6570\u636e\u7f13\u5b58\u533a</p> <p>\u5185\u5b58\uff1a\u5b58\u653eCPU\u4e2d\u7684\u8fd0\u7b97\u6570\u636e</p>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#_21","title":"\u5b58\u50a8\u5668\u7684\u539f\u7406","text":"<p>\u9759\u6001RAM\u7684\u516d\u7ba1\u57fa\u672c\u5b58\u50a8\u5355\u5143</p> <p>\u9ad8\u7535\u4f4d\u548c\u4f4e\u7535\u4f4d\u4e92\u76f8\u4fdd\u6301\u4fc3\u8fdb\uff0c\u5c31\u80fd\u66f4\u597d\u5730\u5b58\u50a8\u6570\u5b57</p> <p>\u5730\u5740\u89e3\u6790\u5668\u7531\u884c\u5730\u5740\u8bd1\u7801\u5668\u548c\u5217\u5730\u5740\u8bd1\u7801\u5668\uff0c\u540c\u65f6\u5728\u884c\u548c\u5217\u5bfc\u901a\u53ef\u4ee5\u8bfb\u51fa\u6570\u5b57</p> <p>RAM (random access memory)</p> <p>\u5feb\u901f\u53ef\u64e6\u9664\u5b58\u50a8\u5668-u\u76d8</p> <p>DDR double data rate SDRAM \u53cc\u6570\u636e\u8f93\u51fa\u540c\u6b65\u52a8\u6001\u5b58\u50a8\u5668</p> <p>\u5730\u5740\u4e0e\u6570\u636e\u5355\u5143</p> <p>32\u4f4d\u7684\u5b58\u50a8\u5668\uff0c\u6700\u5927\u7684\u5bfb\u5740\u7a7a\u95f4\u662f2\u768432\u6b21\u65b9\uff0c\u4e5f\u5c31\u662f4\u4e2aG </p>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#_22","title":"\u7a0b\u5e8f\u8fd0\u884c\u7684\u57fa\u672c\u539f\u7406","text":"<p>\u51af\u8bfa\u4f9d\u66fc\u5f0f\u8ba1\u7b97\u673a\u6267\u884c\u5b58\u50a8\u597d\u7684\u7a0b\u5e8f</p> <p>\u6307\u4ee4\u96c6\u662f\u7528\u6765\u8ba1\u7b97\u548c\u63a7\u5236\u8ba1\u7b97\u673a\u7cfb\u7edf\u7684\u4e00\u5957\u6307\u4ee4\u7684\u96c6\u5408</p> <p>\u4e3b\u8981\u6709\u4e24\u79cd\uff1aIntel X86\u6307\u4ee4\u96c6\u548c ARM\u6307\u4ee4\u96c6</p> <p>\u6307\u4ee4\u7801 + \u64cd\u4f5c\u6570 = \u6307\u4ee4</p>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#cpu","title":"CPU\u6307\u4ee4\u7684\u6267\u884c\u8fc7\u7a0b","text":"<ol> <li>PC \u7a0b\u5e8f\u8ba1\u6570\u5668 \u4e2d\u5305\u542b\u7a0b\u5e8f\u7684\u5730\u5740\uff0c\u4f1a\u5c06\u7a0b\u5e8f\u7684\u5730\u5740\u53d1\u7ed9\u5730\u5740\u5bc4\u5b58\u5668</li> <li>AR \u5730\u5740\u5bc4\u5b58\u5668 \u4f1a\u53bb\u76f8\u5e94\u7684\u5730\u5740\u4e2d\u5c06\u6307\u4ee4\u53d6\u51fa\u6765\u653e\u5165\u6307\u4ee4\u5bc4\u5b58\u5668</li> <li>OP | ADDR \u6307\u4ee4\u5bc4\u5b58\u5668IR \uff0c\u5c06\u6307\u4ee4\u4ea4\u7ed9\u6307\u4ee4\u8bd1\u7801\u5668\uff0c\u770b\u770b\u6307\u4ee4\u8981\u5b8c\u6210\u4ec0\u4e48</li> <li>\u6307\u4ee4\u5bc4\u5b58\u5668\u53d1\u73b0\u547d\u4ee4\u4e2d\u5305\u542b\u5730\u5740\uff0c\u53c8\u8981\u8fd4\u56de\u5730\u5740\u5bc4\u5b58\u5668\u4e2d\u5230\u76f8\u5e94\u7684\u5b58\u50a8\u5668\u5730\u5740\uff0c\u5e76\u5c06\u53d6\u51fa\u7684\u6570\u5b57\u5b58\u5165\u7f13\u51b2\u5bc4\u5b58\u5668DR\u4e2d</li> <li>ID \u6307\u4ee4\u8bd1\u7801\u5668</li> <li>\u7136\u540e\u7531OC\u64cd\u4f5c\u63a7\u5236\u5668\u548cTG\u65f6\u5e8f\u4ea7\u751f\u5668\u53d1\u9001\u4e00\u4e2a\u547d\u4ee4\u7ed9ALU \u7b97\u6570\u903b\u8f91\u5355\u5143</li> <li>\u7531ALU\u5b8c\u6210\u8fd0\u7b97\uff0c\u5e76\u5c06\u7ed3\u679c\u653e\u5165AC\u7d2f\u52a0\u5668\u5f53\u4e2d</li> </ol>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#_23","title":"\u7a0b\u5e8f\u7684\u6267\u884c","text":"<p>\u7f16\u8bd1\uff0c\u5c06\u7a0b\u5e8f\u5148\u7f16\u8bd1\u6210\u6c47\u7f16\u4ee3\u7801 \u518d\u5c06\u6c47\u7f16\u4ee3\u7801\u6c47\u7f16\u6210\u673a\u5668\u7801 \u8ba9\u673a\u5668\u7801\u7531CPU\u8fd0\u884c</p>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#module-4","title":"Module 4 \u611f\u6027\u8ba4\u8bc6\u8ba1\u7b97\u673a\u7a0b\u5e8f","text":""},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#ide","title":"\u4f7f\u7528IDE\u8fdb\u884c\u8c03\u8bd5","text":"<ol> <li>log\u6cd5\uff0c\u5373\u5728\u9700\u8981\u8c03\u8bd5\u7684\u5730\u65b9\u8fdb\u884c\u8f93\u51fa\u503cprint</li> <li>\u65ad\u70b9\u6cd5\uff0c\u5728\u53ef\u4ee5\u7684\u5730\u65b9\u6253\u4e0a\u65ad\u70b9</li> </ol> <p>step over\u662f\u8df3\u5230\u4e0b\u4e00\u53e5</p> <p>Step into \u662f\u5982\u679c\u8fd9\u4e00\u884c\u7531\u8c03\u7528\u51fd\u6570\u7684\u8bdd\uff0c\u5c31\u4f1a\u8fdb\u5165\u90a3\u4e2a\u51fd\u6570</p> <p>step out\u5c31\u662f\u8df3\u51fa\u51fd\u6570</p>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#_24","title":"\u7a0b\u5e8f\u8bbe\u8ba1\u8bed\u8a00\u7684\u5b66\u4e60","text":"<p>knowledge\u548cskill</p> <p>\u5b58\u50a8\u7a0b\u5e8f\u5f0f\u8ba1\u7b97\u673a</p> <p>\u7f16\u7a0b\u8bed\u8a00\u7684\u5355\u8bcd</p> <p>\u7f16\u7a0b\u8bed\u8a00\u91cc\u7684\u6570\u548c\u8ba1\u7b97\u7b26\u53f7</p> <p>\u7f16\u7a0b\u8bed\u8a00\u4e2d\u7684\u53e5\u5f0f</p>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#_25","title":"\u7f16\u7a0b\u4f5c\u4e1a","text":""},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#1","title":"\u7f16\u7a0b\u98981 \u5192\u6ce1\u7b97\u6cd5","text":"<pre><code>/*\n * \u6839\u636e\u81ea\u5df1\u7684\u7406\u89e3\u5199\u5192\u6ce1\u6392\u5e8f\u7b97\u6cd5\uff0c\u6570\u7ec4\u5927\u5c0f\u57281000\u4ee5\u5185\n * \u7b2c\u4e00\u884c\u662fn\uff0c\u8868\u793a\u6570\u7ec4\u7684\u5927\u5c0f\uff0c\u63a5\u7740n\u884c\u662f\u6570\u7ec4\u7684n\u4e2a\u5143\u7d20\n * \u6309\u7167\u4ece\u5c0f\u5230\u5927\u8fdb\u884c\u6392\u5217\n */\n\n#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main () {\nint n, a[1000];\ncin &gt;&gt; n;\n\nfor (int i = 0; i &lt; n; i++) {\ncin &gt;&gt; a[i];\n}\n\n// \u5192\u6ce1\u7b97\u6cd5\u6838\u5fc3\uff1a\u4ece\u5c0f\u5230\u5927\uff0c\u53d1\u73b0\u76f8\u90bb\u7684\u6570\u6709\u4e0d\u7b26\u5408\u89c4\u5219\u7684\u5c31\u4e92\u76f8\u4ea4\u6362\n// \u6bcf\u4e00\u904d\u4f1a\u5c06\u4e00\u4e2a\u6700\u5927\u7684\u6570\u5b57\u8f6c\u79fb\u5230\u6807\u53f7\u6700\u5927\u5904\n\nfor (int i = 0; i &lt; n; i++) {\nfor (int j = 0; j &lt; n - i - 1; j++) {\nif (a[j] &gt; a[j + 1]) {\nint temp = a[j];\na[j] = a[j + 1];\na[j + 1] = temp;\n}\n}\n}\n\nfor (int i = 0; i &lt; n; i++) {\ncout &lt;&lt; a[i] &lt;&lt; endl;\n}\n\nreturn 0;\n}\n</code></pre>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#2","title":"\u7f16\u7a0b\u98982 \u5947\u5076\u6392\u5e8f","text":"<pre><code>/*\n* \u5947\u5076\u6392\u5e8f\n* \u8f93\u5165\u5341\u4e2a\u6574\u6570\uff0c\u5c06\u5341\u4e2a\u6574\u6570\u6309\u5347\u5e8f\u6392\u5217\u8f93\u51fa\uff0c\u5e76\u4e14\u5947\u6570\u5728\u524d\uff0c\u5076\u6570\u5728\u540e\u3002\n*/ #include &lt;iostream&gt;\n\nusing namespace std;\n\nint main () {\nint a[10];\n// \u9996\u5148\u662f\u8f93\u516510\u4e2a\u6574\u6570\nfor (int i = 0; i &lt; 10; i++) {\ncin &gt;&gt; a[i];\n}\n\n// \u7b2c\u4e8c\u6b65\u662f\u4f7f\u7528\u53cc\u6307\u9488\u6cd5\u5c06\u5947\u6570\u548c\u5076\u6570\u5206\u522b\u653e\u5728\u524d\u540e\u4e24\u4fa7\n// \u6ce8\u610f\uff1a\u53ea\u8981\u51fa\u73b0\u4e00\u4e2a\u4e0d\u7b26\u5408\u6392\u5e8f\u7684\u6570\u5b57\uff0c\u90a3\u4e48\u5fc5\u7136\u6709\u4e2a\u6570\u5b57\u548c\u5b83\u8fdb\u884c\u5bf9\u5e94\uff0c\u8fdb\u884c\u53cc\u6307\u9488\u4ea4\u6362\nint l = 0, r = 9;\nwhile (l &lt; r) {\nbool leftIsOdd = a[l] % 2 == 1;\nbool rightIsEven = a[r] % 2 == 0;\nif (leftIsOdd) {\nl++;\n} else if (rightIsEven) {\nr--;\n} else if (!leftIsOdd &amp;&amp; !rig htIsEven) {\nint temp = a[l];\na[l] = a[r];\na[r] = temp;\n}\n}\n\n// \u5bf9\u5947\u6570\u90e8\u5206\u8fdb\u884c\u5192\u6ce1\nint start = 0, end = l;\nfor (int i = start; i &lt; end -1; i++) {\nfor (int j = start + 1; j &lt; end + start - i; j++ ) {\nif (a[j - 1] &gt; a[j]) {\nint temp = a[j];\na[j] = a[j - 1];\na[j - 1] = temp;\n}\n}\n}\n// \u5bf9\u5076\u6570\u90e8\u5206\u8fdb\u884c\u5192\u6ce1\nstart = l, end = 10;\nfor (int i = start; i &lt; end - 1; i++) {\nfor (int j = start + 1; j &lt; end + start - i; j++ ) {\nif (a[j - 1] &gt; a[j]) {\nint temp = a[j];\na[j] = a[j - 1];\na[j - 1] = temp;\n}\n}\n}\n\nfor (int i = 0; i &lt; 10; i++) {\ncout &lt;&lt; a[i] &lt;&lt; \" \";\n}\n\ncout &lt;&lt; endl;\n\nreturn 0;\n}\n</code></pre>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#module-5","title":"Module 5 \u4ece\u73b0\u5b9e\u95ee\u9898\u5230\u8ba1\u7b97\u673a\u7a0b\u5e8f","text":"<p>\u89e3\u51b3\u95ee\u9898\u7684\u65b9\u6848</p> <p>\u63cf\u8ff0\u7ed9\u7535\u8111\u542c\uff1a\u7ed3\u6784\u5316\u7a0b\u5e8f\u8bbe\u8ba1\u7684\u601d\u60f3\uff0c\u5148\u62bd\u8c61\u540e\u5177\u4f53\uff0c\u76f4\u5230\u80fd\u591f\u4f7f\u7528\u987a\u5e8f\u3001\u5206\u652f\u3001\u5faa\u73af\u641e\u5b9a</p> <p>\u53ef\u4ee5\u5148\u5199\u51fa\u7a0b\u5e8f\u7684\u8f6e\u5ed3\uff0c\u7136\u540e\u518d\u8865\u53d8\u91cf\u7684\u5b9a\u4e49</p> <p>\u6574\u6570\u6392\u5e8f</p> <p>\u5faa\u73af\u7ed3\u6784</p>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#_26","title":"\u7ed3\u6784\u5316\u7a0b\u5e8f\u8bbe\u8ba1","text":"<p>\u7531\u82e5\u5e72\u4e2a\u6a21\u5757\u7ec4\u6210</p> <p>\u6a21\u5757\u4e4b\u95f4\u9ad8\u5185\u805a\uff0c\u6a21\u5757\u529f\u80fd\u5355\u4e00</p> <p>\u6a21\u5757\u4e4b\u95f4\u4f4e\u8026\u5408\uff0c\u4e00\u4e2a\u6a21\u5757\u88ab\u6539\u52a8\u7684\u65f6\u5019\uff0c\u6307\u6325\u5f71\u54cd\u81ea\u5df1</p>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#module-6-c","title":"Module 6 \u7406\u6027\u8ba4\u8bc6C\u7a0b\u5e8f \u5bfc\u8bba","text":"<p>\u7a0b\u5e8f\u8bbe\u8ba1\u8bed\u8a00\u7684\u5206\u7c7b\uff1a</p> <p>\u673a\u5668\u8bed\u8a00 0101010\u8fd9\u79cd\u4f4e\u7ea7\u8bed\u8a00</p> <p>\u6c47\u7f16\u8bed\u8a00 load 0 a\u8fd9\u79cd\u4f4e\u7ea7\u8bed\u8a00</p> <p>\u9ad8\u7ea7\u8bed\u8a00 C</p> <p>FORTRAN \u7b2c\u4e00\u95e8\u9ad8\u7ea7\u7a0b\u5e8f\u8bbe\u8ba1\u8bed\u8a00</p> <p>19060 algo 60 A\u8bed\u8a00</p> <p>1970 \u8d1d\u5c14\u5b9e\u9a8c\u5ba4ken Thompson  PDP-7 B\u8bed\u8a00  UNIX</p> <p>1972\u5728B\u8bed\u8a00\u7684\u57fa\u7840\u4e0a\u53d1\u5c55\u548c\u5b8c\u5584\u51fa\u4e86C\u8bed\u8a00\uff0c\u5e76\u91cd\u5199\u4e86UNIX</p> <p>1978 The C programing language</p> <p>C\u8bed\u8a00\u7684\u89c4\u8303\u5b9a\u4e49\u5f97\u76f8\u5f53\u5bbd\u6cdb</p> <p>long\u6570\u636e\u957f\u5ea6\u4e0d\u65ad\u4e0eint\u5373\u53ef</p> <p>short\u4e0d\u5e38\u4e8eint\u5373\u53ef</p> <p>\u76f8\u540c\u7a0b\u5e8f\u5728\u4e0d\u540c\u7f16\u8bd1\u5668\u4e0a\u5177\u6709\u4e0d\u540c\u89e3\u91ca</p> <p>\u76f8\u540c\u7a0b\u5e8f\u5728\u4e0d\u540c\u5e73\u53f0\u4e0a\u8fd0\u884c\u7ed3\u679c\u4e0d\u540c</p> <p>1979 \u8d1d\u5c14\u5b9e\u9a8c\u5ba4 C with classes \u5373c++\uff0c\u6269\u5c55\u4e86\u9762\u5411\u5bf9\u8c61\u90e8\u5206</p> <pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main () {\n// \u8f93\u5165\u57f9\u517b\u76bf\u6570\u91cf\u3001\u7f16\u53f7\u4ee5\u53ca\u7ec6\u83cc\u7e41\u6b96\u7387\uff1b\nint n;\nint id[100];\ndouble rate[100];\n\ncin &gt;&gt; n;\nfor (int i = 0; i &lt; n; i++) {\nint initial, final;\ncin &gt;&gt; id[i] &gt;&gt; initial &gt;&gt; final;\nrate[i] = (double) final / initial;\n}\n// \u5c06\u6240\u6709\u7684\u8f93\u5165\u6309\u7167\u4ece\u5927\u5230\u5c0f\u6392\u5217\nfor (int i = 0; i &lt; n; i++) {\nfor (int j = 0; j &lt; n - i -1; j++) {\nif (rate[j + 1] &gt; rate[j]) {\nint tmpId = id[j];\nid[j] = id[j + 1];\nid[j + 1] = tmpId;\ndouble tmpRate = rate[j];\nrate[j] = rate[j + 1];\nrate[j + 1] = tmpRate;\n}\n}\n}\n// \u8ba1\u7b97\u76f8\u90bb\u4e4b\u95f4\u7684\u5dee\u503c\uff0c\u76f8\u5dee\u6700\u5927\u7684\u4e00\u7ec4\u5c31\u662f\u4e24\u7ec4\u7ec6\u83cc\u7684\u5206\u754c\u7ebf\ndouble maxDiff = 0;\nint maxDiffIndex = 0;\nfor (int i = 0; i &lt; n - 1; i++) {\ndouble diff = rate[i] - rate[i + 1];\nif (diff &gt; maxDiff) {\nmaxDiff = diff;\nmaxDiffIndex = i;\n}\n}\ncout &lt;&lt; maxDiffIndex + 1 &lt;&lt; endl;\nfor (int i = maxDiffIndex; i &gt;= 0; i--) {\ncout &lt;&lt; id[i] &lt;&lt; endl;\n}\ncout &lt;&lt; n - maxDiffIndex - 1 &lt;&lt; endl;\nfor (int i = n - 1; i &gt;= maxDiffIndex + 1; i--) {\ncout &lt;&lt; id[i] &lt;&lt; endl;\n}\nreturn 0;\n}\n</code></pre>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#programming-assignment-c","title":"Programming Assignment: \u7406\u6027\u8ba4\u8bc6C\u7a0b\u5e8f \u5bfc\u8bba \u7f16\u7a0b\u9898","text":"<pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main () {\nint n, grade[100];\ncin &gt;&gt; n;\nfor (int i = 0; i &lt; n; i++) cin &gt;&gt; grade[i];\nfor (int i = 0; i &lt; n; i++) {\nfor (int j = 1; j &lt; n - i; j++) {\nif (grade[j - 1] &lt; grade[j]) {\nint tmp = grade[j];\ngrade[j] = grade[j - 1];\ngrade[j - 1] = tmp;\n}\n}\n}\ncout &lt;&lt; grade[0] &lt;&lt; endl;\nreturn 0;\n}\n</code></pre>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#3","title":"\u7f16\u7a0b\u9898\uff033\uff1a\u6700\u9ad8\u7684\u5206\u6570","text":"<pre><code>    #include &lt;iostream&gt;\nusing namespace std;\n\nint main() {\nint a[10];\nfor (int i = 0; i &lt; 10; i++) {\ncin &gt;&gt; a[i];\n}  // \u5192\u6ce1\uff0c\u4e0d\u65ad\u6bd4\u8f83\u76f8\u90bb\u7684\u4e24\u4e2a\u6570\uff0c\u5982\u679c\u987a\u5e8f\u9519\u4e86\uff0c\u90a3\u4e48\u5c31\u4ea4\u6362\nfor (int i = 0; i &lt; 9; i++) {\nfor (int j = 1; j &lt; 10 - i; j++) {      // \u4e0e\u521a\u624d\u7684\u5192\u6ce1\u6392\u5e8f\u4e0d\u540c\uff0c\u6211\u4eec\u4e0d\u53ea\u662f\u901a\u8fc7\u8f83\u6570\u5b57\u7684\u5927\u5c0f\u51b3\u5b9a\u987a\u5e8f\n// \u5982\u679c\u5de6\u8fb9\u7684\u4e3a\u5076\u6570\uff0c\u53f3\u8fb9\u7684\u4e3a\u5947\u6570\uff0c\u90a3\u4e48\u987a\u5e8f\u4e5f\u9700\u8981\u98a0\u5012\nbool leftIsEven = a[j - 1] % 2 == 0;\nbool rightIsEven = a[j] % 2 == 0;\nif ((leftIsEven &amp;&amp; !rightIsEven) ||\n(leftIsEven == rightIsEven &amp;&amp; a[j - 1] &gt; a[j])) {        int temp = a[j];        a[j] = a[j - 1];\na[j - 1] = temp;\n}\n}\n}  for (int i = 0; i &lt; 10; i++) {\ncout &lt;&lt; a[i] &lt;&lt; ' ';\n}  return 0;\n}\n</code></pre>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#4","title":"\u7f16\u7a0b\u9898\uff034\uff1a\u6700\u5927\u5947\u6570\u4e0e\u6700\u5c0f\u5076\u6570\u4e4b\u5dee\u7684\u7edd\u5bf9\u503c","text":""},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#_27","title":"\u63cf\u8ff0","text":"<p>\u8f93\u51656\u4e2a\u6b63\u6574\u6570\uff0c\u4e14\u8fd96\u4e2a\u6b63\u6574\u6570\u4e2d\u81f3\u5c11\u5b58\u5728\u4e00\u4e2a\u5947\u6570\u548c\u4e00\u4e2a\u5076\u6570\u3002 </p> <p>\u8bbe\u8fd96\u4e2a\u6b63\u6574\u6570\u4e2d\u6700\u5927\u7684\u5947\u6570\u4e3aa\uff0c\u6700\u5c0f\u7684\u5076\u6570\u4e3ab\uff0c\u6c42\u51fa|a-b|\u7684\u503c</p>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#_28","title":"\u8ba1\u7b97\u5bfc\u8bba\u4e0eC\u8bed\u8a00\u57fa\u7840","text":""},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#_29","title":"\u8f93\u5165","text":"<p>\u8f93\u5165\u4e3a\u4e00\u884c\uff0c6\u4e2a\u6b63\u6574\u6570,\u4e146\u4e2a\u6b63\u6574\u6570\u90fd\u5c0f\u4e8e100</p> <p>\u8f93\u5165\u4fdd\u8bc1\u8fd96\u4e2a\u6570\u4e2d\u81f3\u5c11\u5b58\u5728\u4e00\u4e2a\u5947\u6570\u548c\u4e00\u4e2a\u5076\u6570</p>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#_30","title":"\u8ba1\u7b97\u5bfc\u8bba\u4e0eC\u8bed\u8a00\u57fa\u7840","text":""},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#_31","title":"\u8f93\u51fa","text":"<p>\u8f93\u51fa\u4e3a\u4e00\u884c\uff0c\u8f93\u51fa\u6700\u5927\u7684\u5947\u6570\u4e0e\u6700\u5c0f\u7684\u5076\u6570\u4e4b\u5dee\u7684\u7edd\u5bf9\u503c</p> <p>\u505a\u6cd5\u4e00\uff1a\uff08\u592a\u590d\u6742\uff09</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cmath&gt;\nusing namespace std;\n\nint main () {\nint num[6];\nfor (int i = 0; i &lt; 6; i++) {\ncin &gt;&gt; num[i];\n}\n\n\n\n// \u53cc\u6307\u9488\u6cd5\u5c06\u6240\u6709\u6570\u8fdb\u884c\u5947\u5076\u6392\u5e8f\uff0c\u5947\u6570\u5728\u5de6\u8fb9\uff0c\u5076\u6570\u5728\u53f3\u8fb9\nint l = 0, r = 5;\nwhile (l &lt; r) {\nbool leftIsOdd = num[l] % 2 == 1;\nbool rightIsEven = num[r] % 2 == 0;\nif (leftIsOdd) {\nl++;\n} else if (rightIsEven) {\nr--;\n} else if (!leftIsOdd &amp; !rightIsEven) {\nint tmp = num[l];\nnum[l] = num[r];\nnum[r] = tmp;\n}\n}\n// \u5bf9\u5947\u6570\u548c\u5076\u6570\u90e8\u5206\u5206\u522b\u8fdb\u884c\u6392\u5e8f\n\nfor (int i = 0; i &lt; l; i++) {\nfor (int j = 0; j &lt; l - i -1; j++) {\nif (num[j] &lt; num[j + 1]) {\nint tmp = num[j];\nnum[j] = num[j + 1];\nnum[j + 1] = tmp;\n}\n}\n}\nfor (int i = l; i &lt; 6; i++) {\nfor (int j = l; j &lt; 5 + l - i; j++) {\nif (num[j] &lt; num[j + 1]) {\nint tmp = num[j];\nnum[j] = num[j + 1];\nnum[j + 1] = tmp;\n}\n}\n}\n\n\n// \u8ba1\u7b97\u5e76\u4e14\u8f93\u51fa\u6700\u5927\u7684\u5947\u6570\u548c\u6700\u5c0f\u5076\u6570\u7684\u5dee\u503c\ncout &lt;&lt; abs(num[0] - num[5]) &lt;&lt; endl;\nreturn 0;\n}\n</code></pre> <p>\u505a\u6cd5\u4e8c\uff1a\uff08\u6ce8\u610f\u9898\u610f\uff09</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cmath&gt;\nusing namespace std;\n\nint main () {\nint maxOdd = 0, minEven = 100;\nfor (int i = 0; i &lt; 6; i++) {\nint a;\nscanf(\"%d\", &amp;a);\nif (a % 2 == 1) {\nif (a &gt; maxOdd) maxOdd = a;\n} else {\nif (a &lt; minEven) minEven = a;\n}\n}\ncout &lt;&lt; abs(maxOdd - minEven) &lt;&lt; endl;\nreturn 0;\n}\n</code></pre>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#5","title":"\u7f16\u7a0b\u9898\uff035\uff1a\u5206\u79bb\u6574\u6570\u7684\u5404\u4e2a\u6570\u4f4d","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main () {\nchar str[4];\ncin &gt;&gt; str;\nfor (int i = 0; i &lt; 3; i++) cout &lt;&lt; str[i] &lt;&lt; endl;\nreturn 0;\n}\n</code></pre>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#module-7-c","title":"Module 7 C\u8bed\u8a00\u4e2d\u7684\u6570\u636e\u6210\u5206","text":""},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#module-8-c","title":"Module 8 C\u8bed\u8a00\u4e2d\u7684\u8fd0\u7b97\u6210\u5206","text":""},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#module-9-c","title":"Module 9 C\u8bed\u8a00\u4e2d\u7684\u63a7\u5236\u6210\u5206","text":""},{"location":"Problem/","title":"Programming Problem","text":"<p>Abstract</p> <p>\u8fd9\u91cc\u662f\u6570\u636e\u7ed3\u6784&amp;\u7b97\u6cd5\u3001\u5237\u9898\u76f8\u5173\u7684\u7b14\u8bb0</p> <p>\u5305\u62ec\u4e86\u4eceC++\u8bed\u6cd5\u57fa\u7840\u5230\u6570\u636e\u7ed3\u6784&amp;\u7b97\u6cd5\u5165\u95e8\u518d\u5230\u5237\u9898\u7684\u5168\u8fc7\u7a0b</p> <p>\u6b63\u5728\u4e0d\u65ad\u603b\u7ed3\u66f4\u65b0\u7b14\u8bb0\u4e2d...</p>"},{"location":"Problem/#_1","title":"\u7b97\u6cd5\u5b66\u4e60\u8def\u5f84","text":"<ul> <li> acwing\u7b97\u6cd5\u57fa\u7840\u8bfe+\u7b97\u6cd5\u63d0\u9ad8\u8bfe</li> <li> \u4ee3\u7801\u968f\u60f3\u5f55</li> <li> LeetCode 101</li> <li> hot 100</li> </ul> <p>\u6309\u7167\u4e13\u9898\u5237\uff1a</p> <ul> <li> \u5bab\u6c34\u4e09\u53f6\u7684\u5237\u9898\u7b14\u8bb0</li> </ul>"},{"location":"Problem/#table-of-contents","title":"Table of Contents","text":"<ul> <li> <p>AcWing\u8bed\u6cd5\u57fa\u7840\u8bfe</p> <ul> <li>\u7b2c\u4e94\u8bb2 \u5b57\u7b26\u4e32</li> <li>\u7b2c\u516d\u8bb2 \u51fd\u6570</li> <li>\u7b2c\u4e03\u8bb2 \u7c7b\u3001\u7ed3\u6784\u4f53\u3001\u6307\u9488\u4e0e\u5f15\u7528</li> <li>\u7b2c\u516b\u8bb2 STL\u3001\u4f4d\u8fd0\u7b97\u4e0e\u5e93\u51fd\u6570</li> </ul> </li> <li> <p>AcWing\u7b97\u6cd5\u57fa\u7840\u8bfe</p> <ul> <li>\u7b2c\u4e00\u8bb2 \u57fa\u7840\u7b97\u6cd5</li> </ul> </li> </ul>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/","title":"\u7b2c\u4e94\u8bb2 \u52a8\u6001\u89c4\u5212","text":"<p>\u52a8\u6001\u89c4\u5212\u95ee\u9898\u6ca1\u6709\u7b97\u6cd5\u6a21\u677f</p> <p>\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b</p> <p>\u52a8\u6001\u89c4\u5212\u7b97\u6cd5\u662f\u4e00\u79cd\u7528\u4e8e\u89e3\u51b3\u4f18\u5316\u95ee\u9898\u7684\u7b97\u6cd5\u601d\u60f3\u3002\u5b83\u901a\u8fc7\u5c06\u95ee\u9898\u5206\u89e3\u4e3a\u5b50\u95ee\u9898\uff0c\u5e76\u4ee5\u9012\u63a8\u7684\u65b9\u5f0f\u6c42\u89e3\u5b50\u95ee\u9898\u7684\u6700\u4f18\u89e3\uff0c\u4ece\u800c\u5f97\u5230\u539f\u95ee\u9898\u7684\u6700\u4f18\u89e3\u3002</p> <p>\u52a8\u6001\u89c4\u5212\u7b97\u6cd5\u901a\u5e38\u9002\u7528\u4e8e\u6ee1\u8db3\u6700\u4f18\u5b50\u7ed3\u6784\u548c\u91cd\u53e0\u5b50\u95ee\u9898\u6027\u8d28\u7684\u95ee\u9898\u3002\u6700\u4f18\u5b50\u7ed3\u6784\u610f\u5473\u7740\u95ee\u9898\u7684\u6700\u4f18\u89e3\u53ef\u4ee5\u7531\u5176\u5b50\u95ee\u9898\u7684\u6700\u4f18\u89e3\u6784\u6210\uff0c\u800c\u91cd\u53e0\u5b50\u95ee\u9898\u5219\u6307\u5728\u6c42\u89e3\u8fc7\u7a0b\u4e2d\u4f1a\u53cd\u590d\u9047\u5230\u76f8\u540c\u7684\u5b50\u95ee\u9898\u3002</p> <p>\u52a8\u6001\u89c4\u5212\u7b97\u6cd5\u7684\u57fa\u672c\u6b65\u9aa4\u5982\u4e0b\uff1a</p> <ol> <li>\u5b9a\u4e49\u72b6\u6001\uff1a\u786e\u5b9a\u95ee\u9898\u7684\u72b6\u6001\u8868\u793a\uff0c\u5373\u627e\u51fa\u9700\u8981\u5b58\u50a8\u7684\u4fe1\u606f\uff0c\u4ee5\u4fbf\u8fdb\u884c\u540e\u7eed\u7684\u8ba1\u7b97\u3002</li> <li>\u786e\u5b9a\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a\u5efa\u7acb\u95ee\u9898\u7684\u72b6\u6001\u4e4b\u95f4\u7684\u8f6c\u79fb\u5173\u7cfb\uff0c\u5373\u6839\u636e\u5b50\u95ee\u9898\u7684\u6700\u4f18\u89e3\u63a8\u5bfc\u51fa\u539f\u95ee\u9898\u7684\u6700\u4f18\u89e3\u3002</li> <li>\u521d\u59cb\u6761\u4ef6\uff1a\u786e\u5b9a\u95ee\u9898\u7684\u8fb9\u754c\u6761\u4ef6\uff0c\u5373\u6700\u7b80\u5355\u7684\u60c5\u51b5\u4e0b\u7684\u89e3\u3002</li> <li>\u81ea\u5e95\u5411\u4e0a\u6c42\u89e3\uff1a\u6309\u7167\u81ea\u5e95\u5411\u4e0a\u7684\u987a\u5e8f\uff0c\u901a\u8fc7\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u548c\u5df2\u77e5\u7684\u521d\u59cb\u6761\u4ef6\u6765\u8ba1\u7b97\u5e76\u586b\u5145\u72b6\u6001\u8868\u683c\uff08\u6216\u8005\u76f4\u63a5\u66f4\u65b0\u72b6\u6001\u6570\u7ec4\uff09\u3002</li> <li>\u63d0\u53d6\u7ed3\u679c\uff1a\u6839\u636e\u95ee\u9898\u7684\u8981\u6c42\uff0c\u4ece\u6700\u7ec8\u7684\u72b6\u6001\u8868\u683c\uff08\u6216\u8005\u72b6\u6001\u6570\u7ec4\uff09\u4e2d\u63d0\u53d6\u51fa\u6240\u9700\u7684\u7ed3\u679c\u3002</li> </ol> <p>\u52a8\u6001\u89c4\u5212\u7b97\u6cd5\u5728\u6c42\u89e3\u95ee\u9898\u65f6\uff0c\u5229\u7528\u4e86\u5b50\u95ee\u9898\u7684\u91cd\u53e0\u6027\u8d28\uff0c\u907f\u514d\u4e86\u91cd\u590d\u8ba1\u7b97\uff0c\u4ece\u800c\u663e\u8457\u63d0\u9ad8\u4e86\u6548\u7387\u3002\u5b83\u5e38\u5e38\u7528\u4e8e\u89e3\u51b3\u8bf8\u5982\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217\u3001\u80cc\u5305\u95ee\u9898\u3001\u6700\u77ed\u8def\u5f84\u95ee\u9898\u7b49\u4f18\u5316\u95ee\u9898\u3002</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#1","title":"1. \u80cc\u5305\u95ee\u9898","text":"<p>\u5e76\u4e0d\u4e00\u5b9a\u8981\u5c06\u80cc\u5305\u5b8c\u5168\u88c5\u6ee1</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#01","title":"01\u80cc\u5305\u95ee\u9898\uff08\u6bcf\u4ef6\u7269\u54c1\u6700\u591a\u53ea\u7528\u4e00\u6b21\uff09","text":"<p>N\u4e2a\u7269\u54c1\uff0c\u548c\u4e00\u4e2a\u5bb9\u91cf\u662fV\u7684\u80cc\u5305</p> <p>\u6bcf\u4e2a\u7269\u54c1\u90fd\u6709vi\u548c\u4ef7\u503cwi\uff0c\u6bcf\u4e2a\u7269\u54c1\u53ea\u80fd\u7528\u4e00\u6b21</p> <p>\u4f7f\u80cc\u5305\u4e2d\u7684\u7269\u54c1\u4ef7\u503c\u6700\u5927</p> <p>DP\u95ee\u9898\u4ece\u4e24\u4e2a\u89d2\u5ea6\u6765\u8003\u8651</p> <p>\u4ece\u96c6\u5408\u7684\u89d2\u5ea6\uff1a</p> <p>f(i, j) \u8868\u793a\u7684\u662f\u96c6\u5408\u4e2d\u6240\u6709\u9009\u6cd5\u7684\u6700\u5927\u503c</p> <ol> <li> <p>\u72b6\u6001\u8868\u793a\uff1a\u9700\u8981\u51e0\u7ef4\u6570\u7ec4\u6765\u8868\u793af(i,j)\uff1b\u96c6\u5408\uff08\u6240\u6709\u9009\u6cd5\uff0c\u6761\u4ef6\uff08\u53ea\u8003\u8651\u524di\u4e2a\u7269\u54c1\u3001\u9009\u51fa\u6765\u603b\u4f53\u79ef\u5c0f\u4e8e\u7b49\u4e8ej\uff09\uff09\u548c\u5c5e\u6027\uff08\u6700\u5927\u503c\u3001\u6700\u5c0f\u503c\u3001\u6570\u91cf\uff09</p> </li> <li> <p>\u72b6\u6001\u8ba1\u7b97\uff1a\u5982\u4f55\u4e00\u6b65\u6b65\u7b97f(i, j) --\u96c6\u5408\u7684\u5212\u5206   f(i, j)\u5982\u4f55\u7528\u66f4\u5c0f\u7684\u96c6\u5408\u5212\u5206\uff1a\u628af(i, j)\u5206\u6210\u4e24\u5927\u7c7b\uff1a\u4e0d\u542b\u7b2ci\u4e2a\u653e\u5230\u5de6\u8fb9 \uff08f(i -1, j\uff09)\u3001\u5305\u542b\u7b2ci\u4e2a\u653e\u5230\u53f3\u8fb9\u53bb(f(i - 1, j - vi) + wi)</p> </li> <li>f(i, j) = max(f(i -1, j), f(i - 1, j - vi) + wi);</li> </ol> <p>f(i - 1, j - vi) + wi \u662f\u6709\u53ef\u80fd\u4e0d\u5b58\u5728\u7684\uff0cwi\u53ef\u80fd\u5927\u4e8e\u6700\u5927\u9650\u5236\uff0c\u90a3\u4e48\u5c31\u662f\u7a7a\u96c6\u4e86</p> <p>\u52a8\u6001\u89c4\u5212\u7684\u7f51\u4e0a\u601d\u7ef4\u65b9\u5f0f\u7ed3\u6784\u3001\u72b6\u6001\u3001\u6700\u540e\u5b50\u7ed3\u6784\u592a\u62bd\u8c61\u4e86</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#01_1","title":"01\u80cc\u5305\u95ee\u9898","text":""},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_2","title":"\u4e8c\u7ef4\u5199\u6cd5","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\nconst int N = 1010;\nint n, m;\nint v[N], w[N];\nint f[N][N]; // f[a][b]\u8868\u793a\u7684\u662f\u5bf9\u4e8ea\u4e2a\u7269\u54c1\uff0cb\u7684\u6700\u5927\u5bb9\u91cf\uff0c\u6240\u80fd\u88c5\u7684\u6700\u5927\u4ef7\u503c\n\n\nint main () {\ncin &gt;&gt; n &gt;&gt; m;\nfor (int i = 1; i &lt;= n; i++) cin &gt;&gt; v[i] &gt;&gt; w[i];\n// \u56e0\u4e3af[0][0~m]\u5168\u5c40\u53d8\u91cf\u672c\u8eab\u5c31\u662f0\uff0c\u5c31\u4e0d\u5bf9\u4ed6\u8d4b\u503c\u4e86\nfor (int i = 1; i &lt;= n; i++) {\nfor (int j = 0; j &lt;= m; j++) {\nf[i][j] = f[i - 1][j];\nif (j &gt;= v[i]) f[i][j] = max(f[i][j], f[i - 1][j - v[i]] + w[i]);\n}\n}\ncout &lt;&lt; f[n][m] &lt;&lt; endl;\nreturn 0;\n}\n</code></pre> <p>f[i]\u8fd9\u4e00\u5c42\u5728\u66f4\u65b0\u7684\u65f6\u5019\u53ea\u7528\u5230\u4e86f[i - 1]\u5c42\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528\u6eda\u52a8\u6570\u7ec4\u6765\u505a</p> <p>\u6ce8\u610f\u5230\u5728\u66f4\u65b0f[x] [j]\u7684\u65f6\u5019\u7684\u4f53\u79ef\u53ea\u548cj\u6216\u8005j - v[i]\u76f8\u5173</p> <p>\u6ce8\u610f\u5728\u4fee\u6539f[j - v[i]]\u7684\u65f6\u5019\u5982\u679cj\u662f\u4ece\u524d\u5f80\u540e\u6392\u7684\u8bdd\uff0c\u90a3\u4e48\u540e\u9762\u7684f[j]\u7528\u5230\u7684\u5c31\u4e0d\u662f\u539f\u6765\u7684f[j - v[i]]\u4e86\uff0c\u6240\u4ee5\u9700\u8981\u4ece\u540e\u5f80\u524d\u904d\u5386</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_3","title":"\u6eda\u52a8\u6570\u7ec4\u7684\u6982\u5ff5","text":"<p>\u5982\u679c\u4e00\u4e2a\u6570\u7ec4\u4e2d\u4ecef[0]\u5230f[n]\u6bcf\u4e00\u4e2a\u6570\u503c\u90fd\u53ea\u548c\u524d\u4e00\u4e2a\u6570\u6709\u5173\uff0c\u6bd4\u5982f[5]\u53ea\u548cf[4]\u6709\u5173</p> <p>\u8003\u8651\u4e00\u4e0b\u8fd9\u4e2a\u7b49\u5f0f<code>f[n] = f[n - 1] + 2</code></p> <p>\u90a3\u4e48\u5b9e\u9645\u4e0a\u6211\u4eec\u5f00\u6570\u7ec4\u7684\u7a7a\u95f4\u5e76\u4e0d\u9700\u8981\u5f00f[0~n]</p> <p>\u800c\u53ea\u8981\u5f00f[0]\u548cf[1]\u5c31\u884c\uff0c\u7136\u540e\u4e24\u4e2a\u4e4b\u95f4\u4e92\u76f8\u66f4\u65b0</p> <p>\u8fdb\u884c\u6734\u7d20\u7684\u601d\u8003\u8fc7\u7a0b\u6765\u6392\u9664\u4ece\u524d\u5f80\u540e\u8fdb\u884c\u904d\u5386\uff1a</p> <p>v[1] = 2, w[1] = 3</p> <p>v[2]  = 2, w[2] = 6</p> <p>\u6700\u5927\u7684\u5bb9\u91cf\u662f4</p> <p>\u6240\u4ee5\u5982\u679c\u4ece\u524d\u5f80\u540e\u904d\u5386\uff0c\u90a3\u4e48\u7b2c\u4e00\u6b21\u7684\u7ed3\u679c\u662f</p> <p>f[2] = 3, f[4] = 3</p> <p>\u7b2c\u4e8c\u6b21\u7684\u7ed3\u679c\u662f</p> <p>f[2] = 6, f[4] = 12</p> <p>\u800c12\u662f\u660e\u663e\u4e0d\u6b63\u786e\u7684\uff0c\u56e0\u4e3a\u7528\u4e86\u66f4\u65b0\u4e4b\u540e\u7684f[2]\uff08\u5373\u4e8c\u7ef4\u5199\u6cd5\u4e4b\u4e2d\u7684<code>f[i][j - v[i]]</code>\u800c\u4e0d\u662f\u9700\u8981\u7684<code>f[i - 1][j - v[i]]</code>\uff09</p> <p>\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4ece\u540e\u5f80\u524d\u8fdb\u884c\u66f4\u65b0</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_4","title":"\u4e00\u7ef4\u5199\u6cd5","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\n\nconst int N = 1010;\nint n, m;\nint v[N], w[N];\nint f[N]; int main () {\ncin &gt;&gt; n &gt;&gt; m;\nfor (int i = 1; i &lt;= n; i ++) cin &gt;&gt; v[i] &gt;&gt; w[i];\nfor (int i = 1; i &lt;= n; i++) {\nfor (int j = m; j &gt;= v[i]; j--) {\nf[j] = max(f[j], f[j - v[i]] + w[i]);\n}\n}\ncout &lt;&lt; f[m] &lt;&lt; endl;\nreturn 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_5","title":"\u5b8c\u5168\u80cc\u5305\u95ee\u9898\uff08\u6bcf\u4ef6\u7269\u54c1\u53ef\u7528\u65e0\u9650\u6b21\uff09","text":"<p>\u5b8c\u5168\u80cc\u5305\u95ee\u9898\u7684\u601d\u8003\u65b9\u5f0f</p> <p>\u72b6\u6001\u8868\u793a\u548c\u72b6\u6001\u8ba1\u7b97\u4e24\u4e2a\u89d2\u5ea6\u8fdb\u884c\u601d\u8003</p> <p>\u72b6\u6001\u8868\u793a\uff1a<code>f[i][j]</code> </p> <p>\u96c6\u5408\uff1a\u6240\u6709\u53ea\u8003\u8651\u524di\u4e2a\u7269\u54c1\uff0c\u4e14\u603b\u4f53\u79ef\u4e0d\u5927\u4e8ej\u7684\u6240\u6709\u9009\u6cd5</p> <p>\u5c5e\u6027\uff1a\u6240\u6709\u9009\u6cd5\u7684\u603b\u4ef7\u503c\u7684\u6700\u5927\u503c</p> <p>\u72b6\u6001\u8ba1\u7b97\uff1a</p> <p>\u96c6\u5408\u7684\u5212\u5206\uff1a</p> <p>\u6309\u7269\u54c1\u6709\u591a\u5c11\u4e2a\u6765\u5206\uff08\u7b2ci\u4e2a\u7269\u54c1\u9009k\u4e2a\u77e5\u9053v[i] * k &lt;= m\uff09</p> <p>\u66f2\u7ebf\u6551\u56fd\uff0c\u4e09\u6b65\u6765\u8d70</p> <ol> <li>\u53bb\u6389k\u4e2a\u7269\u54c1i</li> <li>\u6c42Max(f[i - 1, j - k * v[i]])</li> <li>\u518d\u52a0\u56de\u6765k\u4e2a\u7269\u54c1i</li> </ol>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_6","title":"\u6734\u7d20\u505a\u6cd5\uff08\u4e0d\u63a8\u8350\uff0c\u592a\u6162\u4e86\uff09","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\nconst int N = 1010;\nint n, m;\nint v[N], w[N];\nint f[N][N];\n\nint main () {\ncin &gt;&gt; n &gt;&gt;m;\nfor (int i = 1; i &lt;= n; i++) cin &gt;&gt; v[i] &gt;&gt; w[i];\nfor (int i = 1; i &lt;= n; i++) {\nfor (int j = 0; j &lt;= m; j++) {\nfor (int k = 0; k * v[i] &lt;= j; k++) {\nf[i][j] = max(f[i][j], f[i - 1][j - v[i] * k] + w[i] * k);\n}\n}\n}\ncout &lt;&lt; f[n][m] &lt;&lt; endl;\nreturn 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_7","title":"\u4f18\u5316\u6210\u4e24\u7ef4","text":"<p>\u8003\u8651<code>f[i, j] = f[i - 1, j - v[i] * k] + w[i] * k</code></p> <p><code>f[i, j]  = Max(f[i - 1, j], f[i - 1][j - v] + w, f[i - 1][j - 2v] + 2w, ...)</code></p> <p><code>f[i, j - v] = Max(        f[i - 1][j-v], f[i - 1][j - 2v] + w)</code></p> <p>\u6ce8\u610ff[i, j]\u6bd4f[i, j - v]\u591a\u51fa\u4e86w</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\nconst int N = 1010;\nint n, m;\nint v[N], w[N];\nint f[N][N];\n\nint main () {\ncin &gt;&gt; n &gt;&gt;m;\nfor (int i = 1; i &lt;= n; i++) cin &gt;&gt; v[i] &gt;&gt; w[i];\nfor (int i = 1; i &lt;= n; i++) {\nfor (int j = 0; j &lt;= m; j++) {\nf[i][j] = f[i - 1][j];\nif (j &gt;= v[i]) f[i][j] = max(f[i][j], f[i][j - v[i]] + w[i]);\n}\n}\ncout &lt;&lt; f[n][m] &lt;&lt; endl;\nreturn 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_8","title":"\u8f6c\u5316\u4e3a\u4e00\u7ef4","text":"<p>\u56e0\u4e3a\u8fd9\u91cc\u5b9e\u9645\u4e0a\u9700\u8981\u5bf9k\u4e2a\u7269\u54c1\u8fdb\u884c\u7d2f\u52a0\u7684</p> <p>\u6240\u4ee5\u8fd9\u91cc\u66f4\u65b0\u7684\u65f6\u5019\u662f\u4ece\u524d\u5f80\u540e\u8fdb\u884c\u66f4\u65b0\u7684</p> <p>\u533a\u522b\u5728\u4e8e01\u80cc\u5305\u95ee\u9898\u662f\u901a\u8fc7f[i - 1]\u8fdb\u884c\u66f4\u65b0\u7684\uff0c\u6240\u4ee5\u4e0d\u80fd\u5148\u66f4\u65b0\u524d\u9762</p> <p>\u800c\u5b8c\u5168\u80cc\u5305\u95ee\u9898\u662f\u901a\u8fc7f[i]\u8fdb\u884c\u66f4\u65b0\u7684\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u4ece\u540e\u5f80\u524d\u8fdb\u884c\u66f4\u65b0</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\nconst int N = 1010;\nint n, m;\nint v[N], w[N];\nint f[N];\n\nint main () {\ncin &gt;&gt; n &gt;&gt;m;\nfor (int i = 1; i &lt;= n; i++) cin &gt;&gt; v[i] &gt;&gt; w[i];\nfor (int i = 1; i &lt;= n; i++) {\nfor (int j = v[i]; j &lt;= m; j++) {\n// f[j] = f[j];\nf[j] = max(f[j], f[j - v[i]] + w[i]);\n}\n}\ncout &lt;&lt; f[m] &lt;&lt; endl;\nreturn 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_9","title":"\u591a\u91cd\u80cc\u5305\u95ee\u9898\uff08\u6bcf\u4e2a\u7269\u54c1\u4e2a\u6570\u4e0d\u4e00\u6837\uff09","text":"<p>\u8003\u8651\u4e24\u4e2a\u65b9\u9762</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#fi-j","title":"\u72b6\u6001\u8868\u793a\uff1af[i, j]","text":"<p>\u96c6\u5408\uff1a\u6240\u6709\u53ea\u4ece\u524di\u4e2a\u7269\u54c1\u4e2d\u9009\uff0c\u5e76\u4e14\u603b\u4f53\u79ef\u4e0d\u8d85\u8fc7j\u7684\u9009\u6cd5</p> <p>\u5c5e\u6027\uff1a\u96c6\u5408\u5f53\u4e2d\u6bcf\u4e00\u4e2a\u9009\u6cd5\u5bf9\u5e94\u7684\u603b\u4ef7\u503c\u7684\u6700\u5927\u503c</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_10","title":"\u72b6\u6001\u8ba1\u7b97","text":"<p>\u679a\u4e3e\u4e00\u4e0b\u7b2ci\u4e2a\u7269\u54c1\u9009\u591a\u5c11\u4e2a</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_11","title":"\u6734\u7d20\u505a\u6cd5","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n\nusing namespace std;\nconst int N = 1010;\nint n, m;\nint v[N], w[N], s[N];\nint f[N][N];\n\nint main () {\ncin &gt;&gt; n &gt;&gt; m;\nfor (int i = 1; i &lt;= n; i++) cin &gt;&gt; v[i] &gt;&gt; w[i] &gt;&gt; s[i];\nfor (int i = 1; i &lt;= n; i++) {\nfor (int j = 0; j &lt;= m; j ++) {\nfor (int k = 0; k &lt;= s[i] &amp;&amp; k * v[i] &lt;= j; k++) {\nf[i][j] = max(f[i][j], f[i - 1][j - k * v[i]] + w[i] * k);\n}\n}\n}\ncout &lt;&lt; f[n][m] &lt;&lt; endl;\nreturn 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#2","title":"\u591a\u91cd\u80cc\u5305\u95ee\u98982\uff08\u4e8c\u8fdb\u5236\u7ecf\u5178\u4f18\u5316\u7248\uff09","text":"<p>C++\u4e00\u79d2\u949f\u6700\u591a\u7b97\u4e00\u4ebf\u6b21</p> <p>\u6240\u4ee5\u5bf9\u591a\u91cd\u80cc\u5305\u95ee\u9898\u7684\u4f18\u5316\u662f\u5c06\u591a\u79cd\u7269\u54c1\u7684n\u4e2a\u7684\u4e2a\u6570\u62c6\u6210\u591a\u4e2a\u79cd\u7c7b\u7684\u7269\u54c1</p> <p>\u6bd4\u5982\u8f93\u5165\u4e86\u4e00\u4e2a\u4f53\u79ef\u662f2\uff0c\u4ef7\u503c\u662f3\uff0c\u6570\u91cf\u662f9\u7684\u79cd\u7c7b\u7684\u4e1c\u897f\u3001</p> <p>\u90a3\u4e48\u6211\u4eec\u5b9e\u9645\u4e0a\u53ef\u4ee5\u5c06\u4ed6\u4eec\u62c6\u6210\u4f53\u79ef\u3001\u4ef7\u503c\u3001\u6570\u91cf\u5206\u522b\u662f\uff1a</p> <p>2, 3\uff081\uff09</p> <p>4, 6\uff082\uff09</p> <p>8,12\uff084\uff09</p> <p>4, 6\uff082\uff09</p> <p>\u8fd9\u56db\u4e2a\u7ec4\u7684\u7269\u54c1</p> <p>\u7136\u540e\u5bf9\u4ed6\u4eec\u8fdb\u884c01\u80cc\u5305\u95ee\u9898\u7684\u8ba8\u8bba\u5c31\u884c\u4e86</p> <p>\u4f7f\u7528\u7684\u662f\u4e8c\u8fdb\u5236\u5f97\u4f18\u5316\u65b9\u5f0f</p> <p>\u4f7f\u75281, 2, 4, 8, ... , 512\u62fc\u51d1\u51fa\u7269\u54c1\u7684\u6240\u6709\u7684\u65b9\u6848logn\u7684\u505a\u6cd5</p> <p>\u6bd4\u5982200 = 1 + 2 + 4 + 8 + 16 + 32 + 64 + 73</p> <p>\u4e00\u822c\u7684s\uff0c\u5b9e\u73b0\u62c6\u6210logs\u4e2a\u7ec4\uff0c\u7136\u540e\u5bf9\u62c6\u597d\u540e\u7684\u7ec4\u8fdb\u884c01\u80cc\u5305\u95ee\u9898\u7684\u8ba8\u8bba\u5373\u53ef\uff1a</p> <p>1, 2, 4, 8, ...2^k, c</p> <p>\u539f\u6765\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fnvs</p> <p>\u73b0\u5728\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fnvlogs</p> <p>\u4ee3\u7801\uff1a</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\nconst int N = 14000; // \u7ec4\u6570\u7b49\u4e8e1000 * log2000 = 12000\n\nint n, m;\nint v[N], w[N];\nint f[N];\nint main () {\ncin &gt;&gt; n &gt;&gt; m;\nint cnt = 0;\nfor (int i = 1; i &lt;= n; i++) {\nint a, b, s;\ncin &gt;&gt; a &gt;&gt; b &gt;&gt; s;\nint k = 1;\nwhile(k &lt;= s) {\ncnt ++;\nv[cnt] = a * k;\nw[cnt] = b * k;\ns -= k;\nk *= 2;\n}\nif (s &gt; 0) {\ncnt ++;\nv[cnt] = a * s;\nw[cnt] = b * s;\n}\n}\nn = cnt;\nfor (int i = 1; i &lt;= n; i++) {\nfor (int j = m; j &gt;= v[i]; j--) {\nf[j] = max(f[j], f[j - v[i]] + w[i]);\n}\n}\ncout &lt;&lt; f[m] &lt;&lt; endl;\nreturn 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#n","title":"\u5206\u7ec4\u80cc\u5305\u95ee\u9898\uff08\u7269\u54c1\u6709n\u7ec4\uff0c\u6bcf\u7ec4\u91cc\u9762\u82e5\u5e72\u4e2a\uff0c\u6bcf\u7ec4\u53ea\u80fd\u9009\u4e00\u4e2a\uff09","text":"<p>\u5206\u7ec4\u80cc\u5305\u95ee\u9898</p> <p>\u72b6\u6001\u8868\u793a<code>f[i][j]</code></p> <p>\u96c6\u5408\uff1a\u53ea\u4ece\u524di\u7ec4\u7269\u54c1\u4e2d\u9009\u4e14\u603b\u4f53\u79ef\u4e0d\u5927\u4e8ej\u7684\u6240\u6709\u9009\u6cd5</p> <p>\u5c5e\u6027\uff1a\u96c6\u5408\u5f53\u4e2d\u6240\u6709\u9009\u6cd5\u4ef7\u503c\u7684\u6700\u5927\u503c</p> <p>\u72b6\u6001\u8ba1\u7b97</p> <p>\u96c6\u5408\u5212\u5206</p> <p>\u679a\u4e3e\u7b2ci\u7ec4\u7269\u54c1\u9009\u54ea\u4e00\u4e2a\u6216\u8005\u4e0d\u9009\uff0c\u5212\u5206\u6210\u4e0d\u9009\u7b2ci\u7ec4\u7684\u7269\u54c1\u3001\u9009\u7b2ci\u7ec4\u7684\u7b2c\u4e00\u4e2a\u7269\u54c1\u3001\u9009\u7b2ci\u7ec4\u7684\u7b2c\u4e8c\u4e2a\u7269\u54c1</p> <p>\u5bf9\u4e8e\u4e0d\u4ece\u91cc\u9762\u9009\u7684\u60c5\u51b5\u6765\u8bf4\uff0c<code>f[i][j] = f[i - 1][j]</code></p> <p>\u5bf9\u4e8e\u9700\u8981\u4ece\u91cc\u9762\u9009\u7684\u60c5\u51b5\u6765\u8bf4\uff0c<code>f[i - 1, j - v[i][k]] + w[i, k]</code></p> <pre><code>#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n\nusing namespace std;\n\nconst int N = 110;\nint n, m;\nint v[N][N], w[N][N], s[N];\nint f[N];\n\nint main () {\ncin &gt;&gt; n &gt;&gt; m;\nfor (int i = 1; i &lt;= n; i++) {\ncin &gt;&gt; s[i];\nfor (int j = 0; j &lt; s[i]; j++) {\ncin &gt;&gt; v[i][j] &gt;&gt; w[i][j];\n}\n}\nfor (int i = 1; i &lt;= n; i++) { // i\u8868\u793a\u7b2ci\u7ec4\u7269\u54c1\nfor (int j = m; j &gt;= 0; j--) { // j\u8868\u793a\u5bb9\u91cf\u4e3aj\nfor (int k = 0; k &lt; s[i]; k++) { // k\u8868\u793a\u7b2ck\u4e2a\u7269\u54c1\nif (v[i][k] &lt;= j) {\nf[j] = max(f[j], f[j - v[i][k]] + w[i][k]);\n}\n}\n}\n}\n\ncout &lt;&lt; f[m] &lt;&lt; endl;\n\nreturn 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#2-dp","title":"2. \u7ebf\u6027dp","text":"<p>\u4ec0\u4e48\u662f\u7ebf\u6027dp\uff1a\u9012\u63a8\u65b9\u7a0b\u6709\u4e00\u4e2a\u660e\u663e\u7684\u7ebf\u6027\u5173\u7cfb\uff0c\u6709\u53ef\u80fd\u4e00\u7ef4\u7ebf\u6027\u4e5f\u6709\u53ef\u80fd\u4e8c\u7ef4\u7ebf\u6027</p> <p>dp\u6ca1\u6709\u6a21\u677f\uff0c\u6838\u5fc3\u662f\u72b6\u6001\u8868\u793a\u548c\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u4e0a</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_12","title":"\u6570\u5b57\u4e09\u89d2\u5f62","text":"<p>\u4e0b\u6807\u4ece1\u5f00\u59cb\u548c\u4ece0\u5f00\u59cb\u53d6\u51b3\u4e8e\u4f1a\u4e0d\u4f1a\u8c03\u7528\u5230f[i - 1]\uff0c\u5982\u679c\u6709f[i - 1]\u90a3\u4e48\u4e0b\u6807\u4ece1\u5f00\u59cb\u6bd4\u8f83\u597d</p> <p>\u4e09\u89d2\u5f62\u7684\u884c\u6570\u5c31\u662f\u4e00\u5c42\u4e00\u5c42\u5730\u770b\uff0c\u4e09\u89d2\u5f62\u7684\u5217\u6570\u8981\u659c\u7740\u770b</p> <p>\u72b6\u6001\u8868\u793a\uff1a</p> <p>\u96c6\u5408\uff1a\u6240\u6709\u4ece\u8d77\u70b9\u8d70\u5230(i, j) \u7684\u8def\u5f84</p> <p>\u5c5e\u6027\uff1a\u6240\u6709\u8def\u5f84\u4e0a\u6570\u5b57\u4e4b\u548c\u7684\u6700\u5927\u503cMax</p> <p>\u72b6\u6001\u8ba1\u7b97\uff1a\uff08\u6ca1\u6709\u56fa\u5b9a\u65b9\u5f0f\uff0c\u53ea\u6709\u7ecf\u9a8c\uff09</p> <p>f[i, j]\u5206\u6210\u4e24\u7c7b\uff1a\u4ece\u5de6\u4e0a\u6765\u7684\uff0c\u548c\u4ece\u53f3\u4e0a\u65b9\u6765\u7684</p> <p>\u4ece\u5de6\u4e0a\u6765\uff1af[i - 1, j -1] + a[i, j]</p> <p>\u4ece\u53f3\u4e0a\u65b9\u6765\uff1af[i - 1, j] + a[i, j]</p> <p></p> <p>\u52a8\u6001\u89c4\u5212\u95ee\u9898\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e00\u822c\u662f\u72b6\u6001\u6570\u91cf*\u8f6c\u79fb\u7684\u8ba1\u7b97\u91cf</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\nconst int INF = 1e9, N = 510;\nint n;\nint a[N][N];\nint f[N][N];\n\nint main () {\nscanf(\"%d\", &amp;n);\nfor (int i = 1; i &lt;= n; i++) {\nfor (int j = 1; j &lt;= i; j++) {\nscanf(\"%d\", &amp;a[i][j]);\n}\n}\n\nfor (int i = 0; i &lt;= n; i++) {\nfor (int j = 0; j &lt;= n; j++) {\nf[i][j] = -INF;\n}\n}\nf[1][1] = a[1][1];\nfor (int i = 2; i &lt;= n; i++) {\nfor (int j = 1; j &lt;= i; j++) {\nf[i][j] = max(f[i - 1][j -1] + a[i][j], f[i - 1][j] + a[i][j]);\n}\n}\nint res = -INF;\nfor (int i = 1; i &lt;= n; i++) res = max(res, f[n][i]);\nprintf(\"%d\\n\", res);\nreturn 0;\n\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_13","title":"\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217","text":"<p>\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n^2)</p> <p>\u601d\u8003\u95ee\u9898\u7ef4\u5ea6\u7684\u65f6\u5019\u8981\u4ece\u5c0f\u5f80\u5927\u8003\u8651</p> <p>\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e2a\u9898\u76ee\u4e00\u7ef4\u6570\u7ec4\u5c31\u53ef\u8868\u793a\u51fa\u6765</p> <p>\u72b6\u6001\u8868\u793a</p> <p>\u96c6\u5408\uff1a\u6240\u6709\u4ee5\u7b2ci\u4e2a\u6570\u7ed3\u5c3e\u7684\u6570\u503c\u4e0a\u5347\u7684\u5b50\u5e8f\u5217\u7684\u96c6\u5408</p> <p>\u6bd4\u5982\uff1a3121856\u8fd9\u4e2a\u5e8f\u5217\u4e2d\uff0cf[5]\u5c31\u662f\u6240\u6709\u4ee58\u7ed3\u5c3e\u7684\u4e0a\u5347\u5b50\u5e8f\u5217\uff1a18  28  38  128</p> <p>\u5c5e\u6027\uff1a\u96c6\u5408\u91cc\u6bcf\u4e00\u4e0a\u5347\u5b50\u5e8f\u5217\u957f\u5ea6\u7684\u6700\u5927\u503c</p> <p>\u72b6\u6001\u8ba1\u7b97\uff1a</p> <p>\u96c6\u5408\u5212\u5206\uff1a\u4ee5\u4e0a\u5347\u5e8f\u5217\u4e2di\u524d\u9762\u90a3\u4e2a\u6570\u6765\u5206\u7c7b\uff0c\u6240\u4ee5\u5c31\u67091-i-1\u79cd\u5206\u7c7b</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n\nusing namespace std;\nconst int N = 1000;\nint n;\nint a[N], f[N];\n\nint main () {\nscanf(\"%d\", &amp;n);\nfor (int i = 1; i &lt;= n; i++) scanf(\"%d\", &amp;a[i]);\n\nfor (int i = 1; i &lt;= n; i++) {\nf[i] = 1;\nfor (int j = 1; j &lt; i; j++) {\nif (a[i] &gt; a[j]) {\nf[i] = max(f[i], f[j] + 1);\n}\n}\n}\nint res = 1;\nfor (int i = 1; i &lt;= n; i++) {\nres = max(res, f[i]);\n}\ncout &lt;&lt; res &lt;&lt; endl;\nreturn 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#2_1","title":"\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u52172","text":""},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_14","title":"\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217","text":"<p>\u6ce8\u610f\u662f\u5b57\u7b26\u4e32\u7684\u516c\u5171\u5b50\u5e8f\u5217\uff0c\u4e0d\u662f\u5355\u8c03\u9012\u589e\u7684\u6570\u5b57</p> <p>\u72b6\u6001\u8868\u793a\uff1a\u4e24\u7ef4\u6570\u7ec4</p> <p>\u96c6\u5408\uff1af[i, j]\u6240\u6709\u5728\u7b2c\u4e00\u4e2a\u5e8f\u5217\u7684\u524di\u4e2a\u5b57\u6bcd\u51fa\u73b0\uff0c\u4e14\u5728\u7b2c\u4e8c\u4e2a\u5e8f\u5217\u7684\u524dj\u4e2a\u5b57\u6bcd\u4e2d\u51fa\u73b0\u7684\u516c\u5171\u5b50\u5e8f\u5217</p> <p>\u5c5e\u6027\uff1a\u6240\u6709\u8fd9\u4e9b\u5b50\u5e8f\u5217\u7684max</p> <p>\u72b6\u6001\u8ba1\u7b97\uff1a\u662f\u4ee5a[i] b[j]\u662f\u5426\u5305\u542b\u5728\u5b50\u5e8f\u5217\u5f53\u4e2d\u6765\u4f5c\u4e3a\u5212\u5206\u7684\u4f9d\u636e\uff0c\u4e00\u5171\u662f4\u79cd\u60c5\u51b5</p> <p>\u90fd\u4e0d\u5305\u542b\uff1af[i -1, j -1] \u4f46\u662f\u5b9e\u9645\u4e0a\u8fd9\u79cd\u60c5\u51b5\u4ee3\u7801\u4e2d\u4e0d\u7528\u5199\uff0c\u56e0\u4e3a\u88ab\u5305\u542b\u5728\u4e86\u4e2d\u95f4\u4e24\u79cd\u7684\u60c5\u51b5\u91cc\u4e86</p> <p>f[i -1, j]</p> <p>f[i, j -1]</p> <p>\u90fd\u5305\u542bf[i - 1, j - 1] + 1</p> <p>\u6ce8\u610f\u4ee5\u4e0a\u56db\u4e2a\u96c6\u5408\u662f\u6709\u91cd\u5408\u7684\uff0c\u4e3b\u8981\u662f\u4e2d\u95f4\u4e24\u4e2a\u96c6\u5408\u662f\u6709\u91cd\u5408\u7684\uff0c\u4f46\u662f\u6c42max\u7684\u65f6\u5019\u662f\u53ef\u4ee5\u91cd\u5408\u7684\uff0c\u4f46\u4e0d\u80fd\u6f0f</p> <p><code>f[n][m]</code>\u8868\u793a\u540c\u65f6\u5728a\u4e2d\u524dn\u4e2a\u5b57\u6bcd\u548cb\u4e2d\u524dm\u4e2a\u5b57\u6bcd\u4e2d\u51fa\u73b0\u7684\u6700\u957f\u7684\u5b50\u5e8f\u5217</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\nconst int N = 1010;\nint n, m;\nchar a[N], b[N];\nint f[N][N];\n\nint main () {\ncin &gt;&gt; n &gt;&gt; m;\nscanf(\"%s%s\", a + 1, b + 1);\nfor (int i = 1; i &lt;= n; i++) {\nfor (int j = 1; j &lt;= m; j++) {\nf[i][j] = max(f[i - 1][j], f[i][j - 1]);\nif (a[i] == b[j]) f[i][j] = max(f[i][j], f[i - 1][j - 1] + 1);\nprintf(\"%c %c %d\\n\", a[i], b[j], f[i][j]); // \u53ef\u4ee5\u901a\u8fc7\u8fd9\u79cd\u65b9\u6cd5\u6765\u770b\u8fc7\u7a0b\n}\n}\nprintf(\"%d\\n\", f[n][m]); return 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_15","title":"\u6700\u77ed\u7f16\u8f91\u8ddd\u79bb","text":"<p>\u52a8\u6001\u89c4\u5212\u65f6\u95f4\u590d\u6742\u5ea6\u4f4e\u7684\u539f\u56e0\u662f\u53ef\u4ee5\u7528\u4e00\u4e2a\u6570\u53bb\u8868\u793a\u4e00\u5806\u72b6\u6001\uff0c\u6240\u4ee5\u6bd4\u8f83\u5feb</p> <p>\u72b6\u6001\u8868\u793a\uff1a</p> <p>\u96c6\u5408\uff1a\u6240\u6709\u5c06a[1-i]\u7684\u53d8\u6210b[1-j]\u7684\u6240\u6709\u64cd\u4f5c\u65b9\u6cd5</p> <p>\u5c5e\u6027\uff1a\u64cd\u4f5c\u6b21\u6570\u6700\u5c0f\u503c</p> <p>\u72b6\u6001\u8ba1\u7b97\uff1af[i, j]</p> <p>\u5206\u7c7b\uff1a</p> <p>\u64cd\u4f5c\u4e00\uff1a\u5220\u9664a[i]</p> <p>\u628aa[i] \u5220\u6389\u624d\u80fd\u5339\u914d</p> <p><code>f[i - 1, j] + 1</code></p> <p>\u64cd\u4f5c\u4e8c\uff1a\u589e\u52a0\u4e00\u4e2a\u5b57\u7b26</p> <p><code>f[i][j - 1] + 1</code></p> <p>\u64cd\u4f5c\u4e09\uff1a\u6539\u4e00\u4e2a\u5b57\u7b26\uff08\u8fd9\u4e2a\u60c5\u51b5\u4e2d\u4e5f\u5305\u542b\u4e86\u4e0d\u6539\u5b57\u7b26\uff09</p> <p>\u5982\u679c\u662f\u6539\u4e00\u4e2a\u5b57\u7b26\uff0c\u5c31\u76f8\u5f53\u4e8e\u4e24\u4e2a\u5b57\u7b26\u4e32\u5404\u81ea\u524d\u9762\u7684\u76f8\u4e92\u5339\u914d</p> <p>f[i - 1, j - 1] + 1\uff08\u9700\u8981\u6539\u5b57\u7b26\uff09\u6216\u8005+0\uff08\u4e0d\u8bb8\u8981\u6539\u5b57\u7b26\uff09</p> <p>\u6240\u4ee5<code>f[i, j] = min(f[i - 1, j] + 1, f[i, j - 1] + 1, f[i - 1, j - 1] + 1 / 0)</code></p> <p>\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u8ba1\u7b97\uff1a\u72b6\u6001\u6570\u91cf\u662fn^2 \u6bcf\u6b21\u8ba1\u7b973\u4e2a\u6570\u5373\u53ef\uff0c\u6240\u4ee5O(n ^ 2)</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_16","title":"\u7f16\u8f91\u8ddd\u79bb","text":""},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/","title":"\u7b2c\u4e00\u8bb2 \u57fa\u7840\u7b97\u6cd5","text":"<p>\u4e00\u9053\u9898\u91cd\u590d\u4e09\u5230\u4e94\u6b21\u5c31\u80fd\u6709\u5f88\u597d\u7684\u8bb0\u5fc6\u4e86\uff0c\u8bfe\u4e0a\u4e3b\u8981\u7406\u89e3\u601d\u60f3</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#_2","title":"\u6392\u5e8f","text":""},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#_3","title":"\u5feb\u901f\u6392\u5e8f","text":"<p>\u5feb\u901f\u6392\u5e8f\u7684\u53ea\u8981\u5b9e\u73b0\u65b9\u6cd5\u662f\u540c\u4e00\u4e2a\u6570\u7ec4\u4e4b\u5185\u5927\u5c0f\u6570\u7684\u76f4\u63a5\u4e92\u76f8\u4ea4\u6362</p> <p>\u4e3b\u8981\u601d\u60f3\uff1a<code>\u5206\u6cbb</code></p> <ol> <li>\u786e\u5b9a\u5206\u754c\u70b9\uff1aq[l], q[(l+r)/ 2], q[r]</li> <li>\u8c03\u6574\u533a\u95f4\uff0c\u4f7f\u5f97\u7b2c\u4e00\u4e2a\u533a\u95f4\u91cc\u7684\u6570\u90fd\u5c0f\u4e8e\u7b49\u4e8ex\uff0c\u4f7f\u5f97\u53f3\u8fb9\u533a\u95f4\u7684\u6570\u90fd\u5927\u4e8e\u7b49\u4e8ex</li> <li>\u9012\u5f52\uff1a\u9012\u5f52\u5904\u7406\u5de6\u53f3\u4e24\u6bb5</li> </ol> <p>\u4f18\u7f8e\u7684\u505a\u6cd5\uff1a\u4e0d\u9700\u8981\u5f00\u8f9f\u989d\u5916\u7a7a\u95f4</p> <p>\u4f7f\u7528\u53cc\u6307\u9488\uff1aswap\u4e24\u8fb9\u540c\u65f6\u5411\u4e2d\u95f4\u8bfb\u53d6\u7684\u90a3\u4e2a\u4e0d\u7b26\u5408\u7684\u6570\u5b57</p> <p>\u60f3\u6cd5\uff1a\u4efb\u610f\u65f6\u523b\uff0ci\u6307\u9488\u5de6\u8fb9\u7684\u503c\u90fd\u662f<code>\u5c0f\u4e8e</code>i\u7684\uff08\u5fc5\u987b\u662f\u5c0f\u4e8e\uff09\uff0cj\u6307\u9488\u540e\u8fb9\u7684\u503c\u90fd\u662f<code>\u5927\u4e8e</code>j\u7684\uff1b\u5206\u522b\u79fb\u52a8\uff0c\u7b49\u5230\u4ed6\u4eec\u4e24\u4e2a\u4e92\u76f8\u8d8a\u8fc7\uff0c\u5c31\u80fd\u4f7f\u6574\u4e2a\u6570\u7ec4\u6392\u5217\u5b8c\u6574</p> <p>\u51e1\u662f\u8981\u5904\u7406\u8fb9\u754c\u95ee\u9898\u7684\u7b97\u6cd5\uff0c\u6700\u597d\u90fd\u80cc\u8fc7\u4e00\u4e2a\u6a21\u677f\u5373\u53ef\uff0c\u8fd9\u6837\u53ef\u4ee5\u4fdd\u8bc1\u6ca1\u6709\u95ee\u9898</p> <p>\u8003\u8bd5\u7684\u65f6\u5019\u6ca1\u6709\u5145\u8db3\u7684\u65f6\u95f4\u53bb\u8003\u8651\u8fb9\u754c\u95ee\u9898\u7684 </p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#785","title":"785. \u5feb\u901f\u6392\u5e8f\u4ee3\u7801\u6a21\u677f","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nconst int N = 1e6 + 10;\nint n;\nint q[N];\n\nvoid quick_sort(int q[], int l, int r) {\nif (l &gt;= r) return;\nint x = q[l + r &gt;&gt; 1], i = l - 1, j = r + 1;\nwhile (i &lt; j) {\ndo i++; while (q[i] &lt; x);\ndo j--; while (q[j] &gt; x);\nif (i &lt; j) swap(q[i], q[j]);\n}\nquick_sort(q, l, j);\nquick_sort(q, j + 1, r); } int main () {\nscanf(\"%d\", &amp;n);\nfor (int i = 0; i &lt; n; i ++) scanf(\"%d\", &amp;q[i]);\nquick_sort(q, 0, n - 1);\nfor (int i = 0; i &lt; n; i ++) printf(\"%d \", q[i]);\nreturn 0;\n}\n</code></pre> <p>\u9762\u8bd5\u7684\u65f6\u5019\u4f1a\u624b\u5199\u5feb\u6392\uff0c\u5305\u62ec\u5b66\u957f\u4e5f\u63d0\u5230\u4e86\u9762\u8bd5\u7684\u65f6\u5019\u4f1a\u5199\u5feb\u901f\u6392\u5e8f</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#_4","title":"\u5feb\u901f\u9009\u62e9\u7b97\u6cd5","text":""},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#acwing-786-k","title":"AcWing 786. \u7b2ck\u4e2a\u6570","text":"<p>\u4f7f\u7528\u5feb\u901f\u9009\u62e9\u7b97\u6cd5\uff0c\u5feb\u901f\u9009\u62e9\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fOn</p> <p>\u8fb9\u754c\u6cd5\u5219\uff1a</p> <p>\u7531\u4e8e\u9664\u6cd5\u7684\u4f4d\u8fd0\u7b97\u662f\u5411\u4e0b\u53d6\u6574\uff0c\u6240\u4ee5\u5728\u9012\u5f52\u7684\u65f6\u5019\uff0c(l, j)\u5bf9\u5e94\u4e24\u79cdint x\u5199\u6cd5\u5373<code>int x = q[l + r &gt;&gt; 1]</code>\u548c<code>int x = q[l]</code></p> <p>\u800c(l, i - 1)\u53ea\u80fd\u5bf9\u5e94<code>int x = q[r]</code></p> <pre><code>// \u5feb\u901f\u9009\u62e9\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fOn\n// \u5feb\u901f\u9009\u62e9\u662f\u5728\u5feb\u901f\u6392\u5e8f\u7684\u57fa\u7840\u4e0a\u6539\u8fdb\u7684\n#include &lt;iostream&gt;\nusing namespace std;\nconst int N = 100010;\nint n, k;\nint q[N];\n\nint quick_sort(int l, int r, int k) {\nif (l == r) return q[l];\nint x = q[l], i = l - 1, j = r + 1;\nwhile (i &lt; j) {\nwhile (q[++i] &lt; x);\nwhile (q[--j] &gt; x);\nif (i &lt; j) swap(q[i], q[j]);\n}\n\nint sl = j - l + 1;\nif (k &lt;= sl) return quick_sort(l, j, k);\nreturn quick_sort(j+1, r, k - sl);\n}\n\nint main () {\ncin &gt;&gt; n &gt;&gt; k;\nfor (int i = 0; i &lt; n; i++) cin &gt;&gt; q[i];\ncout &lt;&lt; quick_sort(0, n-1, k) &lt;&lt; endl;\nreturn 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#_5","title":"\u5f52\u5e76\u6392\u5e8f","text":"<p>\u5f52\u5e76\u6392\u5e8f\u7684\u4e3b\u8981\u5b9e\u73b0\u65b9\u6cd5\u662f\u5c06\u4e24\u4e2a\u6570\u7ec4\u4e2d\u7684\u6570\u6309\u5927\u5c0f\u4f9d\u6b21\u653e\u5230\u7b2c\u4e09\u4e2a\u6570\u7ec4\u5f53\u4e2d\u53bb\uff0c\u5408\u5e76\u94fe\u8868\u4e5f\u662f\u8fd9\u4e2a\u601d\u60f3</p> <p>\u5f52\u5e76\u6392\u5e8f\u7684\u7b97\u6cd5\u662f\u7a33\u5b9a\u7684\uff1a\u6307\u539f\u5e8f\u5217\u4e2d\u4e24\u4e2a\u76f8\u540c\u7684\u503c\u5728\u6392\u5e8f\u540e\u987a\u5e8f\u4e0d\u4f1a\u53d1\u751f\u53d8\u5316\uff0c\u5feb\u6392\u662f\u4e0d\u7a33\u5b9a\u7684</p> <p>\u5f52\u5e76\u6392\u5e8f\u7684\u4e3b\u8981\u601d\u60f3\u4e5f\u662f\u5206\u6cbb</p> <p>\u5feb\u6392\u662f\u4ee5\u4e00\u4e2a\u6570\u6765\u5206\u7684\uff0c\u800c\u5f52\u5e76\u662f\u6309\u7167\u6574\u4e2a\u6570\u7ec4\u7684\u6700\u4e2d\u95f4\u6765\u5206\u7684\uff08\u5f52\u5e76\u662f\u4e0b\u6807\u7684\u4e2d\u95f4\u503c\uff0c\u800c\u5feb\u6392\u662f\u6570\u7ec4\u91cc\u968f\u673a\u4e00\u4e2a\u503c\u90fd\u884c\uff09</p> <p>\u5feb\u6392\u662f\u5148\u6392\u5e8f\u518d\u9012\u5f52\uff0c\u5f52\u5e76\u662f\u5148\u9012\u5f52\uff0c\u56e0\u4e3a\u9700\u8981\u4fdd\u8bc1\u4e0a\u5c42\u5f52\u5e76\u7684\u65f6\u5019\u4e24\u4e2a\u6570\u7ec4\u5fc5\u987b\u8981\u4ece\u5c0f\u5230\u5927\u6392\u5217</p> <p>\u5feb\u6392\u548c\u5f52\u5e76\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662fn longn</p> <p>\u6bcf\u5c42\u90fd\u662fn\uff0c\u7136\u540e\u4e00\u5171log2n\u5c42</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#787","title":"787. \u5f52\u5e76\u6392\u5e8f\u4ee3\u7801\u6a21\u677f","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nconst int N = 1e6 + 10;\nint n;\nint q[N], tmp[N];\n\nvoid merge_sort(int q[], int l, int r) {\nif (l &gt;= r) return;\nint mid = (l + r) &gt;&gt; 1;\nmerge_sort(q, l, mid), merge_sort(q, mid + 1, r);\nint k = 0, i = l, j = mid + 1;\nwhile (i &lt;= mid &amp;&amp; j &lt;= r) {\nif (q[i] &lt;= q[j]) tmp[k++] = q[i++];\nelse tmp[k++] = q[j++];\n}\nwhile (i &lt;= mid) tmp[k++] = q[i++];\nwhile (j &lt;= r) tmp[k++] = q[j++];\nfor (int i = l, j = 0; i &lt;= r; i++, j++) q[i] = tmp[j];\n}\n\nint main () {\nscanf(\"%d\", &amp;n);\nfor (int i = 0; i &lt; n; i++) scanf(\"%d\", &amp;q[i]);\nmerge_sort(q, 0, n -1);\nfor (int i = 0; i &lt; n; i++) printf(\"%d \", q[i]);\n\nreturn 0;\n}\n</code></pre> <p>\u5f52\u5e76\u6392\u5e8f\u3001\u5feb\u901f\u6392\u5e8f\u548csort\u5e93\u51fd\u6570\u5dee\u4e0d\u591a\u5feb</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#788","title":"788. \u9006\u5e8f\u5bf9\u7684\u6570\u91cf","text":"<pre><code>//\u4e3b\u8981\u601d\u60f3\u662f\u53f3\u8fb9\u7684\u6570\u4e00\u65e6\u6bd4\u5de6\u8fb9\u7684\u67d0\u4e2a\u6570\u5c0f\uff0c\u90a3\u4e48\u5de6\u8fb9\u540e\u9762\u7684\u6570\u4e00\u5b9a\u4f1a\u5927\u4e8e\u53f3\u8fb9\u7684\u90a3\u4e2a\u6570\n#include &lt;iostream&gt;\nusing namespace std;\nconst int N = 1e5 + 10;\nint n;\nint q[N], temp[N];\n\nlong long merge_count (int q[], int l, int r) {\nif (l == r) return 0;\nint mid = (l + r) &gt;&gt; 1;\nlong long ans = merge_count(q, l, mid) + merge_count(q, mid + 1, r);\nint i = l, j = mid + 1, k = 0;\nwhile (i &lt;= mid &amp;&amp; j &lt;= r) {\nif (q[i] &lt;= q[j]) temp[k++] = q[i++];\nelse { ans += mid - i + 1;\ntemp[k++] = q[j++];\n}\n}\nwhile (i &lt;= mid) temp[k++] = q[i++];\nwhile (j &lt;= r) temp[k++] = q[j++];\nfor (int i = l, j = 0; i &lt;= r; i++, j++) q[i] = temp[j];\nreturn ans;\n}\n\nint main () {\ncin &gt;&gt; n;\nfor (int i = 0; i &lt; n; i++) scanf(\"%d\", &amp;q[i]);\n\ncout &lt;&lt; merge_count(q, 0, n- 1) &lt;&lt; endl;\nreturn 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#_6","title":"\u4e8c\u5206","text":""},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#_7","title":"\u6574\u6570\u4e8c\u5206","text":"<p>\u6709\u5f88\u591a\u8fb9\u754c\u95ee\u9898\uff0c\u5199\u5f97\u4e0d\u597d\u4f1a\u53d1\u751f\u6b7b\u5faa\u73af</p> <p>\u4e8c\u5206\u7684\u672c\u8d28\u5e76\u4e0d\u662f\u5355\u8c03\u6027\uff0c\u800c\u662f\u8fb9\u754c</p> <p>\u5b9a\u4e00\u4e2a\u5206\u754c\u7ebf\uff08\u65e0\u91cd\u5408\u70b9\uff09\uff0c\u4e24\u8fb9\u7684\u6027\u8d28\u4e0d\u4e00\u6837\u5373\u53ef</p> <p>\u4e8c\u5206\u53ef\u4ee5\u5bfb\u627e\u6027\u8d28\u7684\u8fb9\u754c</p> <p>\u5982\u679c\u6709\u5355\u8c03\u6027\u7684\u8bdd\uff0c\u4e00\u5b9a\u53ef\u4ee5\u4e8c\u5206\uff1b\u4f46\u662f\u53ef\u4ee5\u4e8c\u5206\u7684\u9898\u76ee\uff0c\u4e0d\u4e00\u5b9a\u9700\u8981\u5355\u8c03\u6027</p> <p>\u627e\u5230\u4e00\u4e2a\u6027\u8d28\u5c06\u533a\u95f4\u4e00\u5206\u4e3a\u4e8c\uff0c\u5de6\u534a\u8fb9\u4e0d\u7b26\u5408\uff0c\u6709\u534a\u8fb9\u7b26\u5408\uff0c\u800c\u4e8c\u5206\u53ef\u4ee5\u5bfb\u627e\u8fd9\u4e2a\u6027\u8d28\u7684\u8fb9\u754c </p> <p>\u505a\u4e8c\u5206\u95ee\u9898\uff0c\u5148\u5199\u4e00\u4e2acheck\uff0c(l = mid\u65f6\u524d\u9762mid+1\u5373\u53ef)</p> <p>\u4e8c\u5206\u6a21\u677f\u4e00\u5171\u6709\u4e24\u4e2a\uff0c\u5206\u522b\u9002\u7528\u4e8e\u4e0d\u540c\u60c5\u51b5\u3002 \u7b97\u6cd5\u601d\u8def\uff1a\u5047\u8bbe\u76ee\u6807\u503c\u5728\u95ed\u533a\u95f4[l, r]\u4e2d\uff0c \u6bcf\u6b21\u5c06\u533a\u95f4\u957f\u5ea6\u7f29\u5c0f\u4e00\u534a\uff0c\u5f53l = r\u65f6\uff0c\u6211\u4eec\u5c31\u627e\u5230\u4e86\u76ee\u6807\u503c\u3002</p> <p>\u4e8c\u5206\u95ee\u9898\u6a21\u677f\u7684\u9009\u62e9\u662f\u901a\u8fc7\u5148\u5199check\u51fd\u6570\u6765\u51b3\u5b9a\u7684</p> <p>\u5bf9\u4e8e\u662f\u5426\u8981\u52a01\u7684\u601d\u8003\u662f\u901a\u8fc7\u770br\u53ea\u6bd4l\u59271\u7684\u60c5\u51b5\u4e0b\uff0c\u662f\u5426\u4f1a\u53d1\u751f\u6b7b\u5faa\u73af</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#1","title":"\u7248\u672c1","text":"<p>\u5f53\u6211\u4eec\u5c06\u533a\u95f4[l, r]\u5212\u5206\u6210[l, mid]\u548c[mid + 1, r]\u65f6\uff0c\u5176\u66f4\u65b0\u64cd\u4f5c\u662fr = mid\u6216\u8005l = mid + 1;\uff0c\u8ba1\u7b97mid\u65f6\u4e0d\u9700\u8981\u52a01\u3002</p> <pre><code>int bsearch_1(int l, int r)\n{\nwhile (l &lt; r)\n{\nint mid = l + r &gt;&gt; 1;\nif (check(mid)) r = mid;\nelse l = mid + 1;\n}\nreturn l;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#2","title":"\u7248\u672c2","text":"<p>\u5f53\u6211\u4eec\u5c06\u533a\u95f4[l, r]\u5212\u5206\u6210[l, mid - 1]\u548c[mid, r]\u65f6\uff0c\u5176\u66f4\u65b0\u64cd\u4f5c\u662fr = mid - 1\u6216\u8005l = mid;\uff0c\u6b64\u65f6\u4e3a\u4e86\u9632\u6b62\u6b7b\u5faa\u73af\uff0c\u8ba1\u7b97mid\u65f6\u9700\u8981\u52a01\u3002</p> <pre><code>int bsearch_2(int l, int r)\n{\nwhile (l &lt; r)\n{\nint mid = l + r + 1 &gt;&gt; 1;\nif (check(mid)) l = mid;\nelse r = mid - 1;\n}\nreturn l;\n}\n</code></pre> <p>\u5373\uff1a(l = mid\u65f6\u524d\u9762mid+1\u5373\u53ef)</p> <pre><code>bool check(int x) {/* ... */} // \u68c0\u67e5x\u662f\u5426\u6ee1\u8db3\u67d0\u79cd\u6027\u8d28\n\n// \u533a\u95f4[l, r]\u88ab\u5212\u5206\u6210[l, mid]\u548c[mid + 1, r]\u65f6\u4f7f\u7528\uff1a\nint bsearch_1(int l, int r)\n{\nwhile (l &lt; r)\n{\nint mid = l + r &gt;&gt; 1;\nif (check(mid)) r = mid;    // check()\u5224\u65admid\u662f\u5426\u6ee1\u8db3\u6027\u8d28\nelse l = mid + 1; // \u8fd9\u4e2a+1\u662f\u56e0\u4e3a\u5224\u65ad\u65f6\u662f\u5355\u7eaf\u7684\u5c0f\u4e8e\uff0c\u6ca1\u53d6\u5230\u7b49\u53f7\n}\nreturn l;\n}\n// \u533a\u95f4[l, r]\u88ab\u5212\u5206\u6210[l, mid - 1]\u548c[mid, r]\u65f6\u4f7f\u7528\uff1a\nint bsearch_2(int l, int r)\n{\nwhile (l &lt; r)\n{\nint mid = l + r + 1 &gt;&gt; 1;\nif (check(mid)) l = mid;\nelse r = mid - 1;\n}\nreturn l;\n}\n</code></pre> <p>\u4e3a\u4ec0\u4e48\u8981\u8865\u4e0a+1\uff1f\uff1a</p> <ol> <li>c++\u6574\u6570\u9664\u6cd5\u662f\u4e0b\u53d6\u6574</li> <li>\u5047\u8bbel\u53ea\u6bd4r\u5c0f1\uff0c l = r - 1\uff0c\u90a3\u4e48\u770b(l+r) / 2 = l</li> <li>\u5982\u679ccheck\u6210\u529f\u90a3\u4e48l = mid = l\uff0c\u7b49\u4e8e\u6ca1\u53d8\uff0c\u4f1a\u9677\u5165\u6b7b\u5faa\u73af</li> </ol> <p>\u4e8c\u5206\u662f\u7528\u6765\u6c42\u8fb9\u754c\u7684\uff0c\u8fd9\u9053\u9898\u7684\u7279\u5f81\u662f\u5bfb\u627e\u5de6\u53f3\u4e24\u4e2a\u8fb9\u754c</p> <p>\u4e8c\u5206\u4e00\u5b9a\u4f1a\u51fa\u4e00\u4e2a\u7ed3\u679c\uff0c\u4f46\u662f\u7ed3\u679c\u5e76\u4e0d\u4e00\u5b9a\u8c01\u9898\u76ee\u8981\u6c42\u7684</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#789","title":"789. \u6570\u7684\u8303\u56f4","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nconst int N = 100010;\nint n, m;\nint q[N];\n\nint main () {\nscanf(\"%d%d\", &amp;n, &amp;m);\nfor (int i = 0; i &lt; n; i++) scanf(\"%d\", &amp;q[i]);\nwhile (m--) {\nint x;\nscanf(\"%d\", &amp;x);\nint l = 0, r = n - 1;\nwhile (l &lt; r) {\nint mid = (r + l) &gt;&gt; 1;\nif (q[mid] &gt;= x) r = mid;\nelse l = mid + 1; // \u8fd9\u4e2a+1\u662f\u56e0\u4e3a\u5224\u65ad\u65f6\u662f\u5355\u7eaf\u7684\u5c0f\u4e8e\uff0c\u6ca1\u53d6\u5230\u7b49\u53f7\n}\n// \u5faa\u73af\u5230\u6700\u540el \u4e00\u5b9a\u7b49\u4e8e r\uff0c\u800c\u5982\u679c\u6ca1\u6709\u4e8c\u5206\u51fa\u6765\uff0c\u53d6\u51fa\u7684\u503c\u4e5f\u80af\u5b9a\u4e0d\u662fx\nif (q[l] != x) cout &lt;&lt; \"-1 -1\" &lt;&lt; endl;\nelse {\ncout &lt;&lt; l &lt;&lt; ' ';\nint l = 0, r = n -1;\nwhile (l &lt; r) {\nint mid = (r + l + 1) &gt;&gt; 1;\nif (q[mid] &lt;= x) l = mid;\nelse r = mid - 1;\n}\ncout &lt;&lt; l &lt;&lt; endl;\n}\n}\nreturn 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#_8","title":"\u6d6e\u70b9\u6570\u4e8c\u5206","text":"<p>\u6d6e\u70b9\u6570\u4e8c\u5206\u56e0\u4e3a\u6ca1\u6709\u6574\u9664\u8fd9\u4e2a\u4e1c\u897f\uff0c\u6240\u4ee5\u76f4\u63a5\u5c31\u80fd\u505a</p> <p>\u5f53r - l &lt; 1e-6\u7684\u65f6\u5019\u5c31\u53ef\u4ee5r\u548cl\u662f\u4e00\u4e2a\u6570\u4e86</p> <p>\u8fd9\u4e2a\u7cbe\u5ea6\u503c\u81f3\u5c11\u8981\u6bd4\u7ed3\u679c\u7684\u6709\u6548\u4f4d\u6570\u591a2\uff0c\u6bd4\u5982\u4fdd\u75595\u4f4d\u5c0f\u6570\uff0c\u5c31\u9700\u8981r - l &lt; 1e-7</p> <pre><code>bool check(double x) {/* ... */} // \u68c0\u67e5x\u662f\u5426\u6ee1\u8db3\u67d0\u79cd\u6027\u8d28\n\ndouble bsearch_3(double l, double r)\n{\nconst double eps = 1e-6;   // eps \u8868\u793a\u7cbe\u5ea6\uff0c\u53d6\u51b3\u4e8e\u9898\u76ee\u5bf9\u7cbe\u5ea6\u7684\u8981\u6c42\nwhile (r - l &gt; eps)\n{\ndouble mid = (l + r) / 2;\nif (check(mid)) r = mid;\nelse l = mid;\n}\nreturn l;\n}\n</code></pre> <p>\u6c42\u5e73\u65b9\u6839\uff1a</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main () {\ndouble x;\ncin &gt;&gt; x;\ndouble l = 0, r = x;\nwhile (r - l &gt; 1e-8) { // \u76f4\u63a5\u5faa\u73af100\u6b21\u4e5f\u662f\u76f8\u540c\u7684\u6548\u679c\ndouble mid = (l + r) / 2;\nif (mid * mid &gt;= x) r = mid;\nelse l = mid;\n}\nprintf(\"%lf\\n\", l);\nreturn 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#790","title":"790. \u6570\u7684\u4e09\u6b21\u65b9\u6839","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main () {\ndouble n;\ncin &gt;&gt; n;\ndouble l = -10000, r = 10000;\nwhile (r - l &gt;= 1e-7) {\ndouble mid = (l + r) / 2;\nif (mid * mid * mid &gt; n) r = mid;\nelse l = mid;\n}\nprintf(\"%.6lf\\n\", l);\nreturn 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#_9","title":"\u9ad8\u7cbe\u5ea6","text":"<p>\u53ea\u6709c++\u9700\u8981\u9ad8\u7cbe\u5ea6\uff0cjava\u548cpython\u7528\u4e0d\u5230</p> <p>java\u6709\u5927\u6574\u6570\u7c7b\uff0cpython\u662f\u81ea\u5e26\u7684</p> <p>\u7b14\u8bd5\u5076\u5c14\u51fa\u73b0\u7684</p> <p>\u9ad8\u7cbe\u5ea6</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#_10","title":"\u9ad8\u7cbe\u5ea6\u52a0\u6cd5","text":"<p>\u5b58\u6570\u5b57\u65b9\u6cd5\uff1a\u7b2c0\u4f4d\u5b58\u4e2a\u4f4d</p> <p>123456789 \u5b58\u6210\u6570\u7ec4\u53d8\u6210987654321\uff0c\u56e0\u4e3a\u4f1a\u6709\u8fdb\u4f4d</p> <p>\u9ad8\u7cbe\u5ea6\u52a0\u6cd5\u8fd0\u7b97\u662f\u4e2a\u6a21\u62df\u4eba\u5de5\u52a0\u6cd5\u7684\u8fc7\u7a0b</p> <p>\u4e00\u822c\u4e60\u60ef\u7528vector\u6765\u8868\u793a\u5927\u6574\u6570\uff0c\u56e0\u4e3a\u81ea\u5e26size\u8fd9\u4e2a\u51fd\u6570\u8868\u793a\u6570\u7ec4\u7684\u957f\u5ea6</p> <p>\u4e0d\u7528\u539f\u751f\u6570\u7ec4\u7684\u539f\u56e0\u662f\u6709\u53ef\u80fd\u4f1a\u6709\u8fdb\u4f4d\uff0c\u8fdb\u4f4d\u4e4b\u540e\u7684\u6570\u7ec4\u957f\u5ea6\u5c31\u4e0d\u80fd\u786e\u5b9a\u4e86</p> <p>\u52a0\u4e0a\u5f15\u7528\u662f\u4e3a\u4e86\u63d0\u9ad8\u6548\u7387\uff0c\u5982\u679c\u4e0d\u52a0\u5f15\u7528\u7684\u8bdd\uff0c\u8fd9\u4e2a\u51fd\u6570\u5c31\u4f1a\u628a\u6574\u4e2a\u6570\u7ec4\u62f7\u8d1d\u4e00\u904d</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nvector&lt;int&gt; add(vector&lt;int&gt; &amp;A, vector&lt;int&gt; &amp;B) { //\u52a0\u4e0a\u5f15\u7528\u662f\u4e3a\u4e86\u63d0\u9ad8\u6548\u7387\uff0c\u5982\u679c\u4e0d\u52a0\u5f15\u7528\u7684\u8bdd\uff0c\u8fd9\u4e2a\u51fd\u6570\u5c31\u4f1a\u628a\u6574\u4e2a\u6570\u7ec4\u62f7\u8d1d\u4e00\u904d\nvector&lt;int&gt; C;\nint carry = 0;\nfor (int i = 0; i &lt; A.size() || i &lt; B.size(); i++) {\nif (i &lt; A.size()) carry += A[i];\nif (i &lt; B.size()) carry += B[i];\nC.push_back(carry % 10);\ncarry /= 10;\n}\nif (carry) C.push_back(1);\nreturn C;\n}\n\nint main () {\nstring a, b; // (\"123456\")\ncin &gt;&gt; a &gt;&gt; b;\nvector&lt;int&gt; A, B;\nfor (int i = a.size() - 1; i &gt;= 0; i--) A.push_back(a[i] - '0'); // \u8fd9\u91cc\u662fchar\u7c7b\u578b\u7684\u6570\u5b57\uff0c-'0'\u8ba9\u4ed6\u53d8\u6210\u771f\u6b63\u7684int\nfor (int i = b.size() - 1; i &gt;= 0; i--) B.push_back(b[i] - '0'); //\u4ece\u540e\u5411\u524d\uff0c\u53d8\u6210'123456'\nvector&lt;int&gt; C = add(A, B);\nfor (int i = C.size() - 1; i &gt;= 0; i--) printf(\"%d\", C[i]);\nreturn 0;\n}\n</code></pre> <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\nvector&lt;int&gt; add (vector&lt;int&gt; &amp;A, vector&lt;int&gt; &amp;B) {\nint carry = 0;\nvector&lt;int&gt; C;\nfor (int i = 0; i &lt; A.size() || i &lt; B.size(); i++) {\nif (i &lt; A.size()) carry += A[i];\nif (i &lt; B.size()) carry += B[i];\nC.push_back(carry % 10);\ncarry /= 10;\n}\nif (carry) C.push_back(1);\nreturn C;\n}\n\nint mian () {\nstring a, b;\ncin &gt;&gt; a &gt;&gt; b;\nvector&lt;int&gt; A, B;\nfor (int i = a.size() - 1; i &gt;= 0; i--) A.push_back(a[i] - \"0\");\nfor (int i = b.size() - 1; i &gt;= 0; i--) B.push_back(b[i] - \"0\");\nvector&lt;int&gt; C = add(A, B);\nfor (int i = 0; i &lt; C.size(); i++) printf(\"%d\", C[i]);\nreturn 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#_11","title":"\u9ad8\u7cbe\u5ea6\u51cf\u6cd5\uff08\u6709\u5f88\u591a\u7ec6\u8282\uff09","text":"<p>\u5927\u6574\u6570\u7684\u5b58\u50a8\u683c\u5f0f\u662f\u4e00\u81f4\u7684</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nbool cmp (vector&lt;int&gt; &amp;a, vector&lt;int&gt; &amp;b) {\nif (a.size() != b.size()) return a.size() &gt; b.size();\nfor (int i = a.size() - 1; i &gt;= 0; i--) {\nif (a[i] != b[i]) return a[i] &gt; b[i];\n}\nreturn true;\n}\n\nvector&lt;int&gt; sub(vector&lt;int&gt; &amp;a, vector&lt;int&gt; &amp;b) {\nvector&lt;int&gt; c;\n\nfor (int i = 0, carry = 0; i &lt; a.size(); i++) {\ncarry = a[i] - carry;\n// cout &lt;&lt; carry &lt;&lt; endl;\nif (i &lt; b.size()) carry -= b[i];\n// cout &lt;&lt; carry &lt;&lt; endl;\nc.push_back((carry + 10) % 10);\nif (carry &lt; 0) carry = 1;\nelse carry = 0;\n// cout &lt;&lt; carry &lt;&lt; endl;\n}\nwhile(c.size() &gt; 1 &amp;&amp; c.back() == 0) c.pop_back();\nreturn c;\n}\n\nint main () {\nstring num1, num2; // 12, 123\ncin &gt;&gt; num1 &gt;&gt; num2;\nvector&lt;int&gt; a, b;\nfor (int i = num1.size() - 1; i &gt;= 0; i--) a.push_back(num1[i] - '0'); // 21\nfor (int i = num2.size() - 1; i &gt;= 0; i--) b.push_back(num2[i] - '0'); // 321\n\nif (cmp(a, b)) {\nvector&lt;int&gt; c = sub(a, b);\nfor (int i = c.size() - 1; i &gt;= 0; i--) printf(\"%d\", c[i]);\n} else {\nvector&lt;int&gt; c = sub(b, a);\nprintf(\"-\");\nfor (int i = c.size() - 1; i &gt;= 0; i--) printf(\"%d\", c[i]);\n}\nreturn 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#_12","title":"\u9ad8\u7cbe\u5ea6\u4e58\u6cd5","text":"<p>\u6ce8\u610f\u8fd9\u9053\u9898\u91cc\u9762A\u5f88\u5927\uff0cB\u5f88\u5c0f</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nvector&lt;int&gt; mul(vector&lt;int&gt; &amp;a, int b) {\nvector&lt;int&gt; c;\nfor (int i = 0, carry = 0; i &lt; a.size() || carry; i++) {\nif (i &lt; a.size()) carry = a[i] * b + carry;\nc.push_back(carry % 10);\ncarry /= 10;\n}\nwhile(c.size() &gt; 1 &amp;&amp; c.back() == 0) c.pop_back();\nreturn c;\n}\n\nint main () {\nstring num1;\nint b;\ncin &gt;&gt; num1 &gt;&gt; b;\nvector&lt;int&gt; a;\nfor (int i = num1.size() - 1; i &gt;= 0; i--) a.push_back(num1[i] - '0');\nvector&lt;int&gt; c = mul(a, b);\nfor (int i = c.size() - 1; i &gt;= 0; i--) printf(\"%d\", c[i]);\nreturn 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#_13","title":"\u9ad8\u7cbe\u5ea6\u9664\u6cd5","text":"<p>reverse\u51fd\u6570\u9700\u8981# <p>\u4f59\u6570\u662f\u901a\u8fc7\u5728\u5b9a\u4e49function\u7684\u65f6\u5019\u4f20\u56de\u53bb\u7684</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\n\nvector&lt;int&gt; div(vector&lt;int&gt; &amp;A, int b, int &amp;r) { vector&lt;int&gt; C;\nr = 0;\nfor (int i = A.size() - 1; i &gt;= 0; i--) {\nr = r * 10 + A[i];\nC.push_back(r/b);\nr %= b;\n}\nreverse(C.begin(), C.end());\nwhile(C.size() &gt; 1 &amp;&amp; C.back() == 0) C.pop_back();\nreturn C;\n}\n\nint main () {\nstring a;\nint b;\ncin &gt;&gt; a &gt;&gt; b;\nvector&lt;int&gt; A;\nfor (int i = a.size() - 1; i &gt;= 0; i--) A.push_back(a[i] - '0');\nint r;\nauto C = div(A, b, r);\nfor (int i = C.size() - 1; i &gt;= 0; i --) printf(\"%d\", C[i]);\ncout &lt;&lt; endl &lt;&lt; r &lt;&lt; endl;\nreturn 0;\n}\n</code></pre> <p>A1 = 123 r = 4</p> <p>1234 = a1 * 10 + r</p> <p>\u81ea\u5df1\u7684\u65b9\u6cd5\uff1a</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\n\nvector&lt;int&gt; div(vector&lt;int&gt; &amp;a, int &amp;b, int &amp;r) {\nvector&lt;int&gt; c;\nr = 0;\nfor (int i = 0; i &lt; a.size(); i++) {\nr = r * 10 + a[i];\n// cout &lt;&lt; r &lt;&lt; endl;\nif (r &gt;= b) c.push_back(r / b);\nelse c.push_back(0);\n// cout &lt;&lt; r &lt;&lt; endl;\nr %= b;\n}\nwhile(c.size() &gt; 1 &amp;&amp; c.front() == 0) c.erase(c.begin());\nreturn c;\n}\n\nint main () {\nstring a; // 123\nint b, r; // b = 11 \ncin &gt;&gt; a &gt;&gt; b;\nvector&lt;int&gt; A;\nfor (int i = 0; i &lt; a.size(); i++) A.push_back(a[i] - '0'); // 123\nvector&lt;int&gt; c = div(A, b, r);\nfor (int i = 0; i &lt; c.size(); i++) printf(\"%d\", c[i]);\ncout &lt;&lt; endl &lt;&lt; r &lt;&lt; endl;\nreturn 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#_14","title":"\u524d\u7f00\u548c\u4e0e\u5dee\u5206","text":"<p>\u524d\u7f00\u548c\u5c31\u662f\u6570\u5217\u7684\u524dn\u9879\u4e4b\u548c</p> <p>\u524d\u7f00\u548c\uff0c\u6709\u4e2a\u957f\u5ea6\u4e3an\u7684\u6570\u7ec4</p> <p>\u524d\u7f00\u548c\u6570\u7ec4si\u5b9a\u4e49\u6210\u539f\u6570\u7ec4\u91cc\u7684\u524di\u4e2a\u6570\u7ec4\u800c\u4e14\u6570\u7ec4\u662f\u4ece1\u5f00\u59cb\u7684</p> <p>\u4e0b\u6807\u4ece1\u5f00\u59cb\u662f\u4e3a\u4e86\u80fd\u5b9a\u4e49s0</p> <p>[1, 10] s10 - s0</p> <p>s0\u5b9a\u4e49\u62100</p> <p>\u6574\u4e2a\u65f6\u95f4\u590d\u6742\u5ea6\u662fO1</p> <ol> <li>\u5982\u4f55\u6c42si</li> </ol> <pre><code>for (int i = 1; i &lt; n; i++)\ns[i] = s[i - 1] + ai\n</code></pre> <ol> <li>\u524d\u7f00\u548csi\u7684\u4f5c\u7528</li> </ol> <p>\u80fd\u5feb\u901f\u6c42\u51fa\u539f\u6570\u7ec4\u4e2d\u4e00\u6bb5\u6570\u7684\u548c</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#795","title":"795. \u524d\u7f00\u548c","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n#include &lt;vector&gt;\nusing namespace std;\nconst int N = 100010;\nint n, m; // \u53ef\u4ee5\u5c06s0\u76f4\u63a5\u521d\u59cb\u5316\u4e3a1\nint a[N], s[N];\n\n\nint main () {\nscanf(\"%d%d\", &amp;n, &amp;m);\nfor (int i = 1; i &lt;= n; i++) scanf(\"%d\", &amp;a[i]);\nfor (int i = 1; i &lt;= n; i++) s[i] = s[i - 1] + a[i];\nwhile (m -- ) {\nint l, r;\nscanf(\"%d%d\", &amp;l, &amp;r);\nprintf(\"%d\\n\", s[r] - s[l - 1]);\n}\nreturn 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#_15","title":"\u4e8c\u7ef4\u524d\u7f00\u548c","text":"<p>\u5feb\u901f\u6c42\u67d0\u4e2a\u5b50\u77e9\u9635\u7684\u548c</p> <p>sij \u8868\u793aaij\u53ca\u5176\u5de6\u4e0a\u89d2\u6240\u6709\u5143\u7d20\u7684\u548c</p> <p>\u6c42\u548c\uff1a(X1, y1) (x2, y2)    sx2y2 - sx2y1-1 - Sx1-1y2 + sx1-1y1-1</p> <p>x\u662f\u884c\uff0cy\u662f\u5217</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#acwing-796","title":"AcWing 796. \u5b50\u77e9\u9635\u7684\u548c","text":"<pre><code>for (int i : 1-n) for(int j :1-n)\nsij = si-1j + sij-1 - si-1j-1+aij\n</code></pre> <pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nconst int N= 1010;\nint n, m, q;\nint a[N][N], s[N][N];\nint main () {\nscanf(\"%d%d%d\", &amp;n, &amp;m, &amp;q);\nfor (int i = 1; i &lt;= n; i++) {\nfor (int j = 1; j &lt;= m; j++) {\nscanf(\"%d\", &amp;a[i][j]);\n}\n}\n\nfor (int i = 1; i &lt;= n; i++) {\nfor (int j = 1; j &lt;= m; j ++) {\ns[i][j] = s[i - 1][j] + s[i][j - 1] - s[i - 1][j - 1] + a[i][j];\n}\n}\nwhile (q--) {\nint x1, x2, y1, y2;\nscanf(\"%d%d%d%d\", &amp;x1, &amp;y1, &amp;x2, &amp;y2);\nprintf(\"%d\\n\", s[x2][y2]- s[x1-1][y2]- s[x2][y1-1] + s[x1-1][y1-1]);\n}\nreturn 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#_16","title":"\u5dee\u5206","text":"<p>\u5dee\u5206\u662f\u524d\u7f00\u548c\u7684\u9006\u8fd0\u7b97</p> <p>\u6784\u9020b\u6570\u7ec4b1\\b2\uff0c\u4f7f\u5f97ai = b1 + ... bi\uff0ca\u662fb\u7684\u524d\u7f00\u548c</p> <p>\u65b9\u6cd5\uff1ab1=a1</p> <p>B2 = a2 - a1</p> <p>b3 = a3 - a2</p> <p>b\u662fa\u7684\u5dee\u5206\uff0ca\u662fb\u7684\u524d\u7f00\u548c</p> <p>\u53ef\u4ee5\u5047\u5b9aan\u5168\u662f0\uff0c\u7136\u540e\u8fdb\u884c\u63d2\u5165</p> <p>\u5982\u679c\u6570\u7ec4A\u662fB\u7684\u524d\u7f00\u548c\uff0c\u5219B\u662fA\u7684\u5dee\u5206\u3002 \u6211\u4eec\u6784\u9020\u4e00\u4e2a\u6570\u7ec4\u7684\u5dee\u5206\u77e9\u9635\uff0c\u662f\u4e3a\u4e86\u9488\u5bf9\u9891\u7e41\u7684\u5bf9\u6570\u7ec4\u4e2d\u67d0\u4e2a\u533a\u95f4\u8fdb\u884c\u540c\u4e00\u64cd\u4f5c\u3002\u4f8b\u5982\u5c06\u5e8f\u5217\u4e2d[l, r]\u4e4b\u95f4\u7684\u6bcf\u4e2a\u6570\u52a0\u4e0ac\u8fd9\u4e00\u64cd\u4f5c\uff0c\u53ef\u80fd\u6267\u884cn\u6b21\uff0c\u6bcf\u6b21\u7684c\u4e0d\u540c\uff0c\u5982\u679c\u5bf9\u539f\u6570\u7ec4\u8fdb\u884c\u64cd\u4f5c\uff0c\u6bcf\u6b21\u64cd\u4f5c\u90fd\u4f1a\u82b1\u8d39O(n)\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002\u5982\u679c\u4f7f\u7528\u8be5\u6570\u7ec4\u7684\u5dee\u5206\u6570\u7ec4\u8fdb\u884c\u64cd\u4f5c\uff0c\u6bcf\u6b21\u64cd\u4f5c\u4e3aO(1)\u3002\u7136\u540e\u6c42\u5dee\u5206\u6570\u7ec4\u7684\u524d\u7f00\u548c\u5373\u4e3a\u6240\u6c42\u7ed3\u679c\u3002</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#acwing-797","title":"AcWing 797. \u5dee\u5206","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nconst int N = 100010;\nint n, m;\nint a[N], b[N];\nvoid insert(int l, int r, int c) {\nb[l] += c;\nb[r + 1] -= c;\n}\n\nint main () {\nscanf(\"%d%d\", &amp;n, &amp;m);\nfor (int i = 1; i &lt;= n; i++) scanf(\"%d\", &amp;a[i]);\nfor (int i = 1; i &lt;= n; i++) insert(i, i, a[i]);\nwhile (m--) {\nint l, r, c;\nscanf(\"%d%d%d\", &amp;l, &amp;r, &amp;c);\ninsert(l, r, c);\n}\nfor (int i = 1; i &lt;= n; i++) b[i] += b[i-1];\nfor (int i = 1; i &lt;= n; i++) printf(\"%d \", b[i]);\n\nreturn 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#_17","title":"\u4e8c\u7ef4\u5dee\u5206","text":"<p>x\u662f\u884c\uff0cy\u662f\u5217</p> <p>\u7ed9\u5b9a\u4e00\u4e2aa\u6570\u7ec4\uff0c\u73b0\u5728\u5047\u60f3\u4e00\u4e2ab\u6570\u7ec4\u662fa\u6570\u7ec4\u7684\u524d\u7f00\u548c</p> <p>\u7ed9\u4e00\u4e2a\u77e9\u9635\u52a0c</p> <p>Bx1y1 += c</p> <p>bx2+1y1 -=c</p> <p>bx1y2+1 -= c</p> <p>bx2+1y2+1 += c</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#acwing-798","title":"AcWing 798. \u5dee\u5206\u77e9\u9635","text":"<p>\u5bf9\u4e8e\u5dee\u5206\u662f\u4e0d\u9700\u8981\u8003\u8651\u5982\u4f55\u6784\u9020\u5dee\u5206\u6570\u7ec4\u7684</p> <p>\u53ea\u8981\u5c06\u6bcf\u4e00\u4e2aa[i]\u770b\u6210\u662f\u5bf9(i, i)\u4f4d\u7f6e\u7684a[i]\u6570\u503c\u7684\u63d2\u5165\u5373\u53ef</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\nconst int N = 1010;\nint n, m, q;\nint a[N][N], b[N][N];\n\nvoid insert (int x1, int y1, int x2, int y2, int c) {\nb[x1][y1] += c;\nb[x2 + 1][y1] -= c;\nb[x1][y2 + 1] -= c;\nb[x2 + 1][y2 + 1] += c;\n}\n\nint main () {\nscanf(\"%d%d%d\", &amp;n, &amp;m, &amp;q);\nfor (int i = 1; i &lt;= n; i++)\nfor (int j = 1; j &lt;= m; j++)\nscanf(\"%d\", &amp;a[i][j]);\nfor (int i = 1; i &lt;= n; i++)\nfor (int j = 1; j &lt;= m; j++)\ninsert(i, j, i, j, a[i][j]);\n\nwhile(q--) {\nint x1, y1, x2, y2, c;\ncin &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2 &gt;&gt; c;\ninsert(x1, y1, x2, y2, c);\n}\nfor (int i = 1; i &lt;= n; i++ ) {\nfor (int j = 1; j &lt;= m; j++) {\nb[i][j] += b[i - 1][j] + b[i][j - 1] - b[i - 1][j - 1];\n}\n}\nfor (int i = 1; i &lt;= n; i++) {\nfor (int j = 1; j &lt;= m; j++) printf(\"%d \", b[i][j]);\nputs(\"\");\n}\nreturn 0;\n}\n</code></pre> <pre><code>void insert (int x1, int y1, int x2, int y2, int c) {\n    b[x1][y1] += c;\n    b[x1][y2 + 1] -= c;\n    b[x2 + 1][y1] -= c;\n    b[x2 + 1][y2 + 1] += c;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#_18","title":"\u53cc\u6307\u9488\u7b97\u6cd5","text":"<p>\u5f52\u5e76\u6392\u5e8f\u4e2d\u5408\u5e76\u5e8f\u5217\u7528\u7684\u5c31\u662f\u53cc\u6307\u9488\u7b97\u6cd5</p> <p>\u7b2c\u4e00\u7c7b\uff1a\u4e24\u4e2a\u6307\u9488\u6307\u5411\u4e24\u4e2a\u5e8f\u5217</p> <p>\u7b2c\u4e8c\u5927\u7c7b\uff1a\u4e24\u4e2a\u6307\u9488\u6307\u5411\u4e00\u4e2a\u5e8f\u5217\uff0c\u6bd4\u5982\u5feb\u6392\u7684\u8fc7\u7a0b</p> <p>\u4ee3\u7801\u7ed3\u6784\u4e00\u822c\u662f:</p> <pre><code>for (int i = 0, j = 0; i &lt; n; i++) {\nwhile(j &lt; i &amp;&amp; check(i,j)) j++;\n}\n</code></pre> <p>\u6700\u6838\u5fc3\u7684\u6027\u8d28\u662f\u53ef\u4ee5\u4f18\u5316\u66b4\u529b\u505a\u6cd5\uff08\u4e24\u4e2a\u5d4c\u5957\u5faa\u73afO(n ^ 2)\uff09\u7684\u590d\u6742\u5ea6</p> <p>\u7528\u4e24\u4e2a\u6307\u9488\u626b\u63cf\u4e00\u4e2a\u5e8f\u5217\u7684\u590d\u6742\u5ea6\u662fO(n)</p> <p>KMP\u4e5f\u662f\u53cc\u6307\u9488\u7b97\u6cd5</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#_19","title":"\u4f8b\u9898\uff1a\u8f93\u51fa\u5b57\u7b26\u4e32\u4e2d\u6bcf\u4e2a\u7528\u7a7a\u683c\u9694\u5f00\u7684\u5355\u8bcd","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;string.h&gt;\nusing namespace std;\nconst int N = 10000;\nint main () {\nchar str[N];\nfgets(str, N, stdin);\n//    printf(\"%s\", str);\nint n = strlen(str);\nfor (int i = 0; i &lt; n; i++) {\nint j = i;\nwhile (j &lt; n &amp;&amp; str[j] != ' ') j++;\nfor (int k = i; k &lt; j; k++) printf(\"%c\", str[k]);\ncout &lt;&lt; endl;\ni = j; // \u56e0\u4e3a\u6bcf\u4e2a\u5faa\u73af\u7ed3\u675f\u4e4b\u540e\u90fd\u6709i++\uff0c\u6240\u4ee5\u53ea\u8981i = j\u5373\u53ef\n}\nreturn 0;\n}\n</code></pre> <p>\u53ea\u8981\u80fd\u5c06\u66b4\u529b\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u4e3an^2\u7684\u60c5\u51b5\u964d\u5230n\uff0c\u5c31\u53ef\u4ee5\u88ab\u770b\u6210\u53cc\u6307\u9488\u7b97\u6cd5</p> <p>### \u6700\u957f\u8fde\u7eed\u4e0d\u91cd</p> <p>\u53cc\u6307\u9488\u7684\u7b97\u6cd5\u53ef\u4ee5\u4ece\u66b4\u529b\u7684\u601d\u8def\u5f00\u59cb\u601d\u8003</p> <p>j\u7684\u542b\u4e49\uff1a\u5f80\u5de6\u6700\u8fdc\u80fd\u5230\u4ec0\u4e48\u5730\u65b9</p> <p>\u53cc\u6307\u9488\u7b97\u6cd5\uff1aO(n)</p> <pre><code>for (int i = 0, j = 0; i &lt; n; i ++) {\nwhile (j &lt;= i &amp;&amp; check(i, j)) j++;\nres = max(res, i - j + 1);\n}\n</code></pre> <p>\u8fd9\u9053\u9898\u7684check\u5f00\u4e2a\u6570\u7ec4\u52a8\u6001\u8bb0\u5f55\u5f53\u524d\u6570\u7ec4\u4e2d\u6bcf\u4e2a\u6570\u51fa\u73b0\u4e86\u591a\u5c11\u6b21</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\nconst int N = 100010;\nint a[N], s[N];\nint main () {\nint n;\nscanf(\"%d\", &amp;n);\nfor (int i = 0; i &lt; n; i++) cin &gt;&gt; a[i];\nint res = 0;\nfor (int i = 0, j = 0; i &lt; n; i++) {\ns[a[i]]++; // \u6ce8\u610f\u8fd9\u91cc\u65b0\u7684\u6570\u7ec4\u6765\u8bb0\u5f55\u91cd\u590d\u7684\u4e2a\u6570\uff0c\u975e\u5e38\u7cbe\u5999\nwhile(s[a[i]] &gt; 1) {\ns[a[j]]--;\nj++;\n}\nres = max(res, i - j + 1);\n}\ncout &lt;&lt; res;\nreturn 0;\n}\n</code></pre> <p>\u53e6\u5916\u5f00\u4e00\u4e2a\u6570\u7ec4\u6765\u8bb0\u5f55\u4e00\u6bb5\u6570\u4e2d\u91cd\u590d\u7684\u4e2a\u6570\uff0c\u975e\u5e38\u7cbe\u9ad3</p> <p>\u53cc\u6307\u9488\u7684\u601d\u8def\u90fd\u662f\u5148\u66b4\u529b\u505a\uff0c\u7136\u540e\u518d\u628a\u65f6\u95f4\u590d\u6742\u5ea6\u964d\u4e0b\u6765</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#800","title":"800.\u6570\u7ec4\u5143\u7d20\u7684\u76ee\u6807\u548c","text":"<pre><code>// \u548c\u7eaf\u66b4\u529b\u7b97\u6cd5\u7684\u533a\u522b\u5728\u4e8e\uff0c\u5176\u4e2d\u4e00\u4e2a\u6307\u9488\u4e0d\u4f1a\u56de\u9000\n#include &lt;iostream&gt;\nusing namespace std;\nconst int N = 100010;\nint a[N], b[N];\n\nint main () {\nint n, m, x;\nscanf(\"%d%d%d\", &amp;n, &amp;m, &amp;x);\nfor (int i = 0; i &lt; n; i++) scanf(\"%d\", &amp;a[i]);\nfor (int i = 0; i &lt; m; i++) scanf(\"%d\", &amp;b[i]);\nfor (int i = 0, j = m - 1; i &lt; n; i++) {\nwhile(a[i] + b[j] &gt; x) j--;\nif (a[i] + b[j] == x) printf(\"%d %d\\n\", i, j);\n}\nreturn 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#2816","title":"2816.\u5224\u65ad\u5b50\u5e8f\u5217","text":"<p>\u6211\u81ea\u5df1\u7684\u505a\u6cd5\uff1a\u5f88\u590d\u6742\u5f88\u7e41\u6742</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\nconst int N = 100010;\nint a[N], b[N];\n\nint main () {\nint n, m;\ncin &gt;&gt; n &gt;&gt; m;\nfor (int i = 0; i &lt; n; i++) cin &gt;&gt; a[i];\nfor (int i = 0; i &lt; m; i++) cin &gt;&gt; b[i];\nfor (int i = 0, j = 0; i &lt; n &amp;&amp; j &lt; m; i++, j++) {\n// cout &lt;&lt; \"dd1\" &lt;&lt; endl;\nwhile(b[j] != a[i] &amp;&amp; j &lt; m - 1) {\nj ++;\n// cout &lt;&lt; \"oops\";\n// cout &lt;&lt; \"dd2\" &lt;&lt; endl;\n}\n// cout &lt;&lt; \"dd3\" &lt;&lt; endl;\nif (i == n - 1) {\nif (a[i] == b[j]) {\ncout &lt;&lt; \"Yes\";\nbreak;\n} else {\ncout &lt;&lt;  \"No\";\nbreak;\n}\n} if (j == m - 1) {\nif (i == n - 1) {\ncout &lt;&lt; \"Yes\";\nbreak;\n} else {\ncout &lt;&lt; \"No\";\nbreak;\n}\n} // cout &lt;&lt; i &lt;&lt; j &lt;&lt; endl;\n// cout &lt;&lt; a[i] &lt;&lt; b[j]&lt;&lt; endl;\n}\n\nreturn 0;\n}\n</code></pre> <p>\u7b80\u6d01\u505a\u6cd5</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\nconst int N = 100010;\nint a[N], b[N];\nint main () {\nint n, m;\ncin &gt;&gt; n &gt;&gt;m;\nfor (int i = 0; i &lt; n; i++) cin &gt;&gt; a[i];\nfor (int i = 0; i &lt; m; i++) cin &gt;&gt; b[i];\nint i = 0;\nfor (int j = 0; j &lt; m; j ++) {\nif (i &lt; n &amp;&amp; a[i] == b[j]) i++;\n}\nif (i == n) {\nputs(\"Yes\");\n} else {\nputs(\"No\");\n}\nreturn 0;\n}\n</code></pre> <p>\u7b80\u4ecb\u505a\u6cd52</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\nconst int N = 100010;\nint a[N], b[N];\n\nint main () {\nint n, m;\ncin &gt;&gt; n &gt;&gt; m;\nfor (int i = 0; i &lt; n; i++) cin &gt;&gt; a[i];\nfor (int i = 0; i &lt; m; i++) cin &gt;&gt; b[i];\nint i = 0, j = 0;\nwhile(i &lt; n &amp;&amp; j &lt; m) {\nif (a[i] == b[j]) i++;\nj++;\n}\nif (i == n) puts(\"Yes\");\nelse puts(\"No\");\n\nreturn 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#_20","title":"\u4f4d\u8fd0\u7b97","text":"<p>\u6700\u5e38\u7528\u7684\u4f4d\u8fd0\u7b97\u7684\u64cd\u4f5c\uff1a</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#nk0-15-1111","title":"n\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d\u4ece\u53f3\u5f80\u5de6\u7b2ck\u4f4d\uff08\u4ece0\u4f4d\u5f00\u59cb\u7b97\uff09\u662f\u51e0 15 (1111)","text":"<p>\u5148\u628a\u7b2ck\u4f4d\u6570\u5b57\u79fb\u5230\u6700\u540e\u4e00\u4f4d\uff0c\u4f7f\u7528\u4f4d\u79fb\u8fd0\u7b97\uff0cn &gt;&gt; k</p> <p>\u770b\u4e0b\u4e2a\u4f4d\u662f\u51e0\uff0cx &amp; 1</p> <p>\u548c\u5728\u4e00\u8d77\uff0c\u5373<code>n &gt;&gt; k &amp; 1</code></p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#101010","title":"\u4f8b\uff1a\u5c0610\u7684\u4e8c\u8fdb\u5236\u6570\u5b57\u8f93\u51fa\u51fa\u6765\uff081010\uff09\u4f7f\u7528\u4f4d\u8fd0\u7b97","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main () {\nint x = 10;\nfor (int k = 3; k &gt;= 0; k--) cout &lt;&lt; (x &gt;&gt; k &amp; 1) &lt;&lt; \" \";\nreturn 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#low-bit","title":"low bit\u64cd\u4f5c","text":"<p>\u4ed6\u662f\u6811\u72b6\u6570\u7ec4\u7684\u57fa\u672c\u64cd\u4f5c</p> <p>Lowbit(x)\u4f5c\u7528\u662f\u8fd4\u56dex\u7684\u6700\u540e\u4e00\u4f4d1</p> <p>x = 1010 lowbot(x) \u8fd4\u56de10</p> <p>x = 101000 \u8fd4\u56de1000</p> <p>\u5b9e\u73b0\u7684\u65b9\u6cd5\u662fx &amp; -x = x &amp; (~x + 1)</p> <p>\u4e00\u4e2a\u6574\u6570\u7684\u8d1f\u6570\u5c31\u662f\u539f\u6570\u7684\u8865\u7801\uff0c\u800c\u8865\u7801\u662f\u53d6\u53cd+1</p> <p>\u8d1f\u7684x\u5c31\u662fx\u53d6\u53cd+1</p> <p>-x = ~x + 1</p> <p>lowbit\u7684\u4f5c\u7528\u662f\u5f97\u5230x\u7684\u4e8c\u8fdb\u5236\u4e2d\u6709\u591a\u5c11\u4e2a1</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#1_1","title":"\u4e8c\u8fdb\u5236\u4e2d1\u7684\u4e2a\u6570","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nconst int N = 100010;\nint a[N];\n\nint lowbit(int x) {\nreturn x &amp; -x;\n} int main () {\nint n;\ncin &gt;&gt; n;\nfor (int i = 0; i &lt; n; i++) {\nint x;\nint res = 0;\ncin &gt;&gt; x;\nwhile (x) x -= lowbit(x), res++; cout &lt;&lt; res &lt;&lt; \" \";\n}\n\n\nreturn 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#_21","title":"\u539f\u7801\u3001\u53cd\u7801\u3001\u8865\u7801","text":"<p>\u539f\u7801x = 1010</p> <p>\u53cd\u7801x = 0101</p> <p>\u8865\u7801 0110\u8865\u7801\u7b49\u4e8e\u53cd\u7801+ 1</p> <p>\u8ba1\u7b97\u673a\u5e95\u5c42\u5b9e\u73b0\u4e2d\u662f\u6ca1\u6709\u51cf\u6cd5\u7684</p> <pre><code>int n = 10;\nunsigned int x = -n;\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#_22","title":"\u79bb\u6563\u5316","text":"<p>\u7279\u6307\u6574\u6570\u7684\u79bb\u6563\u5316</p> <p>\u6709\u5e8f\u7684\u3001\u4fdd\u5e8f\u7684\u79bb\u6563\u5316</p> <p>a[]: 1, 3, 100, 2000, 5000000</p> <p>\u53ef\u4ee5\u5c06a[]\u6620\u5c04\u52300, 1, 2, 3, 4</p> <ol> <li>a[]\u4e2d\u53ef\u80fd\u91cd\u590d\u7684\u5143\u7d20\uff0c\u53ef\u4ee5\u53bb\u91cd</li> <li>\u5982\u4f55\u7b97\u51fax\u79bb\u6563\u5316\u540e\u7684\u503c\uff0c\u4e8c\u5206</li> </ol> <p>Unique() \u4f5c\u7528\u662f\u5c06\u4e0d\u91cd\u590d\u7684\u6570\u5b57\u653e\u5230\u524d\u9762\uff0c\u5c06\u91cd\u590d\u7684\u6570\u5b57\u653e\u5728\u540e\u9762\uff0c\u7136\u540e\u8fd4\u56de\u7b2c\u4e00\u4e2a\u91cd\u590d\u6570\u5b57\u7684\u4f4d\u7f6e</p> <pre><code>vector&lt;int&gt; alls; // \u5b58\u50a8\u6240\u6709\u5f85\u79bb\u6563\u5316\u7684\u503c\nsort(alls.begin(), alls.end()); // \u5c06\u6240\u6709\u503c\u6392\u5e8f\nalls.erase(unique(alls.begin(), alls.end()), alls.end()); // \u53bb\u6389\u91cd\u590d\u5143\u7d20\n</code></pre> <pre><code>int find(int x) { // \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ex\u7684\u4f4d\u7f6e\nint l = 0, r = alls.size() - 1;\nwhile(l &lt; r) {\nint mid = l + r &gt;&gt; 1;\nif (alls[mid] &gt;= x) r = mid;\nelse l = mid + 1;\n}\nreturn r + 1; //\u52a0\u4e0d\u52a01\u90fd\u884c\uff0c+1\u7684\u8bdd\u5c31\u662f\u6620\u5c04\u52301\uff0c 2\uff0c 3\n}\n</code></pre> <p>\u6574\u4e2a\u7684\u503c\u57df\u8de8\u5ea6\u5f88\u5927\uff0c\u4f46\u662f\u503c\u7684\u5b58\u5728\u5f88\u7a00\u758f</p> <p>\u76f8\u5f53\u4e8e\u538b\u7f29\u7a00\u758f\u77e9\u9635</p> <p>\u6620\u5c04\u5230\u4ece1\u5f00\u59cb\u7684\u81ea\u7136\u6570</p> <p>\u7279\u6307\u6574\u6570\u7684\u79bb\u6563\u5316</p> <p>\u503c\u57df\u7684\u8303\u56f4\u6bd4\u8f83\u5927\uff0c\u4f46\u662f\u4e2a\u6570\u6bd4\u8f83\u5c11</p> <p>\u6bd4\u5982\u503c\u57df0-10<sup>9,\u4f46\u662f\u4e2a\u6570\u53ea\u670910</sup>5</p> <p>\u79bb\u6563\u5316\u7684\u8fc7\u7a0b\uff1a</p> <p>a[]: 1, 3, 100, 1000, 50000000</p> <p>i: 0  1 2 3 4</p> <p>\u5173\u952e\u70b9\uff1a</p> <ol> <li> <p>a\u4e2d\u53ef\u80fd\u6709\u91cd\u590d\u5143\u7d20\uff0c\u9700\u8981\u53bb\u91cd</p> </li> <li> <p>\u5982\u4f55\u7b97\u51faa\u4e2d\u6bcf\u4e00\u4e2a\u503c\u79bb\u6563\u540e\u7684\u7ed3\u679c\uff0ca\u662f\u6709\u5e8f\u7684\u6240\u4ee5\u4f7f\u7528\u4e8c\u5206\u6765\u627e</p> </li> </ol> <p>unique\u5c06\u6570\u7ec4\u4e2d\u6240\u6709\u7684\u5143\u7d20\u53bb\u91cd\uff0c\u7136\u540e\u8fd4\u56de\u91cd\u590d\u7b2c\u4e00\u4f4d\u7684\u4e0b\u6807</p> <pre><code>vector&lt;int&gt; alls; // \u5b58\u50a8\u6240\u6709\u5f85\u79bb\u6563\u5316\u7684\u503c\nsort(alls.begin(), alls.end()); // \u5c06\u6240\u6709\u503c\u6392\u5e8f\nalls.erase(unique(alls.begin(), alls.end()), alls.end());   // \u53bb\u6389\u91cd\u590d\u5143\u7d20\n\n// \u4e8c\u5206\u6c42\u51fax\u5bf9\u5e94\u7684\u79bb\u6563\u5316\u7684\u503c\nint find(int x) // \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ex\u7684\u4f4d\u7f6e\n{\nint l = 0, r = alls.size() - 1;\nwhile (l &lt; r)\n{\nint mid = l + r &gt;&gt; 1;\nif (alls[mid] &gt;= x) r = mid;\nelse l = mid + 1; // +1\u4ece1\u5f00\u59cb\u6620\u5c04\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u52a0\uff0c\u5c31\u662f\u4ece0\u5f00\u59cb\u6620\u5c04\n}\nreturn r + 1; // \u6620\u5c04\u52301, 2, ...n\n</code></pre> <p>\u5c31\u662f\u5c06\u6240\u6709\u7684\u6570\u6620\u5c04\u6210\u4e0b\u6807</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#802","title":"802. \u533a\u95f4\u548c","text":"<p>\u503c\u57df\u8de8\u5ea6\u5f88\u5927\uff0c\u4f46\u662f\u5f88\u7a00\u758f</p> <p>\u628a\u7528\u5230\u8fc7\u7684\u4e0b\u6807\u62ff\u8fc7\u6765\u8fdb\u884c\u6392\u5e8f</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt; // C++\u4e2d\u7528vector\u6765\u505a\u79bb\u6563\u5316\n#include &lt;algorithm&gt;\n\nusing namespace std;\n\ntypedef pair&lt;int, int&gt; PII;\n\nconst int N = 300010;\n\nint n, m;\nint a[N], s[N];\n\nvector&lt;int&gt; alls;\nvector&lt;PII&gt; add, query;\n\nint find (int x) {\nint l = 0, r = alls.size() - 1;\nwhile (l &lt; r) {\nint mid = (l + r) &gt;&gt; 1;\nif (alls[mid] &gt;= x) r = mid;\nelse l = mid + 1;\n}\nreturn r + 1; // \u56e0\u4e3a\u8981\u4f7f\u7528\u5230\u524d\u7f00\u548c\u6240\u4ee5\u9700\u8981\u4ece1\u5f00\u59cb\n}\n\nint main () {\ncin &gt;&gt; n &gt;&gt; m;\nfor (int i = 0; i &lt; n; i++) {\nint x, c;\ncin &gt;&gt; x &gt;&gt; c;\nadd.push_back({x, c});\nalls.push_back(x);\n} for (int i = 0; i &lt; m; i++) {\nint l, r;\ncin &gt;&gt; l &gt;&gt; r;\nquery.push_back({l, r});\nalls.push_back(l);\nalls.push_back(r);\n\n}\n// alls\u91cc\u9762\u5b58\u4e86\u6240\u6709\u53ef\u80fd\u6d89\u53ca\u5230\u7684\u4e0b\u6807\uff0c\u66f4\u6539\u8fc7\u7684\u6570\u5b57\u4e0b\u6807\u3001\u4ee5\u53ca\u533a\u95f4\u7684\u6570\u5b57\u4e0b\u6807\nsort(alls.begin(), alls.end());\nalls.erase(unique(alls.begin(), alls.end()), alls.end());\n\n// \u5904\u7406\u63d2\u5165\nfor (auto item : add) {\nint x = find(item.first);\na[x] += item.second;\n}\n\n// \u9884\u5904\u7406\u524d\u7f00\u548c\nfor (int i = 0; i &lt;= alls.size(); i++) s[i] = s[i - 1] + a[i];\n\n// \u5904\u7406\u8be2\u95ee\nfor (auto item : query) {\nint l = find(item.first), r = find(item.second);\ncout &lt;&lt; s[r] - s[l - 1] &lt;&lt; endl;\n}\n\nreturn 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#unique","title":"\u5b9e\u73b0unique\u7b97\u6cd5","text":"<ol> <li>\u4ed6\u662f\u7b2c\u4e00\u4e2a</li> <li>a[i] != a[i - 1]</li> </ol> <pre><code>vector&lt;int&gt;::iterator unique(vector&lt;int&gt; &amp;a) {\nint j = 0;\nfor (int i = 0; i &lt; a.size(); ++i) {\nif (!i || a[i] != a[i - 1])//\u5982\u679c\u662f\u7b2c\u4e00\u4e2a\u5143\u7d20\u6216\u8005\u8be5\u5143\u7d20\u4e0d\u7b49\u4e8e\u524d\u4e00\u4e2a\u5143\u7d20\uff0c\u5373\u4e0d\u91cd\u590d\u5143\u7d20\uff0c\u6211\u4eec\u5c31\u628a\u5b83\u5b58\u5230\u6570\u7ec4\u524dj\u4e2a\u5143\u7d20\u4e2d\na[j++] = a[i];//\u6bcf\u5b58\u5728\u4e00\u4e2a\u4e0d\u540c\u5143\u7d20\uff0cj++\n}\nreturn a.begin() + j;//\u8fd4\u56de\u7684\u662f\u524dj\u4e2a\u4e0d\u91cd\u590d\u5143\u7d20\u7684\u4e0b\u6807\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#_23","title":"\u533a\u95f4\u5408\u5e76","text":"<p>\u5c06\u6240\u6709\u5b58\u5728\u4ea4\u96c6\u7684\u533a\u95f4\u5408\u5e76</p> <p>python\u5728\u5f88\u591a\u60c5\u51b5\u4e0b\u5e76\u4e0d\u6bd4C++\u6162\uff0c\u56e0\u4e3a\u52a0\u4e86O2\u4f18\u5316\uff0c\u8fd0\u884c\u65f6\u95f4\u5728\u5f88\u591a\u60c5\u51b5\u4e0b\u548cC++\u5dee\u4e0d\u591a\u7684</p> <p>\u7ed9\u6211\u4eec\u5f88\u591a\u5f88\u591a\u7684\u533a\u95f4\uff0c\u5982\u679c\u4e24\u4e2a\u533a\u95f4\u6709\u4ea4\u96c6\u7684\u8bdd\uff0c\u5c31\u628a\u8fd9\u4e24\u4e2a\u533a\u95f4\u5408\u5e76</p> <p>\u5feb\u901f\u5730\u5c06n\u4e2a\u4ea4\u96c6\u6709\u533a\u95f4\u7684\u5408\u5e76</p> <p>\u89c4\u5b9a\uff1a\u4e24\u4e2a\u533a\u95f4\u53ea\u6709\u7aef\u70b9\u76f8\u4ea4\u7684\u8bdd\uff0c\u4e5f\u7b97\u6709\u4ea4\u96c6</p> <pre><code>// \u5c06\u6240\u6709\u5b58\u5728\u4ea4\u96c6\u7684\u533a\u95f4\u5408\u5e76\nvoid merge(vector&lt;PII&gt; &amp;segs)\n{\nvector&lt;PII&gt; res;\n\nsort(segs.begin(), segs.end());\n\nint st = -2e9, ed = -2e9;\nfor (auto seg : segs)\nif (ed &lt; seg.first)\n{\nif (st != -2e9) res.push_back({st, ed});\nst = seg.first, ed = seg.second;\n}\nelse ed = max(ed, seg.second);\n\nif (st != -2e9) res.push_back({st, ed});\n\nsegs = res;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#803","title":"803. \u533a\u95f4\u5408\u5e76","text":"<p>\u8fd9\u9053\u9898\u5b9e\u9645\u4e0a\u662f\u8d2a\u5fc3\u7b97\u6cd5</p> <ol> <li> <p>\u6309\u6240\u6709\u533a\u95f4\u7684\u5de6\u7aef\u70b9\u8fdb\u884c\u6392\u5e8f</p> </li> <li> <p>\u626b\u63cf\u6574\u4e2a\u533a\u95f4\uff0c\u8fc7\u7a0b\u5f53\u4e2d\u5c06\u6240\u6709\u53ef\u80fd\u6709\u4ea4\u96c6\u7684\u533a\u95f4\u5408\u5e76</p> </li> </ol> <p>start st end ed </p> <p>\u6309\u7167\u5de6\u7aef\u70b9\u4ece\u5c0f\u5230\u5927\u7684\u60c5\u51b5\u8fdb\u884c\u626b\u63cf\uff0c\u540e\u4e00\u4e2a\u533a\u95f4\u7684\u5de6\u7aef\u70b9\u4e00\u5b9a\u5728\u5f53\u524d\u533a\u95f4\u5de6\u7aef\u70b9\u7684\u540e\u9762</p> <p>\u5728\u5185\u90e8\u3001\u6709\u4ea4\u96c6\u3001\u6ca1\u6709\u4ea4\u96c6</p> <p>\u8fd9\u662f\u4e00\u9053\u6a21\u62df+\u8d2a\u5fc3</p> <p>\u4e5f\u6bd4\u8f83\u50cf\u53cc\u6307\u9488\u7b97\u6cd5</p> <p>\u8ddf\u533a\u95f4\u76f8\u5173\u7684\u9898\u76ee\u5f88\u591a\uff0c\u5927\u90e8\u5206\u90fd\u662f\u8d2a\u5fc3  </p> <p>pair\u6392\u5e8f\u5728c++\u91cc\u9762\u4f1a\u4f18\u5148\u4ee5\u5de6\u7aef\u70b9\u8fdb\u884c\u6392\u5e8f</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n#include &lt;vector&gt;\n\nusing namespace std;\n\ntypedef pair&lt;int, int&gt; PII;\n\nvector&lt;PII&gt; segs;\n\nint n;\n\nvoid merge(vector&lt;PII&gt; &amp;segs) {\nvector&lt;PII&gt; res;\nsort(segs.begin(), segs.end());\nint st = -2e9, ed = -2e9;\nfor (auto seg : segs) {\nif (ed &lt; seg.first) {\nif (st != -2e9) {\nres.push_back({st, ed});\n}\nst = seg.first;\ned = seg.second;\n\n} else {\ned = max(ed, seg.second);\n}\n}\nif (st != -2e9) res.push_back({st, ed});\nsegs = res;\n}\n\n\n\nint main () {\ncin &gt;&gt; n; for (int i = 0; i &lt; n; i++) {\nint l, r;\ncin &gt;&gt; l &gt;&gt; r;\nsegs.push_back({l, r});\n}\nmerge(segs);\ncout &lt;&lt; segs.size() &lt;&lt; endl;\nreturn 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/","title":"\u7b2c\u4e09\u8bb2 \u641c\u7d22\u4e0e\u56fe\u8bba","text":"<p>\u4e00\u5b9a\u8981\u591a\u5199\uff01\u6bcf\u4e2a\u7b97\u6cd5\u5199\u4e2a\u4e94\u516d\u904d\u57fa\u672c\u5c31\u4f1a\u4e86</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/#dfs","title":"\u6df1\u5ea6\u4f18\u5148\u904d\u5386 DFS","text":"<p>dfs\u548cbfs\u641c\u7d22\u7684\u7ed3\u6784\u90fd\u50cf\u4e00\u68f5\u6811\u4e00\u6837\uff0c\u641c\u7d22\u7684\u987a\u5e8f\u4e0d\u4e00\u6837</p> <p>dfs\u5c3d\u53ef\u80fd\u5f80\u6df1\u4e86\u641c\uff0c\u78b0\u5230\u53f6\u8282\u70b9\u56de\u6eaf</p> <p>dfs\u6267\u7740\uff0c\u4e00\u6761\u8def\u5fc5\u5b9a\u4f1a\u8d70\u5230\u5934</p> <p>\u4ece\u6570\u636e\u7ed3\u6784\u6765\u770b\uff0cDFS\u4f7f\u7528stack\uff0c\u4f7f\u7528\u7a7a\u95f4O(h)\uff0c\u7a7a\u95f4\u4e0a\u6709\u7edd\u5bf9\u4f18\u52bf\uff0c\u4f46\u4e0d\u5177\u6709\u201c\u6700\u77ed\u8def\u201d\u7684\u6027\u8d28</p> <p>\u7b97\u6cd5\u601d\u8def\u6bd4\u8f83\u5947\u602a\u7684\u6216\u5bf9\u7a7a\u95f4\u8981\u6c42\u9ad8\u7684\u4e00\u822c\u662fDFS</p> <p>\u4e24\u4e2a\u91cd\u8981\u6982\u5ff5\uff1a\u56de\u6eaf\u548c\u526a\u679d</p> <p>\u5982\u679c\u89c9\u5f97\u96be\u4ee5\u601d\u8003\uff0c\u5c31\u4ece\u641c\u7d22\u6811\u7684\u89d2\u5ea6\u6765\u8003\u8651</p> <p>dfs\u5176\u5b9e\u5c31\u662f\u9012\u5f52\uff0c\u6ca1\u6709\u5fc5\u8981\u53bb\u522b\u7684\u592a\u5f00</p> <p>dfs\u7684\u641c\u7d22\u6846\u67b6\u5f88\u591a\u9700\u8981\u4ece\u9898\u76ee\u8fdb\u884c\u5206\u6790</p> <p>dfs\u4fd7\u79f0\u66b4\u529b\u641c\u7d22\uff0c\u6700\u91cd\u8981\u7684\u662f\u904d\u5386\u6240\u6709\u65b9\u6848\u7684\u987a\u5e8f</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/#842","title":"842. \u6392\u5217\u6570\u5b57","text":"<p>\u770b\u7740\u662f\u4e00\u68f5\u6811\u7684\u5f62\u5f0f\uff0c\u4f46\u662f\u5b58\u7684\u65f6\u5019\u53ea\u4f1a\u5b58\u5f53\u524d\u7684\u8def\u5f84\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u5c06\u6574\u4e2a\u6811\u5b58\u50a8\u4e0b\u6765\uff0c\u7cfb\u7edf\u4f1a\u6709\u4e00\u4e2a\u9690\u85cf\u7684\u6808\u6765\u5e2e\u6211\u4eec\u641e\u5b9a\uff0c\u4e0d\u9700\u8981\u6211\u4eec\u5f00\u989d\u5916\u7684\u7a7a\u95f4</p> <p>\u56de\u6eaf\u91cc\u9762\u975e\u5e38\u91cd\u8981\u7684\u4e00\u70b9\u5c31\u662f\u8981\u6062\u590d\u73b0\u573a\uff0c\u7528\u5b8c\u7684\u4e1c\u897f\u4e00\u5b9a\u8981\u653e\u56de\u53bb</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nconst int N = 10;\nint n;\nint path[N];\nbool st[N]; // bool\u9ed8\u8ba40\uff0cfalse\n\nvoid dfs (int u) {\nif (u == n) {\nfor (int i = 0; i &lt; n; i ++) printf(\"%d \", path[i]);\nputs(\"\");\nreturn;\n}\nfor (int i = 1; i &lt;= n; i++) {\nif (!st[i]) {\npath[u] = i;\nst[i] = true;\ndfs(u + 1);\n\n// \u6062\u590d\u73b0\u573a\npath[u] = 0; //\u8fd9\u4e00\u6b65\u5b9e\u9645\u4e0a\u53ef\u4ee5\u4e0d\u5199\uff0c\u56e0\u4e3a\u540e\u9762\u6bcf\u6b21\u7528\u7684\u65f6\u5019path[u]\u90fd\u88ab\u91cd\u65b0\u8d4b\u503c\u4e86\nst[i] = false;\n}\n}\n}\n\nint main () {\ncin &gt;&gt; n;\ndfs(0);\nreturn 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/#843-n-","title":"843. n-\u7687\u540e\u95ee\u9898","text":"<p>\u601d\u8003\u4e00\uff1a</p> <ol> <li>\u5b8c\u5168\u6309\u7167\u5168\u6392\u5217\u7684\u601d\u8def\uff0c\u679a\u4e3e\u6bcf\u4e00\u884c\u7684\u7687\u540e\u5e94\u8be5\u653e\u5728\u54ea\u4e00\u5217\u4e0a\u53bb</li> </ol> <p>\u4e5f\u53ef\u4ee5\u8fb9\u505a\u4fbf\u5224\u65ad</p> <p>\u526a\u679d\u5c31\u662f\u5224\u65ad\u5f53\u524d\u8fd9\u4e2a\u9009\u62e9\u4e00\u5b9a\u662f\u4e0d\u5408\u6cd5\u7684</p> <p>\u601d\u8003\u4e8c\uff1a\u6734\u7d20\u7684\u601d\u8003\u65b9\u5f0f\u5bf9\u4e8e\u6bcf\u4e2a\u683c\u5b50\u6765\u8bf4\uff0c\u6709\u653e\u7687\u540e\u548c\u4e0d\u653e\u7687\u540e\u7684\u4e24\u79cd\u60c5\u51b5\uff0c\u5bf9\u4e24\u79cd\u60c5\u51b5\u5206\u522b\u8fdb\u884cdfs\u5373\u53ef</p> <p>diagonal \u5bf9\u89d2\u7ebf</p> <p>\u601d\u8003\u5bf9\u89d2\u7ebf\u7684\u65f6\u5019\uff0c\u601d\u8003y = x + b\u6216\u8005y = -x + b</p> <p>\u5bf9\u4e8e\u4e00\u6761\u7ebf\u4e0a\u7684\u70b9\u6765\u8bf4\u4ed6\u4eec\u7684\u622a\u8ddd\u5e94\u8be5\u76f8\u7b49</p> <p>\u5373 b = y - x \u6216\u8005b = y + x</p> <p>\u56e0\u4e3a\u6211\u4eec\u5b9a\u4e49\u7684dg[N] \u548cudg[N]\u90fd\u662f0~N\uff0c\u6240\u4ee5\u5bf9\u53ef\u80fd\u53d8\u6210\u8d1f\u6570\u7684y - x + N/2\u5373\u53ef</p> <p>dfs\u662f\u601d\u8def\uff0c\u6ca1\u6709\u6a21\u677f\uff0c\u91cd\u8981\u7684\u662f\u987a\u5e8f</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/#1","title":"1. \u5168\u6392\u5217\u7684\u601d\u8def\uff0c\u5bf9\u6bcf\u884c\u8fdb\u884c\u8ba8\u8bba","text":"<pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\nconst int N = 20;\nint n;\nchar g[N][N];\nbool col[N], dg[N], udg[N];\nvoid dfs(int u) {\nif (u == n) {\nfor (int i = 0; i &lt; n; i++) puts(g[i]);\nputs(\"\");\nreturn;\n}\nfor (int i = 0; i &lt; n; i++) {\nif(!col[i] &amp;&amp; !dg[u + i] &amp;&amp; !udg[n - u + i]) {\ng[u][i] = 'Q';\ncol[i] = dg[u + i] = udg[n - u + i] = true;\ndfs(u + 1);\ncol[i] = dg[u + i] = udg[n - u + i] = false;\ng[u][i] = '.';\n}\n}\n}\n\n\nint main () {\ncin &gt;&gt; n;\nfor (int i = 0; i &lt; n; i++) {\nfor (int j = 0; j &lt; n; j++) {\ng[i][j] = '.';\n}\n}\ndfs(0);\nreturn 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/#2","title":"2. \u5bf9\u6bcf\u4e2a\u70b9\u90fd\u8fdb\u884c\u653e\u548c\u4e0d\u653e\u7684\u8ba8\u8bba","text":"<p>\u65f6\u95f4\u6548\u7387\u5dee</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\nconst int N = 20;\nint n;\nchar g[N][N];\nint row[N], col[N], dg[N], udg[N];\n\nvoid dfs(int x, int y, int s) {\nif (y == n) y = 0, x++;\nif (x == n) {\nif (s == n) {\nfor (int i = 0; i &lt; n; i++) {\nputs(g[i]);\n}\nputs(\"\");\n} // \u65e0\u8bba\u4ec0\u4e48\u60c5\u51b5\u90fd\u8981return\u7684\u6ce8\u610f\nreturn;\n}\n// \u7b2c\u4e00\u79cd\u60c5\u51b5\u662f\u76f4\u63a5\u4e0d\u653e\u7687\u540e\ndfs(x, y + 1, s);\n// \u7b2c\u4e8c\u79cd\u60c5\u51b5\u662f\u5728\u7b26\u5408\u60c5\u51b5\u7684\u6761\u4ef6\u4e0b\u653e\u7687\u540e\nif (!row[x] &amp;&amp; !col[y] &amp;&amp; !dg[x + y] &amp;&amp; !udg[x - y + n]) {\ng[x][y] = 'Q';\nrow[x] = col[y] = dg[x + y] = udg[x - y + n] = true;\n// \u6ce8\u610fs + 1\ndfs(x, y + 1, s + 1);\n// \u56de\u6eaf\ng[x][y] = '.';\nrow[x] = col[y] = dg[x + y] = udg[x - y + n] = false;\n}\n\n}\n\nint main () {\ncin &gt;&gt; n;\nfor (int i = 0; i &lt; n; i++) {\nfor (int j = 0; j &lt; n; j ++) {\ng[i][j] = '.';\n}\n}\ndfs(0, 0, 0);\nreturn 0; }\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/#bfs","title":"\u5bbd\u5ea6\u4f18\u5148\u904d\u5386 BFS","text":"<p>\u773c\u89c2\u516d\u8def\u8033\u542c\u516b\u65b9\uff0c\u641c\u7d22\u7684\u65f6\u5019\u4f7f\u4e00\u5c42\u4e00\u5c42\u7684\u641c</p> <p>BFS\u4f7f\u7528queue\uff0c\u4f7f\u7528\u7a7a\u95f4O(2^h)\uff0c\u7b2c\u4e00\u6b21\u6269\u5c55\u5230\u7684\u70b9\uff0c\u5fc5\u5b9a\u5177\u6709\u201c\u6700\u77ed\u8def\u201d\u7684\u6027\u8d28\uff08\u9700\u8981\u6bcf\u4e2a\u8fb9\u7684\u6743\u91cd\u90fd\u662f1\uff09</p> <p>\u6d89\u53ca\u5230\u6700\u5c0f\u6b65\u6570\u3001\u6700\u77ed\u8ddd\u79bb\u3001\u6700\u5c11\u64cd\u4f5c\u51e0\u6b21\uff0c\u57fa\u672c\u4e0a\u90fd\u662fBFS</p> <p>dp\u95ee\u9898\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u6700\u77ed\u8def\u95ee\u9898\uff0c\u6ca1\u6709\u73af\u5b58\u5728\u7684\u6700\u77ed\u8def\u95ee\u9898</p> <p>bfs\u4e00\u822c\u662f\u6709\u4e00\u4e2a\u5e38\u7528\u7684\u6846\u67b6\u7684\uff01</p> <p>\u6846\u67b6\uff1a</p> <pre><code>\u5c06\u521d\u59cb\u72b6\u6001\u653e\u5230\u961f\u5217\u91cc\u9762 queue\n\u5f53\u961f\u5217\u4e0d\u7a7a while(queue){\n\u6bcf\u4e00\u6b21\u628a\u961f\u5934\u62ff\u51fa\u6765\uff0c\u6269\u5c55\u961f\u5934\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/#844","title":"844.\u8d70\u8ff7\u5bab","text":"<p>\u4e3a\u4ec0\u4e48\u9700\u8981\u961f\u5217\u6765\u7ef4\u62a4\uff1a\u90a3\u4e9b\u8d70\u4e0d\u901a\u7684\u70b9\uff0c\u5728\u4e0b\u4e00\u5c42\u904d\u5386\u7684\u65f6\u5019\u5c31\u4e0d\u9700\u8981\u4efb\u4f55\u8003\u8651\u4e86</p> <pre><code>#include&lt;iostream&gt;\n#include&lt;cstring&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\nconst int N = 110; typedef pair&lt;int, int&gt; PII;\nint n, m;\nint g[N][N];//\u5b58\u653e\u5730\u56fe\nint d[N][N];//\u5b58 \u6bcf\u4e00\u4e2a\u70b9\u5230\u8d77\u70b9\u7684\u8ddd\u79bb\nPII q[N * N];//\u624b\u5199\u961f\u5217\n\nint bfs() {\nint hh = 0, tt = 0;\nq[0] = {0, 0};\n\nmemset(d, -1, sizeof d);//\u8ddd\u79bb\u521d\u59cb\u5316\u4e3a- 1\u8868\u793a\u6ca1\u6709\u8d70\u8fc7\nd[0][0] = 0;//\u8868\u793a\u8d77\u70b9\u8d70\u8fc7\u4e86\n\nint dx[4] = {-1, 0, 1, 0}, dy[4] = {0, 1, 0, -1};\nwhile (hh &lt;= tt) {\nauto t = q[hh++]; // \u6bcf\u4e00\u6b21\u53d6\u51fa\u961f\u5934\uff0c\u5c1d\u8bd5\u5f80\u4e0a\u4e0b\u5de6\u53f3\nfor (int i = 0; i &lt; 4 ; i++) { // \u56db\u4e2a\u65b9\u5411\nint x = t.first + dx[i], y = t.second + dy[i];\nif (x &gt;= 0 &amp;&amp; x &lt; n &amp;&amp; y &gt;= 0 &amp;&amp; y &lt; m &amp;&amp; g[x][y] == 0 &amp;&amp; d[x][y] == -1) {\nd[x][y] = d[t.first][t.second] + 1;\nq[++tt] = {x, y}; // \u65b0\u7684\u961f\u5934\n}\n}\n}\nreturn d[n - 1] [m - 1];\n}\n\nint main() {\ncin &gt;&gt; n &gt;&gt; m;\nfor(int i = 0; i &lt; n; i ++ )\nfor(int j = 0; j &lt; m; j ++ )\ncin &gt;&gt; g[i][j];\n\ncout &lt;&lt; bfs() &lt;&lt; endl;\n\nreturn 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/#_2","title":"\u5982\u4f55\u53bb\u5b58\u50a8\u8def\u5f84","text":"<p>\u53ea\u8981\u8bb0\u5f55\u4e00\u4e0b\u6bcf\u4e2a\u70b9\u662f\u4ece\u54ea\u4e2a\u70b9\u6269\u6563\u51fa\u6765\u7684\u5c31\u884c</p> <pre><code>#include&lt;iostream&gt;\n#include&lt;cstring&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\nconst int N = 110; typedef pair&lt;int, int&gt; PII;\nint n, m;\nint g[N][N];//\u5b58\u653e\u5730\u56fe\nint d[N][N];//\u5b58 \u6bcf\u4e00\u4e2a\u70b9\u5230\u8d77\u70b9\u7684\u8ddd\u79bb\nPII q[N * N], Prev[N][N];\n\nint bfs() {\nint hh = 0, tt = 0;\nq[0] = {0, 0};\n\nmemset(d, -1, sizeof d);//\u8ddd\u79bb\u521d\u59cb\u5316\u4e3a- 1\u8868\u793a\u6ca1\u6709\u8d70\u8fc7\nd[0][0] = 0;//\u8868\u793a\u8d77\u70b9\u8d70\u8fc7\u4e86\n\nint dx[4] = {-1, 0, 1, 0}, dy[4] = {0, 1, 0, -1};\nwhile (hh &lt;= tt) {\nauto t = q[hh++]; // \u6bcf\u4e00\u6b21\u53d6\u51fa\u961f\u5934\uff0c\u5c1d\u8bd5\u5f80\u4e0a\u4e0b\u5de6\u53f3\uff0c\u6bcf\u4e00\u6b21\u90fd\u53ea\u4f1a\u6269\u6563\u4e00\u4e2a\u6570\u7684\u5916\u9762\u4e00\u683c\uff0c\u7136\u540e\u5c31\u662f\u4e0b\u4e00\u4e2a\u6570\u7684\u5916\u9762\u4e00\u683c\uff0c\u6240\u4ee5\u4e0d\u7528\u62c5\u5fc3\u67d0\u4e00\u4e2a\u6570\u76f4\u63a5\u6269\u6563\u53bb\u7ec8\u70b9\u4e86\nfor (int i = 0; i &lt; 4 ; i++) { // \u56db\u4e2a\u65b9\u5411\nint x = t.first + dx[i], y = t.second + dy[i];\nif (x &gt;= 0 &amp;&amp; x &lt; n &amp;&amp; y &gt;= 0 &amp;&amp; y &lt; m &amp;&amp; g[x][y] == 0 &amp;&amp; d[x][y] == -1) {\nd[x][y] = d[t.first][t.second] + 1;\nPrev[x][y] = t;\nq[++tt] = {x, y}; // \u65b0\u7684\u961f\u5c3e\n}\n}\n}\nint x = n - 1, y  = m - 1;\nwhile (x || y) {\ncout &lt;&lt; x &lt;&lt; ' ' &lt;&lt; y &lt;&lt; endl;\nauto t = Prev[x][y];\nx = t.first, y = t.second;\n}\nreturn d[n - 1] [m - 1];\n}\n\nint main() {\ncin &gt;&gt; n &gt;&gt; m;\nfor(int i = 0; i &lt; n; i ++ )\nfor(int j = 0; j &lt; m; j ++ )\ncin &gt;&gt; g[i][j];\n\ncout &lt;&lt; bfs() &lt;&lt; endl;\n\nreturn 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/#_3","title":"\u6811\u4e0e\u56fe\u7684\u5b58\u50a8","text":"<p>\u6811\u4e0e\u56fe\u7684\u5b58\u50a8</p> <p>\u6811\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u56fe\uff0c\u4e0e\u56fe\u7684\u5b58\u50a8\u65b9\u5f0f\u76f8\u540c\u3002\u6811\u662f\u65e0\u73af\u8fde\u901a\u56fe\u3002</p> <p>\u56fe\u5206\u6210\u6709\u5411\u56fe\u548c\u65e0\u5411\u56fe\uff0c\u65e0\u5411\u56fe\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u6709\u5411\u56fe</p> <p>\u5bf9\u4e8e\u65e0\u5411\u56fe\u4e2d\u7684\u8fb9ab\uff0c\u5b58\u50a8\u4e24\u6761\u6709\u5411\u8fb9a-&gt;b, b-&gt;a\u3002 \u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u53ea\u8003\u8651\u6709\u5411\u56fe\u7684\u5b58\u50a8\u3002</p> <p>(1) \u90bb\u63a5\u77e9\u9635\uff1ag[a][b][a, b] \u5b58\u50a8\u8fb9a-&gt;b\uff0c\u7528\u91cd\u590d\u8fb9\u7684\u8bdd\u53ea\u80fd\u4fdd\u7559\u4e00\u6761\u76f8\u540c\u7684\u8fb9</p> <p>(2) \u90bb\u63a5\u8868\uff1a\u7528\u7684\u6bd4\u8f83\u591a</p> <pre><code>// \u5bf9\u4e8e\u6bcf\u4e2a\u70b9k\uff0c\u5f00\u4e00\u4e2a\u5355\u94fe\u8868\uff0c\u5b58\u50a8k\u6240\u6709\u53ef\u4ee5\u8d70\u5230\u7684\u70b9\u3002h[k]\u5b58\u50a8\u8fd9\u4e2a\u5355\u94fe\u8868\u7684\u5934\u7ed3\u70b9\n// h[N]\u5b58\u7684\u662fn\u4e2a\u94fe\u8868\u7684\u94fe\u8868\u5934\uff0ce\u5b58\u7684\u662f\u6bcf\u4e2a\u8282\u70b9\u7684\u503c\uff0cne\u662f\u6bcf\u4e2a\u8282\u70b9\u7684next\u6307\u9488\n// \u56fe\u4e2d\u7684\u6bcf\u4e2a\u70b9\u90fd\u662f\u94fe\u8868\u5934\nint h[N], e[N], ne[N], idx;\n\n// \u6dfb\u52a0\u4e00\u6761\u8fb9a-&gt;b\nvoid add(int a, int b)\n{\ne[idx] = b, ne[idx] = h[a], h[a ] = idx ++ ;\n}\n\n// \u521d\u59cb\u5316\nidx = 0;\nmemset(h, -1, sizeof h);\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/#_4","title":"\u6811\u4e0e\u56fe\u7684\u6df1\u5ea6\u4f18\u5148\u904d\u5386","text":"<p>\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u548c\u5bbd\u5ea6\u4f18\u5148\u904d\u5386\u6bcf\u4e2a\u70b9\u53ea\u4f1a\u904d\u5386\u4e00\u6b21</p> <p>bool\u6570\u7ec4\u7528\u6765\u5b58\u54ea\u4e9b\u70b9\u5df2\u7ecf\u88ab\u904d\u5386\u8fc7\u4e86</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6 O(n+m)\uff0cn \u8868\u793a\u70b9\u6570\uff0cm\u8868\u793a\u8fb9\u6570</p> <p>(1) \u6df1\u5ea6\u4f18\u5148\u904d\u5386 \u2014\u2014 \u6a21\u677f\u9898 AcWing 846. \u6811\u7684\u91cd\u5fc3</p> <p>\u5220\u9664\u4e2d\u5fc3 = \u5c06\u4e00\u68f5\u6811\u5c3d\u53ef\u80fd\u788e\u5730\u62c6\u5f00\u6765</p> <p>\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u90fd\u6c42\u51fa\u6700\u5927\u503c\uff0c\u7136\u540e\u6c42\u6240\u6709\u6700\u5927\u503c\u5730\u6700\u5c0f\u503c</p> <p>\u5982\u4f55\u6c42\u6bcf\u4e2a\u70b9\u5220\u6389\u4e4b\u540e\u5730\u6700\u5927\u503c\uff0c\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u6309\u7684\u7279\u70b9\uff1a\u7b97\u51fa\u6bcf\u4e2a\u5b50\u6811\u7684\u5927\u5c0f</p> <pre><code>int dfs(int u)\n{\nst[u] = true; // st[u] \u8868\u793a\u70b9u\u5df2\u7ecf\u88ab\u904d\u5386\u8fc7\n\nfor (int i = h[u]; i != -1; i = ne[i])\n{\nint j = e[i];\nif (!st[j]) dfs(j);\n}\n}\n</code></pre> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\nconst int N = 100010, M = N * 2;\nint n, m;\nint h[N], e[M], ne[M], idx;\nbool st[N];\nint ans = N;\n\nvoid add(int a, int b) {\ne[idx] = b, ne[idx] = h[a], h[a] = idx++;\n}\n\n// \u8fd4\u56de\u4ee5u\u4e3a\u6839\u7684\u5b50\u6811\u7684\u5927\u5c0f\nint dfs (int u) {\nst[u] = true; // \u6807\u8bb0\u4e00\u4e0b\uff0c\u5df2\u7ecf\u88ab\u641c\u8fc7\u4e86\n\nint sum = 1, res=0;\nfor (int i = h[u]; i != -1; i = ne[i]) {\nint j = e[i];\nif (!st[j]){\nint s = dfs(j);\nres = max(res, s);\nsum += s;\n}\n}\nres = max(res, n -sum); // \u9664\u53bb\u6240\u6709\u5355\u5411\u53d1\u51fa\u53bb\u7684\uff0c\u5176\u4ed6\u5e94\u8be5\u8fde\u6210\u4e00\u4e2a\u8fde\u901a\u5757\u4e86\nans = min(ans, res);\nreturn sum;\n}\nint main () {\ncin &gt;&gt; n;\nmemset(h, -1, sizeof h);\nfor (int i = 0; i &lt; n - 1; i++) {\nint a, b;\ncin &gt;&gt; a &gt;&gt; b;\nadd(a, b), add(b, a);\n}\ndfs(1);\ncout &lt;&lt; ans &lt;&lt; endl;\nreturn 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/#_5","title":"\u6811\u4e0e\u56fe\u7684\u5bbd\u5ea6\u4f18\u5148\u904d\u5386","text":"<p>(2) \u5bbd\u5ea6\u4f18\u5148\u904d\u5386 \u2014\u2014 \u6a21\u677f\u9898 AcWing 847. \u56fe\u4e2d\u70b9\u7684\u5c42\u6b21</p> <pre><code>queue&lt;int&gt; q;\nst[1] = true; // \u8868\u793a1\u53f7\u70b9\u5df2\u7ecf\u88ab\u904d\u5386\u8fc7\nq.push(1);\n\nwhile (q.size())\n{\nint t = q.front();\nq.pop();\n\nfor (int i = h[t]; i != -1; i = ne[i])\n{\nint j = e[i];\nif (!st[j])\n{\nst[j] = true; // \u8868\u793a\u70b9j\u5df2\u7ecf\u88ab\u904d\u5386\u8fc7\nq.push(j);\n}\n}\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/#847","title":"847. \u56fe\u4e2d\u70b9\u7684\u5c42\u6b21","text":"<p>\u5bbd\u641c\u4e2d\u7b2c\u4e00\u6b21\u4e2d\u627e\u5230\u8fd9\u4e2a\u70b9\u7684\u65f6\u5019\u5c31\u662f\u6700\u77ed\u8def\u5f84</p> <p>\u6ce8\u610f\u539f\u6765\u7684h[N]\u6307\u5411\u7684\u662f-1\u5c31\u662f\u7a7a\uff0c\u8fd9\u91cc\u7684<code>void add(int a, int b)</code>\u548c\u5355\u94fe\u8868\u7684\u5b58\u50a8\u4e00\u6a21\u4e00\u6837</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\nconst int N = 100010;\nint n, m;\nint h[N], e[N], ne[N], idx;\nint d[N], q[N]; // d\u662f\u8ddd\u79bb\uff0cq\u662f\u961f\u5217\n\nvoid add (int a, int b) {\ne[idx] = b, ne[idx] = h[a], h[a] = idx++;\n}\nint bfs() {\nint hh = 0, tt = 0;\nq[0] = 1;\nmemset(d, -1, sizeof d);\nd[1] = 0;\nwhile(hh &lt;= tt) {\nint t = q[hh++];\nfor (int i = h[t]; i != -1; i = ne[i]) {\nint j = e[i];\nif (d[j] == -1) {\nd[j] = d[t] + 1;\nq[++tt] = j;\n}\n}\n}\nreturn d[n];\n}\n\nint main () {\ncin &gt;&gt; n &gt;&gt; m;\nmemset(h, -1, sizeof h);\nfor (int i = 0; i &lt; m; i++) {\nint a, b;\ncin &gt;&gt; a &gt;&gt; b;\nadd(a, b);\n}\ncout &lt;&lt; bfs() &lt;&lt; endl;\nreturn 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/#_6","title":"\u62d3\u6251\u6392\u5e8f","text":"<p>\u65f6\u95f4\u590d\u6742\u5ea6 O(n+m)\uff0cn\u8868\u793a\u70b9\u6570\uff0cm \u8868\u793a\u8fb9\u6570</p> <p>\u6709\u5411\u56fe\u624d\u6709\u62d3\u6251\u5e8f\u5217</p> <p>\u56fe\u7684\u62d3\u6251\u5e8f\u5217\uff1a\u9488\u5bf9\u6709\u5411\u56fe\uff0c\u82e5\u4e00\u4e2a\u7531\u56fe\u4e2d\u6240\u6709\u70b9\u6784\u6210\u7684\u5e8f\u5217 A \u6ee1\u8db3\uff1a\u5bf9\u4e8e\u56fe\u4e2d\u7684\u6bcf\u6761\u8fb9 (x,y)\uff0cx\u5728 A \u4e2d\u90fd\u51fa\u73b0\u5728 y\u4e4b\u524d\uff0c\u5219\u79f0 A\u662f\u8be5\u56fe\u7684\u4e00\u4e2a\u62d3\u6251\u5e8f\u5217\u3002</p> <p>123\u8fd9\u4e2a\u5e8f\u5217\uff0c\u9700\u8981\u6bd4\u8f8312\uff0c13\uff0c23\uff0c\u9700\u8981\u90fd\u662f\u524d\u9762\u90a3\u4e2a\u6570\u6307\u5411\u540e\u9762\u90a3\u4e2a\u6570</p> <p>\u6709\u73af\u4e0d\u53ef\u80fd\u6709\u62d3\u6251\u5e8f</p> <p>\u6709\u5411\u65e0\u73af\u56fe\u4e00\u5b9a\u5b58\u5728\u4e00\u4e2a\u62d3\u6251\u5e8f\u5217\uff0c\u6240\u4ee5\u6709\u5411\u65e0\u73af\u56fe\u4e5f\u88ab\u79f0\u4e3a\u62d3\u6251\u56fe</p> <p>\u6709\u5411\u56fe\u6bcf\u4e2a\u70b9\u90fd\u6709\u4e24\u4e2a\u5ea6\u6570\uff1a\u5165\u5ea6\u548c\u51fa\u5ea6</p> <p>\u5165\u5ea6\u6307\u4e00\u4e2a\u70b9\u88ab\u51e0\u4e2a\u70b9\u6307</p> <p>\u51fa\u5ea6\u6307\u6307\u5411\u51e0\u4e2a\u70b9</p> <p>\u6240\u4ee5\u62d3\u6251\u56fe\u4e2d\uff0c\u6240\u6709\u5165\u5ea6\u4e3a0\u7684\u70b9\u90fd\u53ef\u4ee5\u4f5c\u4e3a\u8d77\u70b9\uff08\u56e0\u4e3a\u4e0d\u4f1a\u6709\u4efb\u4f55\u4e00\u4e2a\u70b9\u5728\u6211\u524d\u9762\uff09</p> <p>\u7136\u540e\u5bf9\u6bcf\u4e2a\u70b9\u8fdb\u884cbfs</p> <p>\u4e00\u4e2a\u6709\u5411\u65e0\u73af\u56fe\uff0c\u4e00\u5b9a\u81f3\u5c11\u5b58\u5728\u4e00\u4e2a\u5165\u5ea6\u4e3a0\u7684\u70b9</p> <pre><code>bool topsort()\n{\nint hh = 0, tt = -1;\n\n// d[i] \u5b58\u50a8\u70b9i\u7684\u5165\u5ea6\nfor (int i = 1; i &lt;= n; i ++ )\nif (!d[i])\nq[ ++ tt] = i;\n\nwhile (hh &lt;= tt)\n{\nint t = q[hh ++ ];\n\nfor (int i = h[t]; i != -1; i = ne[i])\n{\nint j = e[i];\nif (-- d[j] == 0)\nq[ ++ tt] = j;\n}\n}\n\n// \u5982\u679c\u6240\u6709\u70b9\u90fd\u5165\u961f\u4e86\uff0c\u8bf4\u660e\u5b58\u5728\u62d3\u6251\u5e8f\u5217\uff1b\u5426\u5219\u4e0d\u5b58\u5728\u62d3\u6251\u5e8f\u5217\u3002\nreturn tt == n - 1;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/#848","title":"848.\u6709\u5411\u56fe\u7684\u62d3\u6251\u5e8f\u5217","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;algorithm&gt;\n\nusing namespace std;\nconst int N = 100010;\nint n, m;\nint h[N], e[N], ne[N], idx;\nint q[N], d[N]; //q\u5b58\u7684\u662f\u961f\u5217\uff0cd\u5b58\u7684\u662f\u5165\u5ea6\n\nvoid add(int a, int b) {\ne[idx] = b, ne[idx] = h[a], h[a] = idx++;\n}\n\nbool topsort() {\nint hh = 0, tt = -1;\nfor (int i =1; i &lt;= n; i++) {\nif (!d[i]) { // \u628a\u6240\u6709\u5165\u5ea6\u4e3a0\u7684\u70b9\u63d2\u5230\u961f\u5217\u91cc\u9762\u53bb\nq[++tt] = i;\n}\n}\nwhile(hh &lt;= tt) {\nint t = q[hh++]; // \u51fa\u961f\u7684\u987a\u5e8f\u662f\u62d3\u6251\u5e8f\u5373q\u91cc\u9762\u7684\u987a\u5e8f\nfor (int i = h[t]; i != -1; i = ne[i]) {\nint j = e[i];\nd[j] --; // \u51cf\u5165\u5ea6\nif (d[j] == 0) q[++tt] = j;\n}\n}\nreturn tt == n -1; // \u8bf4\u660e\u4e00\u5171\u8fdb\u4e86n\u4e2a\u70b9\uff0c\u6240\u6709\u70b9\u90fd\u8fdb\u5165\u961f\u5217\u4e86\n}\n\nint main() {\ncin &gt;&gt; n &gt;&gt; m;\nmemset(h, -1, sizeof h);\nfor (int i = 0; i &lt; m; i++) {\nint a, b;\ncin &gt;&gt; a &gt;&gt; b;\nadd(a, b);\nd[b] ++;// \u4e0d\u8981\u5fd8\u8bb0\u66f4\u65b0\u5165\u5ea6\n}\nif (topsort()){\nfor(int i = 0; i &lt; n; i++) printf(\"%d \", q[i]);\n}\nelse puts(\"-1\");\nreturn 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/#_7","title":"\u6700\u77ed\u8def\u7b97\u6cd5","text":"<p>\u6700\u77ed\u8def\u7b97\u6cd5\u4e0d\u4f1a\u8ba9\u4f60\u8bc1\u660e\u5b83\u7b97\u6cd5\u7684\u6b63\u786e\u6027\uff0c\u8003\u5bdf\u7684\u662f\u5982\u4f55\u5c06\u9898\u76ee\u8f6c\u5316\u4e3a\u6700\u77ed\u8def\u95ee\u9898\uff0c\u4fa7\u91cd\u4e8e\u5b9e\u8df5\uff0c\u4e0d\u4fa7\u91cd\u4e8e\u539f\u7406</p> <p>\u6709\u5411\u56fe\u548c\u65e0\u5411\u56fe\u7684\u6700\u77ed\u8def\u7b97\u6cd5\u6ca1\u6709\u533a\u522b\uff0c\u6700\u77ed\u8def\u95ee\u9898\u91cc\u9762\u53ea\u7528\u53bb\u8003\u8651\u6709\u5411\u56fe\u5c31\u884c\u4e86\uff0c\u65e0\u5411\u56fe\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u6709\u5411\u56fe</p> <p>\u5e38\u89c1\u7684\u6700\u77ed\u8def\u7b97\u6cd5\u5206\u4e3a\u4e24\u5927\u7c7b\uff1a</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/#_8","title":"\u5355\u6e90\u6700\u77ed\u8def\u95ee\u9898","text":"<p>\u4ece1\u53f7\u70b9\u5230n\u53f7\u70b9\u7684\u6700\u77ed\u8def\uff0c\u4ece1\u53f7\u70b9\u4ece\u5176\u4ed6\u6240\u6709\u70b9\u7684\u6700\u77ed\u8def</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/#1_1","title":"1. \u6240\u6709\u8fb9\u7684\u6743\u91cd\u90fd\u662f\u6b63\u503c","text":"<ol> <li>\u4f7f\u7528\u6734\u7d20Dijkstra\u7b97\u6cd5 O(n^2 + m) (\u7ea6\u5b9an\u8868\u793a\u70b9\u6570\uff0cm\u8868\u793a\u8fb9\u6570)</li> <li>\u5806\u4f18\u5316\u7684Dijkstra\u7b97\u6cd5 O(mlogn)</li> </ol> <p>\u53ef\u4ee5\u53d1\u73b0\u6734\u7d20\u7684\u505a\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u548c\u8fb9\u6570\u65e0\u5173\uff0c\u6240\u4ee5\u5f53\u70b9\u975e\u5e38\u591a\u7684\u7a20\u5bc6\u56fe\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u6734\u7d20\u7b97\u6cd5</p> <p>\u53cd\u4e4b\uff0c\u7a00\u758f\u56fe\u65f6\uff0cm\u548cn\u65f6\u4e00\u4e2a\u7ea7\u522b\u7684\uff0cn^2\u975e\u5e38\u5927</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/#2_1","title":"2. \u5b58\u5728\u8d1f\u6743\u8fb9","text":"<ol> <li>Bellman-Ford \u7b97\u6cd5 O(nm)</li> <li>SPFA\u7b97\u6cd5\u5bf9\u4e0a\u9762\u7684\u7b97\u6cd5\u8fdb\u884c\u4e86\u4f18\u5316\uff0c\u4e00\u822c\u662fO(m)\u590d\u6742\u5ea6\uff0c\u6700\u5316\u662fO(nm)\uff0c\u6548\u7387\u4e00\u822c\u6bd4\u4e0a\u9762\u90a3\u4e2a\u9ad8</li> </ol> <p>\u5e76\u4e0d\u662f\u6240\u6709\u9898\u76ee\u90fd\u53ef\u4ee5\u7528SPFA\u7b97\u6cd5\u53ef\u4ee5\u505a\uff0c\u5982\u679c\u9650\u5236\u7ecf\u8fc7\u7684\u8fb9\u6570&lt;k\uff0c\u5c31\u4e0d\u80fd\u7528SPFA</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/#_9","title":"\u591a\u6e90\u6c47\u6700\u77ed\u8def\u95ee\u9898","text":"<p>\u6e90\u70b9--\u8d77\u70b9    \u6c47\u70b9-- \u7ec8\u70b9</p> <p>\u4efb\u9009\u4e00\u4e2a\u8d77\u70b9\u6216\u8005\u7ec8\u70b9\uff0c\u6c42\u4ed6\u4eec\u7684\u6700\u77ed\u8def</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/#floyd-on3","title":"Floyd \u7b97\u6cd5 \u65f6\u95f4\u590d\u6742\u5ea6O(n^3)","text":""},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/#dijkstra","title":"\u6734\u7d20dijkstra\u7b97\u6cd5","text":"<p>Dijkstra\u7b97\u6cd5\u662f\u4e00\u79cd\u7528\u4e8e\u89e3\u51b3\u5355\u6e90\u6700\u77ed\u8def\u5f84\u95ee\u9898\u7684\u56fe\u7b97\u6cd5\u3002\u5b83\u7531\u8377\u5170\u8ba1\u7b97\u673a\u79d1\u5b66\u5bb6Edsger Dijkstra\u4e8e1956\u5e74\u63d0\u51fa\u3002</p> <p>\u8be5\u7b97\u6cd5\u901a\u8fc7\u4ece\u8d77\u59cb\u8282\u70b9\u5f00\u59cb\uff0c\u9010\u6b65\u9009\u62e9\u8ddd\u79bb\u8d77\u59cb\u8282\u70b9\u6700\u8fd1\u7684\u8282\u70b9\uff0c\u5e76\u66f4\u65b0\u5176\u4ed6\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\u8ddd\u79bb\uff0c\u76f4\u5230\u627e\u5230\u5230\u8fbe\u76ee\u6807\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\u6216\u8005\u904d\u5386\u5b8c\u6240\u6709\u8282\u70b9\u3002</p> <p>Dijkstra\u7b97\u6cd5\u7684\u57fa\u672c\u601d\u60f3\u662f\u7ef4\u62a4\u4e00\u4e2a\u8ddd\u79bb\u8868\uff0c\u8bb0\u5f55\u4ece\u8d77\u59cb\u8282\u70b9\u5230\u5176\u4ed6\u8282\u70b9\u7684\u5f53\u524d\u6700\u77ed\u8ddd\u79bb\u3002\u5728\u6bcf\u4e00\u6b21\u8fed\u4ee3\u4e2d\uff0c\u9009\u62e9\u8ddd\u79bb\u8d77\u59cb\u8282\u70b9\u6700\u8fd1\u7684\u672a\u8bbf\u95ee\u8282\u70b9\u4f5c\u4e3a\u5f53\u524d\u8282\u70b9\uff0c\u5e76\u901a\u8fc7\u8ba1\u7b97\u4ece\u5f53\u524d\u8282\u70b9\u5230\u5176\u90bb\u5c45\u8282\u70b9\u7684\u8ddd\u79bb\uff0c\u66f4\u65b0\u90bb\u5c45\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\u8ddd\u79bb\u3002\u91cd\u590d\u6b64\u8fc7\u7a0b\u76f4\u5230\u5230\u8fbe\u76ee\u6807\u8282\u70b9\u6216\u8005\u6240\u6709\u8282\u70b9\u90fd\u88ab\u8bbf\u95ee\u3002</p> <p>Dijkstra\u7b97\u6cd5\u7684\u5173\u952e\u64cd\u4f5c\u662f\u5728\u6bcf\u6b21\u8fed\u4ee3\u4e2d\u9009\u62e9\u8ddd\u79bb\u8d77\u59cb\u8282\u70b9\u6700\u8fd1\u7684\u8282\u70b9\uff0c\u4ee5\u53ca\u66f4\u65b0\u90bb\u5c45\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\u8ddd\u79bb\u3002\u4e3a\u4e86\u5b9e\u73b0\u8fd9\u4e9b\u64cd\u4f5c\uff0c\u901a\u5e38\u4f7f\u7528\u4f18\u5148\u961f\u5217\uff08\u4f8b\u5982\u6700\u5c0f\u5806\uff09\u6765\u5b58\u50a8\u5f85\u8bbf\u95ee\u8282\u70b9\u548c\u5bf9\u5e94\u7684\u8ddd\u79bb\u3002</p> <p>Dijkstra\u7b97\u6cd5\u9002\u7528\u4e8e\u6ca1\u6709\u8d1f\u6743\u8fb9\u7684\u52a0\u6743\u6709\u5411\u56fe\u6216\u65e0\u5411\u56fe\u3002\u5b83\u53ef\u4ee5\u7528\u4e8e\u6c42\u89e3\u4ece\u4e00\u4e2a\u8282\u70b9\u5230\u5176\u4ed6\u6240\u6709\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\uff0c\u6216\u8005\u4ec5\u8ba1\u7b97\u4ece\u4e00\u4e2a\u8282\u70b9\u5230\u6307\u5b9a\u76ee\u6807\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\u3002</p> <p>\u5c3d\u7ba1Dijkstra\u7b97\u6cd5\u5728\u65f6\u95f4\u590d\u6742\u5ea6\u4e0a\u8f83\u9ad8\uff08O(V^2)\uff0c\u5176\u4e2dV\u662f\u8282\u70b9\u6570\uff09\uff0c\u4f46\u5b83\u5728\u5b9e\u8df5\u4e2d\u901a\u5e38\u8868\u73b0\u826f\u597d\uff0c\u5e76\u4e14\u88ab\u5e7f\u6cdb\u5e94\u7528\u4e8e\u8def\u7531\u8ba1\u7b97\u3001\u5730\u7406\u4fe1\u606f\u7cfb\u7edf\u548c\u7f51\u7edc\u4f18\u5316\u7b49\u9886\u57df\u3002</p> <p>\u6a21\u677f\uff1a</p> <pre><code>int g[N][N];  // \u5b58\u50a8\u6bcf\u6761\u8fb9\nint dist[N];  // \u5b58\u50a81\u53f7\u70b9\u5230\u6bcf\u4e2a\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\nbool st[N];   // \u5b58\u50a8\u6bcf\u4e2a\u70b9\u7684\u6700\u77ed\u8def\u662f\u5426\u5df2\u7ecf\u786e\u5b9a\n\n// \u6c421\u53f7\u70b9\u5230n\u53f7\u70b9\u7684\u6700\u77ed\u8def\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5219\u8fd4\u56de-1\nint dijkstra()\n{\nmemset(dist, 0x3f, sizeof dist);\ndist[1] = 0;\n\nfor (int i = 0; i &lt; n - 1; i ++ )\n{\nint t = -1;     // \u5728\u8fd8\u672a\u786e\u5b9a\u6700\u77ed\u8def\u7684\u70b9\u4e2d\uff0c\u5bfb\u627e\u8ddd\u79bb\u6700\u5c0f\u7684\u70b9\nfor (int j = 1; j &lt;= n; j ++ )\nif (!st[j] &amp;&amp; (t == -1 || dist[t] &gt; dist[j]))\nt = j;\n\n// \u7528t\u66f4\u65b0\u5176\u4ed6\u70b9\u7684\u8ddd\u79bb\nfor (int j = 1; j &lt;= n; j ++ )\ndist[j] = min(dist[j], dist[t] + g[t][j]);\n\nst[t] = true;\n}\n\nif (dist[n] == 0x3f3f3f3f) return -1;\nreturn dist[n];\n}\n</code></pre> <p>\u57fa\u4e8e\u8d2a\u5fc3\u7684\u601d\u8def</p> <p>\u57fa\u672c\u7b97\u6cd5\u601d\u8def\uff1a\u6c42\u7684\u662f1\u53f7\u70b9\u5230\u5176\u4ed6\u6240\u6709\u70b9\u7684\u6700\u77ed\u8def\u8ddd\u79bb</p> <ol> <li>\u5148\u521d\u59cb\u5316\u6211\u4eec\u7684\u4e3e\u4f8b\uff0cdist[1] = 0, dist[i] = \u6b63\u65e0\u7a77</li> <li>for (i : 0 ~ n ) \u8fed\u4ee3\u8fc7\u7a0b\uff0c\u6bcf\u4e00\u6b21\u786e\u5b9a\u4e00\u4e2a\u6700\u77ed\u8def</li> </ol> <p>\u627e\u5230\u5f53\u524d\u5df2\u7ecf\u786e\u5b9a\u6700\u77ed\u8ddd\u79bb\u7684\u70b9\u5b58\u5230S</p> <p>t\u4e0d\u5728s\u4e2d\u4e3e\u4f8b\u6700\u8fd1\u7684\u70b9</p> <p>\u628at\u52a0\u5230s\u4e2d\u53bb</p> <p>\u7528t\u66f4\u65b0\u5176\u4ed6\u70b9\u7684\u8ddd\u79bb</p> <p>\u4ecet\u51fa\u53bb\u7684\u6240\u6709\u8fb9\u80fd\u4e0d\u80fd\u66f4\u65b0\u5176\u4ed6\u70b9\u7684\u8ddd\u79bb</p> <p>dist[x] &gt; dist[tx] \u66f4\u65b0</p> <p>\u7b80\u800c\u8a00\u4e4b\uff0c\u5c31\u662f\u6bcf\u6b21\u66f4\u65b0\u6311\u6700\u77ed\u8def\u7684\u90a3\u4e2a\u6765\u66f4\u65b0\u5176\u4ed6\u5269\u4e0b\u70b9\u7684\u8ddd\u79bb</p> <p>\u7a20\u5bc6\u56fe\u90bb\u63a5\u77e9\u9635\u6765\u5b58</p> <p>\u7a00\u758f\u56fe\u7528\u90bb\u63a5\u8868\u6765\u5b58</p> <p>Leetcode\u91cc\u9762\u56fe\u8bba\u7684\u9898\u76ee\u975e\u5e38\u5c11\uff0c\u7b14\u8bd5\u5168\u662f\u56fe\u8bba\u548cdp</p> <p>\u5982\u679c\u6240\u6709\u8fb9\u662f\u6b63\u7684\uff0c\u4e24\u70b9\u4e4b\u95f4\u53ea\u8981\u5b58\u50a8\u6700\u77ed\u7684\u4e00\u6761\u8fb9\u5c31\u884c</p> <pre><code>#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\n#include&lt;cstring&gt;\nusing namespace std;\n\nconst int N=510;\n\nint g[N][N];    //\u4e3a\u7a20\u5bc6\u9635\u6240\u4ee5\u7528\u90bb\u63a5\u77e9\u9635\u5b58\u50a8\nint dist[N];    //\u7528\u4e8e\u8bb0\u5f55\u5f53\u524d\u72b6\u6001\u4e0b\u6bcf\u4e00\u4e2a\u70b9\u8ddd\u79bb\u7b2c\u4e00\u4e2a\u70b9\u7684\u8ddd\u79bb\nbool st[N];     //\u7528\u4e8e\u8bb0\u5f55\u8be5\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\u662f\u5426\u5df2\u7ecf\u786e\u5b9a\n\nint n,m;\n\nint Dijkstra()\n{\nmemset(dist, 0x3f,sizeof dist);     //\u521d\u59cb\u5316\u8ddd\u79bb  0x3f\u4ee3\u8868\u65e0\u9650\u5927\n\ndist[1]=0;  //\u7b2c\u4e00\u4e2a\u70b9\u5230\u81ea\u8eab\u7684\u8ddd\u79bb\u4e3a0\n\nfor(int i=0;i&lt;n;i++)      //\u6709n\u4e2a\u70b9\u6240\u4ee5\u8981\u8fdb\u884cn\u6b21 \u8fed\u4ee3\n{\nint t=-1;       //t\u5b58\u50a8\u5f53\u524d\u8bbf\u95ee\u7684\u70b9\n\nfor(int j=1;j&lt;=n;j++)   //\u8fd9\u91cc\u7684j\u4ee3\u8868\u7684\u662f\u4ece1\u53f7\u70b9\u5f00\u59cb\nif(!st[j]&amp;&amp;(t==-1||dist[t]&gt;dist[j]))     // \u4e3a\u4e86\u5b58\u50a8\u6240\u6709\u70b9\u4e2d\u7684\u6700\u5c0f\u503c\uff0c\u5728\u6240\u6709false\u7684\u70b9\u4e2d\u627edist\u6700\u5c0f\u7684\u4e00\u4e2a\u70b9\nt=j;\n\nst[t]=true;   for(int j=1;j&lt;=n;j++)           //\u4f9d\u6b21\u66f4\u65b0\u6bcf\u4e2a\u70b9\u6240\u5230\u76f8\u90bb\u7684\u70b9\u8def\u5f84\u503c\ndist[j]=min(dist[j],dist[t]+g[t][j]);\n}\n\nif(dist[n]==0x3f3f3f3f) return -1;  //\u5982\u679c\u7b2cn\u4e2a\u70b9\u8def\u5f84\u4e3a\u65e0\u7a77\u5927\u5373\u4e0d\u5b58\u5728\u6700\u4f4e\u8def\u5f84\nreturn dist[n];\n}\nint main()\n{\ncin&gt;&gt;n&gt;&gt;m;\n\nmemset(g,0x3f,sizeof g);    //\u521d\u59cb\u5316\u56fe \u56e0\u4e3a\u662f\u6c42\u6700\u77ed\u8def\u5f84\n//\u6240\u4ee5\u6bcf\u4e2a\u70b9\u521d\u59cb\u4e3a\u65e0\u9650\u5927\n\nwhile(m--)\n{\nint x,y,z;\ncin&gt;&gt;x&gt;&gt;y&gt;&gt;z;\ng[x][y]=min(g[x][y],z);     //\u5982\u679c\u53d1\u751f\u91cd\u8fb9\u7684\u60c5\u51b5\u5219\u4fdd\u7559\u6700\u77ed\u7684\u4e00\u6761\u8fb9\n}\n\ncout&lt;&lt;Dijkstra()&lt;&lt;endl;\nreturn 0;\n}\n</code></pre> <p>\u5de5\u7a0b\u5316\u7684\u4ee3\u7801\u548c\u7b97\u6cd5\u4ee3\u7801\u4e0d\u4e00\u6837</p> <p>\u5de5\u7a0b\u5316\u8ffd\u6c42\u7684\u662f\u8ba9\u522b\u4eba\u770b\u61c2\uff0c\u65e5\u540e\u597d\u4fee\u6539\u597d\u7ef4\u62a4</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/#dijkstra_1","title":"\u5806\u4f18\u5316\u7248dijkstra","text":"<p>m\u548cn^2\u662f\u4e00\u4e2a\u7ea7\u522b\u7684\u65f6\u5019\u5c31\u662f\u7a20\u5bc6\u56fe</p> <p>\u7528\u5806\u6765\u505a\uff0c\u6bcf\u6b21\u90fd\u80fd\u627e\u5230\u8ddd\u79bb\u6700\u8fd1\u7684\u70b9</p> <p>\u5806\u4e24\u79cd\u5b9e\u73b0\u65b9\u5f0f\uff1a</p> <ol> <li>\u624b\u5199\u5806 \u53ef\u4ee5\u7ef4\u62a4n\u4e2a\u6570</li> <li>\u7528\u4f18\u5148\u961f\u5217\u6765\u7ef4\u62a4\uff0c\u4e0d\u652f\u6301\u4fee\u6539\u4efb\u610f\u4e00\u4e2a\u5143\u7d20\uff0c\u5b9e\u73b0\u65b9\u5f0f\u662f\u5197\u4f59\uff0c\u6bcf\u6b21\u90fd\u662f\u5411\u91cc\u9762\u63d2\u5165\u6570\uff0c\u5806\u91cc\u7684\u5143\u7d20\u5c31\u53ef\u80fd\u56de\u53d8\u6210m\u4e2a\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u548c\u624b\u5199\u5806\u662f\u4e00\u4e2a\u6570\u91cf\u7ea7 </li> </ol> <p>\u4e0d\u7528\u624b\u5199\u5806</p> <p>\u4f18\u5148\u961f\u5217\u91cc\u9762\u6709\u5f88\u591a\u5197\u4f59</p> <p>\u6a21\u677f\uff1a</p> <pre><code>typedef pair&lt;int, int&gt; PII;\n\nint n;      // \u70b9\u7684\u6570\u91cf\nint h[N], w[N], e[N], ne[N], idx;       // \u90bb\u63a5\u8868\u5b58\u50a8\u6240\u6709\u8fb9\nint dist[N];        // \u5b58\u50a8\u6240\u6709\u70b9\u52301\u53f7\u70b9\u7684\u8ddd\u79bb\nbool st[N];     // \u5b58\u50a8\u6bcf\u4e2a\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\u662f\u5426\u5df2\u786e\u5b9a\n\n// \u6c421\u53f7\u70b9\u5230n\u53f7\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\uff0c\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de-1\nint dijkstra()\n{\nmemset(dist, 0x3f, sizeof dist);\ndist[1] = 0;\npriority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;PII&gt;&gt; heap;\nheap.push({0, 1});      // first\u5b58\u50a8\u8ddd\u79bb\uff0csecond\u5b58\u50a8\u8282\u70b9\u7f16\u53f7\n\nwhile (heap.size())\n{\nauto t = heap.top();\nheap.pop();\n\nint ver = t.second, distance = t.first;\n\nif (st[ver]) continue;\nst[ver] = true;\n\nfor (int i = h[ver]; i != -1; i = ne[i])\n{\nint j = e[i];\nif (dist[j] &gt; distance + w[i])\n{\ndist[j] = distance + w[i];\nheap.push({dist[j], j});\n}\n}\n}\n\nif (dist[n] == 0x3f3f3f3f) return -1;\nreturn dist[n];\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/#850dijkstra2","title":"850.Dijkstra\u6c42\u6700\u77ed\u8def2","text":"<pre><code>#include &lt;cstring&gt;\n#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n#include &lt;queue&gt;\n\nusing namespace std;\n\ntypedef pair&lt;int, int&gt; PII;\n\nconst int N = 1e6 + 10;\n\nint n, m;\nint h[N], w[N], e[N], ne[N], idx;// w\u8868\u793a\u6743\u91cd\nint dist[N];\nbool st[N];\n\nvoid add(int a, int b, int c)\n{\ne[idx] = b, w[idx] = c, ne[idx] = h[a], h[a] = idx ++ ;\n}\n\nint dijkstra()\n{\nmemset(dist, 0x3f, sizeof dist);\ndist[1] = 0;\npriority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;PII&gt;&gt; heap; // \u8fd9\u4e2a\u5c31\u662f\u5c0f\u6839\u5806\u7684\u5b9a\u4e49\u65b9\u5f0f\uff0c\u4e0d\u7528\u7ea0\u7ed3\u4e3a\u4ec0\u4e48\u8981\u8fd9\u4e48\u5199\uff0c\u80cc\u8fc7\u5c31\u884c\u4e86vector\u8868\u793a\u5806\u7531\u4ec0\u4e48\u6765\u5b9e\u73b0\uff0cgreater\u662f\u53e6\u5916\u4e00\u4e2a\u53c2\u6570\nheap.push({0, 1});\n\nwhile (heap.size())\n{\nauto t = heap.top(); // \u6bcf\u6b21\u627e\u5230\u5f53\u524d\u8ddd\u79bb\u6700\u8fd1\u7684\u70b9\nheap.pop();\n\nint ver = t.second, distance = t.first;\n\nif (st[ver]) continue;\nst[ver] = true;\n\nfor (int i = h[ver]; i != -1; i = ne[i])\n{\nint j = e[i];\nif (dist[j] &gt; dist[ver] + w[i])\n{\ndist[j] = dist[ver] + w[i];\nheap.push({dist[j], j});\n}\n}\n}\n\nif (dist[n] == 0x3f3f3f3f) return -1;\nreturn dist[n];\n}\n\nint main()\n{\nscanf(\"%d%d\", &amp;n, &amp;m);\n\nmemset(h, -1, sizeof h);\nwhile (m -- )\n{\nint a, b, c;\nscanf(\"%d%d%d\", &amp;a, &amp;b, &amp;c);\nadd(a, b, c);\n}\n\nprintf(\"%d\\n\", dijkstra());\n\nreturn 0;\n}\n</code></pre> <p>\u53e6\u4e00\u79cd\u505a\u6cd5\u548c\u6ce8\u91ca</p> <pre><code>#include&lt;iostream&gt;\n#include&lt;cstring&gt;\n#include&lt;queue&gt;\n\nusing namespace std;\n\ntypedef pair&lt;int, int&gt; PII;\n\nconst int N = 100010; // \u628aN\u6539\u4e3a150010\u5c31\u80fdac\n\n// \u7a00\u758f\u56fe\u7528\u90bb\u63a5\u8868\u6765\u5b58\nint h[N], e[N], ne[N], idx;\nint w[N]; // \u7528\u6765\u5b58\u6743\u91cd\nint dist[N];\nbool st[N]; // \u5982\u679c\u4e3atrue\u8bf4\u660e\u8fd9\u4e2a\u70b9\u7684\u6700\u77ed\u8def\u5f84\u5df2\u7ecf\u786e\u5b9a\n\nint n, m;\n\nvoid add(int x, int y, int c)\n{\n// \u6709\u91cd\u8fb9\u4e5f\u4e0d\u8981\u7d27\uff0c\u5047\u8bbe1-&gt;2\u6709\u6743\u91cd\u4e3a2\u548c3\u7684\u8fb9\uff0c\u518d\u904d\u5386\u5230\u70b91\u7684\u65f6\u50192\u53f7\u70b9\u7684\u8ddd\u79bb\u4f1a\u66f4\u65b0\u4e24\u6b21\u653e\u5165\u5806\u4e2d\n// \u8fd9\u6837\u5806\u4e2d\u4f1a\u6709\u5f88\u591a\u5197\u4f59\u7684\u70b9\uff0c\u4f46\u662f\u5728\u5f39\u51fa\u7684\u65f6\u5019\u8fd8\u662f\u4f1a\u5f39\u51fa\u6700\u5c0f\u503c2+x\uff08x\u4e3a\u4e4b\u524d\u786e\u5b9a\u7684\u6700\u77ed\u8def\u5f84\uff09\uff0c\n// \u5e76\u6807\u8bb0st\u4e3atrue\uff0c\u6240\u4ee5\u4e0b\u4e00\u6b21\u5f39\u51fa3+x\u4f1acontinue\u4e0d\u4f1a\u5411\u4e0b\u6267\u884c\u3002\nw[idx] = c;\ne[idx] = y;\nne[idx] = h[x]; h[x] = idx++;\n}\n\nint dijkstra()\n{\nmemset(dist, 0x3f, sizeof(dist));\ndist[1] = 0;\npriority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;PII&gt;&gt; heap; // \u5b9a\u4e49\u4e00\u4e2a\u5c0f\u6839\u5806\n// \u8fd9\u91ccheap\u4e2d\u4e3a\u4ec0\u4e48\u8981\u5b58pair\u5462\uff0c\u9996\u5148\u5c0f\u6839\u5806\u662f\u6839\u636e\u8ddd\u79bb\u6765\u6392\u7684\uff0c\u6240\u4ee5\u6709\u4e00\u4e2a\u53d8\u91cf\u8981\u662f\u8ddd\u79bb\uff0c\n// \u5176\u6b21\u5728\u4ece\u5806\u4e2d\u62ff\u51fa\u6765\u7684\u65f6\u5019\u8981\u77e5\u9053\u77e5\u9053\u8fd9\u4e2a\u70b9\u662f\u54ea\u4e2a\u70b9\uff0c\u4e0d\u7136\u600e\u4e48\u66f4\u65b0\u90bb\u63a5\u70b9\u5462\uff1f\u6240\u4ee5\u7b2c\u4e8c\u4e2a\u53d8\u91cf\u8981\u5b58\u70b9\u3002\nheap.push({ 0, 1 }); // \u8fd9\u4e2a\u987a\u5e8f\u4e0d\u80fd\u5012\uff0cpair\u6392\u5e8f\u65f6\u662f\u5148\u6839\u636efirst\uff0c\u518d\u6839\u636esecond\uff0c\n// \u8fd9\u91cc\u663e\u7136\u8981\u6839\u636e\u8ddd\u79bb\u6392\u5e8f\nwhile(heap.size())\n{\nPII k = heap.top(); // \u53d6\u4e0d\u5728\u96c6\u5408S\u4e2d\u8ddd\u79bb\u6700\u77ed\u7684\u70b9\nheap.pop();\nint ver = k.second, distance = k.first;\n\nif(st[ver]) continue;\nst[ver] = true;\n\nfor(int i = h[ver]; i != -1; i = ne[i])\n{\nint j = e[i]; // i\u53ea\u662f\u4e2a\u4e0b\u6807\uff0ce\u4e2d\u5728\u5b58\u7684\u662fi\u8fd9\u4e2a\u4e0b\u6807\u5bf9\u5e94\u7684\u70b9\u3002\nif(dist[j] &gt; distance + w[i])\n{\ndist[j] = distance + w[i];\nheap.push({ dist[j], j });\n}\n}\n}\nif(dist[n] == 0x3f3f3f3f) return -1;\nelse return dist[n];\n}\n\nint main()\n{\nmemset(h, -1, sizeof(h));\nscanf(\"%d%d\", &amp;n, &amp;m);\n\nwhile (m--)\n{\nint x, y, c;\nscanf(\"%d%d%d\", &amp;x, &amp;y, &amp;c);\nadd(x, y, c);\n}\n\ncout &lt;&lt; dijkstra() &lt;&lt; endl;\n\nreturn 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/#bellman-ford","title":"Bellman-Ford\u7b97\u6cd5","text":"<p>Bellman-Ford\u7b97\u6cd5\u662f\u4e00\u79cd\u7528\u4e8e\u89e3\u51b3\u5355\u6e90\u6700\u77ed\u8def\u5f84\u95ee\u9898\u7684\u56fe\u7b97\u6cd5\u3002\u5b83\u7531\u7f8e\u56fd\u6570\u5b66\u5bb6Richard Bellman\u548cLeslie Ford\u57281958\u5e74\u63d0\u51fa\u3002</p> <p>\u8be5\u7b97\u6cd5\u9002\u7528\u4e8e\u5e26\u6709\u8d1f\u6743\u8fb9\u7684\u52a0\u6743\u6709\u5411\u56fe\u6216\u65e0\u5411\u56fe\uff0c\u5305\u62ec\u68c0\u6d4b\u8d1f\u73af\u7684\u60c5\u51b5\u3002\u4e0eDijkstra\u7b97\u6cd5\u4e0d\u540c\uff0cBellman-Ford\u7b97\u6cd5\u53ef\u4ee5\u5904\u7406\u5305\u542b\u8d1f\u6743\u8fb9\u7684\u56fe\uff0c\u5e76\u4e14\u80fd\u591f\u68c0\u6d4b\u5230\u8d1f\u6743\u73af\u3002\u7136\u800c\uff0c\u7531\u4e8e\u9700\u8981\u5bf9\u6240\u6709\u8fb9\u8fdb\u884c\u677e\u5f1b\u64cd\u4f5c\u7684\u8fed\u4ee3\uff0cBellman-Ford\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u6bd4Dijkstra\u7b97\u6cd5\u9ad8\u3002</p> <p>Bellman-Ford\u7b97\u6cd5\u7684\u57fa\u672c\u601d\u60f3\u662f\u901a\u8fc7\u5bf9\u6bcf\u6761\u8fb9\u8fdb\u884c\u677e\u5f1b\u64cd\u4f5c\u6765\u9010\u6b65\u66f4\u65b0\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\u8ddd\u79bb\u3002\u7b97\u6cd5\u4ece\u8d77\u59cb\u8282\u70b9\u5f00\u59cb\uff0c\u5c06\u8d77\u59cb\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\u8ddd\u79bb\u521d\u59cb\u5316\u4e3a0\uff0c\u5c06\u5176\u4ed6\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\u8ddd\u79bb\u521d\u59cb\u5316\u4e3a\u6b63\u65e0\u7a77\u5927\u3002\u7136\u540e\uff0c\u5728\u6bcf\u4e00\u8f6e\u8fed\u4ee3\u4e2d\uff0c\u904d\u5386\u56fe\u4e2d\u7684\u6240\u6709\u8fb9\uff0c\u5e76\u5c1d\u8bd5\u901a\u8fc7\u5f53\u524d\u8fb9\u8fdb\u884c\u677e\u5f1b\u64cd\u4f5c\u4ee5\u66f4\u65b0\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\u8ddd\u79bb\u3002\u91cd\u590d\u6267\u884c\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u76f4\u5230\u6ca1\u6709\u66f4\u591a\u7684\u8fb9\u53ef\u4ee5\u4f7f\u5f97\u8def\u5f84\u8ddd\u79bb\u53d8\u77ed\u4e3a\u6b62\u3002</p> <p>Bellman-Ford\u7b97\u6cd5\u8fd8\u5305\u542b\u4e00\u4e2a\u989d\u5916\u7684\u6b65\u9aa4\uff0c\u5373\u68c0\u6d4b\u8d1f\u6743\u73af\u3002\u5728\u6bcf\u6b21\u8fed\u4ee3\u4e4b\u540e\uff0c\u518d\u8fdb\u884c\u4e00\u8f6e\u904d\u5386\uff0c\u5e76\u68c0\u67e5\u662f\u5426\u5b58\u5728\u53ef\u4ee5\u8fdb\u4e00\u6b65\u7f29\u77ed\u8def\u5f84\u8ddd\u79bb\u7684\u8fb9\u3002\u5982\u679c\u5728\u6700\u540e\u4e00\u8f6e\u8fed\u4ee3\u4e2d\u4ecd\u7136\u53ef\u4ee5\u66f4\u65b0\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\u8ddd\u79bb\uff0c\u5219\u8bf4\u660e\u56fe\u4e2d\u5b58\u5728\u8d1f\u6743\u73af\u3002</p> <p>\u5c3d\u7ba1Bellman-Ford\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(V * E)\uff0c\u5176\u4e2dV\u662f\u8282\u70b9\u6570\uff0cE\u662f\u8fb9\u6570\uff0c\u76f8\u5bf9\u4e8eDijkstra\u7b97\u6cd5\u7684O(V<sup>2)\u548cFloyd-Warshall\u7b97\u6cd5\u7684O(V</sup>3)\uff0cBellman-Ford\u7b97\u6cd5\u5728\u5904\u7406\u5e26\u6709\u8d1f\u6743\u8fb9\u7684\u56fe\u65f6\u662f\u4e00\u79cd\u6709\u6548\u7684\u9009\u62e9\u3002</p> <p>\u7136\u800c\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cBellman-Ford\u7b97\u6cd5\u5728\u56fe\u4e2d\u5b58\u5728\u8d1f\u6743\u73af\u7684\u60c5\u51b5\u4e0b\u5e76\u4e0d\u4f1a\u7ed9\u51fa\u6b63\u786e\u7684\u6700\u77ed\u8def\u5f84\u8ddd\u79bb\uff0c\u56e0\u4e3a\u8d1f\u6743\u73af\u53ef\u4ee5\u4f7f\u8def\u5f84\u8ddd\u79bb\u65e0\u9650\u51cf\u5c0f\u3002\u56e0\u6b64\uff0c\u5728\u4f7f\u7528Bellman-Ford\u7b97\u6cd5\u65f6\uff0c\u901a\u5e38\u9700\u8981\u8fdb\u884c\u989d\u5916\u7684\u5224\u65ad\u6765\u68c0\u6d4b\u8d1f\u6743\u73af\u7684\u5b58\u5728\u3002</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6 O(nm)\uff0cn\u793a\u70b9\u6570\uff0cm\u8868\u793a\u8fb9\u6570 \u6ce8\u610f\u5728\u6a21\u677f\u9898\u4e2d\u9700\u8981\u5bf9\u4e0b\u9762\u7684\u6a21\u677f\u7a0d\u4f5c\u4fee\u6539\uff0c\u52a0\u4e0a\u5907\u4efd\u6570\u7ec4\uff0c\u8be6\u60c5\u89c1\u6a21\u677f\u9898\u3002</p> <p>\u57fa\u4e8e\u52a8\u6001\u89c4\u5212</p> <p>\u8fed\u4ee3n\u6b21 for n \u6b21</p> <p>for \u6240\u6709\u8fb9a,b,w \u5b58\u5728\u4e00\u6761a\u5230b\u7684\u8fb9\uff0c\u6743\u91cd\u662fw</p> <pre><code>int n, m;       // n\u8868\u793a\u70b9\u6570\uff0cm\u8868\u793a\u8fb9\u6570\nint dist[N];        // dist[x]\u5b58\u50a81\u5230x\u7684\u6700\u77ed\u8def\u8ddd\u79bb\n\nstruct Edge     // \u8fb9\uff0ca\u8868\u793a\u51fa\u70b9\uff0cb\u8868\u793a\u5165\u70b9\uff0cw\u8868\u793a\u8fb9\u7684\u6743\u91cd\n{\nint a, b, w;\n}edges[M];\n\n// \u6c421\u5230n\u7684\u6700\u77ed\u8def\u8ddd\u79bb\uff0c\u5982\u679c\u65e0\u6cd5\u4ece1\u8d70\u5230n\uff0c\u5219\u8fd4\u56de-1\u3002\nint bellman_ford()\n{\nmemset(dist, 0x3f, sizeof dist);\ndist[1] = 0;\n\n// \u5982\u679c\u7b2cn\u6b21\u8fed\u4ee3\u4ecd\u7136\u4f1a\u677e\u5f1b\u4e09\u89d2\u4e0d\u7b49\u5f0f\uff0c\u5c31\u8bf4\u660e\u5b58\u5728\u4e00\u6761\u957f\u5ea6\u662fn+1\u7684\u6700\u77ed\u8def\u5f84\uff0c\u7531\u62bd\u5c49\u539f\u7406\uff0c\u8def\u5f84\u4e2d\u81f3\u5c11\u5b58\u5728\u4e24\u4e2a\u76f8\u540c\u7684\u70b9\uff0c\u8bf4\u660e\u56fe\u4e2d\u5b58\u5728\u8d1f\u6743\u56de\u8def\u3002\nfor (int i = 0; i &lt; n; i ++ )\n{\nfor (int j = 0; j &lt; m; j ++ )\n{\nint a = edges[j].a, b = edges[j].b, w = edges[j].w;\nif (dist[b] &gt; dist[a] + w)\ndist[b] = dist[a] + w;\n}\n}\n\nif (dist[n] &gt; 0x3f3f3f3f / 2) return -1;\nreturn dist[n];\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/#spfa-bellman-ford","title":"spfa \u7b97\u6cd5\uff08\u961f\u5217\u4f18\u5316\u7684Bellman-Ford\u7b97\u6cd5\uff09","text":""},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/#spfa","title":"spfa\u5224\u65ad\u56fe\u4e2d\u662f\u5426\u5b58\u5728\u8d1f\u73af","text":""},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/#floyd","title":"floyd\u7b97\u6cd5 \u2014\u2014 \u6a21\u677f\u9898","text":""},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/#prim","title":"\u6734\u7d20\u7248prim\u7b97\u6cd5","text":""},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/#kruskal","title":"Kruskal\u7b97\u6cd5","text":""},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/#_10","title":"\u67d3\u8272\u6cd5\u5224\u522b\u4e8c\u5206\u56fe","text":""},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/#_11","title":"\u5308\u7259\u5229\u7b97\u6cd5","text":""},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/","title":"\u7b2c\u4e8c\u8bb2 \u6570\u636e\u7ed3\u6784","text":"<p>\u5982\u4f55\u7528\u6570\u7ec4\u6765\u6a21\u62df\u8fd9\u4e9b\u6570\u636e\u7ed3\u6784\uff0c\u800c\u4e0d\u7528\u7ed3\u6784\u4f53\uff0c\u4e3b\u8981\u662f\u6548\u7387\u95ee\u9898</p> <pre><code>struct Node {\nint val;\nNode *nest;\n};\n// \u5728\u9762\u8bd5\u9898\u91cc\u591a\uff0c\u4f46\u662f\u5728\u7b14\u8bd5\u9898\u91cc\u9762\u6bd4\u8f83\u5c11\nnew Node(); // \u975e\u5e38\u6162\uff0cnew\u51e0\u767e\u4e07\u4e2a\u8282\u70b9\u5c31\u80fd\u76f4\u63a5\u8d85\u65f6\u4e86\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_2","title":"\u94fe\u8868\u4e0e\u90bb\u63a5\u8868","text":"<p>\u4ec0\u4e48\u662f\u94fe\u8868\uff0c\u6bcf\u4e2a\u70b9\u5b58\u4e24\u4e2a\u503c\uff0c\u4e00\u4e2a\u662f\u81ea\u5df1\u7684\u503c\uff0c\u4e00\u4e2a\u6307\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9</p> <p>\u4e24\u79cd\u94fe\u8868\uff1a\u5355\u94fe\u8868\u3001\u53cc\u94fe\u8868</p> <p>\u5355\u94fe\u8868\u4e2d\u7528\u7684\u6700\u591a\u7684\u662f\u90bb\u63a5\u8868\uff0c\u90bb\u63a5\u8868\u5176\u5b9e\u662fn\u4e2a\u94fe\u8868\uff0c\u6700\u4e3b\u8981\u7684\u5e94\u7528\uff1a\u5b58\u50a8\u56fe\u548c\u6811</p> <p>\u53cc\u94fe\u8868\u7684\u4f5c\u7528\u662f\u4f18\u5316\u67d0\u4e9b\u95ee\u9898</p> <p>\u6bcf\u4e2a\u70b9\u90fd\u4f1a\u5b58\u4e00\u4e2a\u503c\u548c\u4e00\u4e2anext\u6307\u9488</p> <p>\u7528\u6570\u7ec4\u6765\u6a21\u62df\u9700\u8981\u5148\u5b9a\u4e49 e[N], ne[N]</p> <p>\u7528\u4e0b\u6807\u5173\u8054\u8d77\u6765</p> <p>\u7a7a\u8282\u70b9\u7528-1\u8868\u793a</p> <p>0\u53f7\u70b9\u7684\u6307\u9488\u662fe[0] = val, ne[0] = 1</p> <p>\u94fe\u5b50\u4e00\u6837\uff0c\u53ef\u4ee5\u6cbf\u7740\u94fe\u5b50\u904d\u5386\u6574\u4e2a\u6570\u7ec4</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_3","title":"\u5355\u94fe\u8868","text":"<p>\u5355\u94fe\u8868\u6a21\u677f\uff1a</p> <pre><code>// head\u5b58\u50a8\u94fe\u8868\u5934\uff08\u5934\u8282\u70b9\u7684\u4e0b\u6807\uff09\uff0ce[]\u5b58\u50a8\u8282\u70b9\u7684\u503c\uff0cne[]\u5b58\u50a8\u8282\u70b9\u7684next\u6307\u9488\uff0cidx\u8868\u793a\u5f53\u524d\u7528\u5230\u4e86\u54ea\u4e2a\u8282\u70b9\uff08\u5b58\u50a8\u5f53\u524d\u5df2\u7ecf\u7528\u5230\u4e86\u4ec0\u4e48\u5730\u5740\uff09\nint head, e[N], ne[N], idx;\n\n// \u521d\u59cb\u5316\nvoid init()\n{\nhead = -1; // \u6307\u5411\u961f\u5c3e\nidx = 0; // \u6bcf\u4e2a\u70b9\u90fd\u6ca1\u6709\u88ab\u5206\u914d\n}\n\n// \u5728\u94fe\u8868\u5934\u63d2\u5165\u4e00\u4e2a\u6570a \nvoid insert(int a)\n{\ne[idx] = a;\nne[idx] = head;\nhead = idx;\nidx++;\n}\n// \u5c06\u4e00\u4e2a\u70b9\u63d2\u5230\u4e0b\u6807\u662fk\u7684\u70b9\u7684\u540e\u9762\nvoid insert(int k, int a) {\ne[idx] = a;\nne[idx] = ne[k]; // \u6307\u5411k\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\nne[k] = idx;\nidx++;\n}\n// \u5c06\u5934\u7ed3\u70b9\u5220\u9664\uff0c\u9700\u8981\u4fdd\u8bc1\u5934\u7ed3\u70b9\u5b58\u5728\nvoid remove()\n{\nhead = ne[head];\n}\n\n// \u5c06\u4e0b\u6807\u662fk\u7684\u70b9\u7684\u540e\u9762\u7684\u70b9\u5220\u6389\n// \u53ea\u9700\u8981\u5c06\u6307\u9488\u6307\u5411\u4e0b\u4e0b\u4e2a\u70b9\u5373\u53ef\uff0c\u5176\u4ed6\u4e0d\u7528\u53d8\nvoid remove(int k) {\nne[k] = ne[ne[k]];\n}\n</code></pre> <p>\u6570\u7ec4\u7684\u597d\u5904\u5c31\u662f\u5feb\uff0c\u6bd4\u52a8\u6001\u94fe\u8868\u5feb\u5f88\u591a\uff0cC++\u7528new\u5de8\u6162\uff0c\u7b97\u6cd5\u9898\u7684\u65f6\u5019\u4f1a\u8d85\u65f6</p> <p>\u6570\u7ec4\u6a21\u62df\u94fe\u8868\u88ab\u53eb\u505a\u9759\u6001\u94fe\u8868</p> <p>\u5355\u94fe\u8868\u53ea\u80fd\u77e5\u9053\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u4e1c\u897f\uff0c\u4e0d\u80fd\u77e5\u9053\u524d\u4e00\u4e2a\u8282\u70b9\uff0c\u8981\u77e5\u9053\u7684\u8bdd\u53ea\u80fd\u4ecehead\u5f00\u59cb\u904d\u5386</p> <p>\u7b97\u6cd5\u9898\u4e0d\u7528\u8003\u8651\u5185\u5b58\u6cc4\u6f0f\u7684\u95ee\u9898\uff0c\u5220\u9664\u5b9e\u9645\u4e0a\u4f1a\u6d6a\u8d39\u4e00\u4e2a\u6570\u7ec4\u7a7a\u95f4\uff0c\u4f46\u662f\u4e0d\u7528\u8003\u8651</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#826","title":"826. \u5355\u94fe\u8868","text":"<p>\u5220\u9664\u7b2ck\u4e2a\u63d2\u5165\u7684\u6570\u540e\u9762\u7684\u6570\uff0c\u5c31\u662f\u5220\u9664\u4e0b\u6807\u662fk-1\u7684\u70b9</p> <p>\u5728\u7b2ck\u4e2a\u63d2\u5165\u7684\u6570\u540e\u63d2\u5165\u4e00\u4e2a\u6570\u5c31\u662f\uff0c\u5728\u4e0b\u6807\u662fk-1\u7684\u70b9\u540e\u9762\u63d2\u5165\u4e00\u4e2a\u6570</p> <p>\u6bd4\u5982<code>I 1 1</code> \u5176\u5b9e\u5c31\u662f\u5728\u5c0f\u8868\u793a0\u7684\u70b9\u540e\u9762\u63d2\u5165\u4e00\u4e2a\u6570\u503c1</p> <p>\u5220\u9664\u5934\u8282\u70b9\uff0c\u5c31\u662f\u628a\u6574\u6761\u94fe\u8868\u5220\u9664\u4e86</p> <pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nconst int N = 100010;\n\n// head \u8868\u793a\u5934\u7ed3\u70b9\u7684\u4e0b\u6807\n// e[i] \u8868\u793a\u8282\u70b9i\u7684\u503c\n// ne[i] \u8868\u793a\u8282\u70b9i\u7684next\u6307\u9488\u662f\u591a\u5c11\n// idx\u5b58\u50a8\u5f53\u524d\u5df2\u7ecf\u7528\u5230\u4e86\u54ea\u4e2a\u5730\u5740\uff0c\u76f8\u5f53\u4e8e\u6307\u9488\nint head, e[N], ne[N], idx;\n\n// \u521d\u59cb\u5316\nvoid init () {\nhead = -1;\nidx = 0;\n}\n\n// \u5c06x\u63d2\u5230\u5934\u8282\u70b9\nvoid add_to_head (int x) {\ne[idx] = x;\nne[idx] = head;\nhead = idx;\nidx++;\n}\n\n// \u5c06\u4e00\u4e2a\u70b9\u63d2\u5230\u4e0b\u6807\u662fk\u7684\u70b9\u7684\u540e\u9762\nvoid add (int k, int x) {\ne[idx] = x;\nne[idx] = ne[k];\nne[k] = idx;\nidx++;\n}\n\n// \u5220\u6389\u4e0b\u6807\u662fk\u7684\u70b9\u540e\u9762\u7684\u70b9\nvoid remove (int k) {\nne[k] = ne[ne[k]];\n}\n\nint main () {\nint m;\ncin &gt;&gt; m;\n\ninit();\n\nwhile(m--) {\nint k, x;\nchar op;\n\ncin &gt;&gt; op;\nif (op == 'H') {\ncin &gt;&gt; x;\nadd_to_head(x);\n} else if (op == 'D') {\ncin &gt;&gt; k;\nif (!k) head = ne[head];\nremove(k - 1);\n} else {\ncin &gt;&gt; k &gt;&gt; x;\nadd(k - 1, x);\n}\n}\n\nfor (int i = head; i != -1; i = ne[i]) {\ncout &lt;&lt; e[i] &lt;&lt; ' ';\n}\n\ncout &lt;&lt; endl;\nreturn 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_4","title":"\u53cc\u94fe\u8868","text":"<p>\u53cc\u94fe\u8868\u5c31\u662f\u6bcf\u4e2a\u8282\u70b9\u6709\u4e24\u4e2a\u6307\u9488\uff0c\u4e00\u4e2a\u6307\u5411\u524d\u9762\uff0c\u4e00\u4e2a\u6307\u5411\u540e\u9762</p> <p>\u5728\u8fd9\u91cc\u5c31\u4e0d\u9700\u8981head\u4e86\uff0c\u8ba90\u53f7\u70b9\u6210\u4e3ahead\uff0c\u800c1\u53f7\u70b9\u5c31\u662f\u6211\u4eec\u7684tail</p> <p>\u53cc\u94fe\u8868\u6a21\u677f\uff1a</p> <pre><code>// e[]\u8868\u793a\u8282\u70b9\u7684\u503c\uff0cl[]\u8868\u793a\u8282\u70b9\u7684\u5de6\u6307\u9488\uff0cr[]\u8868\u793a\u8282\u70b9\u7684\u53f3\u6307\u9488\uff0cidx\u8868\u793a\u5f53\u524d\u7528\u5230\u4e86\u54ea\u4e2a\u8282\u70b9\nint e[N], l[N], r[N], idx;\n\n// \u521d\u59cb\u5316\nvoid init()\n{\n//0\u662f\u5de6\u7aef\u70b9\uff0c1\u662f\u53f3\u7aef\u70b9\nr[0] = 1, l[1] = 0;\nidx = 2;\n}\n\n// \u5728\u8282\u70b9a\u7684\u53f3\u8fb9\u63d2\u5165\u4e00\u4e2a\u6570x\nvoid insert(int a, int x)\n{\ne[idx] = x;\nl[idx] = a, r[idx] = r[a];\nl[r[a]] = idx, r[a] = idx ++ ;\n}\n\n// \u5220\u9664\u8282\u70b9a\nvoid remove(int a)\n{\nl[r[a]] = l[a];\nr[l[a]] = r[a];\n}\n</code></pre> <p>\u5982\u679c\u60f3\u8981\u4f7f\u7528\u7ed3\u6784\u4f53\uff0c\u4e5f\u5f88\u7b80\u5355\uff1a</p> <pre><code>struct Node {\nint e, l, r;\n} nodes[N];\n</code></pre> <p>\u90bb\u63a5\u8868\u5c31\u662f\u4e00\u5806\u5355\u94fe\u8868</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#827","title":"827.\u53cc\u94fe\u8868","text":"<p>\u53cc\u94fe\u8868head\u662f0\uff0c tail\u662f1</p> <p>\u53cc\u94fe\u8868\u5f80\u5f80\u4e0d\u9700\u8981\u5de6\u7aef\u70b9\u548c\u53f3\u7aef\u70b9\u7684\u503c</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_5","title":"\u5faa\u73af\u53cc\u94fe\u8868","text":"<p>\u5c31\u662f\u5934\u548c\u5c3e\u4e92\u76f8\u6307\u4e00\u4e0b\uff0c\u8fd9\u6837\u94fe\u8868\u5c31\u53d8\u6210\u4e00\u4e2a\u5708\u4e86</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_6","title":"\u6808","text":"<p>\u6808\u662f\u5148\u8fdb\u540e\u51fa\uff0c\u50cf\u4e00\u4e2a\u5355\u53e3\u7684\u7f50\u5b50\uff0c\u6240\u4ee5\u5148\u653e\u8fdb\u53bb\u7684\u540e\u62ff\u51fa\u6765</p> <p>\u961f\u5217\u662f\u5148\u8fdb\u5148\u51fa\uff0c\u50cf\u53cc\u53e3\u7684\u7f50\u5b50\uff0c\u4ece\u4e0b\u9762\u63a5\u7740</p> <p>\u6808\u6a21\u677f\u9898\uff1a</p> <pre><code>// tt\u8868\u793a\u6808\u9876, tail\nint stk[N], tt = 0;\n\n// \u5411\u6808\u9876\u63d2\u5165\u4e00\u4e2a\u6570\nstk[ ++ tt] = x;\n\n// \u4ece\u6808\u9876\u5f39\u51fa\u4e00\u4e2a\u6570\ntt -- ;\n\n// \u6808\u9876\u7684\u503c\nstk[tt];\n\n// \u5224\u65ad\u6808\u662f\u5426\u4e3a\u7a7a\uff0c\u5982\u679c tt &gt; 0\uff0c\u5219\u8868\u793a\u4e0d\u4e3a\u7a7a\nif (tt &gt; 0)\n{\n\n}\n\n// \u6808\u9876\u5143\u7d20\u5c31\u662f\nstk[tt];\n</code></pre> <p>\u8003\u9a8c\u7684\u662f\u8bb0\u5fc6\u529b\u548c\u6bc5\u529b\uff08\u81ea\u5236\u529b\uff09</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_7","title":"\u961f\u5217","text":"<ol> <li>\u666e\u901a\u961f\u5217\uff1a</li> </ol> <pre><code>// hh \u8868\u793a\u961f\u5934\uff0ctt\u8868\u793a\u961f\u5c3e\n// \u6808\u662f\u4ece0\u5f00\u59cb\uff0c\u961f\u5217\u662f\u4ece-1\u5f00\u59cb\n// hh\u548ctt\u4e4b\u95f4\u7684\u4e1c\u897f\u5c31\u662f\u6211\u4eec\u7684\u961f\u5217\nint q[N], hh = 0, tt = -1;\n\n// \u5411\u961f\u5c3e\u63d2\u5165\u4e00\u4e2a\u6570\nq[ ++ tt] = x;\n\n// \u4ece\u961f\u5934\u5f39\u51fa\u4e00\u4e2a\u6570\nhh ++ ;\n\n// \u961f\u5934\u7684\u503c\nq[hh];\n\n// \u5224\u65ad\u961f\u5217\u662f\u5426\u4e3a\u7a7a\uff0c\u5982\u679c hh &lt;= tt\uff0c\u5219\u8868\u793a\u4e0d\u4e3a\u7a7a\nif (hh &lt;= tt)\n{\n\n}\n</code></pre> <ol> <li>\u5faa\u73af\u961f\u5217\uff1a</li> </ol> <pre><code>// hh \u8868\u793a\u961f\u5934\uff0ctt\u8868\u793a\u961f\u5c3e\u7684\u540e\u4e00\u4e2a\u4f4d\u7f6e\nint q[N], hh = 0, tt = 0;\n\n// \u5411\u961f\u5c3e\u63d2\u5165\u4e00\u4e2a\u6570\nq[tt ++ ] = x;\nif (tt == N) tt = 0;\n\n// \u4ece\u961f\u5934\u5f39\u51fa\u4e00\u4e2a\u6570\nhh ++ ;\nif (hh == N) hh = 0;\n\n// \u961f\u5934\u7684\u503c\nq[hh];\n\n// \u5224\u65ad\u961f\u5217\u662f\u5426\u4e3a\u7a7a\uff0c\u5982\u679chh != tt\uff0c\u5219\u8868\u793a\u4e0d\u4e3a\u7a7a\nif (hh != tt)\n{\n\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_8","title":"\u5355\u8c03\u6808","text":"<p>\u975e\u5e38\u62bd\u8c61\uff0c\u4f46\u662f\u80fd\u7528\u7684\u9898\u578b\u975e\u5e38\u5c11</p> <p>\u5355\u8c03\u6808\u6a21\u677f\u9898\uff1a <pre><code>\u5e38\u89c1\u6a21\u578b\uff1a\u627e\u51fa\u6bcf\u4e2a\u6570\u5de6\u8fb9\u79bb\u5b83\u6700\u8fd1\u7684\u6bd4\u5b83\u5927/\u5c0f\u7684\u6570\nint tt = 0;\nfor (int i = 1; i &lt;= n; i ++ )\n{\nwhile (tt &amp;&amp; check(stk[tt], i)) tt -- ;\nstk[ ++ tt] = i;\n}\n</code></pre></p> <p>\u601d\u8def\u662f\uff1a\u5047\u8bbea3 &gt;= a4\uff0c\u90a3\u4e48\u5f53\u5faa\u73af\u5230a5\u4ee5\u540e\u7684\u503c\u7684\u8bdd\uff0ca3\u5305\u62eca3\u4e4b\u524d\u7684\u6570\u90fd\u662f\u6ca1\u6709\u7528\u7684\uff0c\u76f4\u63a5\u5220\u9664\u5373\u53ef</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#830","title":"830.\u5355\u8c03\u6808","text":"<p>\u601d\u80032\uff0c4\uff0c5\uff0c3\uff0c3</p> <p>tt = 1\u7684\u65f6\u5019\uff0cstk[tt]\u5b58\u50a8\u7684\u624d\u662f\u6570\u5217\u7684\u7b2c\u4e00\u4e2a\u503c\uff01</p> <p>stk[0] \u5b58\u50a8\u7684\u662f0</p> <p>\u5bf9\u4e8e3\uff0ctt\u5c31\u5f97\u4e0d\u65ad\u5f80\u524d\u627e\uff0c\u627e\u52302\u8fd9\u4e2a\u6570\uff0c\u5373tt = 1\u7684\u65f6\u5019\uff0c\u8fd9\u65f6\u5019\u8f93\u51fastk[1] \uff0c\u7136\u540e\u4f7f\u7684stk[2]\u53d8\u62103\u3002\u56e0\u4e3a\u5bf9\u4e8e4\u548c5\u6765\u8bf4\uff0c\u6709\u6bd4\u4ed6\u4eec\u5c0f\u76843\u5728\uff0c\u6bd4\u4e0d\u53ef\u80fd\u8f93\u51fa\u4ed6\u4eec\u4e24\u4e2a\u3002\u4f46\u662f2\u8fd8\u662f\u6709\u53ef\u80fd\u7684\u3002</p> <p>\u5bf9\u4e8e\u7b2c\u4e8c\u4e2a3\uff0c\u56e0\u4e3astk[2] \u4e5f\u7b49\u4e8e3\uff0c\u6240\u4ee5\u8f93\u51fa\u7684\u662fstk[tt =1] = 2</p> <p>\u8fd9\u6837\u505a\u7684\u597d\u5904\u662f\uff1a\u6808\u91cc\u9762\u5b58\u50a8\u7684\u6570\u662f\u5355\u8c03\u9012\u589e\u7684\uff0c\u800c\u4e14\u5bf9\u4e8e\u6bcf\u4e2a\u6570\u53ea\u4f1a\u8fdb\u6808\u4e00\u6b21+\u51fa\u6808\u4e00\u6b21\uff0c\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662fO(n)</p> <p>\u53e6\u5916cin\u548ccout\u6bd4printf\u548cscanf\u6162\u4e8610\u500d</p> <pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nconst int N = 100010;\n\nint n;\nint stk[N], tt;\n\nint main () {\ncin &gt;&gt; n;\nfor (int i = 0; i &lt; n; i++) {\nint x;\ncin &gt;&gt; x;\nwhile (tt &amp;&amp; stk[tt] &gt;= x) tt--;\nif (tt) cout &lt;&lt; stk[tt] &lt;&lt; ' ';\nelse cout &lt;&lt; -1 &lt;&lt; ' ';\n\nstk[++tt] = x;\n}\nreturn 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_9","title":"\u5355\u8c03\u961f\u5217","text":"<p>\u6700\u7ecf\u5178\u7684\u9898\u5c31\u662f\u6ed1\u52a8\u7a97\u53e3\u4e2d\u7684\u6700\u5927\u503c\u6216\u8005\u6700\u5c0f\u503c</p> <p>\u591a\u91cd\u80cc\u5305\u4e5f\u53ef\u4ee5\u7528\u5355\u8c03\u961f\u5217\u4f18\u5316</p> <p>\u5355\u8c03\u6808\u548c\u5355\u8c03\u961f\u5217\u90fd\u662f\u5148\u60f3\u66b4\u529b\u505a\u6cd5\uff0c\u7136\u540e\u627e\u5355\u8c03\u6027\uff0c\u8fdb\u884c\u4f18\u5316</p> <p>\u5355\u8c03\u961f\u5217\u6a21\u677f\uff1a</p> <pre><code>\u5e38\u89c1\u6a21\u578b\uff1a\u627e\u51fa\u6ed1\u52a8\u7a97\u53e3\u4e2d\u7684\u6700\u5927\u503c/\u6700\u5c0f\u503c\nint hh = 0, tt = -1;\nfor (int i = 0; i &lt; n; i ++ )\n{\nwhile (hh &lt;= tt &amp;&amp; check_out(q[hh])) hh ++ ;  // \u5224\u65ad\u961f\u5934\u662f\u5426\u6ed1\u51fa\u7a97\u53e3\nwhile (hh &lt;= tt &amp;&amp; check(q[tt], i)) tt -- ;\nq[ ++ tt] = i;\n}\n</code></pre> <p>\u7528\u961f\u5217\u6765\u7ef4\u62a4\u7a97\u53e3\uff0c\u6bcf\u6b21\u5411\u524d\u79fb\u52a8\u7684\u8bdd\uff0ctt\u90fd\u4f1a++\u6765\u8f93\u5165\u4e00\u4e2a\u6570\u5230\u961f\u5c3e\uff0chh\u90fd\u4f1a++\u5410\u51fa\u4e00\u4e2a\u6570</p> <p>\u53ea\u8981\u67d0\u4e2a\u6570  \u7684\u524d\u9762   \u6709\u6bd4\u4ed6\u5927\u7684\u6570\uff0c\u90a3\u4e48\u90a3\u4e2a\u6570\u4e0d\u4ec5\u4f1a\u6bd4\u4ed6\u5148\u88ab\u5f39\u51fa\uff0c\u800c\u4e14\u4e0d\u53ef\u80fd\u4f1a\u88ab\u8f93\u51fa</p> <p>\u901a\u8fc7\u5224\u65ad\u4f7f\u961f\u5217\u4e2d\u7684\u6570\u4e25\u683c\u5355\u8c03\u4e0a\u5347</p> <p>\u4e00\u4e2a\u4e25\u683c\u5355\u8c03\u4e0a\u5347\u7684\u961f\u5217\u53ea\u8981\u8f93\u51faq[hh] \u5373\u53ef</p> <p>\u8fd9\u91cc\u7684\u7684q[]\u91cc\u9762\u5b58\u7684\u662f\u4e0b\u6807</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#154","title":"154. \u6ed1\u52a8\u7a97\u53e3","text":"<pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nconst int N = 1000010;\n\nint n, k;\nint a[N], q[N];\n\nint main () {\nscanf(\"%d%d\", &amp;n, &amp;k);\n// a\u4e2d\u5b58\u7684\u662f\u6570\nfor (int i = 0; i &lt; n; i++) scanf(\"%d\", &amp;a[i]);\n//q\u4e2d\u5b58\u7684\u662f\u4e0b\u6807\nint hh = 0, tt = -1;\nfor (int i = 0; i &lt; n; i++) {\n// \u5148\u5224\u65ad\u961f\u5934\u662f\u5426\u5df2\u7ecf\u6ed1\u51fa\u7a97\u53e3\n// \u6bcf\u6b21\u961f\u5217\u91cc\u9762\u6700\u591a\u53ea\u6709\u4e00\u4e2a\u6570\u4e0d\u5728\u7a97\u53e3\u5185\uff0c\u6240\u4ee5\u4f7f\u7528if\uff0c\u800c\u4e0d\u662fwhile\nif (hh &lt;= tt &amp;&amp; i - k + 1 &gt; q[hh]) hh++;\nwhile(hh &lt;= tt &amp;&amp; a[q[tt]] &gt;= a[i]) tt--;\n// i\u6709\u53ef\u80fd\u662f\u6700\u5c0f\u503c\n// a[i]\u8db3\u591f\u5c0f\uff0c\u53ef\u80fd\u628a\u6574\u4e2a\u6570\u7ec4\u6e05\u7a7a\u4e86\n// \u6240\u4ee5\u8981\u5148\u6dfb\u52a0i\nq[++tt] = i;        if (i &gt;= k - 1) printf(\"%d \", a[q[hh]]);\n\n}\n\nputs(\"\");\n\n\nhh = 0, tt = -1;\nfor (int i = 0; i &lt; n; i++) {\n// \u5148\u5224\u65ad\u961f\u5934\u662f\u5426\u5df2\u7ecf\u6ed1\u51fa\u7a97\u53e3\n// \u6bcf\u6b21\u961f\u5217\u91cc\u9762\u6700\u591a\u53ea\u6709\u4e00\u4e2a\u6570\u4e0d\u5728\u7a97\u53e3\u5185\uff0c\u6240\u4ee5\u4f7f\u7528if\uff0c\u800c\u4e0d\u662fwhile\nif (hh &lt;= tt &amp;&amp; i - k + 1 &gt; q[hh]) hh++;\nwhile(hh &lt;= tt &amp;&amp; a[q[tt]] &lt;= a[i]) tt--;\n// i\u6709\u53ef\u80fd\u662f\u6700\u5c0f\u503c\nq[++tt] = i;        if (i &gt;= k - 1) printf(\"%d \", a[q[hh]]);\n\n}\n\nputs(\"\");\nreturn 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#kmp","title":"KMP","text":"<p>\u6ce8\u610f\u56fd\u5185\u7b97\u6cd5\u5708\u7684KMP\u4e0d\u662f\u771f\u6b63\u7684KMP\uff0c\u66f4\u591a\u7684\u662f\u7528KMP\u53bb\u5bfb\u627eborder</p> <p>KMP\u66b4\u529b\u505a\u6cd5\uff1a</p> <pre><code>for (int i = 1; i &lt;= n; i ++ )\n{\nbool flag = true;\nfor (int j = 1; j &lt;= m; j ++ )\n{\nif (s[i + j - 1] != p[j])\n{\nflag=false;\nbreak;\n}\n}\n}\n</code></pre> <p>KMP\u6a21\u677f\uff1a</p> <p>KMP\u4e60\u60ef\u4e0a\u4ece1\u5f00\u59cb</p> <p>next\u6570\u7ec4\u662f\u5bf9\u4e8e\u6a21\u5f0f\u4e32\u800c\u8a00\u7684\u3002P \u7684 next \u6570\u7ec4\u5b9a\u4e49\u4e3a\uff1anext[i] \u8868\u793a P[0] ~ P[i] \u8fd9\u4e00\u4e2a\u5b50\u4e32\uff0c\u4f7f\u5f97 \u524dk\u4e2a\u5b57\u7b26\u6070\u7b49\u4e8e\u540ek\u4e2a\u5b57\u7b26 \u7684\u6700\u5927\u7684k. \u7279\u522b\u5730\uff0ck\u4e0d\u80fd\u53d6i+1\uff08\u56e0\u4e3a\u8fd9\u4e2a\u5b50\u4e32\u4e00\u5171\u624d i+1 \u4e2a\u5b57\u7b26\uff0c\u81ea\u5df1\u80af\u5b9a\u4e0e\u81ea\u5df1\u76f8\u7b49\uff0c\u5c31\u6ca1\u6709\u610f\u4e49\u4e86\uff09\u3002</p> <pre><code>// s[]\u662f\u957f\u6587\u672c\uff0cp[]\u662f\u6a21\u5f0f\u4e32\uff0cn\u662fs\u7684\u957f\u5ea6\uff0cm\u662fp\u7684\u957f\u5ea6\n\u6c42\u6a21\u5f0f\u4e32\u7684Next\u6570\u7ec4\uff1a\n// j\u662f\u8ba1\u6570\uff0c\u8bb0\u7684\u662f\u5f53\u524d\u7f00\u5b57\u6bcd\u4e32\u548c\u540e\u7f00\u5b57\u6bcd\u4e32\u76f8\u540c\u65f6\uff0c\u6700\u5927\u7684\u5b57\u6bcd\u4e32\u957f\u5ea6\n// ne[i]\u5b58\u50a8\u7684\u662f\u524di\u4e2a\u5b57\u7b26\u4e32\u4e2d\u6700\u5927\u7684\uff08\u524d\u7f00\u548c\u540e\u7f00\u76f8\u540c\u7684\uff09\u957f\u5ea6\n\n// \u5bf9\u4e8e\u65b0\u7684ne[i]\u6765\u8bf4\uff0c\u5728\u6ca1\u6709\u66f4\u65b0j\u4e4b\u524d\uff0cj\u8fd8\u4ee3\u8868\u4e86ne[i - 1], \u4e0b\u9762while\u5224\u65ad\u4e2d\u7684j\u5c31\u662fne[i - 1]\u7684\u610f\u601d\n// (\u5982\u679c\u524dj\u4f4d\u6570\u76f8\u540c\uff0c\u6ce8\u610fp\u4e2d\u5b58\u50a8\u7684\u6570\u4e0b\u6807\u662f\u4ece1\u5f00\u59cb\u7684\uff0c\u6240\u4ee5\u5373p[j]\u548c\u8001p[i]\u76f8\u540c)\uff0c\u5982\u679c\u9700\u8981\u5224\u65ad\u7684\u65b0p[i]\u548cp[j + 1]\uff0c\u5982\u679c\u76f8\u540c\u7684\u8bdd\u5c31j++\n// \u5982\u679c\u4e0d\u76f8\u540c\u7684\u8bdd\uff0c\u5c31\u8981\u53bb\u627e\u51fap[0]\u5230p[j] \u4e2d\u7684\u6700\u5927\u524d\u7f00\u548c\u540e\u7f00\u76f8\u540c\u7684\u957f\u5ea6\uff0c\u6765\u8bd5\u8bd5\u662f\u5426\u53ef\u4ee5\u52a0\u5728\u5c0f\u5b57\u7b26\u4e32\u7684\u540e\u9762\n\n// \u5982\u679c\u60f3\u4e0d\u6e05\u695awhile\u5224\u65ad\u8fc7\u7a0b\uff0c\u53ef\u4ee5\u7528abcabdabcabc\u6765\u8fdb\u884c\u4e3e\u4f8b\n\n\nfor (int i = 2, j = 0; i &lt;= m; i ++ )\n{\nwhile (j &amp;&amp; p[i] != p[j + 1]) j = ne[j];\nif (p[i] == p[j + 1]) j ++ ;\nne[i] = j;\n}\n\n// \u5339\u914d\nfor (int i = 1, j = 0; i &lt;= n; i ++ )\n{\nwhile (j &amp;&amp; s[i] != p[j + 1]) j = ne[j];\nif (s[i] == p[j + 1]) j ++ ;\nif (j == m)\n{\nj = ne[j];\n// \u5339\u914d\u6210\u529f\u540e\u7684\u903b\u8f91\n}\n}\n</code></pre> <p>\u6ce8\u610f\u5728C++\u4e2d\u6570\u7ec4\u547d\u540d\u6210next\u6709\u53ef\u80fd\u4f1a\u62a5\u9519\uff0c\u6240\u4ee5\u4f7f\u7528ne[N] \u6bd4\u8f83\u4fdd\u9669\u4e00\u4e9b</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#trick","title":"\u5173\u4e8e\u5b57\u7b26\u6570\u7ec4\u8f93\u5165\u7684\u5c0ftrick","text":"<pre><code>char p[N];\ncin &gt;&gt; p + 1; // \u5408\u6cd5\uff0c\u56e0\u4e3a\u5728\u7ec8\u7aef\u8bfb\u5165\u7684\u5c31\u662f\u5b57\u7b26\n\nint p[N];\ncin &gt;&gt; p + 1; // \u4e0d\u5408\u6cd5\uff0c\u56e0\u4e3a\u5728\u7ec8\u7aef\u8bfb\u5165\u7684\u5c31\u662f\u5b57\u7b26\uff0cstd::basic_istream&lt;char&gt;\u548cint *\u7684\u7c7b\u578b\u4e0d\u5339\u914d\n</code></pre> <p>\u5b9e\u4f8b\uff1a</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n\nusing namespace std;\n//int n;\nchar p[3];\nchar s[4];\n\nint main () {\ncin &gt;&gt; p + 1 &gt;&gt; s + 2;\nfor (int i = 0; i &lt; 3; i++) cout &lt;&lt; i &lt;&lt; ' ' &lt;&lt; p[i] &lt;&lt; endl;\ncout &lt;&lt; \"---------\" &lt;&lt; endl;\nfor (int i= 0; i &lt; 4; i++) cout &lt;&lt; i &lt;&lt; ' ' &lt;&lt; s[i] &lt;&lt; endl;\nreturn 0;\n}\n</code></pre> <pre><code>// \u8f93\u5165\uff1a\n12\n12\n\n// \u8f93\u51fa\uff1a\n0\n1 1\n2 2\n---------\n0\n1\n2 1\n3 2\n</code></pre> <p>next\u6570\u7ec4\u662f\u5bf9\u4e8e\u6a21\u5f0f\u4e32\u800c\u8a00\u7684</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#831-kmp","title":"831. KMP","text":"<pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nconst int N = 100010, M = 1000010;\n\nchar p[N], s[M];\n\n// n\u662fpatter\u7684\u957f\u5ea6\uff0cm\u662fs\u7684\u957f\u5ea6\nint n, m; int ne[N];\n\nint main () {\ncin &gt;&gt; n &gt;&gt; p + 1 &gt;&gt; m &gt;&gt; s + 1; // \u6ce8\u610f\u90fd\u662f\u4ece1\u5f00\u59cb\u8fdb\u884c\u5b58\u50a8\n\n// \u5148\u5904\u7406pattern\u7684ne[]\u6570\u7ec4\nfor (int i = 2, j = 0; i &lt;= n; i++) { // \u6ce8\u610f\u8fd9\u91cc\u4e0d\u662f\u4ecei = 0\u5f00\u59cb\uff01\nwhile (j &amp;&amp; p[i] != p[j + 1]) j = ne[j];\nif (p[i] == p[j + 1]) j ++;\nne[i] = j;\n}\n\nfor (int i = 1, j = 0; i &lt;= m; i++) { // \u6ce8\u610f\u8fd9\u91cc\u4e0d\u662f\u4ecei = 0\u5f00\u59cb\uff01\nwhile (j &amp;&amp; s[i] != p[j + 1]) j = ne[j];\nif (s[i] == p[j + 1]) j++;\nif (j == n) {\nprintf(\"%d \", i - n); // \u8fd9\u9053\u9898\u8f93\u51fa\u7684\u4e0b\u6807\u662f\u4ece0\u5f00\u59cb\u7684\uff0c\u5c31\u4e0d\u7528+1\u4e86\nj = ne[j];\n}\n}\nreturn 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#trie","title":"Trie\u6811/\u5b57\u5178\u6811","text":"<p>\u975e\u5e38\u7b80\u5355\u7684\u6570\u636e\u7ed3\u6784</p> <p>\u7528\u6765\u9ad8\u6548\u5730\u5feb\u901f\u5b58\u50a8\u548c\u67e5\u627e\u5b57\u7b26\u4e32\u96c6\u5408\u7684\u6570\u636e\u7ed3\u6784</p> <p>\u652f\u6301\u4e24\u4e2a\u64cd\u4f5c</p> <p>\u957f\u5f97\u662f\u4e00\u4e2a\u5b57\u5178\u5730\u5f62\u5f0f\uff0c\u5b57\u6bcd\u5730\u7c7b\u578b\u4e00\u822c\u4e0d\u662f\u5f88\u591a</p> <p>\u5982\u4f55\u9ad8\u6548\u5730\u5b58\u50a8\u8fd9\u4e9b\u5b57\u7b26\u4e32</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_10","title":"\u5b58\u50a8","text":"<p>\u6709\u4e2a\u6839\u8282\u70b9\uff0croot</p> <p>\u4ece\u524d\u5f80\u540e\u904d\u5386\u6bcf\u4e2a\u5b57\u7b26\uff0c\u6bcf\u5230\u4e00\u4e2a\u5b57\u7b26\u5982\u679c\u6ca1\u6709\u8fd9\u4e2a\u8282\u70b9\u5c31\u521b\u5efa\u5b83</p> <p>\u7ed9\u6bcf\u4e32\u5b57\u7b26\u5730\u672b\u5c3e\u8282\u70b9\u6253\u4e2a\u6807\u8bb0\uff0c\u7528\u6765\u68c0\u7d22\u8fd9\u4e2a\u5355\u8bcd</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_11","title":"\u67e5\u627e","text":"<p>\u6cbf\u7740\u5404\u4e2a\u8282\u70b9\u4f9d\u6b21\u67e5\u627e\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u8def\u5f84\u90a3\u4e48\u5c31\u662f\u4e0d\u5b58\u5728\u7684\uff0c \u5982\u679c\u6ca1\u6709\u6807\u8bb0\u90a3\u4e48\u4e5f\u662f\u4e0d\u5b58\u5728\u8fd9\u4e2a\u5b57\u7b26\u4e32\u7684</p> <pre><code>son[N][26]\u4e00\u7ef4\u662f\u7ed3\u70b9\u603b\u6570\uff0c\u800c\u7ed3\u70b9\u548c\u7ed3\u70b9\u4e4b\u95f4\u7684\u5173\u7cfb\uff08\u8c01\u662f\u8c01\u513f\u5b50\uff09\u5b58\u5728\u7b2c\u4e8c\u4e2a\u7ef4\u5ea6\uff0c\u6bd4\u5982[0][1]=2, [0]\u8868\u793a\u6839\u8282\u70b9\uff0c[1]\u8868\u793a\u5b83\u6709\u4e00\u4e2a\u513f\u5b50\u2018b\u2019,\u8fd9\u4e2a\u513f\u5b50\u7684\u4e0b\u6807\u662f2\uff1b\u63a5\u7740\u5982\u679c\u6709\u4e00\u4e2a[2][2]=8 ; \u8bf4\u660e\u6839\u8282\u70b9\u7684\u513f\u5b50\u2018b\u2019\u4e5f\u6709\u4e00\u4e2a\u513f\u5b50\u2018c\u2019\uff0c\u8fd9\u4e2a\u5b59\u5b50\u7684\u4e0b\u6807\u5c31\u662f8\uff1b\u8fd9\u6837\u4f20\u9012\u4e0b\u53bb\uff0c\u5c31\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002\u968f\u4fbf\u7ed9\u4e00\u4e2a\u7ed3\u70b9][x][y], \u5e76\u4e0d\u80fd\u770b\u51fa\u5b83\u5728\u7b2c\u51e0\u5c42\uff0c\u53ea\u80fd\u77e5\u9053\uff0c\u5b83\u7684\u513f\u5b50\u662f\u8c01\u3002\n</code></pre> <pre><code>\u5173\u4e8e\u7406\u89e3int son[N][26] \u8fd9\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u7684\u5fc3\u5f97\n\nTire\u6811\u672c\u8d28\u4e0a\u4e00\u4e2a\u591a\u53c9\u6811\uff0c\u6700\u591a\u53ef\u4ee5\u5206\u591a\u5c11\u53c9\u5462\uff1f\u56e0\u4e3a\u6b64\u9898\u5b58\u7684\u90fd\u662f\u5c0f\u5199\u5b57\u6bcd\uff0c\u6240\u4ee5\u662f26\u53c9\uff1b\n\n\u8fd9\u91cc\u5c31\u89e3\u91ca\u4e86son\u8fd9\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u7684\u7b2c\u4e8c\u7ef4\u7684\u542b\u4e49\uff0c\u5c31\u662f\u4ed6\u6700\u591a\u670926\u4e2a\u5b69\u5b50\uff0c\u90a3\u4e48\u4ed6\u662f\u8c01\u5462\uff0c\u4ed6\u5f53\u7136\u662f\u7ed3\u70b9\u4e86\uff0c\u90a3\u7ed3\u70b9\u4e4b\u95f4\u600e\u4e48\u533a\u5206\uff0c\u6216\u8005\u8fd9\u4e9b\u5b69\u5b50\u7684\u7238\u7238\u53eb\u5565\uff0c\u7238\u7238\u4eec\u7528\u4e0b\u6807\u6765\u533a\u522b\uff0c\u6240\u4ee5\u7b2c\u4e00\u7ef4\u5c31\u662f\u7238\u7238\u4eec\u7684id\uff0cson[0][1]\u542b\u4e49\u5c31\u662f0\u53f7\u7238\u7238\u6709\u4e2a\u513f\u5b50b \uff0c\u90a3son[0][1] = 2\uff0c\u5c31\u662f0\u53f7\u7238\u7238\u6709\u4e2a\u513f\u5b50b\uff0c\u513f\u5b50\u7684id\u662f2\uff1b \u8fd9\u4e9bid\u5c31\u662f\u7531idx` \u6765\u8d4b\u503c\u7684\uff1b\n\nidx\u53ef\u4ee5\u7406\u89e3\u4e3a\u8ba1\u5212\u751f\u80b2\u7684\u7ba1\u7406\u5c40\u7684\u7ed9\u4e0a\u6237\u53e3\u7684\uff0c\u751f\u4e00\u4e2a\u5b69\u5b50\uff0c\u7ed9\u5b69\u5b50\u4e0a\u8eab\u4efd\u8bc1\uff0c\u8bc1\u4ef6\u4e0aID \u4e3a++idx \uff0c\u800c\u5b69\u5b50\u53eb\u5565\uff0c\u5176\u5b9e\u5c31\u662f26\u4e2a\u5c0f\u5199\u5b57\u6bcd\u4e2d\u7684\u5176\u4e2d\u4e00\u4e2a\u4e86\uff1b\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u7ed3\u70b9\u800c\u8a00\uff0c\u53ef\u4ee5\u77e5\u9053\u4ed6\u6709\u6ca1\u6709\u8fd9\u4e2a\u5b69\u5b50\uff0c\u6709\u7684\u8bdd\u53eb\u5565\uff0c\u5728\u54ea\u91cc\uff1b\n\n\u5bf9\u4e8e\u67e5\u8be2\uff0c\u4ece\u6839\u8282\u70b9\u4e00\u8def\u67e5\u4e0b\u6765\uff0c\u5c31\u53ef\u4ee5\u627e\u5230\u67d0\u4e2a\u5b57\u7b26\u4e32\u5728\u4e0d\u5728\uff1b\n\n\u5bf9\u4e8e\u63d2\u5165\u5b57\u7b26\u4e32\uff0c\u4e5f\u662f\u4e00\u8def\u4e0b\u6765\uff0c\u770b\u6709\u6ca1\u6709\u8fd9\u4e2a\u513f\u5b50\uff0c\u6ca1\u6709\u4e86\u7ed9\u4f60\u751f\u4e2a\u513f\u5b50\uff0c\u6709\u4e86\u7ee7\u7eed\u7ed9\u4e0b\u9762\u627e\uff0c\u6240\u4ee5\u53ea\u63d2\u5165\u8be5\u5b57\u7b26\u4e32\u4e2d\u539f\u6765\u4e0d\u5b58\u5728\u7684\u5b57\u7b26\u5373\u53ef\uff1b \u4e5f\u5c31\u662f\u5229\u7528\u4e86\u516c\u5171\u524d\u7f00\u6765\u964d\u4f4e\u67e5\u8be2\u65f6\u95f4\u7684\u5f00\u9500\u4ee5\u8fbe\u5230\u63d0\u9ad8\u6548\u7387\u7684\u76ee\u7684;\n\n\u201cTrie\u8fd9\u4e2a\u540d\u5b57\u53d6\u81ea\u201cretrieval\u201d\uff0c\u68c0\u7d22\uff0c\u56e0\u4e3aTrie\u53ef\u4ee5\u53ea\u7528\u4e00\u4e2a\u524d\u7f00\u4fbf\u53ef\u4ee5\u5728\u4e00\u90e8\u5b57\u5178\u4e2d\u627e\u5230\u60f3\u8981\u7684\u5355\u8bcd\u3002\u201d\n</code></pre> <p>Trie\u6a21\u677f\uff1a</p> <pre><code>int son[N][26], cnt[N], idx;\n// 0\u53f7\u70b9\u65e2\u662f\u6839\u8282\u70b9\uff0c\u53c8\u662f\u7a7a\u8282\u70b9\n// son[][]\u5b58\u50a8\u6811\u4e2d\u6bcf\u4e2a\u8282\u70b9\u7684\u5b50\u8282\u70b9\n// cnt[]\u5b58\u50a8\u4ee5\u6bcf\u4e2a\u8282\u70b9\u7ed3\u5c3e\u7684\u5355\u8bcd\u6570\u91cf\n\n// \u63d2\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32\nvoid insert(char *str)\n{\nint p = 0;\nfor (int i = 0; str[i]; i ++ )\n{\nint u = str[i] - 'a';\nif (!son[p][u]) son[p][u] = ++ idx;\np = son[p][u];\n}\ncnt[p] ++ ;\n}\n\n// \u67e5\u8be2\u5b57\u7b26\u4e32\u51fa\u73b0\u7684\u6b21\u6570\nint query(char *str)\n{\nint p = 0;\nfor (int i = 0; str[i]; i ++ )\n{\nint u = str[i] - 'a';\nif (!son[p][u]) return 0;\np = son[p][u];\n}\nreturn cnt[p];\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#835-trie","title":"835. Trie\u5b57\u7b26\u4e32\u7edf\u8ba1","text":"<pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nconst int N = 100010;\nchar str[N];\n\n// \u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\u6700\u591a\u53ea\u4f1a\u5411\u5916\u8fde26\u6761\u8fb9\n// cnt\u5b58\u50a8\u7684\u662f\u4ee5\u5f53\u524d\u8fd9\u4e2a\u70b9\u7ed3\u5c3e\u7684\u4e2a\u6570\u6709\u591a\u5c11\u4e2a\n// idx\u5f53\u524d\u7528\u5230\u54ea\u4e2a\u4e0b\u6807\n//\u4e0b\u6807\u662f0\uff0c \u65e2\u662f\u6839\u8282\u70b9\uff0c\u53c8\u662f\u7a7a\u8282\u70b9\nint son[N][26], cnt[N], idx;\n\nvoid insert(char * str) {\nint p = 0;\nfor (int i = 0; str[i]; i++) {\nint u = str[i] - 'a';\nif (!son[p][u]) son[p][u] = ++idx;\np = son[p][u];\n}\ncnt[p] ++;\n}\n\nint query(char str[]) {\nint p = 0;\nfor (int i = 0; str[i]; i++) {\nint u = str[i] - 'a';\nif (!son[p][u]) return 0;\np = son[p][u];\n}\nreturn cnt[p];\n}\n\n\nint main () {\nint n;\nscanf(\"%d\", &amp;n);\nwhile(n --) {\nchar op[2];\nscanf(\"%s%s\", op, str);\nif (op[0] == 'I') insert(str);\nelse printf(\"%d\\n\", query(str));\n}\nreturn 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_12","title":"\u5e76\u67e5\u96c6","text":"<p>\u5e38\u7528\u7b97\u6cd5</p> <p>\u4ee3\u7801\u5f88\u77ed\uff0c\u4f46\u662f\u601d\u8def\u7cbe\u5de7\uff0c\u9762\u8bd5\u975e\u5e38\u559c\u6b22\u51fa</p> <p>\u5e76\u67e5\u96c6\u4f5c\u7528\uff1a\uff08\u8fd1\u4e4eO(1)\uff09</p> <ol> <li>\u5feb\u901f\u5c06\u4e24\u4e2a\u96c6\u5408\u5408\u5e76</li> <li>\u5feb\u901f\u8be2\u95ee\u4e24\u4e2a\u5143\u7d20\u662f\u5426\u5728\u4e00\u4e2a\u96c6\u5408\u5f53\u4e2d</li> </ol> <p>\u66b4\u529b\u64cd\u4f5c\u975e\u5e38\u8017\u65f6</p> <p>\u57fa\u672c\u601d\u60f3\u548c\u539f\u7406\uff1a\u7528\u6811\u7684\u5f62\u5f0f\u6765\u7ef4\u62a4\u6240\u6709\u7684\u96c6\u5408\uff0c\u6bcf\u4e2a\u96c6\u5408\u7528\u4e00\u68f5\u6811\u6765\u8868\u793a</p> <p>\u6bcf\u4e2a\u96c6\u5408\u7684\u7f16\u53f7\u5c31\u662f\u6839\u8282\u70b9\u7684\u7f16\u53f7\uff0c\u6811\u6839\u7684\u7f16\u53f7\u5c31\u662f\u6574\u4e2a\u96c6\u5408\u7684\u7f16\u53f7</p> <p>\u5bf9\u6bcf\u4e2a\u70b9\u90fd\u5b58\u50a8\u5b83\u7684\u7236\u8282\u70b9\u662f\u8c01\uff0cp[x]\u6765\u8868\u793ax\u7684\u7236\u8282\u70b9</p> <p>\u95ee\u98981\uff1a\u5982\u4f55\u5224\u65ad\u6811\u6839\uff1aif(p[x] == x) \u9664\u4e86\u6839\u8282\u70b9\u4e4b\u5916\u90fd\u4e0d\u60f3\u7b49</p> <p>\u95ee\u98982\uff1a \u5982\u4f55\u6c42x\u7684\u96c6\u5408\u7f16\u53f7\uff1awhile(p[x] != x) x = p[x]; \u8fd9\u4e00\u6b65\u65f6\u95f4\u590d\u6742\u8bfb\u8fd8\u633a\u9ad8\u7684\uff0c\u9700\u8981\u4f18\u5316</p> <p>\u95ee\u98983\uff1a\u5982\u4f55\u5408\u5e76\u4e24\u4e2a\u96c6\u5408\uff1a\u5c06\u5176\u4e2d\u4e00\u4e2a\u7684\u6839\u8282\u70b9\u53d8\u6210\u53e6\u5916\u4e00\u4e2a\u96c6\u5408\u6839\u8282\u70b9\u7684\u7236\u4eb2\u5373\u53ef\u3002p[x]\u662fx\u7684\u96c6\u5408\u7f16\u53f7\uff0cp[y]\u662fy\u7684\u96c6\u5408\u7f16\u53f7\uff0cp[x] = y\u5373\u53ef</p> <p>\u5e76\u67e5\u96c6\u7684\u4f18\u5316\uff08\u5e76\u67e5\u96c6\u8def\u5f84\u538b\u7f29\u7b97\u6cd5\uff09\uff1a\u5f53\u627e\u5230\u7956\u5b97\u8282\u70b9\u7684\u65f6\u5019\uff0c\u5c06\u6240\u6709\u7684\u8def\u5f84\u70b9\u90fd\u76f4\u63a5\u6307\u5411\u7956\u5b97\u8282\u70b9\uff0c\u4f18\u5316\u4e4b\u540e\u5dee\u4e0d\u591a\u662fO(1)\u7684\u65f6\u95f4\u590d\u6742\u5ea6</p> <p>\u5e76\u67e5\u96c6\u7ecf\u5e38\u9700\u8981\u7ef4\u62a4\u989d\u5916\u4fe1\u606f</p> <p>\u5e76\u67e5\u96c6\u6a21\u677f\uff1a</p> <pre><code>(1)\u6734\u7d20\u5e76\u67e5\u96c6\uff1a\n\nint p[N]; //\u5b58\u50a8\u6bcf\u4e2a\u70b9\u7684\u7956\u5b97\u8282\u70b9\n\n// \u8fd4\u56dex\u7684\u7956\u5b97\u8282\u70b9\nint find(int x)\n{\nif (p[x] != x) p[x] = find(p[x]); // \u9012\u5f52\u5728\u56de\u6eaf\u7684\u65f6\u5019\u4f1a\u4f7f\u8def\u5f84\u4e0a\u6240\u6709\u7684\u70b9\u90fd\u6307\u5411\u7956\u5b97\u8282\u70b9\uff0c\u4ece\u800c\u5b9e\u73b0\u8def\u5f84\u538b\u7f29\u7b97\u6cd5\nreturn p[x];\n}\n\n// \u521d\u59cb\u5316\uff0c\u5047\u5b9a\u8282\u70b9\u7f16\u53f7\u662f1~n\nfor (int i = 1; i &lt;= n; i ++ ) p[i] = i;\n\n// \u5408\u5e76a\u548cb\u6240\u5728\u7684\u4e24\u4e2a\u96c6\u5408\uff1a\np[find(a)] = find(b);\n\n\n(2)\u7ef4\u62a4size\u7684\u5e76\u67e5\u96c6\uff1a\n\nint p[N], size[N];\n//p[]\u5b58\u50a8\u6bcf\u4e2a\u70b9\u7684\u7956\u5b97\u8282\u70b9, size[]\u53ea\u6709\u7956\u5b97\u8282\u70b9\u7684\u6709\u610f\u4e49\uff0c\u8868\u793a\u7956\u5b97\u8282\u70b9\u6240\u5728\u96c6\u5408\u4e2d\u7684\u70b9\u7684\u6570\u91cf\n\n// \u8fd4\u56dex\u7684\u7956\u5b97\u8282\u70b9\nint find(int x)\n{\nif (p[x] != x) p[x] = find(p[x]);\nreturn p[x];\n}\n\n// \u521d\u59cb\u5316\uff0c\u5047\u5b9a\u8282\u70b9\u7f16\u53f7\u662f1~n\nfor (int i = 1; i &lt;= n; i ++ )\n{\np[i] = i;\nsize[i] = 1;\n}\n\n// \u5408\u5e76a\u548cb\u6240\u5728\u7684\u4e24\u4e2a\u96c6\u5408\uff1a\nsize[find(b)] += size[find(a)];\np[find(a)] = find(b);\n\n\n(3)\u7ef4\u62a4\u5230\u7956\u5b97\u8282\u70b9\u8ddd\u79bb\u7684\u5e76\u67e5\u96c6\uff1a\n\nint p[N], d[N];\n//p[]\u5b58\u50a8\u6bcf\u4e2a\u70b9\u7684\u7956\u5b97\u8282\u70b9, d[x]\u5b58\u50a8x\u5230p[x]\u7684\u8ddd\u79bb\n\n// \u8fd4\u56dex\u7684\u7956\u5b97\u8282\u70b9\nint find(int x)\n{\nif (p[x] != x)\n{\nint u = find(p[x]);\nd[x] += d[p[x]];\np[x] = u;\n}\nreturn p[x];\n}\n\n// \u521d\u59cb\u5316\uff0c\u5047\u5b9a\u8282\u70b9\u7f16\u53f7\u662f1~n\nfor (int i = 1; i &lt;= n; i ++ )\n{\np[i] = i;\nd[i] = 0;\n}\n\n// \u5408\u5e76a\u548cb\u6240\u5728\u7684\u4e24\u4e2a\u96c6\u5408\uff1a\np[find(a)] = find(b);\nd[find(a)] = distance; // \u6839\u636e\u5177\u4f53\u95ee\u9898\uff0c\u521d\u59cb\u5316find(a)\u7684\u504f\u79fb\u91cf\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#836","title":"836.\u5408\u5e76\u96c6\u5408","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nconst int N = 100010;\nint p[N];\nint n, m;\n\n//\u5e76\u67e5\u96c6\u4e2d\u6700\u6838\u5fc3\u7684\u64cd\u4f5c\nint find(int x) {\n// \u8fd4\u56dex\u6240\u5728\u96c6\u5408\u7684\u7f16\u53f7\uff08\u7956\u5b97\u8282\u70b9\uff09 + \u52a0\u4e0a\u8def\u5f84\u538b\u7f29\u7b97\u6cd5\nif (p[x] != x) p[x] = find(p[x]);\nreturn p[x];\n}\n\nint main () {\n// \u56e0\u4e3a\u6bcf\u4e2a\u6570\u90fd\u662f\u4e00\u4e2a\u96c6\u5408\uff0c\u6240\u4ee5\u5148\u521d\u59cb\u5316\nscanf(\"%d%d\", &amp;n, &amp;m);\nfor (int i = 1; i &lt;= n; i ++) p[i] = i;\n\nwhile(m --) {\nchar op[2];\nint a, b;\nscanf(\"%s%d%d\", op, &amp;a, &amp;b);\n\nif (op[0] == 'M') p[find(a)] = find(b);\nelse {\nif (find(a) == find(b)) puts(\"Yes\");\nelse puts(\"No\");\n}\n}\nreturn 0;\n}\n</code></pre> <p>\u5728\u56fe\u4e2d</p> <p>\u80fd\u4ecea\u8d70\u5230b\u53c8\u80fd\u4eceb\u8d70\u5230a\uff0c\u90a3\u4ed6\u4eec\u5c31\u5728\u4e00\u4e2a\u8fde\u901a\u5757\u91cc\u9762\u7684</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#837","title":"837. \u8fde\u901a\u5757\u4e2d\u70b9\u7684\u6570\u91cf","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nconst int N = 100010;\n//\u53ea\u4fdd\u8bc1\u6839\u8282\u70b9\u7684size\u6709\u610f\u4e49\nint p[N];\nint Size[N];\nint n, m;\n\n//\u5e76\u67e5\u96c6\u4e2d\u6700\u6838\u5fc3\u7684\u64cd\u4f5c\nint find(int x) {\n// \u8fd4\u56dex\u6240\u5728\u96c6\u5408\u7684\u7f16\u53f7\uff08\u7956\u5b97\u8282\u70b9\uff09 + \u52a0\u4e0a\u8def\u5f84\u538b\u7f29\u7b97\u6cd5\nif (p[x] != x) p[x] = find(p[x]);\nreturn p[x];\n}\n\nint main () {\n// \u56e0\u4e3a\u6bcf\u4e2a\u6570\u90fd\u662f\u4e00\u4e2a\u96c6\u5408\uff0c\u6240\u4ee5\u5148\u521d\u59cb\u5316\nscanf(\"%d%d\", &amp;n, &amp;m);\nfor (int i = 1; i &lt;= n; i ++) {\np[i] = i;\nSize[i] = 1;\n}\n\nwhile(m --) {\nchar op[5];\nint a, b;\nscanf(\"%s\", op);\n\nif (op[0] == 'C') {\nscanf(\"%d%d\", &amp;a, &amp;b);\n\n// \u7279\u5224\u4e00\u4e0bab\u662f\u5426\u5728\u540c\u4e00\u4e2a\u96c6\u5408\u4e2d\uff0c\u5982\u679c\u662f\u7684\u8bdd\u5c31\u4e0d\u7528\u52a0\u4e86\nif (find(a) == find(b)) continue;\n// \u53ea\u9700\u8981\u7ef4\u62a4\u6839\u8282\u70b9\u7684size\nSize[find(b)] += Size[find(a)];\np[find(a)] = find(b);\n}\nelse if (op[1] == '1') {\nscanf(\"%d%d\", &amp;a, &amp;b);\nif (find(a) == find(b)) puts(\"Yes\");\nelse puts(\"No\");\n} else {\nscanf(\"%d\", &amp;a);\nprintf(\"%d\\n\", Size[find(a)]);\n}\n}\nreturn 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#stl","title":"\u5806\uff08\u624b\u5199\u5806\u4e0d\u662fSTL\uff09","text":"<p>\u5982\u4f55\u624b\u5199\u4e00\u4e2a\u5806\uff1a(\u4e0b\u6807\u662f\u4ece1\u5f00\u59cb\u7684\uff0c\u5982\u679c\u662f\u4ece0\u5f00\u59cb\u7684\u8bdd\uff0c0\u7684\u5de6\u513f\u5b50\u5c31\u662f0\u4e86\uff0c\u4e0d\u592a\u65b9\u4fbf)</p> <ol> <li>\u63d2\u5165\u4e00\u4e2a\u6570  <code>heap[++ size] = x;up(size); \u5806\u7684\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u63d2\u5165x\u7136\u540e\u4e0d\u65ad\u4e0a\u79fb</code></li> <li>\u6c42\u6574\u4e2a\u96c6\u5408\u5f53\u4e2d\u7684\u6700\u5c0f\u503c <code>heap[1];</code></li> <li>\u5220\u9664\u6700\u5c0f\u503c <code>heap[1] = heap[size]; size--; down(1);\u7528\u6574\u4e2a\u5806\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u6765\u8986\u76d6\u6389\u5806\u9876\u7684\u5143\u7d20\uff0c\u7136\u540e\u4e0b\u79fb</code>\uff08\u8fd9\u4e48\u505a\u7684\u539f\u56e0\u662f\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4\u5220\u9664\u5934\u8282\u70b9\u7684\u6570\u5f88\u56f0\u96be\uff0c\u4f46\u662f\u5220\u9664\u5c3e\u8282\u70b9\u7684\u6570\u6bd4\u8f83\u7b80\u5355\uff09</li> <li>\u5220\u9664\u4efb\u610f\u4e00\u4e2a\u5143\u7d20 \uff08STL\u4e0d\u80fd\u76f4\u63a5\u5b9e\u73b0\uff09<code>heap[k] = heap[size]; size--; down(k); up[k]</code>\uff08down\u548cup\u53ea\u4f1a\u6267\u884c\u4e00\u4e2a\uff09</li> <li>\u4fee\u6539\u4efb\u610f\u4e00\u4e2a\u5143\u7d20\uff08STL\u4e0d\u80fd\u76f4\u63a5\u5b9e\u73b0\uff09<code>heap[k] = x; down(k); up[k];</code></li> </ol>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_13","title":"\u5806\u7684\u6027\u8d28","text":"<p>\u5806\u662f\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u9664\u4e86\u6700\u540e\u4e00\u5c42\u8282\u70b9\uff0c\u4e0a\u9762\u6240\u6709\u8282\u70b9\u90fd\u662f\u6ee1\u7684\uff0c\u4e0d\u5b58\u5728\u7a7a\u7684\u60c5\u51b5\u3002\u6700\u540e\u4e00\u5c42\u662f\u4ece\u5de6\u5230\u53f3\u4f9d\u6b21\u6392\u5217\u3002</p> <p>\u4ee5\u5c0f\u6839\u5806\u4e3a\u4f8b\uff0c\u6bcf\u4e00\u4e2a\u70b9\u90fd\u662f\u5c0f\u4e8e\u7b49\u4e8e\u5de6\u53f3\u513f\u5b50\u7684\uff0c\u6839\u8282\u70b9\u5c31\u662f\u6574\u4e2a\u6570\u636e\u7ed3\u6784\u91cc\u7684\u6700\u5c0f\u503c</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_14","title":"\u5806\u7684\u5b58\u50a8","text":"<p>\u5168\u65b0\u7684\u5b58\u50a8\u65b9\u5f0f\uff1a\u7528\u4e00\u4e2a\u4e00\u7ef4\u7684\u6570\u636e\u7ed3\u6784\u6765\u5b58</p> <p>1\u53f7\u70b9\u662f\u6839\u8282\u70b9</p> <p>\u8282\u70b9x\u7684\u5de6\u513f\u5b50\u662f2x\uff0cx\u7684\u53f3\u513f\u5b50\u662f2x+1</p> <p>\u4e00\u7ef4\u6570\u7ec4\u5c31\u80fd\u5b58\u50a8\u4e00\u9897\u6811</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_15","title":"\u5806\u7684\u64cd\u4f5c","text":"<p>down(x)\u5f80\u4e0b\u8c03\u6574\uff1a\u5c31\u662f\u5982\u679c\u5806\u91cc\u9762\u5982\u679c\u67d0\u4e2a\u503c\u53d8\u5927\u4e86\uff0c\u5c31\u8981\u628a\u4ed6\u5f80\u4e0b\u79fb\uff0c\u5f80\u4e0b\u79fb\u7684\u601d\u8def\u662f\u548c\u4ed6\u7684\u4e24\u4e2a\u513f\u5b50\u6bd4\u8f83\uff0c\u548c\u5176\u4e2d\u4e00\u4e2a\u8f83\u5c0f\u7684\u513f\u5b50\u8fdb\u884c\u4ea4\u6362\uff0c\u8fd9\u6837\u80fd\u4fdd\u8bc1\u5c0f\u6839\u5806\u7684\u7ed3\u6784\uff0c\u4ea4\u6362\u5230 \u4e0d\u80fd\u4ea4\u6362\u7684\u65f6\u5019\u5c31\u7ed3\u675f</p> <p>\u6574\u4e2a\u8fc7\u7a0b\u5c31\u662f\u628a\u5927\u7684\u503c\u5f80\u4e0b\u538b\u7684\u8fc7\u7a0b\uff08down\uff09</p> <p>up(x)\u7f51\u5f80\u4e0a\u8c03\u6574\uff1a\u5c06\u4e0b\u9762\u7684\u6570\u53d8\u5927\uff0c\u53ea\u8981\u628a\u4ed6\u8ddf\u4ed6\u7684\u7236\u8282\u70b9\u6bd4\u8f83\u5373\u53ef</p> <p>\u5806\u7684\u6a21\u677f\uff1a</p> <pre><code>// h[N]\u5b58\u50a8\u5806\u4e2d\u7684\u503c, h[1]\u662f\u5806\u9876\uff0cx\u7684\u5de6\u513f\u5b50\u662f2x, \u53f3\u513f\u5b50\u662f2x + 1\n// ph[k]\u5b58\u50a8\u7b2ck\u4e2a\u63d2\u5165\u7684\u70b9\u5728\u5806\u4e2d\u7684\u4f4d\u7f6e\n// hp[k]\u5b58\u50a8\u5806\u4e2d\u4e0b\u6807\u662fk\u7684\u70b9\u662f\u7b2c\u51e0\u4e2a\u63d2\u5165\u7684\nint h[N], ph[N], hp[N], size;\n\n// \u4ea4\u6362\u4e24\u4e2a\u70b9\uff0c\u53ca\u5176\u6620\u5c04\u5173\u7cfb\nvoid heap_swap(int a, int b)\n{\nswap(ph[hp[a]],ph[hp[b]]);\nswap(hp[a], hp[b]);\nswap(h[a], h[b]);\n}\n\nvoid down(int u)\n{\nint t = u;\nif (u * 2 &lt;= size &amp;&amp; h[u * 2] &lt; h[t]) t = u * 2;\nif (u * 2 + 1 &lt;= size &amp;&amp; h[u * 2 + 1] &lt; h[t]) t = u * 2 + 1;\nif (u != t)\n{\nheap_swap(u, t);\ndown(t);\n}\n}\n\nvoid up(int u)\n{\nwhile (u / 2 &amp;&amp; h[u] &lt; h[u / 2])\n{\nheap_swap(u, u / 2);\nu &gt;&gt;= 1;\n}\n}\n\n// O(n)\u5efa\u5806\nfor (int i = n / 2; i; i -- ) down(i);\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#838","title":"838. \u5806\u6392\u5e8f","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n\nusing namespace std;\nconst int N = 100010;\n\nint n, m;\nint h[N], Size;\n\nvoid down (int u) {\nint t = u;\nif (u * 2 &lt;= Size &amp;&amp; h[u * 2] &lt; h[t]) t = u * 2;\nif (u * 2 + 1 &lt;= Size &amp;&amp; h[u * 2 + 1] &lt; h[t]) t = u * 2 + 1;\nif (u != t) {\nswap(h[u], h[t]);\ndown(t);\n}\n}\n\nint main () {\nscanf(\"%d%d\", &amp;n, &amp;m);\nfor (int i = 1; i &lt;= n; i++) {\nscanf(\"%d\", &amp;h[i]);\n}\nSize = n;\n// \u8fd9\u4e00\u6b65\u7684\u65f6\u5019\uff0c\u76f8\u5f53\u4e8e\u6700\u540e\u4e00\u5c42\u4e0d\u7528down\n// \u6309\u7167\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u7ed3\u6784\uff0c\u6700\u540e\u4e00\u5c42\u7684\u6570\u7684\u4e2a\u6570\u662fn/2\n// \u56e0\u4e3a\u5728down\u5012\u6570\u7b2c\u4e8c\u5c42\u7684\u65f6\u5019\uff0c\u6700\u540e\u4e00\u5c42\u4f1a\u81ea\u52a8\u88abdown\uff0c\u6240\u4ee5i\u4ecen/2\u5f00\u59cb\u5373\u53ef\nfor (int i = n/2; i; i -- ) down(i); // \u8fd9\u4e2a\u5faa\u73af\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n)\nwhile(m --) {\nprintf(\"%d \", h[1]);\n// \u8fd9\u91cc\u4e0d\u80fd\u76f4\u63a5\u63091\uff0c2\uff0c3\u8fd9\u6837\u7684\u987a\u5e8f\u8f93\u51fa\u7684\u539f\u56e0\u662f\uff1a\n// \u867d\u7136\u80fd\u4fdd\u8bc1h[1]\u5c31\u662f\u6574\u4e2a\u5806\u6700\u5c0f\u7684\u6570\n// \u4f46\u662fh[2]\u548ch[3]\u987a\u5e8f\u5e76\u6ca1\u6709\u5b9a\uff0c\u4ed6\u4eec\u4e24\u4e2a\u4e2d\u5fc5\u5b9a\u6709\u4e00\u4e2a\u7b2c\u4e8c\u5c0f\uff0c\u4f46\u8fd9\u4e2a\u6570\u53ef\u80fd\u662fh[3]\nh[1] = h[Size];\nSize--;\ndown(1);\n}\nreturn 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#839","title":"839.\u6a21\u62df\u5806","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n#include &lt;string.h&gt;\n\nusing namespace std;\n\nconst int N = 100010;\n\nint h[N], ph[N], hp[N], cnt;\n\n// ph[k]\u5b58\u7684\u662f\u7b2ck\u4e2a\u63d2\u5165\u7684\u6570\u7684\u4e0b\u6807\u662f\u4ec0\u4e48\n// ph[k] = j, hp[j] = k;\n// hp[j]\u5c31\u662f\u77e5\u9053\u4e0b\u6807\u662fj\u7684\u70b9\uff0c\u8fd4\u56de\u53bb\u627e\u4ed6\u662f\u7b2c\u51e0\u4e2a\u63d2\u5165\u7684\u6570\n\n// hp\u8868\u793a\u7b2ck\u4e2a\u63d2\u5165\u6570\u73b0\u5728\u7684\u4f4d\u7f6e\uff0chp\u8868\u793a\u5728\u8be5\u4f4d\u7f6e\u7684\u6570\u662f\u7b2ck\u4e2a\u63d2\u5165\u7684\nvoid heap_swap(int a, int b)\n{\nswap(ph[hp[a]],ph[hp[b]]);\nswap(hp[a], hp[b]);\nswap(h[a], h[b]);\n}\n\nvoid down(int u)\n{\nint t = u;\nif (u * 2 &lt;= cnt &amp;&amp; h[u * 2] &lt; h[t]) t = u * 2;\nif (u * 2 + 1 &lt;= cnt &amp;&amp; h[u * 2 + 1] &lt; h[t]) t = u * 2 + 1;\nif (u != t)\n{\nheap_swap(u, t);\ndown(t);\n}\n}\n\nvoid up(int u)\n{\nwhile (u / 2 &amp;&amp; h[u] &lt; h[u / 2])\n{\nheap_swap(u, u / 2);\nu &gt;&gt;= 1;\n}\n}\n\nint main()\n{\nint n, m = 0;\nscanf(\"%d\", &amp;n);\nwhile (n -- )\n{\nchar op[5];\nint k, x;\nscanf(\"%s\", op);\nif (!strcmp(op, \"I\"))\n{\nscanf(\"%d\", &amp;x);\ncnt ++ ;\nm ++ ;\nph[m] = cnt, hp[cnt] = m;\nh[cnt] = x;\nup(cnt);\n}\nelse if (!strcmp(op, \"PM\")) printf(\"%d\\n\", h[1]);\nelse if (!strcmp(op, \"DM\"))\n{\nheap_swap(1, cnt);\ncnt -- ;\ndown(1);\n}\nelse if (!strcmp(op, \"D\"))\n{\nscanf(\"%d\", &amp;k);\nk = ph[k];\nheap_swap(k, cnt);\ncnt -- ;\nup(k);\ndown(k);\n}\nelse\n{\nscanf(\"%d%d\", &amp;k, &amp;x);\nk = ph[k];\nh[k] = x;\nup(k);\ndown(k);\n}\n}\n\nreturn 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_16","title":"\u54c8\u5e0c\u8868","text":"<p>\u4e24\u5927\u5757\u5185\u5bb9\uff0c\u4e00\u4e2a\u662f\u666e\u901a\u54c8\u5e0c\u8868\u7684\u5199\u6cd5\uff0c\u53e6\u4e00\u4e2a\u662f\u5b57\u7b26\u4e32\u7684\u54c8\u5e0c\u65b9\u6cd5</p> <p>\u54c8\u5e0c\u8868\uff1a1. \u5b58\u50a8\u7ed3\u6784\uff1a\u5f00\u653e\u5bfb\u5740\u6cd5\u3001\u62c9\u94fe\u6cd5 \uff08\u4e24\u79cd\u65b9\u6cd5\u90fd\u5f88\u5e38\u7528\uff092. \u5b57\u7b26\u4e32\u5e38\u89c1\u7684\u54c8\u5e0c\u65b9\u5f0f</p> <p>\u54c8\u5e0c\u8868\u7684\u4e3b\u8981\u4f5c\u7528\uff1a\u628a\u5e9e\u5927\u7684\u7a7a\u95f4\u548c\u503c\u57df\u6620\u5c04\u5230\u6bd4\u8f83\u5c0f\u7684\u7a7a\u95f4\uff0c\u6620\u5c04\u52300-N\uff0cN\u4e00\u822c\u6bd4\u8f83\u5c0f</p> <p>\u628a\u4ece0-10^9 \u6620\u5c04\u52300-10^5\u7684\u503c\u57df</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_17","title":"\u4e00\u822c\u54c8\u5e0c","text":"<p>\u4e00\u822c\u54c8\u5e0c\u6a21\u677f\uff1a</p> <pre><code>(1) \u62c9\u94fe\u6cd5\nint h[N], e[N], ne[N], idx;\n\n// \u5411\u54c8\u5e0c\u8868\u4e2d\u63d2\u5165\u4e00\u4e2a\u6570\nvoid insert(int x)\n{\nint k = (x % N + N) % N;\ne[idx] = x;\nne[idx] = h[k];\nh[k] = idx ++ ;\n}\n\n// \u5728\u54c8\u5e0c\u8868\u4e2d\u67e5\u8be2\u67d0\u4e2a\u6570\u662f\u5426\u5b58\u5728\nbool find(int x)\n{\nint k = (x % N + N) % N;\nfor (int i = h[k]; i != -1; i = ne[i])\nif (e[i] == x)\nreturn true;\n\nreturn false;\n}\n\n(2) \u5f00\u653e\u5bfb\u5740\u6cd5\nint h[N];\n\n// \u5982\u679cx\u5728\u54c8\u5e0c\u8868\u4e2d\uff0c\u8fd4\u56dex\u7684\u4e0b\u6807\uff1b\u5982\u679cx\u4e0d\u5728\u54c8\u5e0c\u8868\u4e2d\uff0c\u8fd4\u56dex\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\nint find(int x)\n{\nint t = (x % N + N) % N;\nwhile (h[t] != null &amp;&amp; h[t] != x)\n{\nt ++ ;\nif (t == N) t = 0;\n}\nreturn t;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#840","title":"840. \u6a21\u62df\u6563\u5217\u8868","text":"<p>\u901a\u8fc7\u4e00\u4e2a\u54c8\u5e0c\u51fd\u6570</p> <p>\u54c8\u5e0c\u5c31\u662f\u79bb\u6563</p> <p>\u79bb\u6563\u5316\u5c31\u662f\u53ca\u5176\u7279\u6b8a\u7684\u54c8\u5e0c\u65b9\u5f0f</p> <p>\u79bb\u6563\u5316\u662f\u9700\u8981\u4fdd\u5e8f\u7684\uff0c\u5355\u8c03\u9012\u589e</p> <p>\u4ece0~10<sup>9\u6620\u5c04\u52300~10</sup>5</p> <p>\u64cd\u4f5c\u7684\u4e2a\u6570\u662f10<sup>5\u6bcf\u4e00\u4e2a\u6570\u7684\u8303\u56f4\u662f-10</sup>9 ~10^9</p> <p>\u8f93\u5165h(x) \u6620\u5c04\u5230\u8f93\u51fa\uff080\uff0c10^5\uff09</p> <ol> <li>x mod 10^5\uff08\u54c8\u5e0c\u51fd\u6570\u600e\u4e48\u5199\uff1a\u53ea\u8981\u5c06\u5927\u6570\u53d6\u6a21\u5c31\u884c\u4e86\uff09\uff08\u6a21\u7684\u8fd9\u4e2a\u6570\u6700\u597d\u53d6\u6210\u8d28\u6570\uff0c\u5e76\u4e14\u79bb2\u7684\u6574\u6b21\u5e42\u5c3d\u53ef\u80fd\u8fdc \uff09</li> <li>\u51b2\u7a81\u4e24\u4e2a\u4e0d\u4e00\u6837\u7684\u6570\u4f1a\u88ab\u6620\u5c04\u6210\u540c\u4e00\u4e2a\u6570\uff0c\u4e24\u79cd\u5904\u7406\u65b9\u6cd5\uff1a\u5f00\u653e\u5bfb\u5740\u6cd5\u548c\u62c9\u94fe\u6cd5</li> </ol> <p>\u62c9\u94fe\u6cd5\uff1a\u5f00\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4\u6765\u5b58\u6240\u6709\u7684\u54c8\u5e0c\u503c</p> <p>\u5f53\u539f\u6570\u88ab\u6620\u5c04\u5230\u65b0\u7684\u6570\u636e\u8303\u56f4\u7684\u65f6\u5019\uff0c\u65b0\u7684\u6570\u636e\u8303\u56f4\u5c31\u4f1a\u62c9\u4e00\u6761\u69fd\u4e0b\u6765\uff0c\u4f9d\u6b21\u8fde\u63a5\u88ab\u8d4b\u6210\u65b0\u6570\u7684\u591a\u4e2a\u539f\u6570</p> <p>\u5728\u94fe\u4e0a\u589e\u52a0\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u662f\u5934\u63d2\u4e5f\u53ef\u4ee5\u5c3e\u63d2</p> <p>\u54c8\u5e0c\u8868\u662f\u4e00\u4e2a\u671f\u671b\u7b97\u6cd5</p> <p>\u5e73\u5747\u4e0b\u6765\u6bcf\u6761\u94fe\u662f\u5e38\u6570\uff0c\u53ef\u4ee5\u88ab\u770b\u6210O\uff081\uff09</p> <p>\u5728\u7b97\u6cd5\u9898\u91cc\u9762\uff0c\u4e00\u822c\u53ea\u6709\u6dfb\u52a0\u548c\u67e5\u627e\u64cd\u4f5c\uff0c\u4e0d\u4f1a\u5220\u9664</p> <p>\u6dfb\u52a0\uff1ah(x)</p> <p>\u67e5\u627e\uff1ah(x)\u5728\u54ea\u4e2a\u69fd\u4e0a\uff0c\u904d\u5386\u4e00\u904d\u6709\u6ca1\u6709\u8fd9\u4e2a\u6570</p> <p>\u5bfb\u627e\u5927\u4e8e100000\u7684\u7b2c\u4e00\u4e2a\u8d28\u6570\uff1a\u7b54\u6848\u662f100003</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nconst int N = 100010;\n\n\nint main () {\nfor (int i = 100000;;i++) {\nbool flag = true;\nfor (int j = 2; j * j &lt;= i; j++) {\nif (i % j == 0) {\nflag = false;\nbreak;\n}\n}\nif (flag) {\ncout &lt;&lt; i &lt;&lt; endl;\nbreak;\n}\n}\nreturn 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#840_1","title":"840. \u6a21\u62df\u6563\u5217\u8868","text":""},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_18","title":"\u62c9\u94fe\u6cd5","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\nusing namespace std; const int N = 100003;\nint h[N], e[N], ne[N], idx;\n\nvoid insert (int x) {\n// \u5728\u6570\u5b66\u91cc\u9762-10 mod 3\u5e94\u8be5\u662f2\uff0c\u56e0\u4e3a-10=-4 * 3 + 2\n// \u800c\u5728C\u91cc\u9762-10 mod3\u5f97\u5230\u7684\u662f-1\n// \u800c\u4e14\u4e0d\u80fd\uff08x + N\uff09%N\u539f\u56e0\u662fx+N\u4ecd\u7136\u53ef\u80fd\u662f\u8d1f\u6570\uff0c\u52a0\u4e86\u6ca1\u7528\n// \u5fc5\u987b\u5148\u6a21\u518d\u52a0\u518d\u6a21\nint k = (x % N + N) % N; // +N\u7684\u76ee\u7684\u662f\u8ba9\u4f59\u6570\u53d8\u6210\u6b63\u6570,k\u5c31\u662f\u54c8\u5e0c\u503c\ne[idx] = x, ne[idx] = h[k], h[k] = idx++; // \u662f\u5934\u63d2\n}\n\nbool find(int x) {\nint k = (x % N + N) % N;\nfor (int i = h[k]; i != -1; i = ne[i]) {\nif (e[i] == x)\nreturn true;\n}\nreturn false;\n}\n\nint main () {\nint n;\nscanf(\"%d\", &amp;n);\n\nmemset(h, -1, sizeof h); // \u5148\u628a\u94fe\u8868\u6e05\u7a7a\uff0c\u7a7a\u6307\u9488\u4e00\u822c\u7528-1\u8868\u793a\n\nwhile (n --) {\nchar op[2];//\u5c3d\u91cf\u8bfb\u5b57\u7b26\u4e32\nint x;\nscanf(\"%s%d\", op, &amp;x);\nif (*op == 'I') insert(x);\nelse {\nif (find(x)) puts(\"Yes\");\nelse puts(\"No\");\n}\n}\nreturn 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_19","title":"\u5f00\u653e\u5bfb\u5740\u6cd5","text":"<p>\u53ea\u5f00\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4\uff0c\u4f46\u662f\u8fd9\u4e2a\u6570\u7ec4\u7684\u957f\u5ea6\u7ecf\u9a8c\u4e0a\u6765\u8bf4\u8981\u5f00\u5230\u9898\u76ee\u6570\u503c\u8303\u56f4\u7684\u4e24\u5230\u4e09\u500d</p> <p>100000\u7684\u6570\u9700\u8981\u5f00\u5230\u4e8c\u4e09\u5341\u4e07</p> <p>\u6dfb\u52a0\uff1ah(k) \u7684\u4f4d\u7f6e\u6709\u4eba\u5c31\u53bb\u4e0b\u4e00\u4e2a\u5751\u4f4d\uff0c\u76f4\u5230\u627e\u5230\u6ca1\u6709\u4eba\u7684\u5751\u4f4d</p> <p>\u67e5\u627e\uff1a\u4e5f\u662f\u4ece\u7b2ck\u4e2a\u5751\u4f4d\u5f00\u59cb\uff0c\u4ece\u524d\u5f80\u540e\u627e</p> <p>\u5220\u9664\uff1a\u5982\u679c\u627e\u5230x\u7684\u8bdd\uff0c\u5728\u6570\u7ec4\u91cc\u9762\u6253\u4e2a\u6807\u8bb0\u6765\u6307\u51fa\u4ed6\u88ab\u5220\u9664\u4e86</p> <p>\u5f00\u653e\u5bfb\u5740\u6cd5\u7684\u597d\u5904\u662f\u53ea\u7528\u5f00\u4e00\u4e2a\u6570\u7ec4</p> <p>\u5927\u4e8e\u4e8c\u5341\u4e07\u6700\u5c0f\u7684\u8d28\u6570\u662f200003</p> <p>\u5f00\u653e\u5bfb\u5740\u6cd5\u7684\u6838\u5fc3\u662ffind\u51fd\u6570\uff0c\u5982\u679c\u5b58\u5728\u8fd4\u56dex\u4f4d\u7f6e\uff0c\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u8fd4\u56de\u5e94\u8be5\u5b58\u50a8\u7684\u4f4d\u7f6e</p> <p>\u6ce8\u610fmemset()\u662f\u6309\u5b57\u8282\u8d4b\u503c\uff0c\u51990x3f3f3f3f\u5c31\u4f1a\u62a5\u9519</p> <p>\u5728\u7b97\u6cd5\u7ade\u8d5b\u4e2d\uff0c\u6211\u4eec\u5e38\u5e38\u9700\u8981\u7528\u5230\u8bbe\u7f6e\u4e00\u4e2a\u5e38\u91cf\u7528\u6765\u4ee3\u8868\u201c\u65e0\u7a77\u5927\u201d\u3002</p> <p>\u6bd4\u5982\u5bf9\u4e8eint\u7c7b\u578b\u7684\u6570\uff0c\u6709\u7684\u4eba\u4f1a\u91c7\u7528INT_MAX\uff0c\u53730x7fffffff\u4f5c\u4e3a\u65e0\u7a77\u5927\u3002\u4f46\u662f\u4ee5INT_MAX\u4e3a\u65e0\u7a77\u5927\u5e38\u5e38\u9762\u4e34\u4e00\u4e2a\u95ee\u9898\uff0c\u5373\u52a0\u4e00\u4e2a\u5176\u4ed6\u7684\u6570\u4f1a\u6ea2\u51fa\u3002</p> <p>\u800c\u8fd9\u79cd\u60c5\u51b5\u5728\u52a8\u6001\u89c4\u5212\uff0c\u6216\u8005\u5176\u4ed6\u4e00\u4e9b\u9012\u63a8\u7684\u7b97\u6cd5\u4e2d\u5e38\u5e38\u51fa\u73b0\uff0c\u5f88\u6709\u53ef\u80fd\u5bfc\u81f4\u7b97\u6cd5\u51fa\u95ee\u9898\u3002</p> <p>\u6240\u4ee5\u5728\u7b97\u6cd5\u7ade\u8d5b\u4e2d\uff0c\u6211\u4eec\u5e38\u91c7\u75280x3f3f3f3f\u6765\u4f5c\u4e3a\u65e0\u7a77\u5927\u30020x3f3f3f3f\u4e3b\u8981\u6709\u5982\u4e0b\u597d\u5904\uff1a</p> <p>0x3f3f3f3f\u7684\u5341\u8fdb\u5236\u4e3a1061109567\uff0c\u548cINT_MAX\u4e00\u4e2a\u6570\u91cf\u7ea7\uff0c\u537310<sup>9\u6570\u91cf\u7ea7\uff0c\u800c\u4e00\u822c\u573a\u5408\u4e0b\u7684\u6570\u636e\u90fd\u662f\u5c0f\u4e8e10</sup>9\u7684\u3002 0x3f3f3f3f * 2 = 2122219134\uff0c\u65e0\u7a77\u5927\u76f8\u52a0\u4f9d\u7136\u4e0d\u4f1a\u6ea2\u51fa\u3002 \u53ef\u4ee5\u4f7f\u7528memset(array, 0x3f, sizeof(array))\u6765\u4e3a\u6570\u7ec4\u8bbe\u521d\u503c\u4e3a0x3f3f3f3f\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u6570\u7684\u6bcf\u4e2a\u5b57\u8282\u90fd\u662f0x3f\u3002</p> <p>\u7ecf\u9a8c\u4e0a\u6765\u8bf4\uff0c\u6bcf\u4e2a\u6570\u53ea\u8981\u627e\u4e24\u4e09\u4e2a\u5751\u4f4d\u5c31\u80fd\u627e\u5230\u4e86</p> <pre><code>#include &lt;cstring&gt;\n#include &lt;iostream&gt;\n\nusing namespace std;\n\nconst int N = 200003, null = 0x3f3f3f3f;\n\nint h[N];\n\nint find(int x)\n{\nint t = (x % N + N) % N;\nwhile (h[t] != null &amp;&amp; h[t] != x)\n{\nt ++ ;\nif (t == N) t = 0;\n}\nreturn t;\n}\n\nint main()\n{\nmemset(h, 0x3f, sizeof h);\n\nint n;\nscanf(\"%d\", &amp;n);\n\nwhile (n -- )\n{\nchar op[2];\nint x;\nscanf(\"%s%d\", op, &amp;x);\nif (*op == 'I') h[find(x)] = x;\nelse\n{\nif (h[find(x)] == null) puts(\"No\");\nelse puts(\"Yes\");\n}\n}\n\nreturn 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_20","title":"\u5b57\u7b26\u4e32\u54c8\u5e0c","text":"<p>\u57fa\u672c\u60f3\u6cd5\uff1a\u5c06\u5b57\u7b26\u4e32\u6620\u5c04\u6210\u6574\u6570</p> <p>\u5047\u8bbe\u6240\u6709\u5b57\u7b26\u4e32\u90fd\u662f\u5c0f\u5199\u5b57\u6bcd\uff0c\u5c06\u4e00\u4e2a\u5b57\u7b26\u4e32\u770b\u6210p\u8fdb\u5236\u7684\u6570\u7136\u540e\u6a21\u4e0a\u4e00\u4e2aQ\u7684\u7ed3\u679c</p> <p>\u6bd4\u5982abcabcdefg</p> <p>1231234567 = (1* p^9 + 2* p^8 + 3 * p ^7...) %q = 0~q - 1\u8fd9\u4e2a\u503c\u5c31\u662f\u54c8\u5e0c\u503c</p> <p>p\u4e00\u822c\u53d6131\u6216\u800513331\uff0cq\u53d62^64\uff0c\u56e0\u4e3a\u53ef\u4ee5\u76f4\u63a5\u7528unsigned long long 8bit \u6700\u591a\u53ea\u80fd\u5b58\u50a82^64\uff0c\u8d85\u51fa\u7684\u90e8\u5206\u4f1a\u81ea\u52a8\u53d6\u6a21</p> <p>\u53d6\u6a21\u8fd0\u7b97\u6bd4\u52a0\u51cf\u4e58\u9664\u6162\u4e86\u5f88\u591a\u500d\uff0c\u6240\u4ee5\u8981\u7528unsigned long long</p> <p>hash(abd) = (124)131 = 131 * 131  + 2 * 131 + 4 * 1</p> <p>\u4e00\u79cd\u7279\u6b8a\u7684\u54c8\u5e0c\u65b9\u5f0f\uff0c\u5b57\u7b26\u4e32\u524d\u7f00\u54c8\u5e0c\u6cd5</p> <p>h[n] \u8868\u793a\u524dn\u4e2a\u5b57\u7b26\u7684\u54c8\u5e0c</p> <p>str = \"ABCA\"</p> <p>h[0] = 0;</p> <p>h[1] = \"A\"\u7684hash\u503c</p> <p>h[2] = \"AB\"\u7684hash\u503c</p> <ol> <li>\u5c06\u5b57\u7b26\u4e32\u770b\u6210p\u8fdb\u5236\u7684\u6570\uff0c\u6bd4\u5982ABCD\u5b57\u7b26\u4e32\u53ef\u4ee5\u770b\u6210\uff081\uff0c2\uff0c3\uff0c4\uff09\uff0c1 * p^3 + 2 * p^2 + 3 * p^1 + 4 * p ^0,\u7136\u540e\u7ed9\u8fd9\u4e2a\u503cmodQ</li> <li>\u6ce8\u610f\u4e0d\u80fd\u5c06\u67d0\u4e2a\u5b57\u6bcd\u6620\u5c04\u62100\uff0c\u56e0\u4e3a0\u7684p\u8fdb\u5236\u6570\u6c38\u8fdc\u662f0\uff0c\u201cAAA\u201d\u548c\u201cAA\u201d\u90fd\u662f0</li> <li>\u54c8\u5e0c\u6570\u5b57\u7684\u65f6\u5019\u53ef\u4ee5\u5bb9\u5fcd\u51b2\u7a81\uff0c\u54c8\u5e0c\u5b57\u7b26\u4e32\u505a\u6cd5\u8981\u5047\u5b9a\u4eba\u54c1\u8db3\u591f\u597d\uff0c\u78b0\u4e0d\u5230\u51b2\u7a81\u7684\u60c5\u51b5\uff0c\u6240\u4ee5\u8fd9\u4e2a\u65b9\u6cd5\u5b8c\u5168\u4e0d\u8003\u8651\u91cd\u51b2\u7a81\u60c5\u51b5</li> <li>\u4e00\u822c\u6765\u8bf4\uff0cp\u53d6131\u6216\u800513331\uff0cQ\u53d62^64,\u6211\u4eec\u5c31\u80fd\u5047\u5b9a\u78b0\u4e0d\u5230\u51b2\u7a81\u7684\u60c5\u51b5\u4e86</li> <li>\u53ef\u4ee5\u5229\u7528\u54c8\u5e0c\u8ba1\u7b97\u51fa\u6240\u6709\u5b50\u4e32\u7684\u54c8\u5e0c</li> </ol> <p>\u6bd4\u5982\uff1a\u9700\u8981\u6c42\u51fa\u4e00\u4e2a\u5b57\u7b26\u4e32\u4eceL\u5230R\u7684\u5b57\u7b26\u4e32\u7684\u54c8\u5e0c\u503c\uff0c\u516c\u5f0f\u5c31\u662fh[R] - h[L] * p^(R - L +1)</p> <p>\u5b57\u7b26\u4e32\u54c8\u5e0c\uff1a    </p> <pre><code>\u6838\u5fc3\u601d\u60f3\uff1a\u5c06\u5b57\u7b26\u4e32\u770b\u6210P\u8fdb\u5236\u6570\uff0cP\u7684\u7ecf\u9a8c\u503c\u662f131\u621613331\uff0c\u53d6\u8fd9\u4e24\u4e2a\u503c\u7684\u51b2\u7a81\u6982\u7387\u4f4e\n\u5c0f\u6280\u5de7\uff1a\u53d6\u6a21\u7684\u6570\u75282^64\uff0c\u8fd9\u6837\u76f4\u63a5\u7528unsigned long long\u5b58\u50a8\uff0c\u6ea2\u51fa\u7684\u7ed3\u679c\u5c31\u662f\u53d6\u6a21\u7684\u7ed3\u679c\n\ntypedef unsigned long long ULL;\nULL h[N], p[N]; // h[k]\u5b58\u50a8\u5b57\u7b26\u4e32\u524dk\u4e2a\u5b57\u6bcd\u7684\u54c8\u5e0c\u503c, p[k]\u5b58\u50a8 P^k mod 2^64\n\n// \u521d\u59cb\u5316\np[0] = 1;\nfor (int i = 1; i &lt;= n; i ++ )\n{\nh[i] = h[i - 1] * P + str[i];\np[i] = p[i - 1] * P;+9\n}\n\n// \u8ba1\u7b97\u5b50\u4e32 str[l ~ r] \u7684\u54c8\u5e0c\u503c\nULL get(int l, int r)\n{\nreturn h[r] - h[l - 1] * p[r - l + 1];\n}\n</code></pre> <p>\u54c8\u5e0c\u503c\u76f8\u540c\u7684\u8bdd\u5c31\u8ba4\u4e3a\u4e24\u4e2a\u5b57\u7b26\u4e32\u76f8\u540c</p> <p>h[N]\u8868\u793a\u7684\u662f\u67d0\u4e00\u4e2a\u524d\u7f00\u7684\u54c8\u5e0c\u503c</p> <p>p\u4ee3\u8868p\u8fdb\u5236</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#841","title":"841. \u5b57\u7b26\u4e32\u54c8\u5e0c","text":"<p>\u8003\u8651\u4e00\u4e0babab\u5c31\u61c2\u4e86</p> <p>h[1] = 1</p> <p>h[2] = 1 * 131 + 2</p> <p>h[3] = 1*131 ^ 2 + 2 * 131 + 1</p> <p>h[4] = 1 * 131 ^3 + 2 * 131 ^2 +1 * 131 + 1</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\ntypedef unsigned long long ULL;\nconst int N = 100010, P = 131;\n\nint n, m;\nchar str[N];\nULL h[N], p[N];\n\nULL get(int l, int r) {\nreturn h[r] - h[l - 1] * p[r - l + 1];\n}\n\nint main () {\nscanf(\"%d%d%s\", &amp;n, &amp;m, str + 1); // \u52a0\u4e00\u662f\u4e3a\u4e86\u9632\u6b62\u4ece0\u5f00\u59cb\np[0] = 1;\nfor (int i = 1; i &lt;= n; i++) {\np[i] = p[i - 1] * P;\nh[i] = h[i - 1] * P + str[i]; // \u6240\u4ee5\u6700\u5de6\u8fb9\u7684\u90a3\u4e00\u4f4d\u6700\u540e\u4f1a\u53d8\u6210 P^(n - 1)\n}\n\nwhile (m --){\nint l1, r1, l2, r2;\nscanf(\"%d%d%d%d\", &amp;l1, &amp;r1, &amp;l2, &amp;r2);\n\nif (get(l1, r1) == get(l2, r2)) puts(\"Yes\");\nelse puts(\"No\");\n}\nreturn 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#c-stl","title":"C++ STL\u7b80\u4ecb","text":"<p>vector</p> <p>\u6570\u7ec4\u957f\u5ea6\u662f\u52a8\u6001\u53d8\u5316\u7684</p> <p>string</p> <p>\u5904\u7406\u5b57\u7b26\u4e32\u7684\u5229\u5668</p> <p>queue, priority_queue</p> <p>stack</p> <p>deque</p> <p>set, map, multiset, multimap</p> <p>unoredered_set, unordered_map, unordered_multiset, unordered_multimap</p> <p>bitset</p> <pre><code>vector, \u53d8\u957f\u6570\u7ec4\uff0c\u500d\u589e\u7684\u601d\u60f3\nsize()  \u8fd4\u56de\u5143\u7d20\u4e2a\u6570\nempty()  \u8fd4\u56de\u662f\u5426\u4e3a\u7a7a\nclear()  \u6e05\u7a7a\nfront()/back()\npush_back()/pop_back()\nbegin()/end()\n[]\n\u652f\u6301\u6bd4\u8f83\u8fd0\u7b97\uff0c\u6309\u5b57\u5178\u5e8f\n\npair&lt;int, int&gt; \u597d\u5904\u662f\u76f8\u5f53\u4e8e\u4e00\u4e2a\u81ea\u5e26\u7684\u7ed3\u6784\u4f53\uff0c\u800c\u4e14\u81ea\u5e26\u4e86\u4e00\u4e2a\u6bd4\u8f83\nfirst, \u7b2c\u4e00\u4e2a\u5143\u7d20\nsecond, \u7b2c\u4e8c\u4e2a\u5143\u7d20\n\u652f\u6301\u6bd4\u8f83\u8fd0\u7b97\uff0c\u4ee5first\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\uff0c\u4ee5second\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\uff08\u5b57\u5178\u5e8f\uff09\np = make_pair(10, \"yxc\"); // \u53ef\u4ee5\u751f\u6210pair\np = {20, \"abv\"}; // C++11\u53ef\u4ee5\u76f4\u63a5\u5199\npair&lt;int, pair&lt;int, int&gt;&gt; p // \u53ef\u4ee5\u505a\u5230\u5b58\u50a8\u4e09\u4e2a\u4e0d\u540c\u7684\u53d8\u91cf\n\nstring\uff0c\u5b57\u7b26\u4e32\nsize()/length()  \u8fd4\u56de\u5b57\u7b26\u4e32\u957f\u5ea6\nempty()\nclear()\nsubstr(\u8d77\u59cb\u4e0b\u6807\uff0c(\u5b50\u4e32\u957f\u5ea6))  \u8fd4\u56de\u5b50\u4e32\uff0c\u6ce8\u610f\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u957f\u5ea6\uff01\nc_str()  \u8fd4\u56de\u5b57\u7b26\u4e32\u6240\u5728\u5b57\u7b26\u6570\u7ec4\u7684\u8d77\u59cb\u5730\u5740\u3001\u5934\u6307\u9488\nprintf(\"%s\\n\", a.c_str());\n\nqueue, \u961f\u5217\uff0c\u5148\u8fdb\u5148\u51fa\uff0c\u6ca1\u6709clear\nsize()\nempty()\npush()  \u5411\u961f\u5c3e\u63d2\u5165\u4e00\u4e2a\u5143\u7d20\nfront()  \u8fd4\u56de\u961f\u5934\u5143\u7d20\nback()  \u8fd4\u56de\u961f\u5c3e\u5143\u7d20\npop()  \u5f39\u51fa\u961f\u5934\u5143\u7d20\nq = queue&lt;int&gt;(); \u80fd\u591f\u76f4\u63a5\u6e05\u7a7aq\uff0c\u800c\u4e0d\u9700\u8981\u7528\u5230clear\n\npriority_queue, \u4f18\u5148\u961f\u5217\uff0c\u9ed8\u8ba4\u662f\u5927\u6839\u5806\nsize()\nempty()\npush()  \u63d2\u5165\u4e00\u4e2a\u5143\u7d20\ntop()  \u8fd4\u56de\u5806\u9876\u5143\u7d20\npop()  \u5f39\u51fa\u5806\u9876\u5143\u7d20\n\u5b9a\u4e49\u6210\u5c0f\u6839\u5806\u53ef\u4ee5\u5411\u91cc\u9762\u63d2\u5165-x\n\u5b9a\u4e49\u6210\u5c0f\u6839\u5806\u7684\u65b9\u5f0f\uff1apriority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; q;\n\nstack, \u6808\nsize()\nempty()\npush()  \u5411\u6808\u9876\u63d2\u5165\u4e00\u4e2a\u5143\u7d20\ntop()  \u8fd4\u56de\u6808\u9876\u5143\u7d20\npop()  \u5f39\u51fa\u6808\u9876\u5143\u7d20\n\ndeque, \u53cc\u7aef\u961f\u5217\uff0c\u961f\u5c3e\u961f\u5934\u90fd\u53ef\u4ee5\u63d2\u5165\u548c\u5f39\u51fa\uff0c\u800c\u4e14\u53ef\u4ee5\u652f\u6301\u968f\u673a\u8bbf\u95ee\uff0c\u52a0\u5f3a\u7248vector\uff0c\u7f3a\u70b9\u662f\u901f\u5ea6\u6162\u6548\u7387\u5de8\u4f4e\uff0c\u6bd4\u4e00\u822c\u6570\u7ec4\u6162\u4e86\u597d\u51e0\u500d\uff0c\u800c\u4e14\u7a7a\u95f4\u4e5f\u5927\uff0c\u4f1a\u8d85\u51fa\u7a7a\u95f4\nsize()\nempty()\nclear()\nfront()/back()\npush_back()/pop_back()\npush_front()/pop_front()\nbegin()/end()\n[]\n\nset, map, multiset, multimap, \u57fa\u4e8e\u5e73\u8861\u4e8c\u53c9\u6811\uff08\u7ea2\u9ed1\u6811\uff09\uff0c\u52a8\u6001\u7ef4\u62a4\u6709\u5e8f\u5e8f\u5217\nset\u91cc\u9762\u662f\u4e0d\u80fd\u6709\u91cd\u590d\u5143\u7d20\u7684\uff0c\u800cmultiset\u91cc\u9762\u53ef\u4ee5\u6709\nset\u6240\u6709\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u8bfb\u662flog(n)\nsize()\nempty() clear()\nbegin()/end()\n++, -- \u8fd4\u56de\u524d\u9a71\u548c\u540e\u7ee7\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 O(logn)\u524d\u9a71\u5c31\u662f\u524d\u9762\u4e00\u4e2a\u6570\uff0c\u540e\u7ee7\u5c31\u662f\u540e\u9762\u4e00\u4e2a\u6570\n\nset/multiset\ninsert()  \u63d2\u5165\u4e00\u4e2a\u6570\nfind()  \u67e5\u627e\u4e00\u4e2a\u6570\uff0c\u4e0d\u5b58\u5728\u7684\u8bdd\u8fd4\u56deend\u8fed\u4ee3\u5668\ncount()  \u8fd4\u56de\u67d0\u4e00\u4e2a\u6570\u7684\u4e2a\u6570\nerase()\n(1) \u8f93\u5165\u662f\u4e00\u4e2a\u6570x\uff0c\u5220\u9664\u6240\u6709x   O(k + logn)k\u662fx\u4e2a\u6570 (2) \u8f93\u5165\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u5220\u9664\u8fd9\u4e2a\u8fed\u4ee3\u5668\nlower_bound()/upper_bound()\nlower_bound(x)  \u8fd4\u56de\u5927\u4e8e\u7b49\u4e8ex\u7684\u6700\u5c0f\u7684\u6570\u7684\u8fed\u4ee3\u5668\nupper_bound(x)  \u8fd4\u56de\u5927\u4e8ex\u7684\u6700\u5c0f\u7684\u6570\u7684\u8fed\u4ee3\u5668 map/multimap\ninsert()  \u63d2\u5165\u7684\u6570\u662f\u4e00\u4e2apair\nerase()  \u8f93\u5165\u7684\u53c2\u6570\u662fpair\u6216\u8005\u8fed\u4ee3\u5668\nfind()\n[]  \u6ce8\u610fmultimap\u4e0d\u652f\u6301\u6b64\u64cd\u4f5c\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\u662f O(logn)\nlower_bound()/upper_bound()\n\u4f8b\u5b50\uff1a map&lt;string,int&gt; a; a[\"yxc\"] = 1; cout &lt;&lt; a[\"yxc\"] &lt;&lt; endl;\n\nunordered_set, unordered_map, unordered_multiset, unordered_multimap, \u57fa\u4e8e\u54c8\u5e0c\u8868\u5b9e\u73b0\u7684\n\u548c\u4e0a\u9762\u7c7b\u4f3c\uff0c\u589e\u5220\u6539\u67e5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(1)\n\u4e0d\u652f\u6301 lower_bound()/upper_bound()\uff0c \u8fed\u4ee3\u5668\u7684++\uff0c--,\u56e0\u4e3a\u5185\u90e8\u662f\u6ca1\u6709\u5e8f\u7684\n\nbitset, \u5727\u4f4d\n\u6bd4\u6b63\u5e38\u7684bool\u6570\u7ec4\u7701\u5185\u5b58\uff0c\u516b\u5206\u4e4b\u4e00\n10000*10000\u7684bool\u77e9\u9635\u9700\u898110^8 100MB\uff0c\u800cbitset\u53ea\u9700\u898112MB\n\nbitset&lt;10000&gt; s;\n~, &amp;, |, ^\n&gt;&gt;, &lt;&lt;\n==, !=\n[]\ncount()  \u8fd4\u56de\u6709\u591a\u5c11\u4e2a1\n\nany()  \u5224\u65ad\u662f\u5426\u81f3\u5c11\u6709\u4e00\u4e2a1\nnone()  \u5224\u65ad\u662f\u5426\u5168\u4e3a0\n\nset()  \u628a\u6240\u6709\u4f4d\u7f6e\u62101\nset(k, v)  \u5c06\u7b2ck\u4f4d\u53d8\u6210v\nreset()  \u628a\u6240\u6709\u4f4d\u53d8\u62100\nflip()  \u7b49\u4ef7\u4e8e~\nflip(k) \u628a\u7b2ck\u4f4d\u53d6\u53cd\n\nlist\u7528\u7684\u4e0d\u591a\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#include","title":"#include  <p>vector\u662f\u53d8\u957f\u6570\u7ec4\uff0c\u652f\u6301\u968f\u673a\u8bbf\u95ee\uff0c\u4e0d\u652f\u6301\u5728\u4efb\u610f\u4f4d\u7f6e O(1) \u63d2\u5165\u3002\u4e3a\u4e86\u4fdd\u8bc1\u6548\u7387\uff0c\u5143\u7d20\u7684\u589e\u5220\u4e00\u822c\u5e94\u8be5\u5728\u672b\u5c3e\u8fdb\u884c\u3002</p> <p>\u7cfb\u7edf\u4e3a\u67d0\u4e00\u7a0b\u5e8f\u5206\u914d\u7a7a\u95f4\u65f6\uff0c\u6240\u9700\u7684\u65f6\u95f4\uff0c\u57fa\u672c\u4e0a\u4e0e\u7a7a\u95f4\u5927\u5c0f\u65e0\u5173\uff0c\u4e0e\u7533\u8bf7\u6b21\u6570\u6709\u5173\uff0c\u7cfb\u7edf\u5206\u914d\u957f\u5ea6\u4e3a1\u548c100\u7684\u6570\u7ec4\u7684\u65f6\u95f4\u662f\u4e00\u6837\u7684</p> <p>\u53d8\u957f\u6570\u7ec4\u8981\u7ecf\u91cf\u51cf\u5c11\u7533\u8bf7\u7a7a\u95f4\u7684\u6b21\u6570</p>","text":""},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#11","title":"1.1\u58f0\u660e","text":"<pre><code>#include &lt;vector&gt;   // \u5934\u6587\u4ef6\nvector&lt;int&gt; a;      // \u76f8\u5f53\u4e8e\u4e00\u4e2a\u957f\u5ea6\u52a8\u6001\u53d8\u5316\u7684int\u6570\u7ec4\nvector&lt;int&gt; b[233]; // \u76f8\u5f53\u4e8e\u7b2c\u4e00\u7ef4\u957f233\uff0c\u7b2c\u4e8c\u4f4d\u957f\u5ea6\u52a8\u6001\u53d8\u5316\u7684int\u6570\u7ec4\nstruct rec{\u2026};\nvector&lt;rec&gt; c;      // \u81ea\u5b9a\u4e49\u7684\u7ed3\u6784\u4f53\u7c7b\u578b\u4e5f\u53ef\u4ee5\u4fdd\u5b58\u5728vector\u4e2d\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#12-sizeempty","title":"1.2 size/empty","text":"<p>size\u51fd\u6570\u8fd4\u56devector\u7684\u5b9e\u9645\u957f\u5ea6\uff08\u5305\u542b\u7684\u5143\u7d20\u4e2a\u6570\uff09\uff0cempty\u51fd\u6570\u8fd4\u56de\u4e00\u4e2abool\u7c7b\u578b\uff0c\u8868\u660evector\u662f\u5426\u4e3a\u7a7a\u3002\u4e8c\u8005\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662f O(1)\u6240\u6709\u7684STL\u5bb9\u5668\u90fd\u652f\u6301\u8fd9\u4e24\u4e2a\u65b9\u6cd5\uff0c\u542b\u4e49\u4e5f\u76f8\u540c\uff0c\u4e4b\u540e\u6211\u4eec\u5c31\u4e0d\u518d\u91cd\u590d\u7ed9\u51fa\u3002</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#13-clear","title":"1.3 clear","text":"<p>clear\u51fd\u6570\u628avector\u6e05\u7a7a\u3002</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#14","title":"1.4 \u8fed\u4ee3\u5668","text":"<p>\u8fed\u4ee3\u5668\u5c31\u50cfSTL\u5bb9\u5668\u7684\u201c\u6307\u9488\u201d\uff0c\u53ef\u4ee5\u7528\u661f\u53f7*\u64cd\u4f5c\u7b26\u89e3\u9664\u5f15\u7528\u3002</p> <p>\u4e00\u4e2a\u4fdd\u5b58int\u7684vector\u7684\u8fed\u4ee3\u5668\u58f0\u660e\u65b9\u6cd5\u4e3a\uff1a</p> <p><code>vector&lt;int&gt;::iterator it;</code> vector\u7684\u8fed\u4ee3\u5668\u662f\u201c\u968f\u673a\u8bbf\u95ee\u8fed\u4ee3\u5668\u201d\uff0c\u53ef\u4ee5\u628avector\u7684\u8fed\u4ee3\u5668\u4e0e\u4e00\u4e2a\u6574\u6570\u76f8\u52a0\u51cf\uff0c\u5176\u884c\u4e3a\u548c\u6307\u9488\u7684\u79fb\u52a8\u7c7b\u4f3c\u3002\u53ef\u4ee5\u628avector\u7684\u4e24\u4e2a\u8fed\u4ee3\u5668\u76f8\u51cf\uff0c\u5176\u7ed3\u679c\u4e5f\u548c\u6307\u9488\u76f8\u51cf\u7c7b\u4f3c\uff0c\u5f97\u5230\u4e24\u4e2a\u8fed\u4ee3\u5668\u5bf9\u5e94\u4e0b\u6807\u4e4b\u95f4\u7684\u8ddd\u79bb\u3002</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#15-beginend","title":"1.5 begin/end","text":"<p>begin\u51fd\u6570\u8fd4\u56de\u6307\u5411vector\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668\u3002\u4f8b\u5982a\u662f\u4e00\u4e2a\u975e\u7a7a\u7684vector\uff0c\u5219*a.begin()\u4e0ea[0]\u7684\u4f5c\u7528\u76f8\u540c\u3002</p> <p>\u6240\u6709\u7684\u5bb9\u5668\u90fd\u53ef\u4ee5\u89c6\u4f5c\u4e00\u4e2a\u201c\u524d\u95ed\u540e\u5f00\u201d\u7684\u7ed3\u6784\uff0cend\u51fd\u6570\u8fd4\u56devector\u7684\u5c3e\u90e8\uff0c\u5373\u7b2cn \u4e2a\u5143\u7d20\u518d\u5f80\u540e\u7684\u201c\u8fb9\u754c\u201d\u3002*a.end()\u4e0ea[n]\u90fd\u662f\u8d8a\u754c\u8bbf\u95ee\uff0c\u5176\u4e2dn = a.size()\u3002</p> <p>\u4e0b\u9762\u4e24\u4efd\u4ee3\u7801\u90fd\u904d\u5386\u4e86vector a\uff0c\u5e76\u8f93\u51fa\u5b83\u7684\u6240\u6709\u5143\u7d20\u3002"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#16-frontback","title":"1.6 front/back","text":"<p>front\u51fd\u6570\u8fd4\u56devector\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c\u7b49\u4ef7\u4e8ea.begin()\u548ca[0]\u3002 back\u51fd\u6570\u8fd4\u56devector\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff0c\u7b49\u4ef7\u4e8e--a.end()\u548ca[a.size() \u2013 1]\u3002</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#17-push_backpop_back","title":"1.7 push_back()\u548cpop_back()","text":"<p>a.push_back(x)\u628a\u5143\u7d20x\u63d2\u5165\u5230vector a\u7684\u5c3e\u90e8\u3002 b.pop_back()\u5220\u9664vector a\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u3002</p> <pre><code>#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n#include &lt;vector&gt;\n\nusing namespace std;\n\nint main () {\nvector&lt;int&gt; a(10);\nvector&lt;int&gt; b(10, 3); // \u957f\u5ea6\u4e3a10\u7684\u6570\u7ec4\uff0c\u5e76\u4e14\u5168\u90e8\u521d\u59cb\u5316\u4e3a3\nfor (auto i : b) cout &lt;&lt; i &lt;&lt; ' ';\ncout &lt;&lt; endl;\n\nvector&lt;int&gt; c;\nfor (int i = 0; i &lt; 10; i ++) c.push_back(i);\n\nfor (int i = 0; i &lt; 10; i++) cout &lt;&lt; c[i] &lt;&lt; ' ';\ncout &lt;&lt; endl;\n\nfor (vector&lt;int&gt;::iterator i = c.begin(); i != c.end(); i++) cout &lt;&lt; *i &lt;&lt; ' ';\ncout &lt;&lt; endl;\n\n\nreturn 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E8%B4%AA%E5%BF%83/","title":"\u7b2c\u516d\u8bb2  \u8d2a\u5fc3","text":""},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E8%B4%AA%E5%BF%83/#_2","title":"\u54c8\u592b\u66fc\u6811","text":"<p>\u7531\u4e8e\u54c8\u592b\u66fc\u6811\u7684\u6839\u8282\u70b9\u662f\u7531\u4e24\u4e2a\u5b50\u8282\u70b9\u5408\u5e76\u800c\u6765\uff0c\u6240\u4ee5\u54c8\u592b\u66fc\u6811\u4e00\u5b9a\u662f\u5b8c\u5168\u4e8c\u53c9\u6811</p> <p>\u505a\u6cd5\u662f\u6bcf\u4e00\u6b21\u6311\u51fa\u6700\u5c0f\u7684\u4e24\u5806</p> <ol> <li>\u5728\u6240\u6709\u6570\u91cc\u9762\uff0c\u6570\u6700\u5c0f\u7684\u4e24\u4e2a\u6570\u4e00\u5b9a\u662f\u6df1\u5ea6\u6700\u6df1\u7684\u4e24\u4e2a\u70b9\u4e14\u53ef\u4ee5\u4e92\u4e3a\u5144\u5f1f\u8282\u70b9</li> </ol> <p>\u6bcf\u4e00\u6b21\u6c42\u6700\u5c0f\u503c\uff0c\u53ef\u4ee5\u7528\u5c0f\u6839\u5806\u3001\u4f18\u5148\u961f\u5217\uff0c\u5c0f\u6839\u5806\u5c31\u662f\u6bcf\u6b21\u7684top()\u662f\u6700\u5c0f\u503c</p> <pre><code> std::priority_queue&lt;int, std::vector&lt;int&gt;, std::greater&lt;int&gt;&gt; minHeap;\n</code></pre> <p><code>vector&lt;int&gt;</code>\u6307\u7684\u662f\u7528\u6765\u5b58\u50a8\u5143\u7d20\u7684\u5e95\u5c42\u5bb9\u5668</p> <p>\u5927\u6839\u5806\u5c31\u662f\u6bcf\u6b21\u7684top()\u90fd\u662f\u6700\u5927\u503c</p> <pre><code>std::priority_queue&lt;int&gt; maxHeap;\n</code></pre> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;queue&gt;\nusing namespace std;\n\nint n;\nint main () {\ncin &gt;&gt; n;\npriority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; heap;\n\nfor (int i = 0; i &lt; n; i++) {\nint x;\nscanf(\"%d\", &amp;x);\nheap.push(x);\n}\nint res = 0;\nwhile (heap.size() &gt; 1) {\nint a = heap.top();\nheap.pop();\nint b = heap.top();\nheap.pop();\nres += a + b;\nheap.push(a + b);\n}\nprintf(\"%d\\n\", res);\nreturn 0;\n}\n</code></pre>"},{"location":"Problem/contest/contest/","title":"LeetCode \u5468\u8d5b","text":""},{"location":"Problem/contest/contest/#debug","title":"\u5173\u4e8edebug","text":""},{"location":"Problem/contest/contest/#overflow","title":"overflow\u78b0\u5230\u7684\u53ef\u80fd\u95ee\u9898","text":"<ol> <li>\u5728\u9700\u8981\u9012\u51cf\u7684\u5faa\u73af\u91cc\u6ca1\u6709\u9009\u62e9\u9012\u51cf\u6bd4\u5982<code>for (int i = nums.size() - 2; i &gt;= 0; i--)</code>\u8981\u6ce8\u610f\u8fd9\u91cc\u7684i\u9700\u8981<code>i--</code></li> </ol>"},{"location":"Problem/contest/contest/#2240","title":"2240. \u4e70\u94a2\u7b14\u548c\u94c5\u7b14\u7684\u65b9\u6848\u6570","text":"<pre><code>class Solution {\npublic:\nlong long waysToBuyPensPencils(int total, int cost1, int cost2) {\n// \u89c2\u5bdf\u5230\u5982\u679ccost1\u53d8\u5927\uff0c\u90a3\u4e48\u5faa\u73af\u6b21\u6570\u5c31\u4f1a\u53d8\u5c0f\uff0c\u90a3\u4e48\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u4f1a\u964d\u4f4e\nif (cost1 &lt; cost2) return waysToBuyPensPencils(total, cost2, cost1);\nlong long res = 0;\nfor (int i = 0; i &lt;= total / cost1; i++) {\nres += (total - cost1 * i) / cost2 + 1;\n}\nreturn res;\n}\n};\n</code></pre>"},{"location":"Problem/contest/contest/#1400-1600","title":"1400-1600","text":""},{"location":"Problem/contest/contest/#2-2909-ii","title":"2. 2909. \u5143\u7d20\u548c\u6700\u5c0f\u7684\u5c71\u5f62\u4e09\u5143\u7ec4 II","text":"<p>\u7ecf\u5178\u7684\u524d\u540e\u7f00\u5206\u89e3\u95ee\u9898</p> <p>\u89c2\u5bdf\u8fd9\u9053\u9898\u8981\u6c42\u7684\u662f\uff0c\u4e2d\u95f4\u7684\u6570\u8981\u5927\u4e8e\u4e24\u8fb9\uff0c\u90a3\u4e48\u5c31\u76f8\u5f53\u4e8e\u6700\u5173\u952e\u7684\u662f\u4e2d\u95f4\u8fd9\u4e2a\u6570\uff0c\u6240\u4ee5\u679a\u4e3e\u8fd9\u4e2a\u6570\u5373\u53ef</p> <p>\u524d\u7f00\u82f1\u6587prefix \u540e\u7f00\u82f1\u6587suffix</p> <pre><code>class Solution {\npublic:\nint minimumSum(vector&lt;int&gt;&amp; nums) {\nint res = INT_MAX;\nvector&lt;int&gt; suf(nums.size());\nsuf[nums.size() - 1] = nums[nums.size() - 1];\nfor (int i = nums.size() - 2; i &gt;= 0; i--) {\nsuf[i] = min(suf[i + 1], nums[i]);\n}\n\nvector&lt;int&gt; pre(nums.size());\npre[0] = nums[0];\nfor (int i = 1; i &lt; nums.size() - 1; i++) {\npre[i] = min(pre[i - 1], nums[i]);\nif (nums[i] &gt; pre[i - 1] &amp;&amp; nums[i] &gt; suf[i + 1]) {\nres = min(res, nums[i] + pre[i - 1] + suf[i + 1]);\n}\n}\n\nreturn (res == INT_MAX) ? -1 : res;\n}\n};\n</code></pre>"},{"location":"Problem/contest/contest/#_1","title":"LeetCode \u5468\u8d5b","text":""},{"location":"Problem/lc/LeetCode/","title":"LeetCode","text":""},{"location":"Problem/lc/LeetCode/#about-leetcode","title":"About LeetCode","text":"<p>leetcode\u76f8\u6bd4\u4e8eoj\u9898\u5c31\u548c\u5965\u8d5b\u9898\u5bf9\u4e8e\u666e\u901a\u6570\u5b66\u9898\u4e00\u6837\uff0c\u4e3b\u8981\u9700\u8981\u575a\u6301\u4e0b\u6765</p> <p>\u6c1b\u56f4\u5f88\u91cd\u8981\uff0c\u6bcf\u5468\u8ddf\u7740\u5237</p> <p>\u5237\u56db\u4e94\u767e\u9053\u9898\u9762\u8bd5\u4e00\u822c\u95ee\u9898\u4e0d\u662f\u5f88\u5927</p>"},{"location":"Problem/lc/LeetCode/#_1","title":"\u601d\u7ef4","text":"<p>\u7b97\u6cd5\u8981\u628a\u6bcf\u4e00\u6b65\u641e\u61c2\uff0c\u8981\u77e5\u9053\u4e3a\u4ec0\u4e48\u8fd9\u4e48\u505a\uff0c\u8fd9\u4e2a\u662f\u6700\u91cd\u8981\u7684\uff0c\u9632\u6b62\u9047\u5230\u65b0\u9898\u4e0d\u4f1a\u505a</p> <p>\u5148\u770b\u601d\u8def\u518d\u770b\u4ee3\u7801\uff0c\u800c\u4e0d\u8981\u5bf9\u7740\u4ee3\u7801\u53bb\u731c\u601d\u8def</p> <p>555555</p>"},{"location":"Problem/lc/LeetCode/#_2","title":"\u5199\u4ee3\u7801","text":"<p>\u4e00\u822c\u5199\u7684\u65f6\u95f4\u548c\u8c03\u8bd5\u65f6\u95f4\u4e00\u6837\u957f</p> <p>\u8fd9\u4e2a\u8c03\u8bd5bug\u7684\u80fd\u529b\u5f88\u91cd\u8981</p>"},{"location":"Problem/lc/LeetCode/#_3","title":"\u82f1\u8bed","text":"<p>\u8fd8\u662f\u9700\u8981\u953b\u70bc\u4e00\u4e0b\u81ea\u5df1\u82f1\u8bed\u770b\u9898\u548c\u82f1\u8bed\u8bf4\u601d\u8def\u7684\u80fd\u529b\u7684</p>"},{"location":"Problem/lc/LeetCode/#debug","title":"debug","text":""},{"location":"Problem/lc/LeetCode/#1-long-long","title":"1. \u9700\u8981\u4f7f\u7528long long\u7c7b\u578b\u5b58\u50a8","text":"<p>int 4\u4e2a\u5b57\u8282 -2147483648 \u5230 2147483647</p> <p>long long 8 \u4e2a\u5b57\u8282 -9,223,372,036,854,775,808 \u5230 9,223,372,036,854,775,807</p> <pre><code>Line 8: Char 22: runtime error: signed integer overflow: 10 * 964632435 cannot be represented in type 'int' (solution.cpp)\n</code></pre>"},{"location":"Problem/lc/LeetCode/#_4","title":"\u6280\u5de7\u548c\u9700\u8981\u77e5\u9053\u7684\u77e5\u8bc6","text":""},{"location":"Problem/lc/LeetCode/#_5","title":"\u77e5\u8bc6\uff1a\u5173\u4e8e\u4e8c\u7ef4\u5e03\u5c14\u503c\u7684\u5b9a\u4e49","text":"<p>\u4f7f\u7528\u5982\u4e0b\u8bed\u53e5\u521b\u5efabool\u4e8c\u7ef4\u6570\u7ec4\u7684\u65f6\u5019,\u521d\u59cb\u5316\u7684\u503c\u662ffalse</p> <pre><code>vector&lt;vector&lt;bool&gt;&gt; f(n + 1, vector&lt;bool&gt;(m + 1));\n</code></pre> <p>\u521b\u5efa\u4e86\u4e00\u4e2a\u4e8c\u7ef4\u7684\u5e03\u5c14\u578b\uff08bool\uff09\u5411\u91cf\uff08vector\uff09\u6570\u7ec4 <code>f</code>\uff0c\u5176\u5927\u5c0f\u4e3a <code>(n+1)</code> \u884c\uff0c\u6bcf\u884c\u6709 <code>(m+1)</code> \u5217\u3002</p> <p><code>vector</code> \u662fC++\u6807\u51c6\u5e93\u4e2d\u7684\u52a8\u6001\u6570\u7ec4\u5bb9\u5668\uff0c<code>vector&lt;bool&gt;</code> \u8868\u793a\u5b58\u50a8\u5e03\u5c14\u7c7b\u578b\u7684\u52a8\u6001\u6570\u7ec4</p> <p><code>vector&lt;vector&lt;bool&gt;&gt;</code>\uff1a\u8fd9\u8868\u793a\u4e00\u4e2a\u4e8c\u7ef4\u7684\u52a8\u6001\u6570\u7ec4\u3002\u5916\u90e8\u7684 <code>vector</code> \u5305\u542b\u5185\u90e8\u7684 <code>vector&lt;bool&gt;</code>\u3002\u8fd9\u662f\u4e00\u4e2a\u5411\u91cf\u7684\u5411\u91cf\uff0c\u5176\u4e2d\u5916\u90e8 <code>vector</code> \u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a\u5185\u90e8 <code>vector&lt;bool&gt;</code>\u3002\u8fd9\u6837\u5c31\u521b\u5efa\u4e86\u4e00\u4e2a\u4e8c\u7ef4\u5e03\u5c14\u6570\u7ec4\u6216\u77e9\u9635\uff0c\u5176\u4e2d\u5916\u90e8 <code>vector</code> \u8868\u793a\u884c\uff0c\u5185\u90e8 <code>vector&lt;bool&gt;</code> \u8868\u793a\u6bcf\u4e00\u884c\u4e2d\u7684\u5217\u3002</p> <p>\u5916\u90e8\u7684 <code>f(n + 1, ...)</code> \u90e8\u5206\u7528\u4e8e\u5b9a\u4e49 <code>f</code> \u7684\u884c\u6570\uff0c\u5b83\u521b\u5efa\u4e86\u4e00\u4e2a <code>vector&lt;vector&lt;bool&gt;&gt;</code>\uff0c\u5176\u4e2d\u6709 <code>n + 1</code> \u884c\u3002\u8fd9\u662f\u4e00\u4e2a\u5916\u90e8\u5411\u91cf\uff0c\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a\u5185\u90e8\u7684\u5411\u91cf\u3002</p> <p>\u5185\u90e8\u7684 <code>vector&lt;bool&gt;(m + 1)</code> \u90e8\u5206\u7528\u4e8e\u5b9a\u4e49 <code>f</code> \u4e2d\u6bcf\u884c\u7684\u5217\u6570\uff0c\u5b83\u521b\u5efa\u4e86\u4e00\u4e2a\u5185\u90e8 <code>vector&lt;bool&gt;</code>\uff0c\u5176\u4e2d\u6709 <code>m + 1</code> \u4e2a\u5e03\u5c14\u5143\u7d20\u3002\u8fd9\u662f\u5185\u90e8\u5411\u91cf\uff0c\u7528\u4e8e\u8868\u793a\u6bcf\u4e00\u884c\u4e2d\u7684\u5217\u3002</p> <p>\u90a3\u4e48\u521b\u5efa\u4e00\u4e2a\u4e09\u4f4d\u7684\u5e03\u5c14\u6570\u7ec4:</p> <pre><code>    // \u521b\u5efa\u4e00\u4e2a\u4e09\u7ef4\u5e03\u5c14\u578b\u5411\u91cf\u6570\u7ec4\n// \u521d\u59cb\u5316\u4e3afalse\uff0c\u53ef\u4ee5\u6839\u636e\u9700\u8981\u521d\u59cb\u5316\u4e3atrue\nvector&lt;vector&lt;vector&lt;bool&gt;&gt;&gt; threeDArray(n, vector&lt;vector&lt;bool&gt;&gt;(m, vector&lt;bool&gt;(k, false) ));\nthreeDArray[0][1][2] = true;\n</code></pre>"},{"location":"Problem/lc/LeetCode/#_6","title":"\u77e5\u8bc6: \u6b63\u5219\u8868\u8fbe\u5f0f","text":"<ol> <li>\u5b57\u7b26\u5339\u914d\uff1a\u6b63\u5219\u8868\u8fbe\u5f0f\u7528\u4e8e\u5339\u914d\u5177\u4f53\u7684\u5b57\u7b26\u3002\u4f8b\u5982\uff0c<code>a</code> \u5339\u914d\u5b57\u7b26 \"a\"\uff0c<code>123</code> \u5339\u914d\u5b57\u7b26\u4e32 \"123\"\u3002</li> <li>\u901a\u914d\u7b26\uff1a<code>.</code> \u8868\u793a\u5339\u914d\u4efb\u610f\u5b57\u7b26\uff0c\u9664\u4e86\u6362\u884c\u7b26\u3002\u4f8b\u5982\uff0c<code>a.b</code> \u5339\u914d \"axb\"\u3001\"aab\"\u3001\"a1b\" \u7b49\u3002</li> <li>\u5b57\u7b26\u7c7b\uff1a\u7528\u65b9\u62ec\u53f7 <code>[]</code> \u6765\u5b9a\u4e49\u4e00\u4e2a\u5b57\u7b26\u7c7b\uff0c\u53ef\u4ee5\u5339\u914d\u62ec\u53f7\u5185\u7684\u4efb\u4f55\u4e00\u4e2a\u5b57\u7b26\u3002\u4f8b\u5982\uff0c<code>[abc]</code> \u5339\u914d \"a\"\u3001\"b\" \u6216 \"c\" \u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u5b57\u7b26\u3002</li> <li>\u5b57\u7b26\u8303\u56f4\uff1a\u5728\u5b57\u7b26\u7c7b\u4e2d\u53ef\u4ee5\u4f7f\u7528\u8fde\u5b57\u7b26 <code>-</code> \u6765\u8868\u793a\u4e00\u4e2a\u5b57\u7b26\u8303\u56f4\u3002\u4f8b\u5982\uff0c<code>[a-z]</code> \u5339\u914d\u4efb\u4f55\u5c0f\u5199\u5b57\u6bcd\u3002</li> <li>\u91cd\u590d\uff1a\u4f7f\u7528 <code>{}</code>\u3001<code>*</code>\u3001<code>+</code>\u3001<code>?</code> \u7b49\u6765\u8868\u793a\u5b57\u7b26\u6216\u5b50\u8868\u8fbe\u5f0f\u7684\u91cd\u590d\u6b21\u6570\u3002\u4f8b\u5982\uff0c<code>a{3}</code> \u5339\u914d \"aaa\"\uff0c<code>a*</code> \u5339\u914d\u96f6\u6b21\u6216\u591a\u6b21\u7684 \"a\"\u3002</li> <li>\u8d77\u59cb\u548c\u7ed3\u675f\uff1a<code>^</code> \u8868\u793a\u5b57\u7b26\u4e32\u7684\u5f00\u59cb\uff0c<code>$</code> \u8868\u793a\u5b57\u7b26\u4e32\u7684\u7ed3\u675f\u3002\u4f8b\u5982\uff0c<code>^abc</code> \u5339\u914d\u4ee5 \"abc\" \u5f00\u5934\u7684\u5b57\u7b26\u4e32\u3002</li> <li>\u6216\u64cd\u4f5c\uff1a\u4f7f\u7528 <code>|</code> \u6765\u8868\u793a\u6216\u64cd\u4f5c\uff0c\u5339\u914d\u591a\u4e2a\u53ef\u80fd\u7684\u6a21\u5f0f\u4e2d\u7684\u4e00\u4e2a\u3002\u4f8b\u5982\uff0c<code>cat|dog</code> \u5339\u914d \"cat\" \u6216 \"dog\"\u3002</li> <li>\u5206\u7ec4\uff1a\u4f7f\u7528 <code>()</code> \u6765\u521b\u5efa\u4e00\u4e2a\u5b50\u8868\u8fbe\u5f0f\uff0c\u53ef\u4ee5\u5bf9\u5b50\u8868\u8fbe\u5f0f\u8fdb\u884c\u91cd\u590d\u3001\u6216\u64cd\u4f5c\u7b49\u64cd\u4f5c\u3002\u4f8b\u5982\uff0c<code>(ab)+</code> \u5339\u914d \"ab\"\u3001\"abab\"\u3001\"ababab\" \u7b49\u3002</li> </ol> <p>\u9700\u8981\u6ce8\u610f\u7684\u662f<code>.*</code>\u53ef\u4ee5\u7528\u6765\u5339\u914d\u4efb\u610f\u7684\u5b57\u7b26\u4e32,\u539f\u56e0\u662f<code>*</code>\u4ee3\u8868\u7684\u662f\u91cd\u590d\u4efb\u610f\u4e2a\u6570\u7684<code>.</code>,\u4e5f\u5c31\u662f\u8fd9\u4e24\u4e2a\u7b26\u53f7\u53ef\u4ee5\u5339\u914d\u4efb\u610f\u6570\u91cf\u7684\u4efb\u610f\u5b57\u7b26\u4e32</p>"},{"location":"Problem/lc/LeetCode/#_7","title":"\u77e5\u8bc6: \u903b\u8f91\u9884\u7b97\u7b26\u7684\u4f18\u5148\u7ea7","text":"<p>\u5728c++\u4e2d\u7684&amp;&amp;\u4f18\u5148\u7ea7\u9ad8\u4e8e||</p>"},{"location":"Problem/lc/LeetCode/#_8","title":"\u77e5\u8bc6\uff1a\u6570\u7ec4\u7684\u5927\u5c0f","text":"<p>\u53ea\u6709\u6807\u51c6\u5bb9\u5668\u624d\u53ef\u4ee5\u4f7f\u7528<code>size()</code></p> <p>\u800c\u7528<code>string reps[]</code>\u5b9a\u4e49\u7684\u6570\u7ec4\u7684\u5927\u5c0f\u9700\u8981\u4f7f\u7528sizeof()\uff0c\u4e0d\u8fc7\u7531\u4e8ereps[1]\u662f\u5b57\u7b26\u4e32\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528reps[1].size()</p>"},{"location":"Problem/lc/LeetCode/#_9","title":"\u77e5\u8bc6\uff1a\u5b57\u7b26\u4e32\u7684\u5904\u7406","text":"<p>string\u4e0b\u5b57\u7b26\u4e32\u7684\u76f8\u7b49\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u7b49\u53f7\uff1a</p> <pre><code>#include &lt;vector&gt;\n#include &lt;string&gt;\n#include &lt;iostream&gt;\nusing namespace std;\nint main() {\nstring s = \"adfs;jlk\";\nstring pattern = \"d\";\nif (s.substr(1, 1) == pattern) cout &lt;&lt; \"yes\" &lt;&lt; endl; // \u8f93\u51fayes\nreturn 0;\n}\n</code></pre> <p>\u6ce8\u610fsubstr()\u7684\u4f7f\u7528\uff01\uff01\uff01</p>"},{"location":"Problem/lc/LeetCode/#pair","title":"\u77e5\u8bc6\uff1apair\u952e\u503c\u5bf9\u7684\u4f7f\u7528","text":""},{"location":"Problem/lc/LeetCode/#pair_1","title":"pair\u952e\u503c\u5bf9\u5b9a\u4e49","text":"<pre><code>pair&lt;int, int&gt; res(INT_MAX, INT_MAX);\n</code></pre> <p>\u8fd9\u91cc\u4e24\u4e2a\u521d\u59cb\u7684\u503c\u90fd\u88ab\u8bbe\u6210\u4e86INT_MAX</p>"},{"location":"Problem/lc/LeetCode/#_10","title":"\u952e\u503c\u5bf9\u7684\u6bd4\u8f83","text":"<p>\u952e\u503c\u5bf9\u7684\u6bd4\u8f83\u662f\u9010\u4e2a\u5143\u7d20\u7684\u6bd4\u8f83\uff0c\u5c31\u662f\u5148\u6bd4\u8f83\u7b2c\u4e00\u4e2a\uff0c\u5982\u679c\u76f8\u540c\u518d\u6bd4\u8f83\u7b2c\u4e8c\u4e2a</p> <pre><code>pair&lt;int, int&gt; res(INT_MAX, INT_MAX);\nres = min(res, make_pair(abs(s-target), s));\n</code></pre>"},{"location":"Problem/lc/LeetCode/#_11","title":"\u952e\u503c\u5bf9\u7b2c\u4e8c\u4e2a\u5143\u7d20\u7684\u8fd4\u56de","text":"<pre><code>return res.second;\n</code></pre>"},{"location":"Problem/lc/LeetCode/#_12","title":"\u952e\u503c\u5bf9\u6570\u7ec4\u7684\u5b9a\u4e49","text":"<p>\u6ce8\u610f\u8fd9\u91cc<code>const auto&amp;</code></p> <ul> <li><code>const</code> \u8868\u793a <code>kvp</code> \u662f\u53ea\u8bfb\u7684\uff0c\u4f60\u4e0d\u80fd\u5728\u5faa\u73af\u4e2d\u4fee\u6539\u5bb9\u5668\u4e2d\u7684\u5143\u7d20\u3002</li> <li><code>auto&amp;</code> \u58f0\u660e\u4e86\u4e00\u4e2a\u5f15\u7528\uff0c\u56e0\u6b64 <code>kvp</code> \u4f1a\u6307\u5411\u5bb9\u5668\u4e2d\u7684\u5b9e\u9645\u5143\u7d20\uff0c\u8fd9\u610f\u5473\u7740\u5728\u5faa\u73af\u4e2d\u4f7f\u7528 <code>kvp</code> \u65f6\uff0c\u4f60\u5b9e\u9645\u4e0a\u662f\u5728\u64cd\u4f5c\u5bb9\u5668\u4e2d\u7684\u5143\u7d20\uff0c\u4efb\u4f55\u4fee\u6539\u90fd\u4f1a\u53cd\u6620\u5230\u5bb9\u5668\u672c\u8eab\u3002</li> </ul> <pre><code>    vector&lt;pair&lt;string, int&gt;&gt; keyValuePairs;\n\nkeyValuePairs.push_back({\"orange\", 1});\n\nkeyValuePairs.push_back(make_pair(\"apple\", 5));\n\n// \u8bbf\u95ee\u952e\u503c\u5bf9\nfor (const auto&amp; kvp : keyValuePairs) {\ncout &lt;&lt; \"The value of \" &lt;&lt; kvp.first &lt;&lt; \" is: \" &lt;&lt; kvp.second &lt;&lt; endl;\n}\n</code></pre>"},{"location":"Problem/lc/LeetCode/#unordered_map","title":"\u54c8\u5e0c\u8868\u7684\u5b9a\u4e49(unordered_map)","text":"<p><code>std::unordered_map</code> \u662f\u4e00\u4e2a\u54c8\u5e0c\u8868\u6570\u636e\u7ed3\u6784\uff0c\u5b83\u7528\u4e8e\u5b58\u50a8\u952e-\u503c\u5bf9\uff0c\u5176\u4e2d\u952e\u662f\u552f\u4e00\u7684\uff0c\u800c\u503c\u53ef\u4ee5\u91cd\u590d\u3002</p> <p><code>hash.count(k)</code> \u662f\u7528\u4e8e\u68c0\u67e5\u54c8\u5e0c\u8868\u4e2d\u662f\u5426\u5b58\u5728\u7279\u5b9a\u952e <code>k</code> \u7684\u6210\u5458\u51fd\u6570\uff0c\u5b83\u8fd4\u56de\u4e00\u4e2a\u6574\u6570\u503c\uff0c\u8868\u793a\u6307\u5b9a\u952e <code>k</code> \u5728\u54c8\u5e0c\u8868\u4e2d\u7684\u51fa\u73b0\u6b21\u6570\u3002</p> <pre><code>unordered_map&lt;int, int&gt; hash;\nhash.count(k)\n</code></pre>"},{"location":"Problem/lc/LeetCode/#leetcode_1","title":"\u77e5\u8bc6\uff1aleetcode\u4e2d\u94fe\u8868\u7ed3\u6784\u4f53\u7684\u5b9a\u4e49","text":"<pre><code> struct ListNode {\nint val;\nListNode *next;\nListNode() : val(0), next(nullptr) {}\nListNode(int x) : val(x), next(nullptr) {}\nListNode(int x, ListNode *next) : val(x), next(next) {}\n};\n</code></pre>"},{"location":"Problem/lc/LeetCode/#_13","title":"\u77e5\u8bc6\uff1a\u6808\u7684\u4f7f\u7528","text":"<pre><code>//\u6808\u7684\u5b9a\u4e49\nstack&lt;char&gt; stk;\n\nstack, \u6808\nsize()\nempty()\npush()  \u5411\u6808\u9876\u63d2\u5165\u4e00\u4e2a\u5143\u7d20\ntop()  \u8fd4\u56de\u6808\u9876\u5143\u7d20\npop()  \u5f39\u51fa\u6808\u9876\u5143\u7d20\n</code></pre>"},{"location":"Problem/lc/LeetCode/#_14","title":"\u9898\u578b\uff1a\u62ec\u53f7\u5e8f\u5217\u95ee\u9898","text":"123 { 125 } 91 [ 93 ] 40 ( 41 ) <p>\u53ef\u4ee5\u53d1\u73b0\u6bcf\u7ec4\u62ec\u53f7\u7684ASCII\u7801\u8868\u4e4b\u5dee&lt;2\uff0c\u53ef\u4ee5\u7528\u6765\u5224\u65ad\u6bcf\u7ec4\u62ec\u53f7\u662f\u5426\u95ed\u5408</p> <p>\u5373<code>abs(c -stk.top()) &lt; 2</code></p> <p>\u540c\u65f6\uff0c\u53ea\u6709\u4e00\u79cd\u62ec\u53f7\u7684\u62ec\u53f7\u5e8f\u5217\u5408\u6cd5\u7684\u8bdd\uff0c\u9700\u8981\u6ee1\u8db3\uff1a</p> <ol> <li>\u4efb\u610f\u524d\u7f00\u4e2d\u5de6\u62ec\u53f7\u7684\u6570\u91cf\u5927\u4e8e\u7b49\u4e8e\u53f3\u62ec\u53f7\u7684\u6570\u91cf</li> <li>\u603b\u5b57\u7b26\u4e32\u4e2d\u5de6\u53f3\u62ec\u53f7\u7684\u6570\u91cf\u76f8\u7b49</li> </ol>"},{"location":"Problem/lc/LeetCode/#vectormoveemplace_back","title":"\u77e5\u8bc6\uff1avector\u7684move\u548cemplace_back()\u7528\u6cd5","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\nvector&lt;vector&lt;int&gt;&gt; levelOrder(TreeNode* root) {\n// \u5c42\u5e8f\u904d\u5386\u5c31\u662f\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\nif (root == nullptr) return {};\nvector&lt;vector&lt;int&gt;&gt; ans;\nvector&lt;TreeNode*&gt; cur = {root};\nwhile (cur.size()) {\nvector&lt;TreeNode*&gt; next;\nvector&lt;int&gt; vals;\nfor (TreeNode* node : cur) {\nvals.push_back(node-&gt;val);\nif (node-&gt;left) next.push_back(node-&gt;left);\nif (node-&gt;right) next.push_back(node-&gt;right);\n}\ncur = move(next);\nans.emplace_back(vals);\n}\nreturn ans;\n}\n};\n</code></pre>"},{"location":"Problem/lc/LeetCode/#101","title":"10.1","text":""},{"location":"Problem/lc/LeetCode/#1-two-sum","title":"1. Two Sum","text":"<pre><code>class Solution {\npublic:\nvector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) {\nunordered_map&lt;int, int&gt; hash;\nfor (int i = 0; i &lt; nums.size(); i++) {\nint k = target - nums[i];\nif (hash.count(k)) {\nreturn {hash[k], i};\nbreak;\n}\nhash[nums[i]] = i;\n}\nreturn {};\n}\n};\n</code></pre> <ol> <li>\u6ce8\u610fhash.count()\u7684\u4f7f\u7528</li> <li>\u6ce8\u610fhash[nums[i]] = i;\u7684\u4f7f\u7528</li> </ol>"},{"location":"Problem/lc/LeetCode/#2-add-two-numbers","title":"2. Add Two Numbers","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\nListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n// \u51e1\u662f\u9700\u8981\u7279\u5224\u7b2c\u4e00\u4e2a\u70b9\u7684\u5730\u65b9\uff0c\u90fd\u53ef\u4ee5\u52a0\u5165\u4e00\u4e2a\u865a\u62df\u5934\u8282\u70b9\nListNode* dummy = new ListNode(-1);\nListNode* cur = dummy;\nint carry = 0;\nwhile (l1 || l2 || carry) {\nif (l1) carry += l1-&gt;val, l1 = l1-&gt;next;\nif (l2) carry += l2-&gt; val, l2 = l2-&gt;next;\ncur = cur-&gt;next = new ListNode(carry % 10);\ncarry /= 10;\n}\nreturn dummy-&gt;next;\n\n}\n};\n</code></pre>"},{"location":"Problem/lc/LeetCode/#3-longest-substring-without-repeating-characters","title":"3. Longest Substring Without Repeating Characters","text":"<p>\u8fd9\u7c7b\u95ee\u9898\u8003\u8651\u7684\u662f\u600e\u4e48\u5c06\u6240\u6709\u7684\u60c5\u51b5\u8003\u8651\u5230</p> <pre><code>class Solution {\npublic:\nint lengthOfLongestSubstring(string s) {\nunordered_map&lt;int, int&gt; hash;\nint res = 0;\nfor (int i = 0, j = 0; j &lt; s.size(); j++) {\nhash[s[j]]++;\nwhile (hash[s[j]] &gt; 1) hash[s[i++]] --;\nres = max(res, j - i + 1);\n}\nreturn res; }\n\n};\n</code></pre>"},{"location":"Problem/lc/LeetCode/#102","title":"10.2","text":""},{"location":"Problem/lc/LeetCode/#4-median-of-two-sorted-arrays","title":"4. Median of Two Sorted Arrays","text":"<p>vector\u6570\u7ec4\u4e2dsize\u51fd\u6570\u7684\u8fd4\u56de\u503c\u662fsize_type \uff0c\u800c size_type \u7684\u7c7b\u578b\u662f\uff1aunsigned int\uff0cmin\u63a5\u53d7int\u578b\u53c2\u6570\uff0c\u6240\u4ee5\u9700\u8981\u5f3a\u8f6c</p> <pre><code>class Solution {\npublic:\ndouble findMedianSortedArrays(vector&lt;int&gt;&amp; nums1, vector&lt;int&gt;&amp; nums2) {\nint t = nums1.size() + nums2.size();\nif (t % 2 == 0) {\nint left = find(nums1, 0, nums2, 0, t / 2); // find\u627e\u7684\u662f\u7b2ct/2\u5c0f\u7684\u6570\nint right = find (nums1, 0, nums2, 0, t / 2 + 1);\nreturn (left + right) / 2.0;\n} else return find(nums1, 0, nums2, 0, t / 2 + 1);\n}\n\n\nint find(vector&lt;int&gt;&amp; nums1, int i, vector&lt;int&gt;&amp; nums2, int j, int k) {\n// \u9996\u5148\u8981\u9632\u6b62\u8d8a\u754c\u7684\u60c5\u51b5\u53d1\u751f\uff0c\u90a3\u4e48\u5c31\u8981\u628a\u5269\u4e0b\u7684\u8f83\u957f\u7684\u6570\u7ec4\u5b58\u50a8\u518dnums2\nif (nums1.size() - i &gt; nums2.size() - j) return find(nums2, j, nums1, i, k);\nif (nums1.size() == i) return nums2[j + k - 1];\nif (k == 1) return min(nums1[i], nums2[j]);\n\n// \u9012\u5f52\u903b\u8f91\n// \u6bd4\u8f83\u6bcf\u4e2asub\u6570\u7ec4\u4e2d\u7b2ck/2\u4e2a\u7684\u6570\u7684\u5927\u5c0f\uff0c\u6ce8\u610fnums\u7684\u957f\u5ea6\u6bd4\u8f83\u77ed\n// \u800c\u4e14\u6211\u4eec\u4e5f\u4e0d\u80fd\u786e\u5b9ak\u662f\u5947\u6570\u8fd8\u662f\u5076\u6570\uff0c\u6240\u4ee5\u5bf9\u4e8e\u53e6\u4e00\u4e2a\u6570\u7ec4\u52a0\u4e0a\uff08k - k/2\uff09\u624d\u884c\n// vector\u6570\u7ec4\u4e2dsize\u51fd\u6570\u7684\u8fd4\u56de\u503c\u662fsize_type \uff0c\u800c size_type \u7684\u7c7b\u578b\u662f\uff1aunsigned int\uff0cmin\u63a5\u53d7int\u578b\u53c2\u6570\uff0c\u6240\u4ee5\u9700\u8981\u5f3a\u8f6c\nint si = min((int)nums1.size(), (i + k / 2));\nint sj = j + k - k /2;\n// \u8fd9\u91cc\u6307\u7684\u662f\u7b2c\u51e0\u4e2a\uff0c\u6240\u4ee5\u5fc5\u987b\u8981 -1\nif (nums1[si - 1] &gt; nums2[sj  - 1]) {\nreturn find(nums1, i, nums2, sj, k - (sj - j));\n} else return find(nums1, si, nums2, j, k - (si - i));\n} };\n</code></pre>"},{"location":"Problem/lc/LeetCode/#5-longest-palindromic-substring","title":"5. Longest Palindromic Substring","text":"<p>palindromic substring \u56de\u6587\u5b57\u7b26\u4e32</p> <p>\u9047\u5230\u95ee\u9898\u5148\u7528\u66b4\u529b\u89e3\u6cd5\u8bd5\u8bd5</p> <pre><code>class Solution {\npublic:\nstring longestPalindrome(string s) {\n\nstring res;\nfor (int i = 0; i &lt; s.size(); i++) {\n// \u56de\u6587\u5b57\u7b26\u4e32\u4e3a\u5947\u6570\u7684\u60c5\u51b5\n// \u4f7f\u7528\u53cc\u6307\u9488\nint m = i - 1, n = i + 1;\nwhile (m &gt;= 0 &amp;&amp; n &lt;s.size() &amp;&amp; s[m] == s[n]) {\nm--, n++;\n}\nif (n - m - 1 &gt; res.size()) res = s.substr(m + 1, n - m - 1);\n\n// \u56de\u6587\u5b57\u7b26\u4e32\u4e3a\u5076\u6570\u7684\u60c5\u51b5\nm = i, n = i + 1;\nwhile (m &gt;= 0 &amp;&amp; n &lt; s.size() &amp;&amp; s[m] == s[n]) {\nm--, n++;\n}\nif (n - m - 1&gt; res.size()) res = s.substr(m + 1, n - m - 1);\n}\n\nreturn res;\n}\n\n};\n</code></pre>"},{"location":"Problem/lc/LeetCode/#6-zigzag-conversion","title":"6. Zigzag Conversion","text":"<p>zigzag pattern \u4e4b\u5b57\u5f62</p> <p>legibility \u8fa8\u8bc6\u6027</p> <pre><code>class Solution {\npublic:\nstring convert(string s, int numRows) {\nstring res;\nif (numRows == 1) return s;\nfor (int i = 1; i &lt;= numRows; i ++) {\nif (i == 1 || i == numRows) {\nfor (int j = i - 1; j &lt; s.size(); j =j + (2 * numRows - 2)) {\nres += s[j];\n}\n} else {\nfor (int l = i - 1, r = i - 1 + 2*(numRows - i); l &lt; s.size() || r &lt; s.size(); l += 2 * numRows - 2, r += 2 * numRows - 2) {\nif (l &lt; s.size()) res += s[l];\nif (r &lt; s.size()) res += s[r];\n}\n}\n}\n\nreturn res;\n}\n};\n</code></pre>"},{"location":"Problem/lc/LeetCode/#103","title":"10.3","text":""},{"location":"Problem/lc/LeetCode/#7-reverse-integer","title":"7. Reverse Integer","text":"<pre><code>class Solution {\npublic:\nint reverse(int x) {\n// \u6309\u7167\u9898\u610f\uff0cres\u8981\u88ab\u5b9a\u4e49\u6210int\u7c7b\u578b\u7684\u53d8\u91cf\nint res = 0;\nwhile (x) {\n// \u6ce8\u610f\u770b\u9898\u610f\u8d85\u51fa32\u4f4d\u6574\u6570\u9700\u8981return0\uff01\n// C++\u91cc\u9762\u8d1f\u6570\u6a21\u4e0a10\u662f\u8d1f\u6570\uff0c\u8fd9\u4e2a\u6027\u8d28\u53ef\u4ee5\u4f7f\u5199\u4ee3\u7801\u53d8\u5f97\u7b80\u5355\nif (res &gt; 0 &amp;&amp; res &gt; (INT_MAX - x % 10) /10) return 0;\nif (res &lt; 0 &amp;&amp; res &lt; (INT_MIN - x % 10) /10) return 0;\nres = 10 * res + x % 10;\nx /= 10;\n}\n\nreturn res;\n\n}\n};\n</code></pre>"},{"location":"Problem/lc/LeetCode/#8-string-to-integer-atoi","title":"8. String to Integer (atoi)","text":"<p>clamp \u622a\u65ad</p> <pre><code>class Solution {\npublic:\nint myAtoi(string s) {\nchar f;\nint res = 0;\nint i = 0;\n\nwhile (s[i] == ' ') i++;\nif (s[i] == '-' || s[i] == '+') {\nf = s[i];\ni++;\n}\n\nwhile (i &lt; s.size() &amp;&amp; s[i] &gt;= '0' &amp;&amp; s[i] &lt;= '9') {\nif (res &gt; (INT_MAX - (s[i] - '0')) / 10 &amp;&amp; f == '-') return INT_MIN;\n// \u65e0\u8bba\u662f\u524d\u9762\u6ca1\u6709\u7b26\u53f7\u6216\u8005\u6709+\u7684\uff0c\u90fd\u662f\u6b63\u6570\nif (res &gt; (INT_MAX - (s[i] - '0')) / 10) return INT_MAX;\nres = 10 * res + (s[i] - '0');\ni ++;\n}\n\n// cout &lt;&lt; \"f = \" &lt;&lt; f &lt;&lt;endl;\nif (f == '-') return -res;\nelse return res;\n}\n};\n</code></pre>"},{"location":"Problem/lc/LeetCode/#9-palindrome-number","title":"9. Palindrome Number","text":"<p>palindrome \u56de\u6587</p>"},{"location":"Problem/lc/LeetCode/#1","title":"1. \u8f6c\u6362\u6210\u5b57\u7b26\u4e32\u5904\u7406\u53cc\u6307\u9488\uff08\u6700\u6162\u7684\u505a\u6cd5\uff09","text":"<pre><code>class Solution {\npublic:\nbool isPalindrome(int x) {\n\nstring s = to_string(x);\nfor (int i = 0, j = s.size() - 1; i &lt; s.size() &amp;&amp; j &gt;= 0; i++, j--) {\nif (i == j) return true;\nif (s[i] != s[j]) {\nreturn false;\nbreak;\n}\n}\nreturn true;\n}\n};\n</code></pre>"},{"location":"Problem/lc/LeetCode/#2","title":"2. \u53cd\u8f6c\u5b57\u7b26\u4e32\u8fdb\u884c\u6bd4\u8f83","text":"<p>\u6ce8\u610frbegin()\u548crend()</p> <pre><code>class Solution {\npublic:\nbool isPalindrome(int x) {\nstring s = to_string(x);\nreturn s == string(s.rbegin(), s.rend());\nreturn true;\n}\n};\n</code></pre>"},{"location":"Problem/lc/LeetCode/#3-10-1","title":"3. \u4f7f\u7528\u6574\u6570\u53cd\u8f6c\uff0c\u5012\u5e8f\u4e00\u4f4d\u4e00\u4f4d*10 + 1\uff0c\u7136\u540e\u8fdb\u884c\u6bd4\u8f83","text":"<pre><code>class Solution {\npublic:\nbool isPalindrome(int x) {\n// \u521d\u59cb\u5316\u7684\u65f6\u5019\u4e00\u5b9a\u8981\u7ed9\u4e00\u4e2a\u503c\uff01\uff01\uff01\nlong long res = 0;\nint y = x;\nif (x &lt; 0) return false;\nwhile (x) {\nres = res * 10 + x % 10;\nx /= 10;\n}\nreturn res == y;\n}\n};\n</code></pre>"},{"location":"Problem/lc/LeetCode/#1022","title":"10.22","text":""},{"location":"Problem/lc/LeetCode/#10-regular-expression-matching","title":"10. Regular Expression Matching","text":"<p>\u600e\u4e48\u770b\u51fa\u6765\u662f\u7684dp\u7684\uff1a\u7ed9\u4e24\u4e2a\u5b57\u7b26\u4e32\u6c42\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217\uff0c\u7ed9\u4e24\u4e2a\u5b57\u7b26\u4e32\u8ba9\u6211\u4eec\u6c42\u8fb9\u9645\u8ddd\u79bb\uff0c\u7ed9\u4e24\u4e2a\u5b57\u7b26\u4e32\u95ee\u4f1a\u4e0d\u4f1a\u5339\u914d\uff08\u6765\u81ea\u7ecf\u9a8c\uff09</p> <p>\u901a\u7528\u7684\u5206\u6790\u8fc7\u7a0b\uff0c\u964d\u4f4e\u5206\u6790\u96be\u5ea6</p> <p>\u4ece\u96c6\u5408\u89d2\u5ea6\u6765\u770b\u95ee\u9898</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6\u662fn^2</p> <p>\u8981\u4e48\u5faa\u73af\u8981\u4e48\u9012\u5f52\uff0c\u9012\u5f52\u66f4\u5bb9\u6613\u7406\u89e3\uff0c\u4f46\u662f\u65f6\u95f4\u4f1a\u957f\u4e00\u4e9b</p> <p>\u4e00\u770b\u662f\u4e00\u4e2a\u5e8f\u5217\u6a21\u578b</p> <p>\u72b6\u6001\u8868\u793a\uff08\u9760\u7ecf\u9a8c\uff09\uff1a\u4e24\u4e2a\u5e8f\u5217\u4e00\u822c\u4f7f\u7528\u4e24\u7ef4\u6765\u8868\u793a\uff0c</p> <p>\u96c6\u5408f(i, j) \u5728\u6240\u6709\u65b9\u5f0f\u91cc\u9762\u662f\u5426\u5b58\u5728\u4e00\u4e2a\u5408\u6cd5\u7684\u65b9\u6848,\u8868\u793a\u7684\u96c6\u5408\u662f\u6240\u6709s[1-i]\u548c[1-j]\u7684\u5339\u914d\u65b9\u6848</p> <p>\u5c5e\u6027:bool\u662f\u5426\u5b58\u5728\u4e00\u4e2a\u5408\u6cd5\u65b9\u6848</p> <p>\u6b63\u5e38\u6765\u8bf4\u5c31\u9700\u8981\u66b4\u529b\u641c\u7d22\u4e86</p> <p>\u72b6\u6001\u8ba1\u7b97\uff1a</p> <ol> <li> <p>\u5982\u679cp[j]\u4e0d\u662fx*(\u8981\u628a<code>*</code>\u548c\u5b83\u524d\u9762\u7684\u90a3\u4e2a\u5b57\u7b26\u770b\u6210\u4e00\u4e2a\u6574\u4f53),\u90a3\u4e48\u76f4\u63a5\u5339\u914d\u5c31\u53ef\u4ee5\u4e86s[i]p[j]  ||  p[j]'.' &amp;&amp; f(i - 1, j - 1) (\u8be6\u7ec6\u7684\u6765\u8bb2\u5c31\u662f,\u6700\u540e\u6bd4\u8f83\u7684\u90a3\u4e24\u4e2a\u5b57\u7b26\u76f8\u7b49,\u6216\u8005p\u7684\u6700\u540e\u4e00\u4f4d\u662f\u901a\u914d\u7b26,\u5e76\u4e14\u8fd9\u4e24\u4e2a\u6700\u540e\u5b57\u7b26\u4e4b\u524d\u7684\u5e8f\u5217\u90fd\u662f\u5339\u914d\u7684)</p> </li> <li> <p>\u5982\u679cp[j]\u662fx*,\u90a3\u4e48\u5c31\u8981\u5f00\u59cb\u8003\u8651<code>x*</code>\u4ee3\u8868\u7684\u662f\u591a\u5c11\u4e2a\u5b57\u7b26,\u5343\u4e07\u6ce8\u610f\u662f\u628a<code>*</code>\u548c\u4ed6\u524d\u9762\u7684\u90a3\u4e2a\u5b57\u7b26\u770b\u6210\u4e00\u4e2a\u6574\u4f53!</p> </li> </ol> <p>\u5982\u679c\u8fd9\u4e2a\u6574\u4f53\u4ee3\u88680\u4e2a\u5b57\u7b26\u90a3\u4e48\u5c31\u9700\u8981f(i, j - 2)</p> <p>\u5982\u679c\u4ee3\u88681\u4e2a\u5b57\u7b26:f(i - 1, j - 2) &amp;&amp; si\u548cpj\u4e5f\u8981\u5339\u914d</p> <p>\u5982\u679c\u4ee3\u88682\u4e2a\u5b57\u7b26:f(i - 2, j - 2) &amp;&amp; si &amp;&amp; si -1</p> <p>\u6240\u4ee5:</p> <p>f(i, j) = f(i , j- 2) || f(i - 1, j - 2) &amp; si || f(i -2, j - 2) &amp; si &amp; si -1</p> <p>f(i - 1, j) = f(i - 1, j -2) || f(i -2, j -2) &amp; si-1...</p> <p>\u6240\u4ee5f(i, j) =f(i, j - 2) ||  f(i - 1, j) &amp;si\u4e0ep[j]\u5339\u914d</p> <p>leetcode\u7684\u6d4b\u8bd5\u6837\u4f8b\u7ecf\u8fc7\u52a0\u5f3a\u4e4b\u540e\u5df2\u7ecf\u4e0d\u7528\u8003\u8651\u7565\u8fc7p[j + 1]\u662f*\u7684\u8fd9\u79cd\u60c5\u51b5\u4e86,\u539f\u56e0\u662f\u4f1a\u51fa\u73b0<code>a***b</code></p> <pre><code>class Solution {\npublic:\nbool isMatch(string s, string p) {\nint n = s.size(), m = p.size();\n// \u9700\u8981\u5efa\u7acb\u4e8c\u7ef4\u5e03\u5c14\u6570\u7ec4\u6765\u5b58\u50a8\u5230\u73b0\u5728\u4e3a\u6b62\uff0c\u6240\u6709s\u4e2d\u7684\u5b57\u7b26\u662f\u5426\u5df2\u7ecf\u88abp\u4e2d\u7684\u5b57\u7b26\u5339\u914d\ns = ' ' + s, p = ' ' + p;\nvector&lt;vector&lt;bool&gt;&gt; f(n + 1, vector&lt;bool&gt;(m + 1));\n// \u4e0d\u8981\u5fd8\u8bb0\u7ed9\u521d\u59cb\u7684\u8d4b\u503c\nf[0][0] = true;\n// \u56e0\u4e3a\u662f\u5faa\u73af\uff0c\u90a3\u4e48p\u4e2d\u7684\u5b57\u7b26\u6570\u91cf\u5f88\u6709\u53ef\u80fd\u4f1a\u8d85\u8fc7s\u4e2d\u73b0\u5728\u5faa\u73af\u5230\u7684\u5b57\u7b26\u6570\u91cf\nfor (int i = 0; i &lt;= n; i++) {\nfor (int j = 1; j &lt;= m; j++) {\nif (i &amp;&amp; p[j] != '*') {\nf[i][j] = f[i - 1][j - 1] &amp;&amp; (s[i] == p[j] || p[j] == '.');\n} else if (p[j] == '*') {\nf[i][j] = f[i][j - 2] || i &amp;&amp; f[i - 1][j] &amp;&amp; (s[i] == p[j - 1] || p[j - 1] == '.');\n}\n}\n}\nreturn f[n][m];\n}\n};\n</code></pre>"},{"location":"Problem/lc/LeetCode/#11","title":"11. \u76db\u6700\u591a\u6c34\u7684\u5bb9\u5668","text":"<pre><code>class Solution {\npublic:\nint maxArea(vector&lt;int&gt;&amp; height) {\n// \u66b4\u529b\u505a\u6cd5\u8d85\u51fa\u65f6\u95f4\u9650\u5236\u4e86\n// \u90a3\u4e48\u6709\u4e24\u6761\u8fb9\u7684\u95ee\u9898\u5c31\u53ef\u4ee5\u7528\u53cc\u6307\u9488\u8fdb\u884c\u4f18\u5316\n// \u53ea\u6709\u79fb\u52a8\u77ed\u8fb9\u624d\u6709\u53ef\u80fd\u4f7f\u6c34\u9762\u4e0a\u5347\n// \u6728\u6876\u5bb9\u91cf\u7531\u77ed\u677f\u51b3\u5b9a, \u79fb\u52a8\u957f\u677f\u7684\u8bdd, \u6c34\u9762\u9ad8\u5ea6\u4e0d\u53ef\u80fd\u518d\u4e0a\u5347, \u800c\u5bbd\u5ea6\u53d8\u5c0f\u4e86, \u6240\u4ee5\u53ea\u6709\u901a\u8fc7\u79fb\u52a8\u77ed\u677f, \u624d\u6709\u53ef\u80fd\u4f7f\u6c34\u4f4d\u4e0a\u5347.\nint res = 0;\nfor (int i = 0, j = height.size() - 1; i &lt; j;) {\nres = max(res, (j - i) * min(height[i], height[j]));\nif (height[j] &lt; height[i]) j--;\nelse i++;\n}\nreturn res;\n}\n};\n</code></pre>"},{"location":"Problem/lc/LeetCode/#12","title":"12. \u6574\u6570\u8f6c\u7f57\u9a6c\u6570\u5b57","text":"<pre><code>class Solution {\npublic:\nstring intToRoman(int num) {\nstring res;\nint values[] = {\n1000,\n900, 500, 400, 100,\n90, 50, 40, 10,\n9, 5, 4, 1\n};\nstring reps[] = {\n\"M\",\n\"CM\", \"D\", \"CD\", \"C\",\n\"XC\", \"L\", \"XL\", \"X\",\n\"IX\", \"V\", \"IV\", \"I\"\n};\nfor (int i = 0; i &lt; 13; i++) {\nwhile (num &gt;= values[i]) {\nnum -= values[i];\nres += reps[i];\n}\n}\nreturn res;\n}\n};\n</code></pre>"},{"location":"Problem/lc/LeetCode/#1023","title":"10.23","text":""},{"location":"Problem/lc/LeetCode/#13","title":"13. \u7f57\u9a6c\u6570\u5b57\u8f6c\u6574\u6570","text":"<p>\u4e00\u9053\u7eaf\u7cb9\u7684string \u8bed\u6cd5\u9898\uff0c\u7528\u5230\u4e86substr()\u548cempty()</p> <p>\u4e5f\u53ef\u4ee5\u4f7f\u7528\u54c8\u5e0c\u8868\u6765\u505a\uff0c\u8bed\u6cd5\u4e0a\u66f4\u52a0\u6f02\u4eae</p> <pre><code>class Solution {\npublic:\nint romanToInt(string s) {\nint res = 0;\nint value[] = {\n1000,\n900, 500, 400, 100,\n90, 50, 40, 10,\n9, 5, 4, 1\n};\nstring reps[] = {\n\"M\",\n\"CM\", \"D\", \"CD\", \"C\",\n\"XC\", \"L\", \"XL\", \"X\",\n\"IX\", \"V\", \"IV\", \"I\"\n};\nfor (int i = 0; i &lt; 13 &amp;&amp; !s.empty(); i++) {\nwhile (!s.empty() &amp;&amp; s.substr(0, reps[i].size()) == reps[i]) {\nres += value[i];\ns = s.substr(reps[i].size(), s.size() - reps[i].size());\n}\n}\nreturn res;\n}\n};\n</code></pre> <pre><code>class Solution {\npublic:\nint romanToInt(string s) {\nunordered_map&lt;char, int&gt; hash;\nhash['I'] = 1, hash['V'] = 5;\nhash['X'] = 10, hash['L'] = 50;\nhash['C'] = 100, hash['D'] = 500;\nhash['M'] = 1000;\nint res = 0;\nfor (int i = 0; i &lt; s.size(); i++) {\nif (i &lt; s.size() - 1 &amp;&amp; hash[s[i]] &lt; hash[s[i + 1]]) {\nres -= hash[s[i]];\n} else res += hash[s[i]];\n}\nreturn res;\n}\n};\n</code></pre>"},{"location":"Problem/lc/LeetCode/#14","title":"14. \u6700\u957f\u516c\u5171\u524d\u7f00","text":"<p>\u524d\u7f00\u7684\u610f\u601d\u662f\u4e0b\u6807\u8fde\u7eed\uff0c\u4e0d\u7136\u5c31\u53d8\u6210dp\u95ee\u9898\u4e86</p> <pre><code>class Solution {\npublic:\nstring longestCommonPrefix(vector&lt;string&gt;&amp; strs) {\nstring res = \"\";\nfor (int i = 0; i &lt; strs[0].size(); i++) {\nchar pattern = strs[0][i];\nfor (int j = 0; j &lt; strs.size(); j++) {\nif (i &lt; strs[j].size() &amp;&amp; strs[j][i] == pattern) continue;\nelse return res;\n}\nres += pattern;\n}\nreturn res;\n}\n};\n</code></pre>"},{"location":"Problem/lc/LeetCode/#15","title":"15. \u4e09\u6570\u4e4b\u548c","text":"<p>\u53cc\u6307\u9488\u505a\u6cd5\u4e00\u5b9a\u8981\u6709\u5e8f</p> <p>\u8fd9\u9053\u9898\u76ee\u6700\u91cd\u8981\u7684\u4e00\u70b9\u5c31\u662f\u5c06n^3\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u964d\u4e0b\u6765</p> <p>\u5728i\u56fa\u5b9a\u7684\u60c5\u51b5\u4e0b\uff0c\u5e76\u4e14\u4fdd\u8bc1j&lt;k\uff0c\u5982\u679c\u6211\u4eec\u627e\u5230\u4e86\u7b2c\u4e00\u7ec4=0\u7684\u4e09\u4e2a\u6570</p> <p>\u90a3\u4e48\u679a\u4e3ej\u53d8\u5927\u65f6\uff0ck\u53ea\u80fd\u53d8\u5c0f</p> <p>\u8fd9\u6837\u6211\u4eec\u5c31\u505a\u5230\u4e86\u5728i\u4e0d\u53d8\u7684\u60c5\u51b5\u4e0b\uff0cj\u548ck\u4e00\u5171\u6700\u591a\u53ea\u679a\u4e3en\u4e2a\u6570\u800c\u4e0d\u662fn^2</p> <pre><code>class Solution {\npublic:\nvector&lt;vector&lt;int&gt;&gt; threeSum(vector&lt;int&gt;&amp; nums) {\nvector&lt;vector&lt;int&gt;&gt; res;\nsort(nums.begin(), nums.end());\nfor (int i = 0; i &lt; nums.size() - 2; i++) {\nif (i &amp;&amp; nums[i] == nums[i - 1]) continue;\nfor (int j = i + 1, k = nums.size() - 1; j &lt; k; j++) {\nif (j &gt; i + 1 &amp;&amp; nums[j] == nums[j - 1]) continue;\nwhile (j &lt; k - 1 &amp;&amp; nums[i] + nums[j] + nums[k - 1] &gt;= 0) k--;\nif (nums[i] + nums[j] + nums[k] == 0) res.push_back({nums[i], nums[j], nums[k]});  }\n}\nreturn res;\n\n}\n};\n</code></pre>"},{"location":"Problem/lc/LeetCode/#1024","title":"10.24","text":""},{"location":"Problem/lc/LeetCode/#16","title":"16. \u6700\u63a5\u8fd1\u7684\u4e09\u6570\u4e4b\u548c","text":"<ul> <li>\u952e\u503c\u5bf9pair\u7684\u5e94\u7528,<code>make_pair</code>\u4ee5\u53ca<code>return res.second</code></li> <li>\u627e\u5230\u4e86&gt;= target\u7684\u6700\u5c0f\u503c\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6570\u7684\u524d\u4e00\u4f4d\u5fc5\u5b9a\u662f&lt;target\u7684\u6700\u5927\u503c</li> </ul> <pre><code>class Solution {\npublic:\nint threeSumClosest(vector&lt;int&gt;&amp; nums, int target) {\nsort(nums.begin(), nums.end());\npair&lt;int, int&gt; res(INT_MAX, INT_MAX);\nfor (int i = 0; i &lt; nums.size() - 2; i++) {\nfor (int j = i + 1, k = nums.size() - 1; j &lt; k; j++) {\nwhile (j &lt; k - 1 &amp;&amp; nums[i] + nums[j] + nums[k - 1] &gt;= target) k--;\nint sum = nums[i] + nums[j] + nums[k];\nres = min(res, make_pair(abs(sum - target), sum));\nif (k - 1 &gt; j) {\nsum = nums[i] + nums[j] + nums[k - 1];\nres = min(res, make_pair(abs(target - sum), sum));\n}\n}\n}\nreturn res.second;\n}\n};\n</code></pre>"},{"location":"Problem/lc/LeetCode/#17","title":"17. \u7535\u8bdd\u53f7\u7801\u7684\u5b57\u6bcd\u7ec4\u5408","text":"<ul> <li>\u6ce8\u610f\u5230dfs\u7684\u5f62\u5f0f</li> <li>\u4f7f\u7528digits.empty()</li> <li>auto c : strs[digits[u] - '0']</li> </ul> <pre><code>class Solution {\npublic:\nvector&lt;string&gt; ans;\nstring strs[10] = {\n\"\", \"\", \"abc\", \"def\",\n\"ghi\", \"jkl\", \"mno\",\n\"pqrs\", \"tuv\", \"wxyz\"\n};\nvector&lt;string&gt; letterCombinations(string digits) {\nif (digits.empty()) return ans;\ndfs(digits, 0, \"\");\nreturn ans;\n}\nvoid dfs(string&amp; digits, int u, string path) {\nif (u == digits.size()) ans.push_back(path);\nelse {\nfor (auto c : strs[digits[u] - '0']) {\ndfs(digits, u + 1, path + c);\n}\n}\n}\n};\n</code></pre>"},{"location":"Problem/lc/LeetCode/#18","title":"18. \u56db\u6570\u4e4b\u548c","text":"<p>10.27\u505a\u9898\u5fc3\u5f97\uff1a</p> <ol> <li>\u5982\u679c\u51fa\u73b0\u6ea2\u51fa\u7684\u60c5\u51b5\uff0c\u5148\u7279\u5224\u4e00\u4e0b\u8f93\u5165  if (nums.size() &lt; 4) return ans;</li> <li>\u6ce8\u610f\u770b\u8f93\u5165\u7684\u5927\u5c0f\uff0c\u6ce8\u610f\u5f00long long </li> </ol> <pre><code>class Solution {\npublic:\nvector&lt;vector&lt;int&gt;&gt; fourSum(vector&lt;int&gt;&amp; nums, int target) {\nvector&lt;vector&lt;int&gt;&gt; ans;\nif (nums.size() &lt; 4) return ans;\nsort(nums.begin(), nums.end());\nfor (int i = 0; i &lt; nums.size() - 3; i++) {\nif (i &amp;&amp; nums[i] == nums[i - 1]) continue;\nfor (int j = i + 1; j &lt; nums.size() -2; j++) {\nif (j &gt;= i + 2 &amp;&amp; nums[j] == nums[j -1]) continue;\nfor (int m = j + 1, n = nums.size() - 1; m &lt; n; m++) {\nif (m &gt;= j + 2 &amp;&amp; m &lt; n &amp;&amp; nums[m] == nums[m - 1]) continue;\nwhile((long long) nums[i] + nums[j] + nums[m] + nums[n - 1] &gt;= target &amp;&amp; m &lt; n- 1) n--;\nif ((long long)nums[i] + nums[j] + nums[m] + nums[n] == target) ans.push_back({nums[i], nums[j], nums[m], nums[n]});\n}\n}\n}\nreturn ans;\n}\n};\n</code></pre>"},{"location":"Problem/lc/LeetCode/#1025","title":"10.25","text":""},{"location":"Problem/lc/LeetCode/#19-n","title":"19. \u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2c N \u4e2a\u7ed3\u70b9","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\nListNode* removeNthFromEnd(ListNode* head, int n) {\n// \u5728\u6240\u6709\u6709\u53ef\u80fd\u4f1a\u5220\u9664\u5934\u8282\u70b9\u7684\u94fe\u8868\u9898\u76ee\u4e2d\uff0c\u9700\u8981\u6dfb\u52a0\u865a\u62df\u5934\u8282\u70b9\nListNode* dummy = new ListNode(-1);\ndummy-&gt;next = head;\n// \u5148\u904d\u5386\u4e00\u904d\u6574\u4e2a\u94fe\u8868\uff0ck\u8bb0\u5f55\u7684\u662f\u5305\u542b\u865a\u62df\u5934\u8282\u70b9dummy\u7684\u603b\u94fe\u8868\u7684\u957f\u5ea6\nint k = 0;\nfor (auto ptr = dummy; ptr; ptr = ptr-&gt;next) k++;\n\nauto ptr = dummy;\nfor (int i = 0; i &lt; k - n - 1; i++) ptr = ptr-&gt;next;\n\nptr-&gt;next = ptr-&gt;next-&gt;next;\nreturn dummy-&gt;next;\n}\n};\n</code></pre>"},{"location":"Problem/lc/LeetCode/#20","title":"20. \u6709\u6548\u7684\u62ec\u53f7","text":"<pre><code>class Solution {\npublic:\nbool isValid(string s) {\n// \u5148\u8fdb\u540e\u51fa\u7684\u6570\u636e\u7ed3\u6784\u662fstack\nstack&lt;char&gt; stk;\nfor (char c : s) {\nif (c == '(' || c == '{' || c == '[') {\nstk.push(c);\n} else {\nif (stk.size() &amp;&amp; abs(c - stk.top()) &lt;= 2) stk.pop();\nelse return false;\n}\n}\nreturn stk.empty();\n}\n};\n</code></pre>"},{"location":"Problem/lc/LeetCode/#21","title":"21. \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\nListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\nauto dummy = new ListNode(-1), tail = dummy;\nwhile (list1 &amp;&amp; list2) {\nif (list1-&gt;val &lt;= list2-&gt;val) {\ntail = tail-&gt;next = list1;\nlist1 = list1-&gt;next;\n} else {\ntail = tail-&gt;next = list2;\nlist2 = list2-&gt;next;\n}\n}\nif (list1 == NULL) tail-&gt;next = list2;\nelse tail-&gt;next = list1;\nreturn dummy-&gt;next;\n}\n};\n</code></pre>"},{"location":"Problem/lc/LeetCode/#1026","title":"10.26","text":""},{"location":"Problem/lc/LeetCode/#22","title":"22. \u62ec\u53f7\u751f\u6210","text":"<pre><code>class Solution {\npublic:\nvector&lt;string&gt; res;\nvector&lt;string&gt; generateParenthesis(int n) {\ndfs(n, 0, 0, \"\");\nreturn res;\n}\nvoid dfs (int n, int l, int r, string seq) {\nif (l == n &amp;&amp; r == n) res.push_back(seq);\nelse {\nif (l &lt; n) dfs(n, l + 1, r, seq + '(');\nif (r &lt; n &amp;&amp; l &gt; r) dfs(n, l, r + 1, seq + ')');\n}\n}\n};\n</code></pre>"},{"location":"Problem/lc/LeetCode/#23-k","title":"23. \u5408\u5e76 K \u4e2a\u5347\u5e8f\u94fe\u8868","text":"<p>\u4f7f\u7528\u5806\u6765\u7ef4\u62a4\u7b2ck\u4e2a\u6307\u9488</p> <p>\u7528\u5806\u5c06\u65f6\u95f4\u590d\u6742\u5ea6\u4ece\u4f18\u5316\u6210nlogk</p> <p>\u4f18\u5148\u961f\u5217\u5c31\u662f\u5806</p> <p>\u4f18\u5148\u961f\u5217\u81ea\u5b9a\u4e49\u6bd4\u8f83\u51fd\u6570</p> <p>\u4f18\u5148\u961f\u5217\u662f\u5927\u6839\u5806\uff0c\u6240\u4ee5\u4f1a\u628a\u5927\u7684\u653e\u5728\u524d\u9762</p> <pre><code>std::priority_queue&lt;T, Container, Compare&gt;\n</code></pre> <p><code>Compare</code>\uff1a\u8fd9\u662f\u4e00\u4e2a\u6bd4\u8f83\u51fd\u6570\u6216\u8005\u51fd\u6570\u5bf9\u8c61\uff0c\u7528\u4e8e\u5b9a\u4e49\u5143\u7d20\u4e4b\u95f4\u7684\u4f18\u5148\u7ea7\u6bd4\u8f83\u89c4\u5219\u3002<code>std::greater&lt;int&gt;</code> \u662f\u4e00\u4e2a\u6807\u51c6\u5e93\u63d0\u4f9b\u7684\u51fd\u6570\u5bf9\u8c61\uff0c\u5b83\u7528\u4e8e\u521b\u5efa\u4e00\u4e2a\u6700\u5c0f\u5806\u3002</p>"},{"location":"Problem/lc/LeetCode/#_15","title":"\u5173\u4e8e\u6bd4\u8f83\u89c4\u5219\u7684\u5b9e\u73b0","text":"<p>\u4f18\u5148\u961f\u5217cmp\u548csort\u7684\u6548\u679c\u662f\u76f8\u53cd</p> <p>\u6240\u6709STL\u5bb9\u5668\u548c\u5e93\u51fd\u6570\u9ed8\u8ba4\u4f7f\u7528\u7684\u662f\u5c0f\u4e8e\u53f7\uff0c\u5982\u679c\u52a0\u4e0agreater&lt;&gt;\u53c2\u6570\uff0c\u90a3\u4e48\u4f1a\u9ed8\u8ba4\u4f7f\u7528\u5927\u4e8e\u53f7\u3002\u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\u4f18\u5148\u961f\u5217\u4f1a\u9ed8\u8ba4\u7528\u4e00\u5bf9\u5c0f\u62ec\u53f7\u8868\u793a\u5c0f\u4e8e\u53f7\uff0c\u5e76\u4e14\u9ed8\u8ba4\u4f1a\u6784\u9020\u4e00\u4e2a\u5927\u6839\u5806\uff0c\u6240\u4ee5\u6211\u4eec\u628a\u5c0f\u62ec\u53f7\u91cc\u7684\u5173\u7cfb\u53d8\u4e00\u4e0b\uff0c\u6700\u540e\u5c31\u53ef\u4ee5\u5f97\u5230\u5c0f\u6839\u5806\u4e86\u3002</p> <p>\u4e00\u4e0b\u662fC++\u4e2d\uff0c<code>std::greater&lt;int&gt;</code>\u7684\u5177\u4f53\u5b9e\u73b0\uff1a</p> <pre><code>template &lt;class T&gt;\nstruct greater {\nbool operator() (const T&amp; x, const T&amp; y) const {\nreturn x &gt; y;\n}\n};\n</code></pre> <p>\u91cd\u8f7d()\u7684\u539f\u56e0\u662f<code>operator()</code> \u7684\u91cd\u8f7d\u4f7f\u5bf9\u8c61\u53ef\u4ee5\u50cf\u51fd\u6570\u4e00\u6837\u88ab\u8c03\u7528\uff0c\u56e0\u4e3a\u5b83\u662f\u51fd\u6570\u8c03\u7528\u8fd0\u7b97\u7b26\u3002\u8fd9\u4f7f\u5f97\u51fd\u6570\u5bf9\u8c61\u53ef\u4ee5\u7075\u6d3b\u5730\u5c01\u88c5\u64cd\u4f5c\uff0c\u53ef\u4ee5\u5728\u5176\u4e2d\u5305\u542b\u72b6\u6001\uff0c\u5b9e\u73b0\u81ea\u5b9a\u4e49\u7684\u884c\u4e3a\uff0c\u5e76\u4e14\u53ef\u4ee5\u7528\u4e8e\u6cdb\u578b\u7f16\u7a0b\u3002</p> <p>\u6bd4\u5982\uff1a</p> <pre><code>#include &lt;iostream&gt;\n\nstruct MyComparator {\nbool operator()(int a, int b) const {\nreturn a &gt; b;\n}\n};\n\nint main() {\nMyComparator cmp;\nbool result = cmp(5, 3); // \u4f7f\u7528\u51fd\u6570\u5bf9\u8c61\u8c03\u7528\uff0c\u6bd4\u8f835\u548c3\nstd::cout &lt;&lt; result &lt;&lt; std::endl; // \u8f93\u51fa1\uff0c\u56e0\u4e3a5 &gt; 3\nreturn 0;\n}\n</code></pre>"},{"location":"Problem/lc/LeetCode/#okn-logk-ok","title":"\u4f18\u5148\u961f\u5217\u5408\u5e76\u4ee3\u7801\uff1a\u65f6\u95f4 O(kn * logk), \u7a7a\u95f4 O(k)","text":"<p>\u6ce8\u610f\uff1a<code>auto dummy = new ListNode(-1), tail = dummy;(return dummy-&gt;next)</code>\u7684\u5b9e\u73b0\u8fd8\u80fd\u662f<code>ListNode dummy, *cur = &amp;dummy;(return dummy.next)</code></p> <p>\u53ef\u4ee5\u4e0d\u628a head \u8bbe\u4e3a ListNode * \u6307\u9488\u7c7b\u578b, \u800c\u662f\u628a head \u8bbe\u4e3a ListNode \u7c7b\u578b\uff0c\u8fd9\u6837 \u5c31\u4e0d\u7528 \u8003\u8651 \u5185\u5b58\u7684\u95ee\u9898\u4e86\u3002\u4e0d\u628a head\u4f5c\u4e3a\u6307\u9488 new\u51fa\u6765 \u786e\u5b9e\u4f1a \u8282\u7701\u5185\u5b58\uff0c\u5185\u5b58\u6d88\u8017 \u7531 22.1MB \u53d8\u4e3a 12.7MB\u3002</p> <pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\nstruct Cmp {\nbool operator() (ListNode* a, ListNode* b) {\nreturn a-&gt;val &gt; b-&gt;val;\n}\n};\nListNode* mergeKLists(vector&lt;ListNode*&gt;&amp; lists) {\npriority_queue&lt;ListNode*, vector&lt;ListNode*&gt;, Cmp&gt; heap;\nauto dummy = new ListNode(-1), tail = dummy;\nfor (auto l : lists) if (l) heap.push(l);\n\nwhile (heap.size()) {\nauto t = heap.top();\nheap.pop();\ntail-&gt;next = t;\ntail = tail-&gt;next;\nif (t-&gt;next) heap.push(t-&gt;next);\n}\nreturn dummy-&gt;next;\n}\n\n};\n</code></pre>"},{"location":"Problem/lc/LeetCode/#okn-logk-ologk","title":"\u5206\u6cbb\u5408\u5e76\u4ee3\u7801\uff1a O(kn * logk), \u9012\u5f52\u6808\u7a7a\u95f4 O(logk)","text":"<p><code>cur-&gt;next = a ? a : b;</code></p> <ul> <li>\u5982\u679c <code>a</code> \u975e\u7a7a\uff08\u5373 <code>a</code> \u8fd8\u6709\u5269\u4f59\u8282\u70b9\uff09\uff0c\u90a3\u4e48\u5c06 <code>cur-&gt;next</code> \u6307\u5411 <code>a</code>\uff0c\u5e76\u5c06 <code>a</code> \u5411\u540e\u79fb\u52a8\u4e00\u4e2a\u8282\u70b9\uff0c\u540c\u65f6 <code>cur</code> \u4e5f\u5411\u540e\u79fb\u52a8\u4e00\u4e2a\u8282\u70b9\u3002</li> <li>\u5982\u679c <code>a</code> \u4e3a\u7a7a\uff0c\u90a3\u4e48\u5c06 <code>cur-&gt;next</code> \u6307\u5411 <code>b</code>\uff0c\u5e76\u5c06 <code>b</code> \u5411\u540e\u79fb\u52a8\u4e00\u4e2a\u8282\u70b9\uff0c\u540c\u65f6 <code>cur</code> \u4e5f\u5411\u540e\u79fb\u52a8\u4e00\u4e2a\u8282\u70b9\u3002</li> </ul>"},{"location":"Problem/lc/LeetCode/#_16","title":"\u56de\u5fc6\u5f52\u5e76\u6392\u5e8f\u7b97\u6cd5\u6a21\u677f\u9898","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nconst int N = 1e5+10;\nint q[N], tmp[N];\n\nvoid merge_sort (int q[], int l, int r) {\nif (l &gt;= r) return;\nint mid = l + r &gt;&gt; 1;\nmerge_sort(q, l, mid);\nmerge_sort(q, mid + 1, r);\nint i = 0, j = l, k = mid + 1;\nwhile (j &lt;= mid &amp;&amp; k &lt;= r) {\nif (q[j] &lt;= q[r]) tmp[i++] = q[j++];\nelse tmp[i++] = q[k++];\n}\nwhile (j &lt;= mid) tmp[i++] = q[j++];\nwhile (k &lt;= r) tmp[i++] = q[k++];\nfor (int i = l, j = 0; i &lt;= r; i++, j++) q[i] = tmp[j];\n} int main () {\nint n;\n\ncin &gt;&gt; n;\nfor (int i = 0; i &lt; n; i++) cin &gt;&gt; q[i];\nmerge_sort(q, 0, n - 1);\nfor (int i = 0; i &lt; n; i++) cout &lt;&lt; q[i] &lt;&lt; \" \" &lt;&lt; endl;\nreturn 0;\n}\n</code></pre> <p>\u6ce8\u610f\u7531\u4e8e\u8fd4\u56de\u7684\u4ecd\u7136\u662f\u539f\u6765\u94fe\u8868\u7684\u5934\u8282\u70b9\u5730\u5740\uff0c\u6240\u4ee5\u4e0d\u4f1a\u9020\u6210\u60ac\u7a7a\u6307\u9488</p> <pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\nListNode* mergeTwoLists(ListNode * a, ListNode * b) {\nListNode dummy, *cur = &amp;dummy;\nwhile (a &amp;&amp; b) {\nif (a-&gt;val &lt; b-&gt;val) cur = cur-&gt;next = a, a = a-&gt;next;\nelse cur = cur-&gt;next = b, b = b-&gt;next;\n}\ncur-&gt;next = a ? a : b;\nreturn dummy.next;\n}\nListNode* merge(vector&lt;ListNode*&gt;&amp; lists, int l, int r) {\nif (l == r) return lists[l];\nif (l &gt; r) return nullptr;\nint mid = (l + r) &gt;&gt; 1;\nreturn mergeTwoLists(merge(lists, l, mid), merge(lists, mid + 1, r));\n\n}\nListNode* mergeKLists(vector&lt;ListNode*&gt;&amp; lists) {\nint n = lists.size();\nif (!n) return nullptr;\nreturn merge(lists, 0, n - 1);\n}\n};\n</code></pre>"},{"location":"Problem/lc/LeetCode/#24","title":"24. \u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9","text":"<p>\u4e0d\u7528\u5bb3\u6015\u591a\u5efa\u51e0\u4e2a\u6307\u9488\u6ca1\u6709\u5173\u7cfb</p> <pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\nListNode* swapPairs(ListNode* head) {\nListNode* dummy = new ListNode(-1);\ndummy-&gt;next = head;\nListNode* cur = dummy;\nwhile (cur-&gt;next &amp;&amp; cur-&gt;next-&gt;next) {\nListNode* p1 = cur-&gt;next;\nListNode* p2 = cur-&gt;next-&gt;next;\np1-&gt;next = p2-&gt;next;\ncur-&gt;next = p2;\np2-&gt;next =  p1;\ncur = p1;\n}\nreturn dummy-&gt;next;\n}\n};\n</code></pre>"},{"location":"Problem/lc/LeetCode/#25-k","title":"25. K \u4e2a\u4e00\u7ec4\u7ffb\u8f6c\u94fe\u8868","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\nListNode* reverseKGroup(ListNode* head, int k) {\nListNode *dummy = new ListNode(-1, head);\ndummy-&gt;next = head;\nfor (auto p = dummy; ;) {\nauto q = p;\nfor (int i = 0; i &lt; k &amp;&amp; q; i++) q = q-&gt;next;\nif (!q) break;\nauto a = p-&gt;next, b = a-&gt;next;\nfor (int i = 0; i &lt; k - 1; i++) {\nauto c = b-&gt;next;\nb-&gt;next = a;\na = b, b = c;\n}\nauto c = p-&gt;next;\np-&gt;next = a;\nc-&gt;next = b;\np = c; // \u6ce8\u610f\u7ffb\u8f6c\u4e86\u4e4b\u540e\uff0c\u524dk\u4e2a\u8282\u70b9\u4e2d\u7684\u7b2c\u4e00\u4e2a\u53d8\u6210\u4e86\u6700\u540e\u4e00\u4e2a\uff0c\u4e5f\u53d8\u6210\u4e86\u4e0b\u4e00\u4e2ak\u8282\u70b9\u7684\u524d\u4e00\u4e2a\u8282\u70b9\uff01\n}\nreturn dummy-&gt;next;\n}\n};\n</code></pre>"},{"location":"Problem/lc/LeetCode/#26","title":"26. \u5220\u9664\u6709\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879","text":"<p>\u6ce8\u610f\u9898\u76ee\u4e2d\u6307\u51fa\u4e86\u6570\u7ec4\u4e2d\u7ed3\u5c3e\u7684\u6570\u5e76\u4e0d\u91cd\u8981\uff01</p> <p>\u6240\u4ee5\u76f4\u63a5\u5c06\u540e\u9762\u7b26\u5408\u8981\u6c42\u7684\u6570\u5b57\u586b\u5728\u524d\u9762\u5c31\u53ef\u4ee5\u4e86\uff01\uff01\uff01</p> <pre><code>class Solution {\npublic:\nint removeDuplicates(vector&lt;int&gt;&amp; nums) {\n// \u7b2c\u4e00\u4e2a\u6307\u9488\u904d\u5386\u6240\u6709\u7684\u6570\n// \u7b2c\u4e8c\u4e2a\u6307\u9488\u5b58\u4e0b\u6240\u6709\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u6570\nint j = 0;\nfor (int i = 0; i &lt; nums.size(); i++) {\nif (i == 0 || (nums[i] != nums[i - 1])){\nnums[j++] = nums[i];\n}\n}\nreturn j;\n}\n};\n</code></pre>"},{"location":"Problem/lc/LeetCode/#27","title":"27. \u79fb\u9664\u5143\u7d20","text":"<pre><code>class Solution {\npublic:\nint removeElement(vector&lt;int&gt;&amp; nums, int val) {\nint j = 0;\nfor (int i = 0; i &lt; nums.size(); i++) {\nif (nums[i] != val) {\nnums[j++] = nums[i];\n}\n}\nreturn j;\n}\n};\n</code></pre>"},{"location":"Problem/lc/LeetCode/#28","title":"28. \u627e\u51fa\u5b57\u7b26\u4e32\u4e2d\u7b2c\u4e00\u4e2a\u5339\u914d\u9879\u7684\u4e0b\u6807","text":""},{"location":"Problem/lc/LeetCode/#kmp","title":"\u7eaf\u66b4\u529b\u505a\u6cd5\uff08\u7528\u6765\u7406\u89e3\u601d\u8def\u7684\u7ec3\u624b\uff0c\u6b63\u5f0f\u505a\u9898\u8bf7\u4f7f\u7528KMP\uff09","text":"<pre><code>class Solution {\npublic:\nint strStr(string haystack, string needle) {\n// \u7eaf\u66b4\u529b\u4e24\u91cd\u505a\u6cd5\nfor (int i = 0; i &lt; haystack.size(); i++) {\nbool flag = true;\nfor (int j = 0; j &lt; needle.size(); j++) {\nif (haystack[i + j] != needle[j]) {\nflag = false;\nbreak;\n}\n}\nif (flag == true) return i;\n} return -1;\n}\n};\n</code></pre> <p>\u5efa\u8bae\u753b\u56fe\uff01</p> <p>\u6ce8\u610fkmp\u7b97\u6cd5\u4e00\u70b9\u8981\u4ece1\u5f00\u59cb\u6bd4\u8f83\u8f7b\u677e\uff01\uff01</p> <p>ne[i]\u8868\u793a\u7684\u662f\u6240\u6709\u4ee51\u4e3a\u9996\u7684\u524d\u7f00\u548c\u4ee5i\u7ed3\u5c3e\u7684\u540e\u7f00\u4e2d\u76f8\u540c\u7684\u957f\u5ea6\u7684 \u6700\u5927\u503c</p>"},{"location":"Problem/lc/LeetCode/#kmp_1","title":"KMP\u505a\u6cd5","text":"<pre><code>class Solution {\npublic:\nint strStr(string haystack, string needle) {\nint n = haystack.size(), m = needle.size();\nhaystack = ' ' + haystack, needle = ' ' + needle;\nvector&lt;int&gt; ne(m + 1);\nfor (int i = 2, j = 0; i &lt;= m; i++) {\nwhile (j &amp;&amp; needle[i] != needle[j + 1]) j = ne[j];\nif (needle[i] == needle[j + 1]) j++;\nne[i] = j; }\nfor (int i = 1, j = 0; i &lt;= n; i++) {\nwhile (j &amp;&amp; haystack[i] != needle[j + 1]) j = ne[j];\nif (haystack[i] == needle[j + 1]) j++;\nif (j == m) return i - m;\n}\nreturn -1;\n}\n};\n</code></pre>"},{"location":"Problem/lc/LeetCode/#_17","title":"\u4e8c\u8fdb\u5236\u500d\u589e\u3001\u5feb\u901f\u5e42\u7684\u601d\u60f3\uff01\uff01\uff01","text":"<p>2\u7684n\u6b21\u5e42</p> <p>\u4e00\u5b9a\u8981\u52a0long long \uff0c\u539f\u56e0\u662f\u5982\u679c\u662f-2^31 \u53d6\u7edd\u5bf9\u503c\u7684\u8bdd\u4f1a\u8d85\u8fc7\u6b63Int\u7684\u6700\u5927\u503c</p> <pre><code>class Solution {\npublic:\nint divide(int dividend, int divisor) {\ntypedef long long LL;\nLL res = 0;\nvector&lt;LL&gt; exp;\nbool is_minus = false;\nif (dividend &lt; 0 &amp;&amp; divisor &gt; 0 || dividend &gt; 0 &amp;&amp; divisor &lt; 0) is_minus = true;\nLL a = abs((LL)dividend), b = abs((LL)divisor);\n\nfor (LL i = b; i &lt;= a; i = i + i){\nexp.push_back(i);\n}\n\nfor (int i = exp.size() - 1; i &gt;= 0; i--) {\nif (a &gt;= exp[i]) {\na -= exp[i];\nres += 1ll &lt;&lt; i;\n// cout &lt;&lt; \"a = \" &lt;&lt; a &lt;&lt; \"res = \" &lt;&lt; res &lt;&lt; endl;\n}\n}\nif (is_minus) res = -res;\nif (res &gt; INT_MAX) res = INT_MAX;\n\nreturn res;\n}\n};\n</code></pre>"},{"location":"Problem/lc/LeetCode/#58","title":"58. \u6700\u540e\u4e00\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6","text":"<pre><code>class Solution {\npublic:\nint lengthOfLastWord(string s) {\nint i = s.size() - 1;\nwhile(s[i] == ' ') {\ni--;\n}\nint word = 0;\nwhile (i &gt;= 0 &amp;&amp; s[i] != ' ') {\nword ++;\ni--;\n}\nreturn word;\n}\n};\n</code></pre>"},{"location":"Problem/luogu/%E5%85%A5%E9%97%A81%E9%A1%BA%E5%BA%8F%E7%BB%93%E6%9E%84/","title":"\u5165\u95e81\u987a\u5e8f\u7ed3\u6784","text":""},{"location":"Problem/luogu/%E5%85%A5%E9%97%A81%E9%A1%BA%E5%BA%8F%E7%BB%93%E6%9E%84/#1","title":"\u5165\u95e81\u3010\u987a\u5e8f\u7ed3\u6784\u3011","text":""},{"location":"Problem/luogu/%E5%85%A5%E9%97%A81%E9%A1%BA%E5%BA%8F%E7%BB%93%E6%9E%84/#b2002-hello-world","title":"B2002 hello, world!","text":"<pre><code>#include &lt;cstdio&gt;\n#include &lt;iostream&gt;\n\nusing namespace std;\nint main () {\nprintf(\"Hello,World!\");\nreturn 0;\n}\n</code></pre>"},{"location":"Problem/luogu/%E5%85%A5%E9%97%A81%E9%A1%BA%E5%BA%8F%E7%BB%93%E6%9E%84/#b2025","title":"B2025 \u8f93\u51fa\u5b57\u7b26\u83f1\u5f62","text":"<pre><code>#include &lt;cstdio&gt;\n#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main () {\nprintf(\"  *  \\n *** \\n*****\\n *** \\n  *  \\n\");\nreturn 0;\n}\n</code></pre>"},{"location":"Problem/luogu/%E5%85%A5%E9%97%A81%E9%A1%BA%E5%BA%8F%E7%BB%93%E6%9E%84/#p1000","title":"P1000 \u8d85\u7ea7\u739b\u4e3d\u6e38\u620f","text":"<pre><code>#include &lt;cstdio&gt;\n#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main () {\nprintf(\"                ********\\n\"\n\"               ************\\n\"\n\"               ####....#.\\n\"\n\"             #..###.....##....\\n\"\n\"             ###.......######              ###            ###\\n\"\n\"                ...........               #...#          #...#\\n\"\n\"               ##*#######                 #.#.#          #.#.#\\n\"\n\"            ####*******######             #.#.#          #.#.#\\n\"\n\"           ...#***.****.*###....          #...#          #...#\\n\"\n\"           ....**********##.....           ###            ###\\n\"\n\"           ....****    *****....\\n\"\n\"             ####        ####\\n\"\n\"           ######        ######\\n\"\n\"##############################################################\\n\"\n\"#...#......#.##...#......#.##...#......#.##------------------#\\n\"\n\"###########################################------------------#\\n\"\n\"#..#....#....##..#....#....##..#....#....#####################\\n\"\n\"##########################################    #----------#\\n\"\n\"#.....#......##.....#......##.....#......#    #----------#\\n\"\n\"##########################################    #----------#\\n\"\n\"#.#..#....#..##.#..#....#..##.#..#....#..#    #----------#\\n\"\n\"##########################################    ############\");\nreturn 0;\n}\n</code></pre>"},{"location":"Problem/luogu/%E5%85%A5%E9%97%A81%E9%A1%BA%E5%BA%8F%E7%BB%93%E6%9E%84/#p1001-ab-problem","title":"P1001 A+B Problem","text":"<pre><code>#include &lt;cstdio&gt;\n#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main () {\nint a, b;\nscanf(\"%d%d\", &amp;a, &amp;b);\nprintf(\"%d\", a + b);\nreturn 0;\n}\n</code></pre>"},{"location":"Problem/luogu/%E5%85%A5%E9%97%A81%E9%A1%BA%E5%BA%8F%E7%BB%93%E6%9E%84/#b2005","title":"B2005 \u5b57\u7b26\u4e09\u89d2\u5f62","text":"<pre><code>#include &lt;cstdio&gt;\n#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main () {\nchar a;\nscanf(\"%c\", &amp;a);\nprintf(\"  %c  \\n %c%c%c \\n%c%c%c%c%c\", a, a, a, a, a, a, a, a, a);\nreturn 0;\n}\n</code></pre>"},{"location":"Problem/luogu/%E5%85%A5%E9%97%A81%E9%A1%BA%E5%BA%8F%E7%BB%93%E6%9E%84/#p5703-25","title":"P5703 \u3010\u6df1\u57fa2.\u4f8b5\u3011\u82f9\u679c\u91c7\u8d2d","text":"<pre><code>#include &lt;cstdio&gt;\n#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main () {\nint a, b;\ncin &gt;&gt; a &gt;&gt; b;\ncout &lt;&lt; a * b &lt;&lt; endl;\nreturn 0;\n}\n</code></pre>"},{"location":"Problem/luogu/%E5%85%A5%E9%97%A81%E9%A1%BA%E5%BA%8F%E7%BB%93%E6%9E%84/#p5704-26","title":"P5704 \u3010\u6df1\u57fa2.\u4f8b6\u3011\u5b57\u6bcd\u8f6c\u6362","text":"<pre><code>#include &lt;cstdio&gt;\n#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main () {\nchar a;\ncin &gt;&gt; a;\nprintf(\"%c\", a - 32);\nreturn 0;\n}\n</code></pre>"},{"location":"Problem/luogu/%E5%85%A5%E9%97%A81%E9%A1%BA%E5%BA%8F%E7%BB%93%E6%9E%84/#1221","title":"12/21","text":""},{"location":"Problem/luogu/%E5%85%A5%E9%97%A81%E9%A1%BA%E5%BA%8F%E7%BB%93%E6%9E%84/#p5705-27","title":"P5705 \u3010\u6df1\u57fa2.\u4f8b7\u3011\u6570\u5b57\u53cd\u8f6c (*)","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nusing namespace std;\n\nint main () {\nstring a;\ncin &gt;&gt; a;\nfor (int i = a.size() - 1; i &gt;= 0; i--) cout &lt;&lt; a[i];\nreturn 0;\n}\n</code></pre>"},{"location":"Problem/luogu/%E5%85%A5%E9%97%A81%E9%A1%BA%E5%BA%8F%E7%BB%93%E6%9E%84/#p5706-28","title":"P5706 \u3010\u6df1\u57fa2.\u4f8b8\u3011\u518d\u5206\u80a5\u5b85\u6c34","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n\nusing namespace std;\n\nint main () {\nfloat a;\nint b;\ncin &gt;&gt; a &gt;&gt; b;\nprintf(\"%.3f\\n\", a / b);\nprintf(\"%d\", b * 2);\nreturn 0;\n}\n</code></pre>"},{"location":"Problem/luogu/%E5%85%A5%E9%97%A81%E9%A1%BA%E5%BA%8F%E7%BB%93%E6%9E%84/#p5708-22","title":"P5708 \u3010\u6df1\u57fa2.\u4e602\u3011\u4e09\u89d2\u5f62\u9762\u79ef","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;cmath&gt;\nusing namespace std;\n\nint main () {\ndouble a, b, c;\ncin &gt;&gt; a &gt;&gt; b &gt;&gt; c;\ndouble p = (a + b + c) / 2;\ndouble s = sqrt(p * (p - a) * (p - b) * (p - c));\nprintf(\"%.1f\", s);\nreturn 0;\n}\n</code></pre>"},{"location":"Problem/luogu/%E5%85%A5%E9%97%A81%E9%A1%BA%E5%BA%8F%E7%BB%93%E6%9E%84/#p5707-212","title":"P5707 \u3010\u6df1\u57fa2.\u4f8b12\u3011\u4e0a\u5b66\u8fdf\u5230 (*)","text":"<p>\u6ce8\u610fceil()\u662f\u5411\u4e0a\u53d6\u6574</p> <p>\u6ce8\u610f\u8981\u52a0<code>#include &lt;cmath&gt;</code>\u7684\u5934\u6587\u4ef6</p> function \u6548\u679c floor() \u4e0d\u5927\u4e8e\u81ea\u53d8\u91cf\u7684\u6700\u5927\u6574\u6570 ceil() \u4e0d\u5c0f\u4e8e\u81ea\u53d8\u91cf\u7684\u6700\u5927\u6574\u6570 round() \u56db\u820d\u4e94\u5165\u5230\u6700\u90bb\u8fd1\u7684\u6574\u6570 fix() \u671d\u96f6\u65b9\u5411\u53d6\u6574 <p>%02d\u5c31\u80fd\u8f93\u51fa2\u4f4d\u8865\u8db3\u7684\u6570\u5b57</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cmath&gt;\nusing namespace std;\n\nint main () {\nfloat s, v;\ncin &gt;&gt; s &gt;&gt; v;\nint duration = ceil(s / v);\nint time = 24 * 60 + 8 * 60 - duration - 10;\nif (time &gt;= 24 * 60) time -= 24 * 60;\nint hour = time / 60;\nint minute = time % 60;\nprintf(\"%02d:%02d\", hour, minute);\nreturn 0;\n}\n</code></pre>"},{"location":"Problem/luogu/%E5%85%A5%E9%97%A81%E9%A1%BA%E5%BA%8F%E7%BB%93%E6%9E%84/#b2029","title":"B2029 \u5927\u8c61\u559d\u6c34","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;cmath&gt;\n\nusing namespace std;\n\nint main () {\ndouble h, r;\ncin &gt;&gt; h &gt;&gt; r;\ndouble v = (3.14159 * r * r) * h;\ncout &lt;&lt; ceil(20000 / v);\nreturn 0;\n}\n</code></pre>"},{"location":"Problem/luogu/%E5%85%A5%E9%97%A81%E9%A1%BA%E5%BA%8F%E7%BB%93%E6%9E%84/#p1425","title":"P1425 \u5c0f\u9c7c\u7684\u6e38\u6cf3\u65f6\u95f4","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main () {\nint a, b, c, d;\ncin &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d;\nint duration = (c * 60 + d) - (a * 60 + b);\ncout &lt;&lt; duration / 60;\ncout &lt;&lt; \" \" &lt;&lt; duration % 60;\nreturn 0;\n}\n</code></pre>"},{"location":"Problem/luogu/%E5%85%A5%E9%97%A81%E9%A1%BA%E5%BA%8F%E7%BB%93%E6%9E%84/#p1421","title":"P1421 \u5c0f\u7389\u4e70\u6587\u5177","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\nusing namespace std;\nint main () {\nint a, b;\ncin &gt;&gt; a &gt;&gt; b;\ncout &lt;&lt; (10 * a + b) / (10 + 9);\nreturn 0;\n}\n</code></pre>"},{"location":"Problem/luogu/%E5%85%A5%E9%97%A81%E9%A1%BA%E5%BA%8F%E7%BB%93%E6%9E%84/#p3954-noip2017","title":"P3954 [NOIP2017 \u666e\u53ca\u7ec4] \u6210\u7ee9","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main () {\nint a, b, c;\ncin &gt;&gt; a &gt;&gt; b &gt;&gt; c;\ncout &lt;&lt; (int) (0.2 * a + 0.3 * b + 0.5 * c);\nreturn 0;\n}\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/","title":"\u4ee3\u7801\u968f\u60f3\u5f55\u7b14\u8bb0","text":""},{"location":"Problem/programmercarl/algorithm/#1","title":"1. \u4e8c\u5206\u67e5\u627e","text":"<p>\u4e8c\u5206\u67e5\u627e\u7684\u6570\u5b66\u7406\u89e3\u662f\u5355\u8c03\u51fd\u6570\u7684\u6709\u89e3\u95ee\u9898</p> <p>\u6ce8\u610f\u70b9\uff1a</p> <ol> <li> <p>\u5728C++\u4e2dSTL\u7684\u5bb9\u5668\u548c\u7b97\u6cd5\u4e2d\u7528\u7684\u90fd\u662f\u5de6\u95ed\u53f3\u5f00\u533a\u95f4\uff0c\u6240\u4ee5\u5c3d\u91cf\u4f7f\u7528\u5de6\u95ed\u53f3\u5f00\u7684\u533a\u95f4\u6765\u5199\u4e8c\u5206\u67e5\u627e</p> </li> <li> <p>\u5728\u5237\u9898\u65f6\u601d\u8003\u5982\u679c\u6700\u540e\u533a\u95f4\u53ea\u5269\u4e0b\u4e00\u4e2a\u6570\u6216\u8005\u4e24\u4e2a\u6570\uff0c\u81ea\u5df1\u7684\u5199 \u6cd5\u662f\u5426\u4f1a\u9677\u5165\u6b7b\u5faa\u73af\uff0c\u5982\u679c\u67d0\u79cd\u5199\u6cd5\u65e0\u6cd5\u8df3\u51fa\u6b7b\u5faa\u73af\uff0c\u5219\u8003\u8651\u5c1d\u8bd5\u53e6\u4e00\u79cd\u5199\u6cd5\u3002</p> </li> </ol>"},{"location":"Problem/programmercarl/algorithm/#34","title":"34. \u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u67e5\u627e\u5143\u7d20\u7684\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e","text":"<pre><code>class Solution {\npublic:\nint searchLeft(vector&lt;int&gt;&amp; nums, int target) {\nint l = 0, r = nums.size() - 1;\nwhile (l &lt; r) {\nint mid = (l + r) &gt;&gt; 1;\nif (nums[mid] &lt; target) l = mid + 1;\nelse r = mid;\n}\nreturn l;\n}\nint searchRight(vector&lt;int&gt;&amp;nums, int target) {\nint l = 0, r = nums.size() - 1;\nwhile (l &lt; r) {\nint mid = (l + r + 1) &gt;&gt; 1;\nif (nums[mid] &gt; target) r = mid - 1;\nelse l = mid;\n}\nreturn l;\n}\nvector&lt;int&gt; searchRange(vector&lt;int&gt;&amp; nums, int target) {\nif (nums.size() == 0) return vector&lt;int&gt;{-1, -1};\n// \u5206\u522b\u5199\u4e24\u4e2afunction\u6765\u641c\u7d22\u5de6\u8fb9\u754c\u548c\u53f3\u8fb9\u754c\nint left = searchLeft(nums, target);\nint right = searchRight(nums, target);\nif (nums[left] == target &amp;&amp; nums[right] == target) return vector&lt;int&gt;{left, right};\nelse return vector&lt;int&gt;{-1, -1};\n}\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#844","title":"844. \u6bd4\u8f83\u542b\u9000\u683c\u7684\u5b57\u7b26\u4e32","text":"<pre><code>class Solution {\npublic:\nbool backspaceCompare(string s, string t) {\nreturn get(s) == get(t);\n}\nstring get(string&amp; s) {\nstring res;\nfor (auto c : s) {\nif (c == '#') {\nif (res.size()) res.pop_back();\n}\nelse res+= c;\n}\nreturn res;\n}\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#o1","title":"O1\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a","text":"<pre><code>class Solution {\npublic:\nbool backspaceCompare(string s, string t) {\nchangestring(s);\nchangestring(t);\nreturn s==t;\n}\nvoid changestring(string &amp;s)\n{\nint slow=0;\nfor(int fast=0;fast&lt;s.size();fast++)\n{\nif(s[fast]!='#')\ns[slow++]=s[fast];\nelse if(slow!=0)\nslow--;\n}\ns.resize(slow);\n}\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#977","title":"977. \u6709\u5e8f\u6570\u7ec4\u7684\u5e73\u65b9","text":"<pre><code>class Solution {\npublic:\nvector&lt;int&gt; sortedSquares(vector&lt;int&gt;&amp; nums) {\n// \u4e0d\u8981\u5fd8\u8bb0\u5b9a\u4e49vector&lt;int&gt;\u7684\u65f6\u5019\u8fdb\u884c\u5b9a\u4e49\u6570\u7ec4\u5927\u5c0f\nvector&lt;int&gt; res(nums.size(), 0);\nint l = 0, r = nums.size() -1, i = nums.size() -1 ;\nwhile (l &lt;= r &amp;&amp; i &gt;= 0) {\nif (nums[l] + nums[r] &lt;= 0) {\nres[i--] = nums[l] * nums[l];\nl++;\n} else {\nres[i--] = nums[r] * nums[r];\nr--;\n}\n}\nreturn res;\n}\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#209","title":"209. \u957f\u5ea6\u6700\u5c0f\u7684\u5b50\u6570\u7ec4","text":"<pre><code>class Solution {\npublic:\nint minSubArrayLen(int target, vector&lt;int&gt;&amp; nums) {\nint i = 0, j = 0, ans = INT_MAX, res = 0;\nwhile (j &lt; nums.size()) {\nres += nums[j];\nwhile (res &gt;= target) {\nans = min(ans, j - i + 1);\nres -= nums[i];\ni++;\n}\nj++;\n}\nreturn (ans == INT_MAX) ? 0 : ans;\n}\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#_2","title":"\u4e8c\u53c9\u6811\u7684\u9012\u5f52\u904d\u5386","text":""},{"location":"Problem/programmercarl/algorithm/#144","title":"144. \u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u904d\u5386","text":""},{"location":"Problem/programmercarl/algorithm/#22","title":"22. \u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u641c\u7d22\uff08\u89c6\u9891\u770b\u8fc7\uff09","text":""},{"location":"Problem/programmercarl/algorithm/#700","title":"700. \u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u641c\u7d22","text":"<p>\u4f7f\u7528\u9012\u5f52\u7684\u5173\u952e\uff1a\u9012\u5f52\u662f\u9700\u8981\u8fd4\u56de\u53d8\u91cf\u7684</p>"},{"location":"Problem/programmercarl/algorithm/#_3","title":"\u9012\u5f52\u6cd5","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\nTreeNode* searchBST(TreeNode* root, int val) {\nif (root == NULL || root-&gt;val == val) return root;\nTreeNode* res;\nif (root-&gt;val &lt; val) res = searchBST(root-&gt;right, val);\nif (root-&gt;val &gt; val) res = searchBST(root-&gt;left, val);\nreturn res;\n}\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#_4","title":"\u8fed\u4ee3\u6cd5","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\nTreeNode* searchBST(TreeNode* root, int val) {\nif (root == NULL) return NULL;\nwhile (root) {\nif (root-&gt;val == val) return root;\nelse if (root-&gt;val &gt; val) root = root-&gt;left;\nelse root = root-&gt;right;\n}\nreturn NULL;\n}\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#23","title":"23.\u9a8c\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811\uff08\u89c6\u9891\u770b\u8fc7\uff09","text":""},{"location":"Problem/programmercarl/algorithm/#98","title":"98. \u9a8c\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811","text":""},{"location":"Problem/programmercarl/algorithm/#preorder-traversal","title":"\u524d\u5e8f\u904d\u5386(preorder traversal)","text":"<p>\u5728\u6bcf\u6b21\u9012\u5f52\u7684\u65f6\u5019\u90fd\u662f\u5148\u8bbf\u95ee\u6839\u8282\u70b9\u7684\u503c\uff0c\u786e\u4fdd\u6839\u8282\u70b9\u7b26\u5408\u4e0a\u9762\u4f20\u8fc7\u6765\u7684\u67d0\u79cd\u6027\u8d28\uff0c\u7136\u540e\u518d\u9012\u5f52\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811</p> <p>\u6ce8\u610f\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u53f3\u8fb9\u7684\u6240\u6709\u7684\u8282\u70b9\u90fd\u9700\u8981\u5927\u4e8e\u6839\u8282\u70b9</p> <p>\u6bd4\u59825\uff0c4\uff0c6\uff0cnull,null, 3, 7\u5c31\u662f\u4e0d\u5408\u6cd5\u7684\uff0c\u56e0\u4e3a3\u867d\u7136\u6bd46\u5c0f\uff0c\u4f46\u662f\u9700\u8981\u6bd45\u5927\u624d\u884c</p> <p>\u6240\u4ee5\u6211\u7684\u601d\u8def\u662f\uff1a\uff08\u9700\u8981\u624b\u52a8\u6a21\u62df\uff01\uff01\uff01\uff09</p> <p>\u5728\u5411\u4e0b\u7684\u8fc7\u7a0b\u4e2d\uff0c\u8981\u7ef4\u6301\u4f4f\u4e0a\u65b9\u4f20\u9012\u8fc7\u6765\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c</p> <p>\u5728root\u5411\u5de6\u8d70\uff0cmax\u9700\u8981\u4e0d\u65ad\u66f4\u65b0</p> <p>\u5728root\u5411\u53f3\u8d70\uff0cmin\u9700\u8981\u4e0d\u65ad\u66f4\u65b0</p> <p></p> <pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\nbool isValidBST(TreeNode* root) {\nbool res = dfs(root, LONG_MIN, LONG_MAX);\nreturn res;\n}\nbool dfs(TreeNode* root, long min, long max) {\nif (root == NULL) return true;\nlong x = root-&gt;val;\nreturn x &gt; min &amp;&amp; x &lt; max &amp;&amp; dfs(root-&gt;left, min, x) &amp;&amp; dfs(root-&gt;right, x, max);\n}\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#inorder-traversal","title":"\u4e2d\u5e8f\u904d\u5386(inorder traversal)","text":"<p>\u5148\u904d\u5386\u5de6\u5b50\u6811\uff0c\u7136\u540e\u8bbf\u95ee\u6839\u8282\u70b9\uff0c\u7136\u540e\u518d\u904d\u5386\u53f3\u5b50\u6811</p> <p>\u5728\u6574\u4e2a\u904d\u5386\u987a\u5e8f\u4e2d\uff0c\u6839\u8282\u70b9\u7684\u8bbf\u95ee\u603b\u662f\u5728\u5176\u5de6\u53f3\u5b50\u8282\u70b9\u4e4b\u540e\u88ab\u8bbf\u95ee\uff0c\u6240\u4ee5\u53eb\u4e2d\u5e8f\u904d\u5386 </p> <p>\u5728\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\uff0c\u5982\u679c\u5728\u6bcf\u4e2a\u8282\u70b9\uff0c\u90fd\u5148\u904d\u5386\u5de6\u5b50\u6811\uff0c\u7136\u540e\u518d\u904d\u5386\u53f3\u5b50\u6811\uff0c\u90a3\u4e48\u5c31\u80fd\u5f97\u5230\u4e00\u4e2a\u4e25\u683c\u9012\u589e\u7684\u6570\u7ec4</p>"},{"location":"Problem/programmercarl/algorithm/#_5","title":"\u4e2d\u5e8f\u904d\u5386\u7684\u7b2c\u4e00\u79cd\u5199\u6cd5\uff1a\u7ef4\u62a4\u4e00\u4e2a\u6570\u7ec4","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\nvector&lt;int&gt; vec;\nbool isValidBST(TreeNode* root) {\ntraseversal(root);\nfor (int i = 0; i &lt; vec.size() - 1; i++) {\nif (vec[i] &gt;= vec[i + 1]) return false;\n}\nreturn true;\n}\nvoid traseversal(TreeNode* root) {\nif (root == NULL) return;\ntraseversal(root-&gt;left);\nvec.push_back(root-&gt;val);\ntraseversal(root-&gt;right);\n}\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#_6","title":"\u4e2d\u5e8f\u904d\u5386\u7684\u7b2c\u4e8c\u79cd\u5199\u6cd5\uff1a\u7ef4\u62a4\u4e0a\u4e00\u4e2a\u8bbf\u95ee\u8fc7\u7684\u503c","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\nlong pre = LONG_MIN;\npublic:\nbool isValidBST(TreeNode* root) {\nif (root == NULL) return true;\nif (!isValidBST(root-&gt;left) || root-&gt;val &lt;= pre) return false;\npre = root-&gt;val;\nreturn isValidBST(root-&gt;right);\n}\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#_7","title":"\u4e2d\u5e8f\u904d\u5386\u7684\u7b2c\u4e09\u79cd\u5199\u6cd5\uff1a\u6700\u76f4\u89c2\u7684\u5199\u6cd5\uff0c\u5e76\u7528\u53cc\u6307\u9488\u8fdb\u884c\u4e86\u4f18\u5316\uff0c\u6700\u63a8\u8350\u7684\u5199\u6cd5\uff01\uff01\uff01","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\nTreeNode* pre = NULL;\nbool isValidBST(TreeNode* root) {\nif (root == NULL) return true;\nbool left = isValidBST(root-&gt;left);\nif (pre &amp;&amp; pre-&gt;val &gt;= root-&gt;val) return false;\npre = root;\nbool right = isValidBST(root-&gt;right);\nreturn left &amp;&amp; right;\n}\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#_8","title":"\u540e\u5e8f\u904d\u5386","text":"<p>\u540e\u5e8f\u904d\u5386\u5c31\u662f\u5148\u904d\u5386\u5de6\u5b50\u6811\uff0c\u7136\u540e\u904d\u5386\u53f3\u5b50\u6811\uff0c\u7136\u540e\u5f97\u51fa\u4e00\u4e2a\u6761\u4ef6\uff0c\u6700\u540e\u8bbf\u95ee\u6839\u8282\u70b9\uff0c\u770b\u6839\u8282\u70b9\u662f\u5426\u7b26\u5408\u8fd9\u4e2a\u5f97\u51fa\u7684\u6761\u4ef6</p> <pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\npair&lt;long, long&gt; dfs(TreeNode* root) {\nif (root == NULL) return {LONG_MAX, LONG_MIN};\nauto[l_min, l_max] = dfs(root-&gt;left);\nauto[r_min, r_max] = dfs(root-&gt;right);\nif (root-&gt;val &lt;= l_max || root-&gt;val &gt;= r_min) return {LONG_MIN, LONG_MAX};\nlong x = root-&gt;val;\nreturn {min(x, l_min), max(x, r_max)};\n}\nbool isValidBST(TreeNode* root) {\nreturn dfs(root).second != LONG_MAX;\n}\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#24","title":"24. \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6700\u5c0f\u7edd\u5bf9\u5dee\uff08\u89c6\u9891\u770b\u8fc7\uff09","text":""},{"location":"Problem/programmercarl/algorithm/#530","title":"530. \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6700\u5c0f\u7edd\u5bf9\u5dee","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\nint difference = INT_MAX;\nTreeNode* pre = NULL;\npublic:\nint getMinimumDifference(TreeNode* root) {\ntraseversal(root);\nreturn difference;\n}\nvoid traseversal(TreeNode* root) {\nif (root == NULL) return;\ntraseversal(root-&gt;left);\nif (pre) {\ndifference = min(difference, root-&gt;val - pre-&gt;val);\n} pre = root;\ntraseversal(root-&gt;right);\n\n}\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#25","title":"25. \u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u4f17\u6570","text":""},{"location":"Problem/programmercarl/algorithm/#501","title":"501. \u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u4f17\u6570","text":"<p>\u5373\u4f7f\u662f\u5728\u6709\u91cd\u590d\u6570\u5b57\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\uff0c\u4e2d\u5e8f\u904d\u5386\u4ecd\u7136\u662f\u9012\u589e\u7684\u6570\u7ec4\uff01\uff01\uff01</p> <p>mode\u662f\u4f17\u6570\u7684\u610f\u601d</p>"},{"location":"Problem/programmercarl/algorithm/#_9","title":"\u4e2d\u5e8f\u904d\u5386\uff0c\u53ea\u904d\u5386\u4e00\u904d\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u5c31\u6c42\u51fa\u4f17\u6570\u7684\u96c6\u5408","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\nTreeNode* pre = NULL;\nint count = 0;\nint maxCount = 0;\nvector&lt;int&gt; ans;\nvoid searchBST(TreeNode* root) {\nif (root == NULL) return;\nsearchBST(root-&gt;left);\n\nif (pre == NULL) {\ncount = 1;\n} else if (pre-&gt;val == root-&gt;val) {\ncount++;\n} else {\ncount = 1;\n}\n\n\npre = root;\n\n\nif (count == maxCount) {\nans.push_back(root-&gt;val);\n}\n\nif (count &gt; maxCount) {\nmaxCount = count;\nans.clear();\nans.push_back(root-&gt;val);\n}\n\nsearchBST(root-&gt;right);\n}\nvector&lt;int&gt; findMode(TreeNode* root) {\nsearchBST(root);\nreturn ans;\n}\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#_10","title":"\u7eaf\u66b4\u529b\uff0c\u5f00\u54c8\u5e0c\u8868\u8bb0\u5f55\uff08\u6ce8\u610f\u4e00\u4e0b\u54c8\u5e0c\u8868\u7684\u8bed\u6cd5\uff09\uff0c\u4e0d\u63a8\u8350\u56e0\u4e3a\u662f\u7b97\u6cd5\u9898","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\nunordered_map&lt;int, int&gt; hash;\nint maxCount = 0;\nvector&lt;int&gt; ans;\npublic:\nvector&lt;int&gt; findMode(TreeNode* root) {\ndfs(root);\nfor (unordered_map&lt;int, int&gt;::iterator it = hash.begin(); it != hash.end(); it++) {\nif (it-&gt;second == maxCount){\nans.push_back(it-&gt;first);\n}\n}\nreturn ans;\n}\nvoid dfs(TreeNode* root) {\nif (root == NULL) return;\nmaxCount = max(maxCount, ++hash[root-&gt;val]);\ndfs(root-&gt;left);\ndfs(root-&gt;right);\n}\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#26","title":"26. \u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148","text":""},{"location":"Problem/programmercarl/algorithm/#236","title":"236. \u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\nTreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n// \u5047\u8bbe\u8282\u70b9\u662fp\uff0c\u5982\u679cq\u5728p\u7684\u5b50\u6811\u4e2d\uff0c\u90a3\u4e48\u76f4\u63a5\u8fd4\u56dep\n// \u5982\u679cq\u4e0d\u5728p\u7684\u5b50\u6811\u4e2d\uff0c\u8fd8\u662f\u9700\u8981\u8fd4\u56deq\uff0c\u4f7f\u5f97\u4e0a\u9762\u7684\u8282\u70b9\u80fd\u591f\u540c\u65f6\u6536\u5230p\u548cq\nif (root == p || root == q || root == NULL) return root;\nTreeNode* left = lowestCommonAncestor(root-&gt;left, p, q);\nTreeNode* right = lowestCommonAncestor(root-&gt;right, p, q);\nif (left &amp;&amp; right) return root;\nif (left) return left;\nif (right) return right;\nreturn NULL;\n}\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#28","title":"28. \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148","text":""},{"location":"Problem/programmercarl/algorithm/#235","title":"235. \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\n\nclass Solution {\npublic:\nTreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n// \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u516c\u5171\u7956\u5148\u76f8\u8f83\u4e8e\u4e8c\u53c9\u6811\u7684\u516c\u5171\u7956\u5148\u591a\u4e86\u4e00\u4e2a\u987a\u5e8f\n// \u53ef\u4ee5\u76f4\u63a5\u63d0\u53d6p\u548cq\u7684value\u4e86\n\n// \u53ea\u8981p\u548cq\u5728root\u4e24\u8fb9\uff0c\u90a3\u4e48\u6700\u8fd1\u516c\u5171\u7956\u5148\u5c31\u5fc5\u5b9a\u662froot\nif (p-&gt;val &lt; root-&gt;val &amp;&amp; q-&gt;val &lt; root-&gt;val) return lowestCommonAncestor(root-&gt;left, p, q);\nif (p-&gt;val &gt; root-&gt;val &amp;&amp; q-&gt;val &gt; root-&gt;val) return lowestCommonAncestor(root-&gt;right, p, q);\nreturn root;\n}\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#29","title":"29. \u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u63d2\u5165\u64cd\u4f5c","text":""},{"location":"Problem/programmercarl/algorithm/#701","title":"701. \u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u63d2\u5165\u64cd\u4f5c","text":"<p>\u6ce8\u610f\u5199\u6cd5\u7684\u9519\u8bef\u4e4b\u5904\uff1a</p> <p>\u5982\u679c\u8981\u63d2\u5728temp-&gt;left\u90a3\u91cc\uff0c\u5e76\u4e14temp-&gt;left == NULL</p> <p>\u5343\u4e07\u4e0d\u80fd:</p> <pre><code>temp = temp-&gt;left;\ntemp = new TreeNode(val);\n</code></pre> <p>\u8fd9\u6837\u7684\u8bddtemp-&gt;left\u5e76\u6ca1\u6709\u6307\u5411\u65b0\u7684\u8282\u70b9</p> <p>\u800c\u5fc5\u987b\u8981\uff1a</p> <pre><code>temp-&gt;left = new TreeNode(val);\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#_11","title":"\u9700\u8981\u638c\u63e1\u7684\u9012\u5f52\u5199\u6cd5","text":"<p>\u800c\u9700\u8981\u4e00\u4e2a\u51fd\u6570\u5c31\u641e\u5b9a\u9012\u5f52\u7684\u8bdd\uff0c\u5c31\u9700\u8981\u5728\u9700\u8981\u63d2\u5165\u7684\u5730\u65b9\u8fd4\u56de\u65b0\u5efa\u7684TreeNode\uff0c\u800c\u5728\u4e0d\u9700\u8981\u63d2\u5165\u7684\u65f6\u5019\u8fd4\u56de\u539f\u6765\u7684\u6839\u8282\u70b9</p> <pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\nTreeNode* insertIntoBST(TreeNode* root, int val) {\nif (root == NULL) return new TreeNode(val);\nif (root-&gt;val &lt; val) root-&gt;right = insertIntoBST(root-&gt;right, val);\nif (root-&gt;val &gt; val) root-&gt;left = insertIntoBST(root-&gt;left, val);\nreturn root;\n}\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#_12","title":"\u6700\u76f4\u767d\u7684\u8fed\u4ee3\u5199\u6cd5\uff0c\u4e0d\u63a8\u8350","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\nTreeNode* insertIntoBST(TreeNode* root, int val) {\nif (root == NULL) return new TreeNode(val);\nTreeNode* temp = root;\nTreeNode* parent = root; // \u8fd9\u4e2a\u5f88\u91cd\u8981\uff0c\u9700\u8981\u8bb0\u5f55\u4e0a\u4e00\u4e2a\u8282\u70b9\uff0c\u5426\u5219\u65e0\u6cd5\u8d4b\u503c\u65b0\u8282\u70b9\nwhile (temp) {\nparent = temp;\nif (val &gt; temp-&gt;val) temp = temp-&gt;right;\nelse temp = temp-&gt;left;\n}\nif (val &gt; parent-&gt;val) parent-&gt;right = new TreeNode(val); // \u6b64\u65f6\u662f\u7528parent\u8282\u70b9\u7684\u8fdb\u884c\u8d4b\u503c\nelse parent-&gt;left = new TreeNode(val);\nreturn root;\n}\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#30","title":"30. \u5220\u9664\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u8282\u70b9","text":""},{"location":"Problem/programmercarl/algorithm/#450","title":"450. \u5220\u9664\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u8282\u70b9","text":"<p>\u5bf9\u4e8e\u4e8c\u53c9\u6811\u4e2d\u5404\u79cd\u64cd\u4f5c\uff0c\u8fd4\u56de<code>TreeNode*</code>\u7684\u7406\u89e3\u662f\u8fd4\u56de\u7684\u662f\u4e0b\u9762\u5df2\u7ecf\u5904\u7406\u597d\u7684\u8282\u70b9</p> <p>\u8fd4\u56de\u7684\u8282\u70b9\u76f8\u5f53\u4e8e\u5728\u544a\u8bc9\u4e0a\u9762\u4e00\u5c42\uff1a\u201c\u4ece\u6211\u4e0b\u9762\u5f00\u59cb\u7684\u4e1c\u897f\u90fd\u5df2\u7ecf\u5904\u7406\u597d\u4e86\uff01\u201d</p> <pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\nTreeNode* deleteNode(TreeNode* root, int key) {\nif (root == NULL) return NULL;\nif (root-&gt;val == key) {\nif (root-&gt;left == NULL &amp;&amp; root-&gt;right == NULL) {\ndelete root;\n// \u76f8\u5f53\u4e8e\u5220\u9664\u4e86\u8282\u70b9\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5730\u65b9\u4f1a\u53d8\u6210null\nreturn NULL;\n} else if (root-&gt;left == NULL) {\nTreeNode* returnNode = root-&gt;right;\ndelete root;\nreturn returnNode;\n}\nelse if (root-&gt;right == NULL) {\nTreeNode* returnNode = root-&gt;left;\ndelete root;\nreturn returnNode;\n}\nelse {\n// \u5982\u679c\u6211\u4eec\u8981\u5220\u9664\u4e00\u4e2a\u5de6\u53f3\u90fd\u6709\u513f\u5b50\u7684\u8282\u70b9\uff08\u5305\u62ec\u6839\u8282\u70b9\uff09\n// \u6211\u4eec\u7684\u7b56\u7565\u662f\u8fd4\u56deroot-&gt;right\n// \u800croot-&gt;left\u5e94\u8be5\u6bd4root-&gt;left\u91cc\u9762\u7684\u6700\u5c0f\u503c\u8fd8\u8981\u5c0f\nTreeNode* returnNode = root-&gt;right;\nTreeNode* curr = root-&gt;right;\nwhile (curr-&gt;left != NULL) {\ncurr = curr-&gt;left;\n}\ncurr-&gt;left = root-&gt;left;\ndelete root;\nreturn returnNode;\n}\n}\n// \u5982\u679croot\u5e76\u4e0d\u7b49\u4e8ekey\uff0c\u90a3\u4e48\u80af\u5b9a\u4e0d\u80fd\u76f4\u63a5\u8fd4\u56deroot\n// \u800c\u662f\u8981\u5bf9root\u7684left\u548cright\u8fdb\u884c\u5904\u7406\u4e00\u4e0b\uff0c\u5904\u7406\u597d\u4e86\u4e4b\u540e\u624d\u80fd\u8fd4\u56deroot\u7ed9\u4e0a\u9762\u4e00\u5c42\nif (root-&gt;val &gt; key) root-&gt;left = deleteNode(root-&gt;left, key);\nif (root-&gt;val &lt; key) root-&gt;right = deleteNode(root-&gt;right, key);\n\nreturn root;\n\n}\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#31","title":"31. \u4fee\u526a\u4e8c\u53c9\u641c\u7d22\u6811","text":""},{"location":"Problem/programmercarl/algorithm/#669","title":"669. \u4fee\u526a\u4e8c\u53c9\u641c\u7d22\u6811","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\nTreeNode* trimBST(TreeNode* root, int low, int high) {\n// \u5047\u8bbe\u4e00\u4e2aroot\u5c0f\u4e8elow\uff0c\u90a3\u4e48\u4ed6\u7684\u5de6\u513f\u5b50\u53ef\u4ee5\u653e\u5f03\uff0c\u800c\u53f3\u513f\u5b50\u9700\u8981\u88ab\u7ee7\u627f\n// \u5047\u8bbe\u4e00\u4e2aroot\u5927\u4e8ehigh\uff0c\u90a3\u4e48\u4ed6\u7684\u53f3\u513f\u5b50\u53ef\u4ee5\u653e\u5f03\uff0c\u53ea\u5269\u4e0b\u5de6\u513f\u5b50\n// \u5bf9\u4e8e\u4fee\u526a\u4e8c\u53c9\u6811\u6765\u8bf4\uff0c\u53ea\u8981\u7565\u8fc7\u90a3\u4e9b\u4e0d\u9700\u8981\u7684\u5b50\u6811\u5c31\u884c\u4e86\uff0c\u5e76\u6ca1\u6709\u5bf9\u5404\u4e2a\u8282\u70b9\u505a\u4ec0\u4e48\u64cd\u4f5c\uff0c\u6700\u540e\u8fd4\u56de\u7684\u4e5f\u662f\u6839\u8282\u70b9\u7684\u503c\nif (root == NULL) return NULL;\nif (root-&gt;val &lt; low) return trimBST(root-&gt;right, low, high);\nif (root-&gt;val &gt; high) return trimBST(root-&gt;left, low, high);\nroot-&gt;left = trimBST(root-&gt;left, low, high);\nroot-&gt;right = trimBST(root-&gt;right, low, high);\nreturn root;\n}\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#32","title":"32. \u5c06\u6709\u5e8f\u6570\u7ec4\u8f6c\u6362\u4e3a\u4e8c\u53c9\u641c\u7d22\u6811","text":""},{"location":"Problem/programmercarl/algorithm/#108","title":"108. \u5c06\u6709\u5e8f\u6570\u7ec4\u8f6c\u6362\u4e3a\u4e8c\u53c9\u641c\u7d22\u6811","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\nTreeNode* sortedArrayToBST(vector&lt;int&gt;&amp; nums) {\nTreeNode* res = build(nums, 0, nums.size() - 1);\nreturn res;\n}\nTreeNode* build(vector&lt;int&gt;&amp; nums, int l, int r) {\nif (l &gt; r) return NULL;\nint mid = (l + r) &gt;&gt; 1;\nTreeNode* root = new TreeNode(nums[mid]);\nroot-&gt;left = build(nums, l, mid - 1);\nroot-&gt;right = build(nums, mid + 1, r);\nreturn root;\n}\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#1382","title":"1382. \u5c06\u4e8c\u53c9\u641c\u7d22\u6811\u53d8\u5e73\u8861","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\nTreeNode* balanceBST(TreeNode* root) {\nvector&lt;int&gt; order;\nfunction&lt;void(TreeNode*)&gt; inOrderTras = [&amp;] (TreeNode* root) {\nif (root == NULL) return;\ninOrderTras(root-&gt;left);\norder.emplace_back(root-&gt;val);\ninOrderTras(root-&gt;right);\n};\ninOrderTras(root);\nfunction&lt;TreeNode* (int, int)&gt; heightBalance = [&amp;] (int l, int r) -&gt; TreeNode* {\nif (l &gt; r) return NULL;  int mid = (l + r) &gt;&gt; 1;\nTreeNode* node = new TreeNode(order[mid]);\nnode-&gt;left = heightBalance(l, mid - 1);\nnode-&gt;right = heightBalance(mid + 1, r);\nreturn node;\n};\nreturn heightBalance(0, order.size() - 1);\n}\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#_13","title":"\u7075\u8336\u5c71\u827e\u5e9c\u8bfe\u7a0b","text":""},{"location":"Problem/programmercarl/algorithm/#_14","title":"\u76f8\u5411\u53cc\u6307\u9488","text":"<p>acwing\u7684\u601d\u8def\u662f\u5f15\u5165j -1\u8fd9\u4e2a\u5de7\u5999\u7684\u6280\u5de7\u6765\u4e0d\u65ad\u63a7\u5236\u53f3\u6307\u9488\u7684\u79fb\u52a8</p> <p>\u800c\u7075\u8336\u5c71\u827e\u5e9c\u7684\u505a\u6cd5\u662f\u540c\u65f6\u63a7\u5236\u5de6\u53f3\u6307\u9488\uff0c\u7531\u4e8e\u6570\u7ec4\u6709\u5e8f\uff0c\u90a3\u4e48\u5f53\u548c\u6bd4target\u5927\u7684\u65f6\u5019\u5c31\u79fb\u52a8\u53f3\u6307\u9488\uff0c\u548c\u6bd4target\u5c0f\u7684\u65f6\u5019\u5c31\u79fb\u52a8\u5de6\u6307\u9488</p>"},{"location":"Problem/programmercarl/algorithm/#167-ii-","title":"167. \u4e24\u6570\u4e4b\u548c II - \u8f93\u5165\u6709\u5e8f\u6570\u7ec4","text":"<p>\u65f6\u95f4\u590d\u6742\u5ea6O(n)</p> <p>\u7a7a\u95f4\u590d\u6742\u5ea6O(1)</p>"},{"location":"Problem/programmercarl/algorithm/#acwing","title":"acwing\u505a\u6cd5","text":"<pre><code>class Solution {\npublic:\nvector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; numbers, int target) {\nvector&lt;int&gt; res;\nfor (int i = 0, j = numbers.size() - 1; i &lt; j; i++) {\nwhile (j - 1 &gt; i &amp;&amp; numbers[i] + numbers[j - 1] &gt;= target) j--;\nif (numbers[i] + numbers[j] == target) res.push_back(i + 1), res.push_back(j + 1); }\n// if (!res.empty()) return {-1, -1};\nreturn res;\n}\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#_15","title":"\u7075\u8336\u5c71\u827e\u5e9c","text":"<pre><code>class Solution {\npublic:\nvector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; numbers, int target) {\nint l = 0;\nint r = numbers.size() - 1;\nwhile (l &lt; r) {\nint sum = numbers[l] + numbers[r];\nif (sum == target) return {l + 1, r + 1};\nelse if (sum &gt; target) r--;\nelse l++;\n}\nreturn {l + 1, r + 1}; //\u8fd9\u53e5\u8bdd\u7528\u4e0d\u5230\n}\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#15","title":"15. \u4e09\u6570\u4e4b\u548c","text":""},{"location":"Problem/programmercarl/algorithm/#acwing_1","title":"acwing","text":"<pre><code>class Solution {\npublic:\nvector&lt;vector&lt;int&gt;&gt; threeSum(vector&lt;int&gt;&amp; nums) {\nvector&lt;vector&lt;int&gt;&gt; res;\nsort(nums.begin(), nums.end());\nfor (int i = 0; i &lt; nums.size() - 1; i++) {\nif (i &amp;&amp; nums[i] == nums[i - 1]) continue;\nfor (int j = i + 1, k = nums.size() - 1; j &lt; k; j++) {\nif (j &gt;= i + 2 &amp;&amp; nums[j] == nums[j - 1]) continue;\nwhile (k - 1 &gt; j &amp;&amp; nums[i] + nums[j] + nums[k - 1] &gt;= 0) k--;\nif (nums[i] + nums[j] + nums[k] == 0) res.push_back({nums[i], nums[j], nums[k]});\n}\n}\nreturn res;\n}\n}; </code></pre>"},{"location":"Problem/programmercarl/algorithm/#_16","title":"\u7075\u8336\u5c71\u827e\u5e9c","text":"<pre><code>class Solution {\npublic:\nvector&lt;vector&lt;int&gt;&gt; threeSum(vector&lt;int&gt;&amp; nums) {\nvector&lt;vector&lt;int&gt;&gt; res;\nsort(nums.begin(), nums.end());\nfor (int i = 0; i &lt; nums.size() - 2; i++) {\nint l = i + 1, r = nums.size() - 1;\nif (i &amp;&amp; nums[i - 1] == nums[i]) continue;\nwhile (l &lt; r) {\nint s = nums[i] + nums[l] + nums[r];\nif (s == 0) {\nres.push_back({nums[i], nums[l], nums[r]});\nr--;\nwhile (r &lt; nums.size() - 1 &amp;&amp; nums[r] == nums[r + 1]) r--;\n}\nelse if (s &gt; 0) r--;\nelse l++;\n}\n}\nreturn res;\n}\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#_17","title":"\u76f8\u5411\u53cc\u6307\u9488","text":""},{"location":"Problem/programmercarl/algorithm/#11","title":"11. \u76db\u6700\u591a\u6c34\u7684\u5bb9\u5668","text":"<p>\u65f6\u95f4\u590d\u6742\u5ea6: On</p> <pre><code>class Solution {\npublic:\nint maxArea(vector&lt;int&gt;&amp; height) {\nint res = 0;\nint l = 0, r = height.size() - 1;\nwhile (l &lt; r) {\nint hl = height[l], hr = height[r];\nres = max(res, (r - l) * min(hl, hr));\nprintf(\"r: %d; l: %d; res: %d\\n\", r, l, res);\nif (height[l] &lt; height[r] &amp;&amp; l &lt; r) l++;\nelse if (height[l] &gt;= height[r] &amp;&amp; l &lt; r) r--;\n}\nreturn res;\n}\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#42","title":"42. \u63a5\u96e8\u6c34","text":"<p>\u9700\u8981\u89c2\u5bdf\u5230\u6027\u8d28\uff1a\u6bcf\u4e2a\u683c\u5b50\u4e0a\u9762\u63a5\u7684\u6c34\u5c31\u662f\u5de6\u53f3\u4e24\u8fb9\u5404\u81ea\u6700\u5927\u503c\u7684\u6700\u5c0f\u503c\u51cf\u53bb\u8fd9\u4e2a\u683c\u5b50\u7684\u9ad8\u5ea6</p>"},{"location":"Problem/programmercarl/algorithm/#_18","title":"\u7b2c\u4e00\u79cd\u505a\u6cd5\u662f\u524d\u540e\u7f00\u5206\u89e3","text":"<pre><code>class Solution {\npublic:\nint trap(vector&lt;int&gt;&amp; height) {\nvector&lt;int&gt; pre(height.size());\nvector&lt;int&gt; suf(height.size());\nint res = 0;\npre[0] = height[0];\nsuf[height.size() - 1] =height[height.size() - 1];\nfor (int i = 1; i &lt; height.size(); i++) pre[i] = max(pre[i - 1], height[i]);\nfor (int i = height.size() - 2; i &gt;= 0; i --) suf[i] = max(suf[i + 1], height[i]);\nfor (int i = 0; i &lt; height.size(); i++) {\nres += min(pre[i], suf[i]) - height[i];\n}\nreturn res;\n}\n}; </code></pre>"},{"location":"Problem/programmercarl/algorithm/#_19","title":"\u7b2c\u4e8c\u79cd\u505a\u6cd5\u662f\u53cc\u6307\u9488","text":"<pre><code>class Solution {\npublic:\nint trap(vector&lt;int&gt;&amp; height) {\nint ans = 0;\nint l = 0, r = height.size() - 1;\nint lmax = height[0], rmax = height[height.size() - 1];\nwhile (l &lt; r) {\nlmax = max(lmax, height[l]), rmax = max(rmax, height[r]);\nif (lmax &lt;= rmax) {\nans += lmax - height[l];\nl++;\n}\nelse {\nans += rmax - height[r];\nr--;\n}\n}\nreturn ans;\n}\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#209_1","title":"209. \u957f\u5ea6\u6700\u5c0f\u7684\u5b50\u6570\u7ec4","text":"<p>\u65f6\u95f4\u590d\u6742\u5ea6O(n)</p> <pre><code>class Solution {\npublic:\nint minSubArrayLen(int target, vector&lt;int&gt;&amp; nums) {\nint i = 0, j = 0, ans = nums.size() + 1,  res = 0;\nwhile (j &lt; nums.size()) {\nres += nums[j];\nwhile (res &gt;= target) {\nans = min(ans, j - i + 1);\nres -= nums[i];\ni++;\n}\nj++;\n}\nreturn (ans &lt;= n) ? ans : 0;\n}\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#713-k","title":"713. \u4e58\u79ef\u5c0f\u4e8e K \u7684\u5b50\u6570\u7ec4","text":"<pre><code>class Solution {\npublic:\nint numSubarrayProductLessThanK(vector&lt;int&gt;&amp; nums, int k) {\n// \u6211\u4eec\u9700\u8981\u5173\u6ce8\u7684\u662f\u6240\u6709\u4ee5\u53f3\u7aef\u70b9\u4e3a\u7ec8\u70b9\u7684\u6570\u7ec4\u7684\u6700\u957f\u7684\u957f\u5ea6\n// \u6ce8\u610f\u8bfb\u9898\u662f\u4e25\u683c\u5c0f\u4e8e\nif (k &lt;= 1) return 0;\nint l = 0, r = 0;\nint prod = 1;\nint res = 0;\nwhile (r &lt; nums.size()) {\nprod *= nums[r];\nwhile (prod &gt;= k) {\nprod /= nums[l];\nl++;\n}\nres += r - l + 1;\nr++;\n}\nreturn res;\n}\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#3","title":"3. \u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32","text":"<p>\u6ce8\u610f\u54c8\u5e0c\u8868\u7684\u521d\u59cb\u503c\u662f0</p> <p>\u5e76\u4e14\u53ef\u4ee5\u7528s.empty()\u6765\u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u4e3a\u7a7a</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n)</p> <p>\u7531\u4e8e\u5b57\u7b26\u662fascii\u7801\uff0c\u6700\u591a\u53ea\u6709128\u4e2a\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u5c06\u7a7a\u95f4\u590d\u6742\u5ea6\u770b\u6210O(128)</p> <pre><code>class Solution {\npublic:\nint lengthOfLongestSubstring(string s) {\nif (s.empty()) return 0;\nunordered_map&lt;char, int&gt; hash;\nint l = 0, r = 0;\nint res = 1;\nwhile (r &lt; s.size()) {\nhash[s[r]]++;\nwhile (hash[s[r]] &gt; 1) {\nhash[s[l]]--;\nl++;\n}\nres = max(res, r - l + 1);\nr++;\n}\nreturn res;\n}\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#_20","title":"\u4e8c\u5206\u67e5\u627e","text":""},{"location":"Problem/programmercarl/algorithm/#34_1","title":"34. \u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u67e5\u627e\u5143\u7d20\u7684\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e","text":"<pre><code>class Solution {\npublic:\nvector&lt;int&gt; searchRange(vector&lt;int&gt;&amp; nums, int target) {\nvector&lt;int&gt; res;\n// \u6ce8\u610f\u5224\u7a7a\uff01\u4e0d\u7136\u627e\u95ee\u9898\u975e\u5e38\u6d6a\u8d39\u65f6\u95f4\uff01\nif (nums.size() == 0) return {-1, -1};\nint l = 0, r = nums.size() - 1;\n//\u5148\u627e\u5de6\u7aef\u70b9\nwhile (l &lt; r) {\nint mid = (l + r) &gt;&gt; 1;\nif (nums[mid] &lt; target) l = mid + 1;\nelse r = mid;\n}\nif (nums[l] == target) res.push_back(l);\nelse return {-1, -1};\n// \u627e\u53f3\u7aef\u70b9\nl = 0, r = nums.size() - 1;\nwhile (l &lt; r) {\nint mid = (l + r + 1) &gt;&gt; 1;\nif (nums[mid] &gt; target) r = mid - 1;\nelse l = mid; // l = mid \u5f88\u5371\u9669\n}\nif (nums[l] == target) res.push_back(l);\nelse return {-1, -1};\n\nreturn res;\n}\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#153","title":"153. \u5bfb\u627e\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u6700\u5c0f\u503c","text":"<p>\u6709\u5e8f\u6570\u7ec4\u65cb\u8f6c\u540e\u505a\u9898\u7684\u6280\u5de7\u662f</p> <pre><code>class Solution {\npublic:\nint findMin(vector&lt;int&gt;&amp; nums) {\n// \u76f4\u63a5\u5206\u7c7b\u8ba8\u8bba\u753b\u56fe\uff0c\u4e3b\u8981\u5c31\u662f\u4e09\u79cd\u60c5\u51b5\uff0c\u5de6\u8fb9\u957f\uff0c\u53f3\u8fb9\u957f\uff0c\u4ee5\u53ca\u6ca1\u6709\u65cb\u8f6c\nint l = 0, r = nums.size() - 1;\nwhile (l &lt; r) {\nint mid = (l + r) &gt;&gt; 1;\nif (nums[mid] &gt; nums[nums.size() - 1]) l = mid + 1;\nelse r = mid;\n}\nreturn nums[l];\n}\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#33","title":"33. \u641c\u7d22\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4","text":""},{"location":"Problem/programmercarl/algorithm/#_21","title":"\u7b2c\u4e00\u79cd\u505a\u6cd5\u662f\u5bf9\u7740\u4e09\u4e2a\u5750\u6807\u70b9\u5f3a\u884c\u5206\u7c7b","text":"<pre><code>class Solution {\npublic:\nint search(vector&lt;int&gt;&amp; nums, int target) {\nint l = 0, r = nums.size() - 1;\nwhile (l &lt; r) {\nint mid = (l + r) &gt;&gt; 1;\nif (nums[mid] &lt;= nums[nums.size() - 1]) {\nif (target &gt; nums[nums.size() - 1]) r = mid - 1;\nelse if (target &lt;= nums[nums.size() - 1] &amp;&amp; target &gt; nums[mid]) l = mid + 1;\nelse r =  mid;\n} else {\nif (target &lt;= nums[nums.size() - 1]) l = mid + 1;\nelse if (target &lt;= nums[mid]) r = mid;\nelse l = mid + 1; }\n}\nif (nums[l] == target) return l;\nelse return -1;\n}\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#_22","title":"\u7b2c\u4e8c\u79cd\u505a\u6cd5\u662f\u5148\u4e8c\u5206\u51fa\u65cb\u8f6c\u6570\u7ec4\u7684\u5206\u754c\u70b9\uff0c\u7136\u540e\u518d\u5728\u7279\u5b9a\u7684\u6bb5\u4e0a\u4e0d\u65ad\u4e8c\u5206\u627e\u51fa\u9700\u8981\u7684\u6570","text":"<pre><code>class Solution {\npublic:\nint search(vector&lt;int&gt;&amp; nums, int target) {\nint l = 0, r = nums.size() - 1;\nwhile (l &lt; r) {\nint mid = (l + r + 1) &gt;&gt; 1;\nif (nums[mid] &gt;= nums[0]) l = mid;\nelse r = mid - 1;\n}\nif (target &gt;= nums[0]) l = 0;\nelse l = r + 1, r = nums.size() - 1;\nwhile (l &lt; r) {\nint mid = (l + r) &gt;&gt; 1;\nif (nums[mid] &gt;= target) r = mid;\nelse l = mid + 1; // \u8fd9\u91ccl\u6709\u51fa\u754c\u7684\u98ce\u9669\uff0c\u6240\u4ee5return\u7684\u65f6\u5019\u9700\u8981return\u7684\u662fr\uff0c\u800c\u4e0d\u80fd\u662fl\n}\nif (nums[r] == target) return r;\nelse return -1;\n}\n};*\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#_23","title":"\u53cd\u8f6c\u94fe\u8868","text":""},{"location":"Problem/programmercarl/algorithm/#206","title":"206. \u53cd\u8f6c\u94fe\u8868","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\nListNode* reverseList(ListNode* head) {\nif (head == NULL) return head;\nListNode* a = head;\nListNode* b = head-&gt;next;\nwhile (b != NULL) {\nListNode* c = b-&gt;next;\nb-&gt;next = a;\na = b;\nb = c;\n}\nhead-&gt;next = NULL;\nreturn a;\n}\n};\n\n\ntemplate &lt;typename T&gt;\nclass SinglyLinkedList {\nprivate:\nclass Node {\npublic:\nT data;\nNode* next;\n};\n\nNode* head;\nsize_t size;\n\npublic:\n// Constructors\nSinglyLinkedList();\nSinglyLinkedList(const T&amp; initialData);\n\n// Other methods\nvoid pushFront(const T&amp; value);\nvoid popFront();\nbool isEmpty() const;\nsize_t getSize() const;\n// Add more methods as needed\n};\n\ntemplate &lt;typename T&gt;\nclass SinglyLinkedList {\nprivate:\nclass Node {\npublic:\nT data;\nNode* next;\nNode(const T&amp; value) : data(value), next(nullptr) {}\n};\n\nNode* head;\nsize_t size;\n\npublic:\n// Constructors\nSinglyLinkedList() : head(nullptr), size(0) {}\n\nSinglyLinkedList(const T&amp; initialValue) : head(nullptr), size(0) {\npushFront(initialValue);\n}\n\n// Destructor\n~SinglyLinkedList() {\nwhile (head) {\nNode* temp = head;\nhead = head-&gt;next;\ndelete temp;\n}\n}\n\n// Public methods\nvoid pushFront(const T&amp; value) {\nNode* newNode = new Node(value);\nnewNode-&gt;next = head;\nhead = newNode;\nsize++;\n}\n\nvoid popFront() {\nif (head) {\nNode* temp = head;\nhead = head-&gt;next;\ndelete temp;\nsize--;\n}\n}\n\nvoid append(const T&amp; value) {\nNode* newNode = new Node(value);\nif (!head) {\nhead = newNode;\n} else {\nNode* current = head;\nwhile (current-&gt;next) {\ncurrent = current-&gt;next;\n}\ncurrent-&gt;next = newNode;\n}\nsize++;\n}\n\n// Other methods like insert, remove, search, size, print, etc.\n// ...\n\n// Getter for size\nsize_t getSize() const {\nreturn size;\n}\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#92-ii","title":"92. \u53cd\u8f6c\u94fe\u8868 II","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\nListNode* reverseBetween(ListNode* head, int left, int right) {\nif (head == NULL || head-&gt;next == NULL) return head;\nListNode* dummy = new ListNode(-1);\ndummy-&gt;next = head;\nListNode* a = dummy;\nfor (int i = 1; i &lt; left; i++) a = a-&gt;next;\nListNode* b = a-&gt;next;\nListNode* c = b-&gt;next;\nfor (int i = 0; i &lt; right - left; i++) {\nListNode* d = c-&gt;next;\nc-&gt;next = b;\nb = c;\nc = d;\n}\na-&gt;next-&gt;next = c;\na-&gt;next = b;\nreturn dummy-&gt;next;\n\n}\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#_24","title":"\u5feb\u6162\u6307\u9488","text":""},{"location":"Problem/programmercarl/algorithm/#876","title":"876. \u94fe\u8868\u7684\u4e2d\u95f4\u7ed3\u70b9","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\n// \u8fd9\u9053\u9898\u5f88\u660e\u663e\u9700\u8981\u901a\u8fc7\u5947\u6570\u548c\u5076\u6570\u5206\u522b\u5206\u6790\n// \u5947\u6570\u60c5\u51b5\u7b80\u5355\uff1a1,2,3 \u5feb\u6307\u9488+2\uff0c\u800c\u6162\u6307\u9488+1\uff0cfast-&gt;next == NULL\u65f6\u505c\u4e0b\n// \u5076\u6570\u60c5\u51b5\uff1a1, 2 \u8fd9\u79cd\u60c5\u51b5\u4ecd\u7136\u9700\u8981\u5feb\u6307\u9488+2\uff0c\u6162\u6307\u9488\u52a01\u56e0\u4e3a\u6709\u4e24\u4e2a\u4e2d\u95f4\u8282\u70b9\u7684\u8bdd\uff0c\u8fd4\u56de\u7684\u65f6\u7b2c\u4e8c\u4e2a\u4e2d\u95f4\u8282\u70b9\n// \u800c\u5076\u6570\u60c5\u51b5\u4e2d\u5feb\u6307\u9488\u4f1a\u6307\u5411NULL\uff0c\u8fd9\u4e2a\u65f6\u5019\u5c31\u8981\u505c\u4e0b fast-&gt;next == NULL\npublic:\nListNode* middleNode(ListNode* head) {\nListNode *fast = head;\nListNode *slow = head;\nwhile (fast != NULL &amp;&amp; fast-&gt;next != NULL) {\nfast = fast-&gt;next-&gt;next;\nslow = slow-&gt;next;\n}\nreturn slow;\n}\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#141","title":"141. \u73af\u5f62\u94fe\u8868","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\nbool hasCycle(ListNode *head) {\nListNode *fast = head;\nListNode *slow = head;\n// \u4f7f\u7528\u5feb\u6162\u6307\u9488\u7684\u65f6\u5019\uff0c\u5982\u679cfast+2,slow+1\uff0c\u90a3\u4e48\u5b9e\u9645\u4e0a\u6bcf\u6b21\u8ffd\u53ca\u7684\u8ddd\u79bb\u5c31\u662f1\uff0c\u4e0d\u7528\u62c5\u5fc3fast\u4f1a\u8d85\u8fc7slow\nwhile (fast != NULL &amp;&amp; fast-&gt;next != NULL) {\nfast = fast-&gt;next-&gt;next;\nslow = slow-&gt;next;\nif (fast == slow) return true; // \u8981\u5728\u6bcf\u6b21\u79fb\u52a8\u6307\u9488\u540e\u6bd4\u8f83\u662f\u5426\u8ffd\u53ca\u6210\u529f\n}\nreturn false;\n}\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#142-ii","title":"142. \u73af\u5f62\u94fe\u8868 II","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\nListNode *detectCycle(ListNode *head) {\n// \u5165\u73af\u524d\u7684\u957f\u5ea6\u65f6a\uff0c\u76f8\u9047\u65f6\u73af\u5185\u5df2\u7ecf\u8d70\u8fc7b\uff0c\u73af\u5185\u8fd8\u5269\u4e0bc\n// \u5feb\u6307\u9488\u8d70\u8fc7\u7684\u8def a + k (b + c)\n// \u6162\u6307\u9488\u8d70\u8fc7\u7684\u8def a + b\n// 2(a + b) = a + k(b + c)\n// a - c = (k - 1)(b + c)\n// \u5982\u679chead\u548c\u6162\u6307\u9488\u540c\u65f6\u8d70a\u7684\u8def\uff0c\u90a3\u4e48head\u4f1a\u5230\u5165\u73af\u70b9\uff0c\u800c\u6162\u6307\u9488\u4f1a\u5728\u8f6c\u4e86(k - 1)\u5708\u4e4b\u540e\u5230\u5165\u73af\u70b9\nListNode *fast = head, * slow = head;\nwhile (true) {\nif (fast == NULL || fast-&gt;next == NULL) return NULL;\nfast = fast-&gt;next-&gt;next;\nslow = slow-&gt;next;\nif (fast == slow) break;\n}\nListNode *dummy = head;\nwhile (fast != dummy) {\nfast = fast-&gt;next;\ndummy = dummy-&gt;next;\n}\nreturn dummy;\n}\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#143","title":"143. \u91cd\u6392\u94fe\u8868","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\nvoid reorderList(ListNode* head) {\nListNode *fast = head, *slow = head;\nwhile (fast != NULL &amp;&amp; fast-&gt;next != NULL) {\nfast = fast-&gt;next-&gt;next;\nslow = slow-&gt;next;\n}\nfast = slow;\nslow = NULL;\nwhile (fast != NULL) {\nListNode *temp = fast-&gt;next;\nfast-&gt;next = slow;\nslow = fast;\nfast = temp;\n}\n\nfast = head;\n\nwhile (fast-&gt;next != NULL &amp;&amp; slow-&gt;next != NULL) {\nListNode *l = fast-&gt;next;\nListNode *r = slow-&gt;next;\nfast-&gt;next = slow;\nslow-&gt;next = l;\nfast = l;\nslow = r;\n}\n\n}\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#_25","title":"\u524d\u540e\u6307\u9488","text":""},{"location":"Problem/programmercarl/algorithm/#237","title":"237. \u5220\u9664\u94fe\u8868\u4e2d\u7684\u8282\u70b9","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\nvoid deleteNode(ListNode* node) {\n// \u56e0\u4e3a\u4e0d\u662f\u94fe\u8868\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u8282\u70b9\uff0c\u800c\u4e14\u53ea\u8981\u4fdd\u8bc1\u6240\u6709\u503c\u552f\u4e00\u5373\u53ef\n// \u90a3\u4e48\u5c06\u4e0b\u4e00\u4e2a\u503c\u590d\u5236\u5230\u8fd9\u4e2a\u8282\u70b9\uff0c\u7136\u540e\u5220\u53bb\u4e0b\u4e00\u4e2a\u8282\u70b9\u5c31\u884c\u4e86\nnode-&gt;val = node-&gt;next-&gt;val;\nnode-&gt;next = node-&gt;next-&gt;next;\n}\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#19-n","title":"19. \u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2c N \u4e2a\u7ed3\u70b9","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\nListNode* removeNthFromEnd(ListNode* head, int n) {\n// \u9996\u5148\u8981\u8003\u8651\u5934\u8282\u70b9\u4f1a\u4e0d\u4f1a\u53d8\nListNode *dummy = new ListNode(-1, head);\nListNode *fast = dummy, *slow = dummy;\nfor (int i = 0; i &lt; n; i++) {\nfast = fast-&gt;next;\n}\nwhile (fast != NULL &amp;&amp; fast-&gt;next != NULL) {\nfast = fast-&gt;next;\nslow = slow-&gt;next;\n}\nslow-&gt;next = slow-&gt;next-&gt;next;\nreturn dummy-&gt;next;\n\n}\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#83","title":"83. \u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\nListNode* deleteDuplicates(ListNode* head) {\nListNode *curr = head;\nwhile (curr != NULL) {\nwhile (curr-&gt;next != NULL &amp;&amp; curr-&gt;val == curr-&gt;next-&gt;val) curr-&gt;next = curr-&gt;next-&gt;next;\ncurr = curr-&gt;next;\n}\nreturn head;\n}\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#82-ii","title":"82. \u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20 II","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\nListNode* deleteDuplicates(ListNode* head) {\nListNode *dummy = new ListNode(-1, head);\nListNode *curr = dummy;\nwhile (curr) {\nif (curr-&gt;next != NULL &amp;&amp; curr-&gt;next-&gt;next != NULL &amp;&amp;curr-&gt;next-&gt;val == curr-&gt;next-&gt;next-&gt;val) {\nint same = curr-&gt;next-&gt;val;\nwhile (curr-&gt;next != NULL &amp;&amp; curr-&gt;next-&gt;val == same) {\ncurr-&gt;next = curr-&gt;next-&gt;next;\n}\n} else {\ncurr = curr-&gt;next;\n}\n}\nreturn dummy-&gt;next;\n}\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#_26","title":"\u4e8c\u53c9\u6811 \u9012\u5f52","text":"<p>\u6808\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u5c31\u662f\u6700\u5148\u8fdb\u53bb\u7684\u6700\u540e\u51fa\u6765</p>"},{"location":"Problem/programmercarl/algorithm/#104","title":"104. \u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6","text":""},{"location":"Problem/programmercarl/algorithm/#_27","title":"\u9012\u5f52\u505a\u6cd5","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\nint maxDepth(TreeNode* root) {\nif (root == NULL) return 0;\nreturn max(maxDepth(root-&gt;left), maxDepth(root-&gt;right)) + 1;\n}\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#dfs","title":"dfs\u505a\u6cd5","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\n// ans\u8fd9\u91cc\u662fSolution\u8fd9\u4e2a\u7c7b\u7684\u6210\u5458\u53d8\u91cf\uff0c\u5728\u6574\u4e2aSolution\u7684\u751f\u547d\u5468\u671f\u4e2d\u4e00\u76f4\u5b58\u5728\n// \u6240\u4ee5ans\u8fd9\u91cc\u76f8\u5f53\u4e8eSolution\u4e2d\u7684\u5168\u5c40\u53d8\u91cf\n// \u5b9e\u73b0\u4e86\u591a\u6b21\u8c03\u7528 dfs \u51fd\u6570\u7684\u8fc7\u7a0b\u4e2d\u7d2f\u79ef\u5e76\u7ef4\u62a4\u4e00\u4e2a\u5168\u5c40\u7684\u6700\u5927\u6df1\u5ea6\u503c\nint ans = 0;\nvoid dfs(TreeNode *node, int count) {\nif (node == nullptr) return;\ncount++;\nans = max(ans, count);\ndfs(node-&gt;left, count);\ndfs(node-&gt;right, count);\n}\npublic:\nint maxDepth(TreeNode* root) {\ndfs(root, 0);\nreturn ans;\n}\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#100","title":"100. \u76f8\u540c\u7684\u6811","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\nbool isSameTree(TreeNode* p, TreeNode* q) {\nif (p == nullptr || q == nullptr) return p == q;\nreturn p-&gt;val == q-&gt;val &amp;&amp; isSameTree(p-&gt;left, q-&gt;left) &amp;&amp; isSameTree(p-&gt;right, q-&gt;right);\n\n}\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#101","title":"101. \u5bf9\u79f0\u4e8c\u53c9\u6811","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\nbool check(TreeNode *a, TreeNode *b) {\nif (a == nullptr || b == nullptr) return a == b;\nreturn (a-&gt;val == b-&gt;val) &amp;&amp; check(a-&gt;left, b-&gt;right) &amp;&amp; check(a-&gt;right, b-&gt;left);\n}\npublic:\n\nbool isSymmetric(TreeNode* root) {\nreturn check(root-&gt;left, root-&gt;right);\n}\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#110","title":"110. \u5e73\u8861\u4e8c\u53c9\u6811","text":""},{"location":"Problem/programmercarl/algorithm/#_28","title":"\u7b2c\u4e00\u79cd\uff1a\u5728\u9012\u5f52\u5730\u8fc7\u7a0b\u4e2d\u7ef4\u62a4\u6811\u7684\u5e73\u8861","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\n// \u7528-1\u6765\u5b9a\u4e49\u201c\u4e0d\u5e73\u8861\u201d\u7684\u6811\n// \u5982\u679c\u5728\u67d0\u4e2a\u70b9\u5df2\u7ecf\u5f00\u59cb\u4e0d\u5e73\u8861\u4e86\uff0c\u90a3\u4e48\u5c31\u8981\u4e0d\u65ad\u5730\u5f80\u4e0a\u8fd4\u56de-1\nint getHeight(TreeNode *root) {\nif (root == nullptr) return 0;\nint left = getHeight(root-&gt;left);\nif (left == -1) return -1;\nint right = getHeight(root-&gt;right);\nif (right == -1 || abs(left - right) &gt; 1) return -1;\nreturn max(left, right) + 1;\n}\npublic:\nbool isBalanced(TreeNode* root) {\nreturn getHeight(root) != -1;\n}\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#_29","title":"\u7b2c\u4e8c\u79cd\uff1a\uff08\u4e00\u822c\u7684\u505a\u6cd5\uff09\u6bcf\u4e00\u6b21\u90fd\u53bb\u9012\u5f52\u627e\u51fa\u6bcf\u4e2a\u70b9\u7684\u9ad8\u5ea6","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\nint height(TreeNode* root) {\nif (root == nullptr) return 0;\nreturn max(height(root-&gt;left), height(root-&gt;right)) + 1;\n}\npublic:\nbool isBalanced(TreeNode* root) {\nif (root == nullptr) return true;\nelse {\nreturn abs(height(root-&gt;left) - height(root-&gt;right)) &lt;= 1 &amp;&amp; isBalanced(root-&gt;left) &amp;&amp; isBalanced(root-&gt;right);\n}\n}\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#199","title":"199. \u4e8c\u53c9\u6811\u7684\u53f3\u89c6\u56fe","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\nvector&lt;int&gt;ans;\nvoid find(TreeNode* root, int d) {\nif (root == nullptr) return;\nif (d == ans.size()) ans.push_back(root-&gt;val);\nfind(root-&gt;right, d + 1);\nfind(root-&gt;left, d + 1);\n}\npublic:\nvector&lt;int&gt; rightSideView(TreeNode* root) {\n// \u9700\u8981\u5148\u9012\u5f52\u53f3\u5b50\u6811\uff0c\u7136\u540e\u518d\u9012\u5f52\u5de6\u5b50\u6811\n// \u5199\u4e00\u4e2a\u9012\u5f52\u51fd\u6570\uff0c\u5982\u679c\u8fd9\u4e2a\u8282\u70b9\u7684\u6df1\u5ea6\u548c\u7b54\u6848\u7684\u957f\u5ea6\u76f8\u7b49\uff0c\u90a3\u4e48\u9700\u8981\u5c06\u8fd9\u4e2a\u8282\u70b9\u52a0\u5165\u5230\u7b54\u6848\u4e2d\u53bb\nfind(root, 0);\nreturn ans;\n}\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#_30","title":"\u9a8c\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811","text":""},{"location":"Problem/programmercarl/algorithm/#98_1","title":"98. \u9a8c\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811","text":""},{"location":"Problem/programmercarl/algorithm/#_31","title":"\u524d\u5e8f\u904d\u5386","text":"<p>\u5728\u6574\u4e2a\u904d\u5386\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5148\u8bbf\u95ee\u8282\u70b9\u7684\u503c\uff08\u5224\u65ad\u662f\u5426\u7b26\u5408\u4e0a\u9762\u4f20\u4e0b\u6765\u7684\u8981\u6c42\uff09\u518d\u9012\u5f52\u5de6\u53f3\u5b50\u6811\u7684\u505a\u6cd5\u53eb\u505a\u524d\u5e8f\u904d\u5386</p> <p>\u6700\u4fbf\u6377\u5199\u6cd5</p> <pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\nbool isValidBST(TreeNode* root, long left = LONG_MIN, long right = LONG_MAX) {\nif (root == nullptr) return true;\nlong x= root-&gt;val;\nreturn left &lt; x &amp;&amp; x &lt; right &amp;&amp; isValidBST(root-&gt;left, left, x) &amp;&amp; isValidBST(root-&gt;right, x, right);\n}\n};\n</code></pre> <pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\n// \u8fd9\u4e2a\u51fd\u6570\u7ef4\u6301\u7684\u662f\u6bcf\u4e2a\u8282\u70b9\u9700\u8981\u5927\u4e8e\u7684\u503c\uff08left\uff09\u548c\u9700\u8981\u5c0f\u4e8e\u7684\u503c\uff08right\uff09\nbool dfs(TreeNode* root, long left, long right) {\nif (!root) return true;\nif (root-&gt;val &lt;= left || root-&gt;val &gt;= right) return false;\n// \u56e0\u4e3aroot\u7684\u5de6\u513f\u5b50\u9700\u8981\u5c0f\u4e8eroot\u7684\u503c\uff0c\u6240\u4ee5\u66f4\u65b0right\nreturn dfs(root-&gt;left, left, root-&gt;val) &amp;&amp; dfs(root-&gt;right, root-&gt;val, right);\n}\npublic:\nbool isValidBST(TreeNode* root) {\nreturn dfs(root, LONG_MIN, LONG_MAX);\n}\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#_32","title":"\u524d\u5e8f\u904d\u5386\u7b2c\u4e09\u79cd\u5199\u6cd5","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\nvector&lt;int&gt; dfs(TreeNode* root) {\nvector&lt;int&gt; res = {1, root-&gt;val, root-&gt;val};\nif (root-&gt;left) {\nvector&lt;int&gt; t = dfs(root-&gt;left);\nif (root-&gt;val &lt;= t[2] || t[0] == 0) res[0] = 0;\nres[1] = min(t[1], res[1]);\nres[2] = max(t[2], res[2]);\n}\nif (root-&gt;right) {\nvector&lt;int&gt; t = dfs(root-&gt;right);\nif (root-&gt;val &gt;= t[1] || t[0] == 0) res[0] = 0;\nres[1] = min(t[1], res[1]);\nres[2] = max(t[2], res[2]);\n}\nreturn res;\n}\npublic:\nbool isValidBST(TreeNode* root) {\nif (!root) return false;\nreturn dfs(root)[0];\n}\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#_33","title":"\u4e2d\u5e8f\u904d\u5386","text":"<p>\u5982\u679c\u5728\u6bcf\u4e2a\u8282\u70b9\uff0c\u90fd\u5148\u904d\u5386\u5de6\u5b50\u6811\uff0c\u7136\u540e\u518d\u904d\u5386\u53f3\u5b50\u6811\uff0c\u90a3\u4e48\u5c31\u80fd\u5f97\u5230\u4e00\u4e2a\u4e25\u683c\u9012\u589e\u7684\u6570\u7ec4</p> <pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\nlong pre = LONG_MIN;\npublic:\n// \u4e2d\u5e8f\u904d\u5386\n// \u7531\u4e8e\u8fd9\u91cc\u7684\u4ee3\u7801\u65f6\u5148\u6267\u884c!isValidBST\u8fd9\u4e00\u6b65\u7684\uff0c\u6240\u4ee5\u8fd9\u91cc\u662f\u5148\u6cbf\u7740\u5de6\u5b50\u6811\u4e00\u8def\u5411\u4e0b\uff0c\u7136\u540e\u518d\u662f\u53f3\u5b50\u6811\n// \u6240\u4ee5\u904d\u5386\u5230\u7684\u503c\u6709\u5355\u8c03\u9012\u589e\u7684\u6027\u8d28\n// \u800c\u5168\u5c40\u53d8\u91cfpre\u7ef4\u62a4\u7684\u5c31\u662f\u4e00\u8def\u4e0a\u7684\u6700\u5927\u503c\uff0c\n\u6240\u6709\u88ab\u904d\u5386\u5230\u7684\u8282\u70b9\uff0c\u65e0\u8bba\u662f\u5de6\u5b50\u6811\u8fd8\u662f\u53f3\u5b50\u6811\u90fd\u9700\u8981\u6bd4\u904d\u5386\u5230\u65f6\u7684\u6700\u5927\u503cpre\u5927\u5c31\u884c\u4e86\nbool isValidBST(TreeNode* root) {\nif (root == nullptr) {\nreturn true;\n}\nif (!isValidBST(root-&gt;left) || root-&gt;val &lt;= pre) return false;\npre = root-&gt;val;\nreturn isValidBST(root-&gt;right);\n}\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#_34","title":"\u540e\u7eed\u904d\u5386","text":"<p>\u5728\u540e\u5e8f\u904d\u5386\u4e2d\uff0c\u9012\u5f52\u8c03\u7528\u53d1\u751f\u5728\u5904\u7406\u5f53\u524d\u8282\u70b9\u4e4b\u524d</p> <p>\u6ce8\u610f\u7ed3\u6784\u5316\u7ed1\u5b9a\u672c\u8eab\u662f\u4e0eauto\u5173\u8054\u7d27\u5bc6\u7684\u8bed\u6cd5\u7279\u6027\uff0c\u5982\u679c\u4e0d\u4f7f\u7528auto\uff0c\u5c31\u4e0d\u8981\u4f7f\u7528\u7ed3\u6784\u5316\u7ed1\u5b9a</p> <p>\u7ed3\u6784\u5316\u7ed1\u5b9a\u7684\u7528\u6cd5\uff1a<code>auto[l_min, l_max] = dfs(node-&gt;left);</code></p> <p>\u5982\u679c\u4e0d\u4f7f\u7528auto\u548c\u7ed3\u6784\u5316\u7ed1\u5b9a\u7684\u8bdd\uff0c\u5c31\u8981\u4f7f\u7528\uff1a</p> <pre><code>pair&lt;long, long&gt; left_result = dfs(node-&gt;left);\nlong l_min = left_result.first;\nlong l_max = left_result.second;\n</code></pre> <pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npair&lt;long, long&gt; dfs(TreeNode* root) {\n// \u6ce8\u610f\uff1a\u78b0\u5230\u7a7a\u8282\u70b9\u8fd4\u56de\u7684\u662f{LONG_MAX, LONG_MIN}\nif (root == nullptr) return {LONG_MAX, LONG_MIN};\nauto[l_min, l_max] = dfs(root-&gt;left);\nauto[r_min, r_max] = dfs(root-&gt;right);\nlong x = root-&gt;val;\n// \u800c\u78b0\u5230\u9519\u8bef\u7684\u8fd4\u56de\u5c31\u662f{LONG_MIN, LONG_MAX}\uff0c\u8fd9\u6837\u53ea\u8981\u6709\u9519\uff0c\u4e0a\u9762\u7684\u8282\u70b9\u5c31\u90fd\u662f\u9519\u8bef\u7684\nif (x &lt;= l_max || x &gt;= r_min) return {LONG_MIN, LONG_MAX};\nreturn {min(l_min, x), max(r_max, x)};\n\n}\npublic:\nbool isValidBST(TreeNode* root) {\nreturn dfs(root).second != LONG_MAX;\n}\n};mo\n</code></pre> <p>\u524d\u5e8f\u904d\u5386\uff08Preorder Traversal\uff09\uff0c\u4e2d\u5e8f\u904d\u5386\uff08Inorder Traversal\uff09\u548c\u540e\u5e8f\u904d\u5386\uff08Postorder Traversal\uff09\u90fd\u662f\u4e8c\u53c9\u6811\u7684\u4e0d\u540c\u904d\u5386\u65b9\u5f0f\uff0c\u5b83\u4eec\u7684\u533a\u522b\u5728\u4e8e\u8282\u70b9\u7684\u8bbf\u95ee\u987a\u5e8f\u3002</p> <ol> <li> <p>\u524d\u5e8f\u904d\u5386\uff1a</p> </li> <li> <p>\u8bbf\u95ee\u5f53\u524d\u8282\u70b9\u3002</p> </li> <li>\u9012\u5f52\u904d\u5386\u5de6\u5b50\u6811\u3002</li> <li>\u9012\u5f52\u904d\u5386\u53f3\u5b50\u6811\u3002</li> </ol> <p>\u7528\u4f8b\u5b50\u6765\u8bf4\u660e\uff0c\u8003\u8651\u4ee5\u4e0b\u4e8c\u53c9\u6811\uff1a</p> <pre><code>    1\n   / \\\n  2   3\n / \\\n4   5\n</code></pre> <p>\u524d\u5e8f\u904d\u5386\u7ed3\u679c\uff1a1 -&gt; 2 -&gt; 4 -&gt; 5 -&gt; 3</p> <ol> <li> <p>\u4e2d\u5e8f\u904d\u5386\uff1a</p> </li> <li> <p>\u9012\u5f52\u904d\u5386\u5de6\u5b50\u6811\u3002</p> </li> <li>\u8bbf\u95ee\u5f53\u524d\u8282\u70b9\u3002</li> <li>\u9012\u5f52\u904d\u5386\u53f3\u5b50\u6811\u3002</li> </ol> <p>\u7528\u4f8b\u5b50\u6765\u8bf4\u660e\uff0c\u540c\u6837\u7684\u4e8c\u53c9\u6811\uff1a</p> <p>\u4e2d\u5e8f\u904d\u5386\u7ed3\u679c\uff1a4 -&gt; 2 -&gt; 5 -&gt; 1 -&gt; 3</p> <ol> <li> <p>\u540e\u5e8f\u904d\u5386\uff1a</p> </li> <li> <p>\u9012\u5f52\u904d\u5386\u5de6\u5b50\u6811\u3002</p> </li> <li>\u9012\u5f52\u904d\u5386\u53f3\u5b50\u6811\u3002</li> <li>\u8bbf\u95ee\u5f53\u524d\u8282\u70b9\u3002</li> </ol> <p>\u518d\u6b21\u4ee5\u76f8\u540c\u7684\u4e8c\u53c9\u6811\u4e3a\u4f8b\uff1a</p> <p>\u540e\u5e8f\u904d\u5386\u7ed3\u679c\uff1a4 -&gt; 5 -&gt; 2 -&gt; 3 -&gt; 1</p> <p>\u8fd9\u4e09\u79cd\u904d\u5386\u65b9\u5f0f\u5206\u522b\u63cf\u8ff0\u4e86\u5728\u904d\u5386\u4e8c\u53c9\u6811\u65f6\u8bbf\u95ee\u8282\u70b9\u7684\u4e0d\u540c\u987a\u5e8f\u3002\u524d\u5e8f\u904d\u5386\u4ece\u6839\u8282\u70b9\u5f00\u59cb\uff0c\u7136\u540e\u4f9d\u6b21\u904d\u5386\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u3002\u4e2d\u5e8f\u904d\u5386\u9996\u5148\u904d\u5386\u5de6\u5b50\u6811\uff0c\u7136\u540e\u8bbf\u95ee\u5f53\u524d\u8282\u70b9\uff0c\u6700\u540e\u904d\u5386\u53f3\u5b50\u6811\u3002\u540e\u5e8f\u904d\u5386\u9996\u5148\u904d\u5386\u5de6\u5b50\u6811\uff0c\u7136\u540e\u904d\u5386\u53f3\u5b50\u6811\uff0c\u6700\u540e\u8bbf\u95ee\u5f53\u524d\u8282\u70b9\u3002</p>"},{"location":"Problem/programmercarl/algorithm/#236_1","title":"236. \u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\nTreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\nif (root == nullptr || root == p || root == q) return root;\nTreeNode* left = lowestCommonAncestor(root-&gt;left, p, q);\nTreeNode* right = lowestCommonAncestor(root-&gt;right, p, q);\nif (left == nullptr) return right;\nif (right == nullptr) return left; // \u4e24\u8fb9\u90fd\u6709\u7684\u60c5\u51b5\u53ea\u80fd\u6709\u4e00\u79cd\uff1a\u90a3\u5c31\u662f\u4ed6\u4eec\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\nreturn root;\n}\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#235_1","title":"235. \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\n\nclass Solution {\npublic:\nTreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n// \u56e0\u4e3a\u662f\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u90a3\u4e48\u6ca1\u6709\u4e24\u4e2a\u8282\u70b9\u4f1a\u76f8\u540c\u7684\u503c\uff0c\u5e76\u4e14\u5177\u6709\u5355\u8c03\u6027\nint x = root-&gt;val;\nif (p-&gt;val &lt; x &amp;&amp; q-&gt;val &lt; x) return lowestCommonAncestor(root-&gt;left, p, q);\nif (p-&gt;val &gt; x &amp;&amp; q-&gt;val &gt; x) return lowestCommonAncestor(root-&gt;right, p, q);\n// \u5982\u679cp\u548cq\u4e00\u4e2a\u6bd4root\u5927\uff0c\u4e00\u4e2a\u6bd4root\u5c0f\uff0c\u90a3\u4e48root\u5fc5\u5b9a\u662f\u4ed6\u4eec\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\uff0c\u6ca1\u6709\u4f8b\u5916\uff01\nreturn root;\n}\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#_35","title":"\u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386","text":""},{"location":"Problem/programmercarl/algorithm/#102","title":"102. \u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386","text":""},{"location":"Problem/programmercarl/algorithm/#vector","title":"\u4f7f\u7528\u666e\u901a\u7684vector","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\nvector&lt;vector&lt;int&gt;&gt; levelOrder(TreeNode* root) {\nif (!root) return {};\nvector&lt;vector&lt;int&gt;&gt; ans;\nvector&lt;TreeNode*&gt; curr = {root};\nwhile (curr.size()) {\nvector&lt;TreeNode*&gt; nxt;\nvector&lt;int&gt; vals;\nfor (TreeNode* node : curr) {\nvals.push_back(node-&gt;val);\nif (node-&gt;left) nxt.push_back(node-&gt;left);\nif (node-&gt;right) nxt.push_back(node-&gt;right);\n}\ncurr = move(nxt);\nans.emplace_back(vals);\n}\nreturn ans;\n\n}\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#_36","title":"\u4f7f\u7528\u961f\u5217","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\nvector&lt;vector&lt;int&gt;&gt; levelOrder(TreeNode* root) {\nif (root == nullptr) return {};\nvector&lt;vector&lt;int&gt;&gt; ans;\nqueue&lt;TreeNode*&gt; curr;\ncurr.push(root);\nwhile (!curr.empty()) {\nvector&lt;int&gt; vals;\nfor (int n = curr.size(); n &gt; 0; n--) {\nauto node = curr.front();\ncurr.pop();\nvals.push_back(node-&gt;val);\nif (node-&gt;left) curr.push(node-&gt;left);\nif (node-&gt;right) curr.push(node-&gt;right);  }\nans.emplace_back(vals);\n}\nreturn ans;\n}\n\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#103","title":"103. \u4e8c\u53c9\u6811\u7684\u952f\u9f7f\u5f62\u5c42\u5e8f\u904d\u5386","text":""},{"location":"Problem/programmercarl/algorithm/#vector_1","title":"\u4f7f\u7528vector","text":"<p>\u6ce8\u610f\u4f7f\u7528emplace_back()\uff0c\u6548\u7387\u4f1a\u6bd4push_back()\u9ad8\u5f88\u591a</p> <pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\nvector&lt;vector&lt;int&gt;&gt; zigzagLevelOrder(TreeNode* root) {\nif (root == nullptr) return {};\nvector&lt;vector&lt;int&gt;&gt; ans;\nvector&lt;TreeNode*&gt; curr = {root};\nfor (bool even = false; !curr.empty(); even = !even) {\nvector&lt;TreeNode*&gt; next;\nvector&lt;int&gt; vals;\nfor (TreeNode* node : curr) {\nvals.push_back(node-&gt;val);\nif (node-&gt;left) next.push_back(node-&gt;left);\nif (node-&gt;right) next.push_back(node-&gt;right);\n}\ncurr = move(next);\nif (even) reverse(vals.begin(), vals.end());\nans.emplace_back(vals);\n}\nreturn ans;\n}\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#_37","title":"\u4f7f\u7528\u961f\u5217","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\nvector&lt;vector&lt;int&gt;&gt; zigzagLevelOrder(TreeNode* root) {\nif (root == nullptr) return {};\nvector&lt;vector&lt;int&gt;&gt; ans;\nqueue&lt;TreeNode*&gt; curr;\ncurr.push(root);\nfor (bool even = false; !curr.empty(); even = !even) {\nvector&lt;int&gt; vals;\nfor (int i = curr.size(); i &gt; 0; i--) {\nTreeNode* node = curr.front();\ncurr.pop();\nvals.push_back(node-&gt;val);\nif (node-&gt;left) curr.push(node-&gt;left);\nif (node-&gt;right) curr.push(node-&gt;right);\n}\nif (even) reverse(vals.begin(), vals.end());\nans.emplace_back(vals);\n}\nreturn ans;\n}\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#513","title":"513. \u627e\u6811\u5de6\u4e0b\u89d2\u7684\u503c","text":""},{"location":"Problem/programmercarl/algorithm/#_38","title":"\u4ece\u5de6\u5230\u53f3\u904d\u5386\uff0c\u7136\u540e\u6700\u540e\u4e00\u5c42\u7684\u7b2c\u4e00\u4e2a\u5c31\u662f","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\nint findBottomLeftValue(TreeNode* root) {\nint ans;\nqueue&lt;TreeNode*&gt; curr;\ncurr.push(root);\nwhile (!curr.empty()) {\nans = curr.front()-&gt;val;\nfor (int i = curr.size(); i &gt; 0; i--) {\nTreeNode* node = curr.front();\ncurr.pop();\nif (node-&gt;left) curr.push(node-&gt;left);\nif (node-&gt;right) curr.push(node-&gt;right);\n}\n}\nreturn ans;\n}\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#_39","title":"\u4ece\u53f3\u5f80\u5de6\u904d\u5386","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\nint findBottomLeftValue(TreeNode* root) {\nint ans;\nqueue&lt;TreeNode*&gt; curr;\ncurr.push(root);\nwhile (!curr.empty()) {\nans = curr.front()-&gt;val;\nfor (int i = curr.size(); i &gt; 0; i--) {\nTreeNode* node = curr.front();\ncurr.pop();\nif (node-&gt;left) curr.push(node-&gt;left);\nif (node-&gt;right) curr.push(node-&gt;right);\n}\n}\nreturn ans;\n}\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#1_1","title":"\u56de\u6eaf\u7b97\u6cd5\u5957\u8def1\uff1a\u5b50\u96c6\u578b\u56de\u5f52","text":"<p>\u539f\u95ee\u9898\uff1a\u6784\u9020\u4e00\u4e2a\u957f\u5ea6\u4e3an\u7684\u5b57\u7b26\u4e32</p> <p>\u8fc7\u7a0b\uff1a\u679a\u4e3e\u4e00\u4e2a\u5b57\u6bcd</p> <p>\u5b50\u95ee\u9898\uff1a\u6784\u9020\u4e00\u4e2a\u957f\u5ea6\u4e3an-1\u7684\u5b57\u7b26\u4e32</p> <p>\u5f53\u5b50\u95ee\u9898\u548c\u539f\u95ee\u9898\u662f\u76f8\u4f3c\u7684\uff0c\u8fd9\u79cd\u4ece\u539f\u95ee\u9898\u5230\u5b50\u95ee\u9898\u7684\u8fc7\u7a0b\u9002\u5408\u7528\u9012\u5f52\u89e3\u51b3</p> <p>\u56de\u6eaf\u6709\u4e00\u4e2a\u589e\u91cf\u6784\u9020\u7b54\u6848\u7684\u8fc7\u7a0b\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u901a\u5e38\u7528\u9012\u5f52\u5b9e\u73b0</p> <p>\u53ea\u8981\u5c06\u8fb9\u754c\u6761\u4ef6\u548c\u975e\u8fb9\u754c\u6761\u4ef6\u903b\u8f91\u5199\u5bf9\uff0c\u5c31\u80fd\u4fdd\u8bc1\u5199\u7684\u7b97\u6cd5\u662f\u5bf9\u7684</p> <p>\u56de\u6eaf\u95ee\u9898\u7684\u505a\u6cd5\uff1a</p> <p>\u7528\u4e00\u4e2apath\u6570\u7ec4\u8bb0\u5f55\u8def\u5f84\u4e0a\u7684\u5b57\u6bcd</p> <p>\u56de\u6eaf\u4e09\u95ee\uff1a</p> <ol> <li>\u5f53\u524d\u64cd\u4f5c\uff0c\u679a\u4e3epath[i]\u8981\u586b\u5165\u7684\u5b57\u6bcd</li> <li>\u5b50\u95ee\u9898\uff1f\u6784\u9020\u5b57\u7b26\u4e32&gt;= i\u7684\u90e8\u5206</li> <li>\u4e0b\u4e00\u4e2a\u5b50\u95ee\u9898\uff1f\u6784\u9020\u5b57\u7b26\u4e32&gt;= i + 1\u7684\u90e8\u5206</li> </ol> <p>dfs(i) -&gt; dfs(i + 1)\uff0c\u8fd9\u91cc\u7684i\u7684\u610f\u601d\u662f\u8003\u8651\u5230\u4e86&gt;= i \u7684\u90e8\u5206</p>"},{"location":"Problem/programmercarl/algorithm/#17","title":"17. \u7535\u8bdd\u53f7\u7801\u7684\u5b57\u6bcd\u7ec4\u5408","text":""},{"location":"Problem/programmercarl/algorithm/#acwing_2","title":"acwing\u5199\u6cd5","text":"<pre><code>class Solution {\npublic:\nvector&lt;string&gt; ans;\nvector&lt;string&gt; map = {\n\"\", \"\", \"abc\", \"def\",\n\"ghi\", \"jkl\", \"mno\",\n\"pqrs\", \"tuv\", \"wxyz\"\n};\nvector&lt;string&gt; letterCombinations(string digits) {\nif (digits.empty()) return ans;\ndfs(digits, 0, \"\");\nreturn ans;\n}\nvoid dfs(string&amp; digits, int n, string path) {\nif (n == digits.size()) {\nans.push_back(path);\n}\nelse {\nfor (char c : map[digits[n] - '0']) {\ndfs(digits, n + 1, path + c);\n}\n}\n}\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#_40","title":"\u7075\u8336\u5c71\u827e\u5e9c\u5199\u6cd5","text":"<pre><code>class Solution {\nstring map[10] = {\"\", \"\", \"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqrs\", \"tuv\", \"wxyz\"};\npublic:\nvector&lt;string&gt; letterCombinations(string digits) {\nint n = digits.length();\nif (n == 0) return {};\nvector&lt;string&gt; ans;\n// \u521d\u59cb\u5316n\u4e2a\u5b57\u7b26\uff0c\u7136\u540e\u521d\u59cb\u5316\u6240\u6709\u5b57\u6bcd\u4e3a0\nstring path(n, 0);\n// function&lt;void(int)&gt;\u8868\u793a\u662f\u4e00\u4e2a\u51fd\u6570\u6a21\u677f\n// \u8fd4\u56de\u7684\u662fvoid \u8f93\u5165\u7684\u662fint\n// [&amp;]\u8868\u793a\u51fd\u6570\u5185\u80fd\u591f\u8c03\u7528\u6240\u6709\u5916\u90e8\u53d8\u91cf\u7684\u5f15\u7528\n// int i \u8868\u793a\u8f93\u5165\u7684\u53d8\u91cf\u662fi\nfunction&lt;void(int)&gt; dfs = [&amp;] (int i) {\nif (i == n) {\nans.emplace_back(path);\nreturn;\n}\nfor (char c : map[digits[i] - '0']) {\npath[i] = c;\ndfs(i + 1);\n}\n};\ndfs(0);\nreturn ans;\n}\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#78","title":"78. \u5b50\u96c6","text":""},{"location":"Problem/programmercarl/algorithm/#function","title":"\u5c06function\u5199\u5728\u5916\u9762\uff0c\u6bd4\u8f83\u9ebb\u70e6\uff0c\u4e0d\u63a8\u8350","text":"<pre><code>class Solution {\npublic:\nvector&lt;int&gt; path;\nvector&lt;vector&lt;int&gt;&gt; ans;\nvector&lt;vector&lt;int&gt;&gt; subsets(vector&lt;int&gt;&amp; nums) {\nint k = nums.size();\ndfs(0, k,nums);\nreturn ans;\n}\nvoid dfs(int n, int k, vector&lt;int&gt;&amp; nums) {\nif (n == k) {\nans.push_back(path);\n}\nelse {\ndfs(n + 1, k, nums);\npath.push_back(nums[n]);\ndfs(n + 1, k, nums);\npath.pop_back();\n}\n}\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#lambda","title":"lambda\u51fd\u6570\uff0c\u5199\u5728\u91cc\u9762\uff0c\u63a8\u8350","text":"<pre><code>class Solution {\npublic:\nvector&lt;vector&lt;int&gt;&gt; subsets(vector&lt;int&gt;&amp; nums) {\nvector&lt;int&gt; path;\nvector&lt;vector&lt;int&gt;&gt; ans;\nint u = nums.size();\nfunction&lt;void(int)&gt; dfs = [&amp;] (int i) {\nif (i == u) {\nans.push_back(path);\nreturn;\n}\nelse {\ndfs(i + 1);\npath.push_back(nums[i]);\ndfs(i + 1);\npath.pop_back();\n}\n};\ndfs(0);\nreturn ans;\n}\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#_41","title":"\u679a\u4e3e\u9012\u5f52","text":"<pre><code>class Solution {\npublic:\nvector&lt;vector&lt;int&gt;&gt; subsets(vector&lt;int&gt;&amp; nums) {\nvector&lt;int&gt; path;\nvector&lt;vector&lt;int&gt;&gt; ans;\nint u = nums.size();\nfunction&lt;void(int)&gt; dfs = [&amp;] (int i) {\nans.push_back(path);\nif (i == u) {\nreturn;\n}\nfor (int j = i; j &lt; u; j ++) {\npath.push_back(nums[j]);\ndfs(j + 1);\npath.pop_back();\n}\n\n};\ndfs(0);\nreturn ans;\n}\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#_42","title":"\u7ec4\u5408\u578b\u56de\u6eaf \u526a\u679d","text":""},{"location":"Problem/programmercarl/algorithm/#77","title":"77. \u7ec4\u5408","text":""},{"location":"Problem/programmercarl/algorithm/#_43","title":"\u7075\u8336\u5c71\u827e\u5e9c\u505a\u6cd5+\u526a\u679d","text":"<pre><code>class Solution {\npublic:\nvector&lt;vector&lt;int&gt;&gt; combine(int n, int k) {\nvector&lt;vector&lt;int&gt;&gt; ans;\nvector&lt;int&gt; path;\nfunction&lt;void(int)&gt; dfs = [&amp;] (int i) {\nint d = k - path.size(); // d\u662f\u8fd8\u9700\u8981\u591a\u5c11\u4e2a\nif (d == 0) {\nans.emplace_back(path);\nreturn;\n}\nfor (int j = i; j &gt;= d; j--) {\npath.push_back(j);\ndfs(j - 1);\npath.pop_back();\n}\n};\ndfs(n);\nreturn ans;\n}\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#dfs_1","title":"dfs\u8fc7\u7a0b\u4e2d\u679a\u4e3e\u4e0b\u4e00\u4e2a\u6570\u9009\u54ea\u4e2a","text":"<pre><code>class Solution {\npublic:\nvector&lt;vector&lt;int&gt;&gt; combine(int n, int k) {\nvector&lt;vector&lt;int&gt;&gt; ans;\nvector&lt;int&gt; path;\nfunction&lt;void(int, int)&gt; dfs = [&amp;] (int start, int curr) {\nif (curr == k) {\nans.emplace_back(path);\nreturn;\n}\nfor (int i = start; i &lt;= n; i++) {\npath.push_back(i);\ndfs(i + 1, curr + 1);\npath.pop_back();\n}\n};\ndfs(1, 0);\nreturn ans;\n}\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#_44","title":"\u9009\u6216\u8005\u4e0d\u9009\u7684\u505a\u6cd5","text":"<pre><code>class Solution {\npublic:\nvoid dfs(int u, int curr) {\n\n}\nvector&lt;vector&lt;int&gt;&gt; combine(int n, int k) {\nvector&lt;vector&lt;int&gt;&gt; ans;\nvector&lt;int&gt; path;\nfunction&lt;void(int, int)&gt; dfs = [&amp;] (int u, int curr) {\nif (curr == k) {\nans.emplace_back(path);\nreturn;\n}\nif (u &lt;= n) dfs(u + 1, curr);\npath.push_back(u);\nif (u &lt;= n) dfs(u + 1, curr + 1);\npath.pop_back();\n};\ndfs(1, 0);\nreturn ans;\n}\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#216-iii","title":"216. \u7ec4\u5408\u603b\u548c III","text":""},{"location":"Problem/programmercarl/algorithm/#_45","title":"\u679a\u4e3e\u4e0b\u4e2a\u6570\u9009\u54ea\u4e2a","text":"<pre><code>class Solution {\npublic:\nvector&lt;vector&lt;int&gt;&gt; combinationSum3(int k, int n) {\nvector&lt;vector&lt;int&gt;&gt; ans;\nvector&lt;int&gt; path;\nfunction&lt;void(int, int)&gt; dfs = [&amp;] (int i, int t) {\nint d = k - path.size();\nif (t &lt; 0 || t &gt; (i + i - d + 1) * d / 2) return;\nif (d == 0) {\nans.emplace_back(path);\nreturn;\n}\nfor (int j = i; j &gt;= d; --j) {\npath.push_back(j);\ndfs(j - 1, t - j);\npath.pop_back();\n}\n\n};\ndfs(9, n);\nreturn ans;\n}\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#_46","title":"\u9009\u6216\u4e0d\u9009\u7684\u505a\u6cd5","text":"<pre><code>class Solution {\npublic:\nvector&lt;vector&lt;int&gt;&gt; combinationSum3(int k, int n) {\nvector&lt;vector&lt;int&gt;&gt; ans;\nvector&lt;int&gt; path;\nfunction&lt;void(int, int)&gt; dfs = [&amp;] (int t, int u) {\nint d = k - path.size();\nif (d == 0 &amp;&amp; t == 0) {\nans.emplace_back(path);\nreturn;\n}\n// \u9700\u8981\u526a\u679d\n// \u5982\u679ctarget\u5c0f\u4e8e0\u4e86\u76f4\u63a5\u8fd4\u56de\n// \u5982\u679c\u63a5\u4e0b\u6765\u7684\u8fde\u7eed\u6700\u5927\u7684\u548c\u90fd\u8fbe\u4e0d\u5230target\u7684\u8bdd\uff0c\u4e5f\u76f4\u63a5\u8fd4\u56de\nif (t &lt; 0 || t &gt; (u + u - d + 1) * d / 2) return;\n// \u4f7f\u7528\u9009\u62e9\u4e0e\u5426\u6765\u505a\n// \u526a\u679d\uff1a\u5982\u679c\u5269\u4e0b\u7684\u4e2a\u6570\u4e0d\u8db3\u4e5f\u76f4\u63a5return\n// \u4e0d\u9009\u62e9\u73b0\u5728\u8fd9\u4e2a\u6570\n// \u56e0\u4e3a\u5269\u4e0b\u7684\u6bcf\u4e2a\u6570\u90fd\u9009\u62e9\u7684\u8bdd\uff0cu\u73b0\u5728\u7684\u6700\u5c0f\u503c\u662fd + 1\uff0c\u6240\u4ee5\u8fd9\u91cc\u7684\u6761\u4ef6\u662fu&gt;d\nif (u &gt; d) dfs(t, u - 1);\n// \u9009\u62e9\u73b0\u5728\u8fd9\u4e2a\u6570\n// \u800c\u5269\u4e0b\u7684\u6bcf\u4e2a\u6570\u90fd\u9009\u62e9\u7684\u8bdd\uff0c\u5e76\u4e14\u9009\u62e9\u73b0\u5728\u8fd9\u4e2a\u6570\uff0c\u90a3\u4e48u\u6700\u5c0f\u662fd\n// \u5982\u679cd&gt;u\u7684\u8bdd\uff0c\u56de\u6f0f\u6389\u4e00\u79cd\u60c5\u51b5\nif (u &gt;= d) {\npath.push_back(u);\nt -= u;\ndfs(t, u - 1);\nt += u;\npath.pop_back();\n}\n};\ndfs(n, 9);\nreturn ans;\n}\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#22_1","title":"22. \u62ec\u53f7\u751f\u6210","text":"<pre><code>class Solution {\npublic:\nvector&lt;string&gt; generateParenthesis(int n) {\nvector&lt;string&gt; ans;\nstring path;\nfunction&lt;void(int, int)&gt; dfs = [&amp;] (int l, int r) {\nif (l == 0 &amp;&amp; r == 0) {\nans.emplace_back(path);\nreturn;\n}\nif (r &gt; l) {\npath.push_back(')');\ndfs(l, r - 1);\npath.pop_back();\n}\nif (l &gt; 0) {\npath.push_back('(');\ndfs(l - 1, r);\npath.pop_back();\n}\n};\ndfs(n, n);\nreturn ans;\n}\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#301","title":"301. \u5220\u9664\u65e0\u6548\u7684\u62ec\u53f7","text":"<p>\u5408\u6cd5\u62ec\u53f7\u5e8f\u5217\u9700\u8981\u6ee1\u8db3\u7684\u6761\u4ef6\uff1a</p> <ol> <li>\u5de6\u53f3\u62ec\u53f7\u6570\u91cf\u76f8\u540c</li> <li>\u62ec\u53f7\u5e8f\u5217\u4efb\u610f\u4e00\u4e2a\u524d\u7f00\u4e2d\u5de6\u62ec\u53f7\u6570\u91cf&gt;=\u53f3\u62ec\u53f7\u6570\u91cf</li> </ol> <p>l\u8868\u793a\u5f53\u524d\u5de6\u62ec\u53f7\u6570\u91cf\u6bd4\u53f3\u62ec\u53f7\u6570\u91cf\u591a\u591a\u5c11\u4e2a</p> <p>r\u8868\u793a\u5f53\u524d\u8981\u5220\u6389\u591a\u5c11\u4e2a\u53f3\u62ec\u53f7</p> <p>\u5faa\u73af\u7ed3\u675f\u65f6\uff0cl\u8868\u793a\u8981\u5220\u6389\u7684\u5de6\u62ec\u53f7\u7684\u6570\u91cf\uff0cr\u8868\u793a\u8981\u5220\u6389\u7684\u989d\u53f3\u62ec\u53f7\u7684\u6570\u91cf</p>"},{"location":"Problem/programmercarl/algorithm/#acwing_3","title":"acwing\u5199\u6cd5","text":"<pre><code>class Solution {\npublic:\nvector&lt;string&gt; ans;\nvector&lt;string&gt; removeInvalidParentheses(string s) {\nint l = 0, r = 0;\nfor (auto x : s) {\nif (x == '(') l++;\nelse if (x == ')') {\nif (l == 0) r++;\nelse l--;\n}\n}\ndfs(s, 0, \"\", 0, l, r);\nreturn ans;\n}\nvoid dfs(string&amp; s, int u, string path, int cnt, int l, int r) {\nif (u == s.size()) {\nif (!cnt) ans.push_back(path);\nreturn;\n}\nif (s[u] != '(' &amp;&amp; s[u] != ')') dfs(s, u + 1, path + s[u], cnt, l, r);\nelse if (s[u] == '(') {\nint k = u;\nwhile (k &lt; s.size() &amp;&amp; s[k] == '(') k++;\nl -= k -u;\n// for-loop\u91cc\u662f\u679a\u4e3ek-u+1\u79cd\u53ef\u80fd\uff0c\u4ecek-u\u4e2a\u5b57\u7b26\u5168\u5220\uff0c\u5230k-u\u4e2a\u5b57\u7b26\u5168\u7559\u3002\u4eba\u4e3a\u89c4\u5b9a\u8fd9\u79cd\u987a\u5e8f\uff0c\u76ee\u7684\u5728\u4e8e\u526a\u679d\u3002\n// \u6bcf\u6b21dfs()\u5b8c\u540e\uff0c\u4e0d\u8bba\u6709\u6ca1\u6709\u6709\u6548path\uff0c\u90fd\u4f1a\u56de\u6eaf\u5230\u4e0a\u5c42dfs()\uff0c\u53ef\u7406\u89e3\u4e3a\u6062\u590d\u73b0\u573a\u3002\nfor (int i = k - u; i &gt;= 0; i--) {\nif (l &gt;= 0) dfs(s, k, path, cnt, l, r);\npath += '(';\ncnt++, l++;\n}\n} else if (s[u] == ')') {\nint k = u;\nwhile (k &lt; s.size() &amp;&amp; s[k] == ')') k++;\nr -= k - u;\nfor (int i = k - u; i &gt;= 0; i--) {\nif (cnt &gt;= 0 &amp;&amp; r &gt;= 0) dfs(s, k, path, cnt, l, r);\npath += ')';\ncnt--, r++;\n}\n}\n}\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#_47","title":"\u529b\u6263\u7f51\u53cb\u5199\u6cd5\uff08\u6284\u7684\uff0c\u8fd8\u6ca1\u81ea\u5df1\u5b9e\u8df5\uff09","text":"<pre><code>class Solution {\npublic:\nunordered_set&lt;string&gt; unique;\nvector&lt;string&gt; removeInvalidParentheses(string s) {\nvector&lt;string&gt; ans;\nint l = 0; // \u5de6\u62ec\u53f7\u9700\u8981\u5220\u9664\u7684\u6570\u91cf\uff1b\nint r = 0; // \u53f3\u62ec\u53f7\u9700\u8981\u5220\u9664\u7684\u6570\u91cf\uff1b\nfor (int i = 0; i &lt; s.size(); i++) {\nif (s[i] == '(') l++; // \u9047\u5230\u5de6\u62ec\u53f7\u8ba1\u6570\uff1b\u5982\u679c\u6709\u5339\u914d\u7684\u53f3\u62ec\u53f7\uff0c\u53ef\u4ee5\u62b5\u6d88\uff1b\n// \u62b5\u6d88\u4e0d\u4e86\u7684\u90fd\u662f\u6211\u4eec\u9700\u8981\u5220\u9664\u7684\u5de6\u62ec\u53f7\nelse if (s[i] == ')') {\n// \u5de6\u62ec\u53f7\u4e3a0\uff1b\u6b64\u65f6\u9047\u5230\u53f3\u62ec\u53f7\u4e00\u5b9a\u662f\u5339\u914d\u4e0d\u4e86\u7684\uff0c\u9700\u8981\u5220\u9664\u7684\nif (l == 0) r++;\n\n// \u5339\u914d\u6389\u4e00\u4e2a\u5de6\u62ec\u53f7\uff0c\u76f8\u5f53\u4e8e\u51fa\u6808\nelse l--;\n}\n\n}\nstring t = \"\";\ndfs(s, t, 0, l, r, 0, 0);\nfor (auto s : unique) {\nans.emplace_back(s);\n}\nreturn ans;\n}\nvoid dfs(string&amp; s, string&amp; t, int i, int l, int r, int lcnt, int rcnt) {\nif (i == s.size()) {\n// \u9012\u5f52\u7ec8\u70b9\uff1b \u7528set\u53bb\u91cd\nif (l == 0 &amp;&amp; r == 0) unique.insert(t);\nreturn;\n}\n// \u8df3\u8fc7\u5de6\u53f3\u62ec\u53f7\uff0c\u4f46\u5269\u4e0b\u9700\u8981\u5220\u9664\u7684\u62ec\u53f7\u4e0d\u80fd\u5c0f\u4e8e0\nif (s[i] == '(' &amp;&amp; l &gt; 0) {\ndfs(s, t, i + 1, l - 1, r, lcnt, rcnt);\n}\nif (s[i] == ')' &amp;&amp; r &gt; 0) {\ndfs(s, t, i + 1, l, r - 1, lcnt, rcnt);\n}\n// \u4fdd\u7559\u5f53\u524d\u5b57\u7b26\uff1b\u53ef\u80fd\u662f\u62ec\u53f7\uff0c\u4e5f\u53ef\u80fd\u662f\u5b57\u6bcd\nt.push_back(s[i]);\nif (s[i] != '(' &amp;&amp; s[i] != ')') {\n// \u5982\u679c\u662f\u5b57\u6bcd\uff0c\u4e0d\u7528\u5904\u7406\ndfs(s, t, i + 1, l, r, lcnt, rcnt);\n} else if (s[i] == '(') {\n// \u5982\u679c\u662f\u5de6\u62ec\u53f7\uff0c\u6211\u4eec\u66f4\u65b0\u5de6\u62ec\u53f7\u7684\u6570\u91cf\ndfs(s, t, i + 1, l, r, lcnt + 1, rcnt);\n} else if (s[i] == ')' &amp;&amp; rcnt &lt; lcnt) {\n// \u8fd9\u4e00\u6b65\u5b9e\u9645\u4e0a\u662f\u628a\u53f3\u62ec\u53f7\u591a\u4f59\u7684\u5206\u652f\u526a\u9664\uff1b \u53ea\u6709 rcnt &lt; lcnt \u6211\u4eec\u624d\u6709\u5fc5\u8981\u7ee7\u7eed\u9012\u5f52\n// \u907f\u514d\u51fa\u73b0 `)(` \u8fd9\u6837\u7684\u60c5\u51b5\ndfs(s, t, i + 1, l, r, lcnt, rcnt + 1);\n}\n// \u6062\u590d\u73b0\u573a\nt.pop_back();\n}\n};\n</code></pre> <pre><code>class Solution {\npublic:\nTreeNode* balanceBST(TreeNode* root) {\nif (root == nullptr) return root;\nroot-&gt;left = balanceBST(root-&gt;left);\nroot-&gt;right = balanceBST(root-&gt;right);\n\n// \u540e\u5e8f\u5904\u7406\u903b\u8f91\nint balanceFactor = getHeight(root-&gt;left) - getHeight(root-&gt;right);\nif (balanceFactor &gt; 1){\nint lblance = getHeight(root-&gt;left-&gt;left) - getHeight(root-&gt;left-&gt;right);\nif (lblance &lt; 0) root-&gt;left = leftRotate(root-&gt;left);\nroot = rightRotate(root);\nreturn balanceBST(root);\n}else if(balanceFactor &lt; -1){\n// \u68c0\u67e5\u53f3\u5b50\u6811\nint rblance = getHeight(root-&gt;right-&gt;left) - getHeight(root-&gt;right-&gt;right);\nif (rblance &gt; 0) root-&gt;right = rightRotate(root-&gt;right);\nroot = leftRotate(root);\nreturn balanceBST(root);\n}\nreturn root;\n}\n\nTreeNode* leftRotate(TreeNode* root){\nif (root == nullptr || root-&gt;right == nullptr) return root;\nTreeNode* right = root-&gt;right;\nTreeNode* rightLeft = root-&gt;right-&gt;left;\nroot-&gt;right = rightLeft;\nright-&gt;left = root;\nreturn right; }\n\nTreeNode* rightRotate(TreeNode* root){\nif (root == nullptr || root-&gt;left == nullptr) return root;\nTreeNode* left = root-&gt;left;\nTreeNode* leftRight = root-&gt;left-&gt;right;\nroot-&gt;left = leftRight;\nleft-&gt;right = root;\nreturn left;\n}\n\nint getHeight(TreeNode* root){\nif (root == nullptr) return 0;\nreturn max(getHeight(root-&gt;left),getHeight(root-&gt;right)) + 1;\n}\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#_48","title":"\u6392\u5217\u884c\u56de\u6eaf","text":""},{"location":"Problem/programmercarl/algorithm/#46","title":"46. \u5168\u6392\u5217","text":"<pre><code>class Solution {\npublic:\nvector&lt;vector&lt;int&gt;&gt; permute(vector&lt;int&gt;&amp; nums) {\nvector&lt;vector&lt;int&gt;&gt; ans;\nvector&lt;int&gt; path(nums.size());\nvector&lt;bool&gt; mark(nums.size(), false);\nfunction&lt;void(int)&gt; dfs = [&amp;] (int i) {\nif (i == nums.size()) {\nans.emplace_back(path);\nreturn;\n}\nfor (int j = 0; j &lt; nums.size(); j++) {\nif (mark[j] == false) {\npath[i] = nums[j];\nmark[j] = true;\ndfs(i + 1);\nmark[j] = false;\n}\n}\n};\ndfs(0);\nreturn ans;\n}\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#51-n","title":"51. N \u7687\u540e","text":"<pre><code>class Solution {\npublic:\nvector&lt;vector&lt;string&gt;&gt; solveNQueens(int n) {\n// \u601d\u8003\uff1a\u5982\u4f55\u53ea\u67e5\u8be2\u4e00\u6b21\u5c31\u80fd\u8868\u793a\u5bf9\u89d2\u7ebf\u4e0a\u51fa\u73b0\u8fc7Q\n// \u5de6\u4e0a\u53f3\u4e0b\u5982\u4f55\u5bf9\u89d2\u7ebf\u5982\u4f55\u8868\u793a\uff1f\n\n// \u4ee5\u7b2c0\u884c\uff0c\u7b2c2\u683c\u4e0a\u653eQ\u4e3a\u4f8b (i, j)\n// \u5de6\u4e0a\u53f3\u4e0b\uff1a j - i + n (\u8fd9\u91cc+n\u662f\u56e0\u4e3aj - i)\n// \u53f3\u4e0a\u5de6\u4e0b j + i\n\nvector&lt;vector&lt;string&gt;&gt; ans;\nvector&lt;int&gt; tmp;\n// \u8bf7\u4e00\u5b9a\u4e0d\u8981\u5fd8\u8bb0\u4f7f\u7528\u4e0b\u9762\u8fd9\u79cdstring\u6570\u7ec4\u7684\u58f0\u660e\u65b9\u6cd5\n// vector&lt;string&gt; path(n, string(n, '.'));\n\n// vector&lt;string&gt; path;\n// for (int i = 0; i &lt; n; i++ ) {\n//     for (int j =0;j &lt; n ;j++) {\n//         path[i][j] ='.';\n//     }\n// }\nvector&lt;string&gt; path(n);\nfor (int i = 0; i &lt; n; i++) {\npath[i] = string(n, '.');\n}\nvector&lt;bool&gt; col(n, false), dg(2 * n, false), udg(2 * n, false);\n\nfunction&lt;void(int)&gt; dfs = [&amp;] (int i) {\nif (i == n) {\nans.emplace_back(path);\nreturn;\n}\nfor (int j = 0; j &lt; n; j++) {\nif (!col[j] &amp;&amp; !dg[j + i] &amp;&amp; !udg[j - i + n]) {\npath[i][j] = 'Q';\ncol[j] = dg[j + i] = udg[j - i + n] = true;\ndfs(i + 1);\ncol[j] = dg[j + i] = udg[j - i + n] = false;\npath[i][j] = '.';\n}\n}\n};\ndfs(0);\nreturn ans;\n}\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#52-n-ii","title":"52. N \u7687\u540e II","text":"<pre><code>class Solution {\npublic:\nint totalNQueens(int n) {\nint total = 0;\nvector&lt;string&gt; path(n, string(n, '.'));\nvector&lt;bool&gt; col(2 * n, false), dg(2 * n, false), udg(2 * n, false);\nfunction&lt;void(int)&gt; dfs = [&amp;] (int i) {\nif (i == n) {\ntotal++;\nreturn;\n}\nfor (int j = 0; j &lt; n; j++) {\nif (!col[j] &amp;&amp; !dg[i + j] &amp;&amp; !udg[i - j + n]) {\npath[i][j] = 'Q';\ncol[j] = dg[i + j] = udg[i - j + n] = true;\ndfs(i + 1);\npath[i][j] = '.';\ncol[j] = dg[i + j] = udg[i - j + n] = false; }\n}\n\n};\ndfs(0);\nreturn total;\n}\n};\n</code></pre>"},{"location":"Problem/skill/skills/","title":"\u4e00\u4e9b\u5c0f\u6280\u5de7","text":""},{"location":"Problem/skill/skills/#tips","title":"tips","text":"<ol> <li>\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\u7684\u5404\u4f4d\uff0c\u76f4\u63a5<code>char str[n]</code>\uff0c\u7136\u540e\u8f93\u51fa\u5373\u53ef\uff0c\u5f53\u6210int\u5904\u7406\u53cd\u800c\u9ebb\u70e6</li> </ol>"},{"location":"Problem/skill/skills/#c","title":"C++ \u4e2d\u5404\u79cd\u53d6\u6574","text":"<pre><code>// \u5f15\u5165\u5934\u6587\u4ef6\n#include &lt;cmath&gt;\n#incldue &lt;math.h&gt;\nfloor() // \u4e0d\u5927\u4e8e\u81ea\u53d8\u91cf\u7684\u6700\u5927\u6574\u6570\nceil() // \u4e0d\u5c0f\u4e8e\u81ea\u53d8\u91cf\u7684\u6700\u5927\u6574\u6570\nround() // \u56db\u820d\u4e94\u5165\nfix() // \u54110\u53d6\u6574\n</code></pre> <p>\u5411\u4e0a\u53d6\u6574\u6280\u5de7\uff1a</p> <pre><code>// \u6ce8\u610fC++\u91cc\u9762/\u662f\u5411\u4e0b\u53d6\u6574\uff0c\u53739/4=2\n#include &lt;cmath&gt;\nceil((double) 9 / 4) // \u8f93\u51fa3\n//\u6216\u8005\u4f7f\u7528\uff08\u88ab\u9664\u6570 + \u9664\u6570 - 1\uff09/\u9664\u6570 = \u5411\u4e0a\u53d6\u6574\nint res = (9 + 4 - 1) / 4 // \u8f93\u51fa3\n</code></pre>"},{"location":"Problem/skill/skills/#_2","title":"\u7b80\u5355\u7684\u53cc\u6307\u9488\u6765\u5c06\u6570\u7ec4\u4e2d\u7684\u5947\u5076\u8fdb\u884c\u5de6\u53f3\u5206\u7c7b","text":"<pre><code>// \u53cc\u6307\u9488\u6cd5\u5c06\u6240\u6709\u6570\u8fdb\u884c\u5947\u5076\u6392\u5e8f\uff0c\u5947\u6570\u5728\u5de6\u8fb9\uff0c\u5076\u6570\u5728\u53f3\u8fb9\nint l = 0, r = 5;\nwhile (l &lt; r) {\nbool leftIsOdd = num[l] % 2 == 1;\nbool rightIsEven = num[r] % 2 == 0;\nif (leftIsOdd) {\nl++;\n} else if (rightIsEven) {\nr--;\n} else if (!leftIsOdd &amp; !rightIsEven) {\nint tmp = num[l];\nnum[l] = num[r];\nnum[r] = tmp;\n}\n}\n</code></pre>"},{"location":"Problem/skill/skills/#c_1","title":"C++\u4e2d\u7edd\u5bf9\u503c","text":"<pre><code>#include &lt;iostream&gt; \u4e2d abs() \u5bf9\u6574\u6570\u8fdb\u884c\u7edd\u5bf9\u503c\n#include &lt;cmath&gt; \u4e2dfabs() \u5bf9\u6d6e\u70b9\u578b\u8fdb\u884c\u7edd\u5bf9\u503c\n</code></pre>"},{"location":"Problem/skill/skills/#_3","title":"\u8d28\u56e0\u6570\u95ee\u9898","text":"<p>tips\uff1a\u4f7f\u7528\u53cd\u8bc1\u6cd5\u6613\u5f97\uff0c\u4e00\u4e2a\u6570a\u53ea\u4f1a\u6709\u4e00\u4e2a\u5927\u4e8e<code>a^1/2\u7684\u56e0\u6570</code>\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u8ba8\u8bba\u4ece2\u5230<code>a^1/2</code>\u5c31\u884c\uff0c\u7136\u540e\u518d\u5355\u72ec\u8ba8\u8bba1\u548c\u5927\u4e8e\u6839\u53f7a\u7684\u60c5\u51b5\uff0c\u5343\u4e07\u4e0d\u8981\u5fd8\u8bb0\u5927\u4e8e\u6839\u53f7a\u7684\u90a3\u4e2a\u6570</p> <p>\u8d28\u56e0\u6570\u4e0d\u5305\u542b1\uff0c\u56e0\u6570\u5305\u542b1</p>"},{"location":"Problem/skill/skills/#acwing-867","title":"AcWing 867. \u5206\u89e3\u8d28\u56e0\u6570","text":"<p>\u7ed9\u5b9a n \u4e2a\u6b63\u6574\u6570 ai\uff0c\u5c06\u6bcf\u4e2a\u6570\u5206\u89e3\u8d28\u56e0\u6570\uff0c\u5e76\u6309\u7167\u8d28\u56e0\u6570\u4ece\u5c0f\u5230\u5927\u7684\u987a\u5e8f\u8f93\u51fa\u6bcf\u4e2a\u8d28\u56e0\u6570\u7684\u5e95\u6570\u548c\u6307\u6570\u3002</p>"},{"location":"Problem/skill/skills/#_4","title":"\u8f93\u5165\u683c\u5f0f","text":"<p>\u7b2c\u4e00\u884c\u5305\u542b\u6574\u6570 n\u3002</p> <p>\u63a5\u4e0b\u6765 n \u884c\uff0c\u6bcf\u884c\u5305\u542b\u4e00\u4e2a\u6b63\u6574\u6570 ai\u3002</p>"},{"location":"Problem/skill/skills/#_5","title":"\u8f93\u51fa\u683c\u5f0f","text":"<p>\u5bf9\u4e8e\u6bcf\u4e2a\u6b63\u6574\u6570 ai\uff0c\u6309\u7167\u4ece\u5c0f\u5230\u5927\u7684\u987a\u5e8f\u8f93\u51fa\u5176\u5206\u89e3\u8d28\u56e0\u6570\u540e\uff0c\u6bcf\u4e2a\u8d28\u56e0\u6570\u7684\u5e95\u6570\u548c\u6307\u6570\uff0c\u6bcf\u4e2a\u5e95\u6570\u548c\u6307\u6570\u5360\u4e00\u884c\u3002</p> <p>\u6bcf\u4e2a\u6b63\u6574\u6570\u7684\u8d28\u56e0\u6570\u5168\u90e8\u8f93\u51fa\u5b8c\u6bd5\u540e\uff0c\u8f93\u51fa\u4e00\u4e2a\u7a7a\u884c\u3002</p>"},{"location":"Problem/skill/skills/#_6","title":"\u6570\u636e\u8303\u56f4","text":"<p>1\u2264n\u2264100, 2\u2264ai\u22642\u00d7109</p>"},{"location":"Problem/skill/skills/#_7","title":"\u8f93\u5165\u6837\u4f8b\uff1a","text":"<pre><code>2\n6\n8\n</code></pre>"},{"location":"Problem/skill/skills/#_8","title":"\u8f93\u51fa\u6837\u4f8b\uff1a","text":"<pre><code>2 1\n3 1\n\n2 3\n</code></pre> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main () {\nint n;\nscanf(\"%d\", &amp;n);\nwhile (n--) {\nint a;\nscanf(\"%d\", &amp;a);\nfor (int i = 2; i &lt;= a/i; i++) {\nint e = 0;\nif (a % i != 0) continue;\nelse {\nwhile (a % i == 0) {\ne += 1;\na /= i;\n}\n}\ncout &lt;&lt; i &lt;&lt; ' ' &lt;&lt; e &lt;&lt; endl;\n}\nif (a &gt; 1) cout &lt;&lt; a &lt;&lt; ' ' &lt;&lt; 1 &lt;&lt; endl;\ncout &lt;&lt; endl;\n}\n\n}\n</code></pre>"},{"location":"Project/ant/","title":"Frontend","text":""},{"location":"Project/ant/#_1","title":"\u652f\u4ed8\u5b9d\u524d\u7aef\u524d\u950b\u8425","text":""},{"location":"Project/ant/#html-","title":"HTML - \u963f\u76f8","text":""},{"location":"Project/ant/#1-csbs","title":"1. CS/BS\u67b6\u6784","text":"<p>CS client server\u5ba2\u6237\u7aef\u5f00\u53d1\uff1a\uff08\u7f51\u7edc\u6e38\u620f\u3001\u804a\u5929\u8f6f\u4ef6\u3001\u89c6\u9891\u8f6f\u4ef6\uff09</p> <ol> <li> <p>\u7814\u53d1\u6210\u672c\u9ad8\uff0c\u4e0d\u540c\u5ba2\u6237\u7aef\uff0c\u4e0d\u540c\u8bed\u8a00</p> </li> <li> <p>\u5ba2\u6237\u7aef\u5b89\u88c5\u3001\u5347\u7ea7\u6210\u672c\u9ad8</p> </li> </ol> <p>BS browser server\uff1a\u76f4\u63a5\u7684\u7f51\u9875\u5185\u5bb9\uff08\u793e\u4ea4\u7f51\u7ad9\u3001\u641c\u7d22\u5f15\u64ce\u3001\u4e2a\u4eba\u535a\u5ba2\uff09</p> <ol> <li>\u8d44\u6e90\u52a0\u8f7d\u6162\uff0c\u4f9d\u8d56\u7f51\u901f</li> <li>\u7aef\u4fa7\u6e32\u67d3\u6027\u80fd\u76f8\u5bf9\u8f83\u5f31</li> <li>\u89e3\u51b3\u7814\u53d1\u6210\u672c\u9ad8\u7684\u95ee\u9898</li> <li>\u4e0d\u9700\u8981\u66f4\u65b0\u7684\u95ee\u9898\uff0c\u56e0\u4e3a\u7f51\u9875\u7248\u90fd\u662f\u76f4\u63a5\u62ff\u53d6\u7684</li> </ol> <p>\u72ed\u4e49\u7684\u524d\u7aef\uff1a</p> <p>HTML\uff1a\u9875\u9762\u5185\u5bb9</p> <p>CSS\uff1a\u9875\u9762\u592e\u89c6</p> <p>Javascript\uff1a\u9875\u9762\u903b\u8f91</p>"},{"location":"Project/ant/#2","title":"2. \u8de8\u5e73\u53f0\u5f00\u53d1","text":"<p>\u652f\u4ed8\u5b9d\u9996\u9875\u53ef\u4ee5\u4f7f\u7528\u652f\u4ed8\u5b9d\u6253\u5f00\u767e\u5ea6</p> <p>\u652f\u4ed8\u5b9d\u5b9e\u9645\u4e0a\u662f\u5185\u5d4c\u4e86\u4e00\u4e2a\u6d4f\u89c8\u5668</p> <p>\u542c\u8bf4\u624b\u673a\u4e0a\u7684APP\u91cd\u590d\u88c5\u4e86\u5341\u51e0\u4e2achrome\u5185\u6838</p> <p>\u6709\u4e9b\u8f6f\u4ef6\u4f1a\u76f4\u63a5\u8c03\u7528safari\u7684\u5185\u6838</p> <p>app\u4f53\u79ef\u5927\u7684\u539f\u56e0\u4e4b\u4e00</p> <p>\u5c0f\u7a0b\u5e8f\u4e5f\u5c5e\u4e8eweb\u6280\u672f</p> <p>\u652f\u4ed8\u5b9d\u7684\u5927\u90e8\u5206\u529f\u80fd\u90fd\u662f\u901a\u8fc7\u6d4f\u89c8\u5668\u52a0\u8f7d\u7684\uff0c\u5c31\u4e0d\u7528\u5173\u5fc3\u7cfb\u7edf\u662fIOS\u8fd8\u662fAndroid\uff0c\u8282\u7ea6\u4e86\u5f88\u5927\u7684\u6210\u672c</p> <p>\u5236\u7ea6\uff1a</p> <ol> <li>\u80fd\u8c03\u7528\u7684\u7cfb\u7edfapi\u6bd4\u8f83\u5c11\uff0c\u6bd4\u5982\u8c03\u7528\u62cd\u7167\u3001\u8bfb\u53d6\u6587\u4ef6--JS Bridge</li> <li>\u52a0\u8f7d\u7f51\u7edc\u901f\u5ea6\u8f83\u6162--\u79bb\u7ebf\u5305\u6280\u672f</li> <li>\u4f9d\u8d56\u6d4f\u89c8\u5668\u7684UI\u6e32\u67d3\uff0c\u6027\u80fd\u53d7\u9650\u4e8e\u6d4f\u89c8\u5668--\u540c\u5c42\u6e32\u67d3</li> </ol>"},{"location":"Project/ant/#3-nodejs","title":"3. Node.js","text":"<p>\u8ba9\u524d\u7aef\u4e0d\u4ec5\u5c40\u9650\u4e8e\u5ba2\u6237\u7aef</p> <p>\u670d\u52a1\u5668--\u7f51\u7edc--\u6d4f\u89c8\u5668--\u7f51\u9875\u5185\u5bb9</p> <p>\u6d4f\u89c8\u5668\uff1a\uff08C/C++\uff09</p> <ol> <li>\u8fde\u63a5\u7f51\u7edc</li> <li>\u6267\u884cHTML/CSS\u7ed8\u5236\u9875\u9762</li> <li>\u6267\u884cJS\u5904\u7406\u903b\u8f91</li> <li>\u672c\u5730\u6587\u4ef6\u7684\u8bfb\u53d6</li> </ol> <p>\u524d\u7aef\uff08HTML/CSS/Javascript\uff09</p> <ol> <li>\u5904\u7406UI\u4ea4\u4e92\u903b\u8f91</li> <li>\u8c03\u7528\u670d\u52a1\u7aef\u63a5\u53e3</li> <li>\u9875\u9762UI\u7684\u7ed8\u5236</li> </ol> <p>\u670d\u52a1\u5668\uff1a\uff08java/c++\uff09</p> <ol> <li>\u5904\u7406\u4e1a\u52a1\u903b\u8f91</li> <li>\u6570\u636e\u7684\u5929\u5220\u6539\u67e5</li> <li>\u672c\u5730\u6587\u4ef6\u7684\u8bfb\u5199</li> <li>\u63d0\u4f9b\u7f51\u7edc\u63a5\u53e3</li> </ol> <p>\u628a\u6d4f\u89c8\u5668\u8dd1\u5728\u4e91\u7aef\u5c31\u662fNode.js\u9700\u8981\u89e3\u51b3\u7684\u95ee\u9898</p> <p>\u8ba9javascript\u4e0d\u4ec5\u5c40\u9650\u4e8e\u5ba2\u6237\u7aef\u7684\u5f00\u53d1 </p>"},{"location":"Project/ant/#_2","title":"\u603b\u7ed3","text":"<p>\u72ed\u4e49\u7684\u524d\u7aef\uff1a\u5e94\u7528\u8f6f\u4ef6\u4e2d\u7684\u5c55\u793a\u548c\u7528\u6237\u4ea4\u4e92\u5f00\u53d1\u6280\u672f</p> <p>\u5e7f\u4e49\u7684\u524d\u7aef\uff1a\u8de8\u5e73\u53f0\u7684\u5e94\u7528\u5f00\u53d1\u6280\u672f\u3002\u6709\u975e\u6b63\u5f0f\u7684\u79f0\u547c\u201c\u5927\u524d\u7aef\u201d\u3002</p>"},{"location":"Project/ant/#chrome-devtools","title":"\u5de5\u5177\u73af\u5883: chrome Devtools","text":"<p>\u53ef\u89c6\u5316\u7684\u9875\u9762\u770b\u8bbe\u8ba1\u51fa\u6765\u7684\u7f51\u9875\u957f\u4ec0\u4e48\u6837</p> <p>\u6392\u67e5\u6545\u969c</p> <p>command+option+i</p> <p>\u6216\u8005\u53f3\u952e+\u68c0\u67e5</p> <p>windows f12</p> <p>\u4e3b\u8981\u7528\u5230\u5143\u7d20\u3001\u63a7\u5236\u53f0\u548c\u7f51\u7edc</p> <p>\u5143\u7d20\uff1a</p> <p>HTML\u63cf\u8ff0\u4e86\u7f51\u9875\u7684\u7ed3\u6784</p> <p>\u4e0b\u9762\u7684CSS\u63cf\u8ff0\u4e86\u957f\u4ec0\u4e48\u6837</p> <p>CSS\u91cc\u9762\u7684\u76d2\u6a21\u578b\uff1apadding\u5185\u8fb9\u8ddd\u3001margin\u5916\u8fb9\u8ddd\u3001border\u8fb9\u6846</p> <p>\u76f4\u63a5\u5728devtools\u8c03\u8bd5\u5373\u53ef</p> <p>\u63a7\u5236\u53f0\uff1a</p> <p>90%\u8981\u7528\u5230\u63a7\u5236\u53f0</p> <p>console.log() \u6253\u5370\u65e5\u5fd7\u51fa\u6765</p> <p></p> <p>\u76f4\u63a5\u5728console\u91cc\u9762\u6253\u5c31\u884c\uff1a</p> <p>\u70b9clear console\u5c31\u80fd\u76f4\u63a5\u6e05\u7a7aconsole</p> <pre><code>function add(left, right) {return left + right;}\n\n\nadd(1, 2)\n\n\u4f1a\u8fd4\u56de3\n\nMath.random() //\u7f16\u5199\u5c0f\u811a\u672c\u53ef\u4ee5\u5feb\u901f\u5199\u6210,0-1\u7684\u968f\u673a\u6570\nMath.random() * 10 //1-10\u7684\u968f\u673a\u6570\n</code></pre> <p>js\u662f\u5f31\u7c7b\u578b\u7684\u8bed\u8a00\uff0c\u4e0d\u8981\u6c42\u58f0\u660e\u53d8\u91cf\u7c7b\u578b</p> <p>\u7f51\u7edc\uff1a\u5e2e\u6211\u4eec\u77e5\u9053\u8fd9\u4e2a\u7f51\u7ad9\u5230\u5e95\u8bf7\u6c42\u4e86\u4e9b\u4ec0\u4e48\u4e1c\u897f</p> <p>\u6bd4\u5982\u505a\u722c\u866b\u4e5f\u53ef\u4ee5\u7528\u8fd9\u4e2a\u529f\u80fd</p> <p>\u6807\u5934\uff1a\u8bf7\u6c42\u7684header</p> <p>\u8f7d\u8377\uff1a\u4e0a\u4f20\u4e86\u54ea\u4e9b\u6570\u636epayload</p> <p>\u54cd\u5e94\uff1a\u65b0\u7684html\u4ee3\u7801</p> <p>\u4e0a\u9762\u6709\u8fc7\u6ee4\u529f\u80fd\uff0c\u91cc\u9762\u7684\u56fe\u7247\u5fc5\u7136\u662f\u6700\u9ad8\u6e05\u7684\u56fe\u7247</p>"},{"location":"Project/ant/#vscode","title":"\u5de5\u5177\u73af\u5883\uff1aVScode","text":"<p>\u5c3d\u91cf\u4e0d\u8981\u8f93\u5165\u4e2d\u6587\u548c\u7a7a\u683c</p> <p>\u65b0\u5efahtml\u6587\u4ef6\u540e\uff0c\u8f93\u5165\u611f\u53f9\u53f7\u5c31\u80fd\u751f\u6210html\u7684\u4e1c\u897f</p> <p>code spell checker\u63d2\u4ef6</p> <p>live server\u53f3\u952ehtml\u6587\u4ef6\u76f4\u63a5open with live server\u5c31\u884c</p> <p>\u67e5\u770b-\u89c6\u56fe-\u7ec8\u7aef</p> <p>warp ---\u4e0b\u4e00\u4ee3\u7ec8\u7aef</p> <pre><code>node -v\nnpm -v\nnode ./hello.js // \u53ef\u4ee5\u76f4\u63a5\u7528node\u8dd1js\u4ee3\u7801\n</code></pre> <p>\u65b0\u5efaserver</p> <pre><code>const http = require('node:http');\n\n// Create a local server to receive data from\nconst server = http.createServer((req, res) =&gt; {\nres.writeHead(200, { 'Content-Type': 'application/json' });\nres.end(JSON.stringify({\ndata: 'Hello World!'\n}));\n});\n\nserver.listen(8000);\n</code></pre> <p>node\u76f4\u63a5\u8dd1\u4e86\u6d4f\u89c8\u5668\uff0c\u8ba9js\u53d8\u6210\u7f16\u5199\u670d\u52a1\u7aef\u7684\u8bed\u8a00</p> <p>\u4e2a\u4eba\u672c\u5730\uff1a127.0.0.1:</p> <p>npm\u53ef\u4ee5\u5e2e\u6211\u4eec\u4e0b\u8f7d\u522b\u4eba\u7684\u4ee3\u7801</p> <p>\u8fd9\u4e2arequest\u529f\u80fd\u5fc5\u987b\u8981npm\u4e0b\u8f7d\u4e4b\u540e\u624d\u80fd\u4f7f\u7528</p> <pre><code>npm install request\n</code></pre> <pre><code>const http = require('http');\nconst request = require('request')\n\n// Create a local server to receive data from\nconst server = http.createServer((req, res) =&gt; {\nrequest.get('https://baidu.com', {}, (err, rs, body) =&gt; {\nres.writeHead(200, { 'Content-Type': 'text/html' });\nres.end(body);\n})\n\n});\n\nserver.listen(8000);\n</code></pre>"},{"location":"Project/ant/#html","title":"HTML\u521d\u63a2","text":"<p>\u6765\u81eaTim Berners-Lee \u82f1\u56fd\u8ba1\u7b97\u673a\u79d1\u5b66\u5bb6\uff0c\u4e07\u7ef4\u7f51\u4e4b\u7236</p> <p>\u79d1\u7814\u4eba\u5458\u67e5\u9605\u548c\u5171\u4eab\u6750\u6599\u592a\u4f4e\u6548</p> <p>35\u5c81\u53d1\u660e\u4e86world wide web\u8ba9\u4eba\u4eec\u53ef\u4ee5\u81ea\u7531\u5206\u4eab\u77e5\u8bc6\u548c\u60f3\u6cd5\u7684\u6280\u672f\u89e3\u51b3\u65b9\u6848</p> <p>HTML \u8d85\u6587\u672c\u6807\u8bb0\u8bed\u8a00-\u5982\u4f55\u5b58\u50a8\u548c\u5c55\u793a</p> <p>URI \u7edf\u4e00\u8d44\u6e90\u5b9a\u4f4d\u7b26\uff0c\u7f51\u7edc\u4e2d\u8d44\u6e90\u7684\u552f\u4e00\u5730\u5740-\u5982\u4f55\u627e\u5230</p> <p>HTTP \u8d85\u6587\u672c\u4f20\u8f93\u534f\u8bae-\u5982\u4f55\u4f20\u8f93</p> <p>1990\u5e74\uff0c\u6d4f\u89c8\u5668\u8bde\u751f\uff0cTim\u5728NeXT\u7535\u8111</p> <p>1994\u5e74\uff0c\u7f51\u666f\u516c\u53f8\u6210\u7acb\uff0c\u7b2c\u4e00\u6b3e\u5546\u4e1a\u6d4f\u89c8\u5668Nestcape Navigator-\u6d4f\u89c8\u5668\u5546\u4e1a\u5316</p> <p>\u57282012\u5e74\u524d\u5e76\u6ca1\u6709\u7279\u522b\u53d1\u5c55</p> <p>Html 2012\u5e74\u6709html5</p> <p>node 2009\u5e74\u51fa\u73b0</p> <p>html5\u6709\u66f4\u591a\u8bed\u4e49\u5316\u7684\u6807\u7b7e\u3001\u66f4\u4fbf\u6377\u66f4\u5f3a\u7684\u591a\u5a92\u4f53\u80fd\u529b\uff0c\u4ee5\u53ca\u7ed8\u56fe\u3001\u5730\u7406\u4f4d\u7f6e\u3001\u6570\u636e\u7f13\u5b58\u7684\u80fd\u529b</p> <p>\u203ahtml\u662f\u7531\u5143\u7d20\u7ec4\u6210</p> <p>\u5143\u7d20\u7531\u6807\u7b7e\u52a0\u5185\u5bb9\u7ec4\u6210\u7684</p> <p>\u5143\u7d20\u53ef\u4ee5\u76f8\u4e92\u5d4c\u5957</p> <p>\u5143\u7d20\uff1a</p> <pre><code>&lt;br/&gt;  \u6362\u884c\u5143\u7d20\n&lt;h1&gt;&lt;/h1&gt; \u6807\u9898\n&lt;img src='xxxxx'/&gt; \u56fe\u7247\u5143\u7d20\n&lt;p&gt;&lt;/p&gt; \u8868\u793a\u6bb5\u843d\n&lt;a&gt;&lt;/a&gt;\u8d85\u94fe\u63a5 \n&lt;a href=\"https://taobao.com\"&gt;\u6dd8\u5b9d\u7f51&lt;/a&gt;\n\n&lt;span&gt;&lt;/span&gt; \u4e00\u822c\u7528\u4e8e\u5bf9\u4e8e\u90e8\u5206\u6bb5\u7684\u5185\u5bb9\u8fdb\u884c\u7ec4\u5408\n&lt;div&gt;&lt;/div&gt;\u8868\u793a\u533a\u5757\uff0c\u4e00\u822c\u7528\u4e8e\u805a\u5408\u5143\u7d20\n&lt;meta name=\"author\" content=\"\u4e50\u9a70\"&gt;\n\n\u6709\u5e8f\u5217\u8868\n&lt;ol&gt;\n  &lt;li&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n\u65e0\u5e8f\u5217\u8868\n&lt;ul&gt;\n  &lt;li&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\u8bf4\u660e\u5217\u8868\n&lt;dl&gt;\n  &lt;dt&gt;&lt;/dt&gt;\n  &lt;dd&gt;&lt;/dd&gt;\n&lt;/dl&gt;\n\u5bfc\u822a\u680f\n&lt;nav&gt;\n  &lt;a href=\"\"&gt;&lt;/a&gt;\n&lt;/nav&gt;\n</code></pre> <p>H1-h6\u6807\u9898</p> <p>\u5143\u7d20\u5c5e\u6027\u53ea\u80fd\u7528\u5728\u5f00\u59cb\u6807\u7b7e\u6216\u5355\u4e2a\u6807\u7b7e\uff0c\u4e0d\u80fd\u7528\u4e8e\u7ed3\u675f\u6807\u7b7e</p> <p>\u6709\u4e00\u4e9b\u662f\u5168\u5c40\u5c5e\u6027\uff0c\u53ef\u7528\u4e8e\u6240\u6709\u7684html\u5143\u7d20\uff0c\u6bd4\u5982id\u3001class\u3001style</p> <p>meta\u5143\u7d20\u6807\u7b7e\u4e0d\u9700\u8981\u95ed\u5408\u6807\u7b7e\uff0c\u4ec5\u8bbe\u7f6e\u5728head\u5143\u7d20\u4e2d</p> <p>viewport\u79fb\u52a8\u5f00\u53d1\u6709\u8da3\u7684\u5730\u65b9</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n    &lt;script src=\"hello.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;\u4e50\u9a70&lt;/h1&gt;\n    &lt;h2&gt;Charles Chi Le&lt;/h2&gt;\n    &lt;p&gt;\u4e13\u4e1a\uff1a\u751f\u7269\u533b\u5b66&lt;/p&gt;&gt;\n    &lt;a href=\"https://charleschile.com\"&gt;\u70b9\u51fb\u524d\u5f80\u4e50\u9a70\u7684\u4e2a\u4ebablog&lt;/a&gt;\n    &lt;p&gt;&lt;/p&gt;\n    &lt;img src=\"WechatIMG313.jpeg\", width=\"300\"&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>\u73b0\u5728\u7528\u8868\u683c\u5143\u7d20\u8d8a\u6765\u8d8a\u5c11\u4e86\uff0c\u56e0\u4e3a\u6027\u80fd\u4e0d\u884c</p> <p>\u8bed\u4e49\u5316\u6807\u7b7e\uff1a</p> <p></p> <p>\u8868\u5355\u5143\u7d20\uff1a\u8868\u5355\u5143\u7d20\u5728\u7f51\u9875\u4e2d\u4e3b\u8981\u8d1f\u8d23\u6570\u636e\u91c7\u96c6\u7684\u529f\u80fd</p> <p>\u6bd4\u8f83\u590d\u6742\u7684\u4e00\u4e2a\u5143\u7d20</p> <p>input\u662f\u6700\u5e38\u89c1\u7684\u8868\u5355\u5143\u7d20</p> <pre><code>&lt;form&gt;\n First name:&lt;br&gt;\n&lt;input type=\"text\" name=\"firstname\" place&gt;\n&lt;br&gt;\n Last name:&lt;br&gt;\n&lt;input type=\"text\" name=\"lastname\"&gt;\n&lt;/form&gt; \n</code></pre> <p></p> <p></p> <p></p> <p></p>"},{"location":"Project/ant/#_3","title":"\u5f00\u53d1\u56fe\u4e66\u7ba1\u7406\u7cfb\u7edf","text":"<ol> <li>\u9996\u9875\u663e\u793a</li> <li>\u4e0a\u4f20\u56fe\u7247</li> </ol> <p>\u5206\u800c\u6cbb\u4e4b\u3001\u6a21\u5757\u62c6\u5206</p> <p>2\u4e2ahtml</p> <p>\u9996\u9875\u4e09\u4e2a\u5927\u7248\u5757</p> <p>\u4ea7\u54c1\u7ecf\u7406\u6587\u6863\u6807\u6ce8\u597d</p> <p>\u516c\u5171\u90e8\u5206\u5c31\u662f\u4ee3\u7801\u53ef\u4ee5\u590d\u7528\u7684\u90e8\u5206</p> <p>\u753b\u5eca\u505a\u597d\u5de6\u53f3\u6eda\u52a8</p> <p>\u5217\u8868</p> <p>\u4eca\u5929\u5c06html\u7684\u90e8\u5206\u5199\u51fa\u6765</p> <ul> <li>\u6253\u5f00\u6587\u6863\u540e\u6267\u884cnpm install</li> <li>npm run 0-init</li> </ul> <p>Target = blank\u662f\u91cd\u65b0\u5f00\u4e00\u4e2a\u9875\u9762\uff0c\u7136\u540e\u8df3\u8f6c</p>"},{"location":"Project/ant/#css","title":"CSS","text":"<p>cascade tyle sheets</p> <p>p\uff1a\u9009\u62e9\u5668</p> <p>color\uff1a\u5c5e\u6027</p> <p>red\uff1a</p> <pre><code>p {\ncolor: red;\nwidth: 500px;\nborder: 1px splid black;\n}\n</code></pre> <p>CSS\u7684\u5386\u53f2</p> <p>\u6bd4html\u665a\u597d\u51e0\u5e74</p> <p>1994\u5e74\u63d0\u51fa\u6700\u521d\u7684\u5efa\u8bae</p> <p>2001\u5e74\u5fae\u8f6f\u53d1\u5e03IE6\u6210\u4e3a\u524d\u7aef\u5de5\u7a0b\u5e08\u7684\u5669\u68a6</p> <p>\u8981\u517c\u5bb9IE6</p> <p>2003\u5e74\u63a8\u51faCSS\u7985\u610f\u82b1\u56ed</p> <p>11\u5e74CSS3</p> <p>background: green;</p> <p>Opacity: 0.5; \u900f\u660e\u5ea650%</p> <p>CSS</p> <p>\u5bf9div\u4e0d\u4f1a\u751f\u6548</p> <p>hover\u4e0b\u5212\u7ebf\u53bb\u6389\u7684\u5c5e\u6027</p> <p>visited\u8bbf\u95ee\u8fc7\u7684</p> <p>padding: 10px 15px 15px 5px;</p> <p>\uff08\u4e0a\u53f3\u4e0b\u5de6\uff09</p> <p>px\u50cf\u7d20 css\u4e2d\u6700\u57fa\u672c\u7684\u5355\u4f4d</p> <p>%\u57fa\u4e8e\u7236\u4f53\u5927\u5c0f\u767e\u5206\u6bd4\u7f29\u653e</p> <pre><code>img {\nwidth: 10%;\nheight: 20vw\n}\n</code></pre> <p>\u6d4f\u89c8\u5668\u7684\u5c3a\u5bf8\u5927\u5c0f\uff1a\u89c6\u53e3</p> <p>\u539f\u59cb\u5c3a\u5bf8\uff1a\u56fe\u7247\u9ed8\u8ba4\u662f\u6709\u5c3a\u5bf8\u7684</p> <p>\u5982\u4f55\u6539\u53d8img\u5143\u7d20\u5927\u5c0f\u89c6\u53e3\u5bbd\u9ad8\u7684\u4e00\u534a\uff0c\u968f\u89c6\u53e3\u53d8\u5316\u800c\u53d8\u5316</p> <pre><code>img {\nwidth: 50vw;\nheight: 50vh;\n}\n</code></pre> <pre><code>p {\nbackground: rgba(222, 222, 222, 0.5);\n}\n</code></pre> <p>\u8fd8\u6709RGBA\u989c\u8272\uff0c\u6700\u540e\u4e00\u4f4d\u8868\u793a\u900f\u660e\u5ea6</p> <pre><code>p {\nfont-family:\n}\n</code></pre> <p>\u6587\u672c\u7684\u5e03\u5c40\uff1atext-align</p> <p>Vertical-align\u5782\u76f4\u5bf9\u9f50</p> <p>css\u6587\u672c\uff1aline-height\u884c\u95f4\u8ddd</p> <p>\u5f00\u53d1\u91cc\u9762\u884c\u9ad8\u9ed8\u8ba4</p> <p>line-height: 1.5;</p>"},{"location":"Project/ant/#1677ff","title":"1677ff\u8682\u8681\u7684\u54c1\u724c\u8272","text":"<p>\u5feb\u6377\u8f93\u5165\u7c7b\u578b\uff1a Img.\u540d\u5b57 + tab</p> <p>\u6216\u8005p.title + tab</p> <p>dotted\\dashed\\solid</p> <p>\u5706\u89d2\uff1a</p> <p>Border-radius</p> <pre><code>.box {\nborder-radius: 30px;\n}\n</code></pre> <p>\u8bbe\u7f6e\u621050%\u5c31\u662f\u4e00\u4e2a\u5706\u5f62</p> <p>Background-size: contain\u4fdd\u6301\u6a2a\u7eb5\u6bd4</p> <p>Background-size: cover\u5b8c\u5168\u8986\u76d6\u80cc\u666f</p> <pre><code>div {\nbackground-repeat:no-repeat; //\u53d6\u6d88\u91cd\u590d\u6e32\u67d3\n\n}\n</code></pre> <p>\u6ce8\u91ca\u7684\u5feb\u6377\u952ecommand+/</p> <pre><code>box-shadow\n</code></pre> <p>\u901a\u914d\u7b26*</p> <pre><code>* {\nborder-size:\n}\n</code></pre> <p>Content-box</p> <p>\u548cborder-box</p> <p>260\\200</p> <pre><code>.content-box {\nwidth: 200px;\nheight: 200px;\nmargin: 20px;\npadding: 20px;\nborder: 10px solid #1677ff;\nbox-sizing: content-box;\nbackground: gold;\n}\n.border-box {\nwidth: 200px;\nheight: 200px;\nmargin: 20px;\npadding: 20px;\nborder: 10px solid #1677ff;\nbox-sizing: border-box;\nbackground: gold;\n}\n</code></pre> <p>overflow\u63a7\u5236\u6ea2\u51fa\u884c\u4e3a</p> <p>overflow-x \u548c-y \u7528\u6765\u63a7\u5236\u6cbf\u7740x\u8f74\u5212\u52a8</p> <p>White-space: \u6362\u884c</p> <p>\u76f8\u5bf9\u5b9a\u4f4d\uff1arelative</p> <pre><code>.box {\nposition: relative;\ntop: 20px;\n}\n</code></pre> <p>\u7edd\u5bf9\u5b9a\u4f4d\uff1aabsolute</p> <p>\u4ece\u6b63\u5e38\u5e03\u5c40\u6d41\u4e2d\u79fb\u51fa\uff0c\u53d8\u6210\u5355\u72ec\u7684\u4e00\u4e2a\u56fe\u5c42</p> <p>\u56fa\u5b9a\u5e03\u5c40\uff1afixed</p> <p>\u50cf\u78c1\u8d34\u4e00\u6837\uff0c\u5728\u5c4f\u5e55\u4e0a\u7684\u4f4d\u7f6e\u4e0d\u4f1a\u53d8\u52a8</p> <p>Z-index\uff1a\u5c55\u793a\u5143\u7d20\u7684\u987a\u5e8f</p> <p>\u8d8a\u5c0f\u56fe\u5c42\u8d8a\u5728\u4e0b\u9762</p> <p>\u6587\u5b57\u5782\u76f4+\u6c34\u5e73\u5c45\u4e2d</p> <p>Line-height</p> <p>flex\u5e03\u5c40\uff1ajustify-content</p> <p>\u5b9a\u4e49\u4e86\u4e3b\u8f74\u4e0a\u7684\u5bf9\u9f50\u65b9\u5f0f</p> <p>\u5584\u4e8e\u7528\u641c\u7d22\u5f15\u64ce\uff1a</p> <p>flex\u7684\u901f\u67e5https://www.webhek.com/apps/flex-cheatsheet</p> <p>transform</p> <p>\u5411\u5de6\u5782\u76f4\u5411\u4e0a\u79fb\u52a8\u5c31\u662f\u53d6\u8d1f\u53f7\u5373\u53ef</p> <p>Scale(10)\u653e\u592710\u500d</p> <p>\u8fc7\u6e21\uff1a\u4e00\u4e2a\u5143\u7d20\u5728\u4e0d\u540c\u72b6\u6001\u4e4b\u95f4\u5207\u6362\u7684\u65f6\u5019\u5b9a\u4e49\u4e0d\u540c\u7684\u8fc7\u6e21\u6548\u679c</p> <pre><code>ant:hover {\n\n}\n</code></pre> <p>\u52a8\u753banimation\u76f8\u8f83\u4e8e\u811a\u672c\u5b9e\u73b0\u52a8\u753b\u6280\u672f\uff0c\u6bd4\u8f83\u7b80\u5355\u3001\u6d41\u7545\u3001\u9ad8\u6027\u80fd</p> <pre><code>&lt;!-- &lt;style&gt;\n    &lt;!-- \u8986\u76d6\u6d4f\u89c8\u5668\u9ed8\u8ba4\u6837\u5f0f --&gt;\n\n\n    .card-list {\n        display: flex;\n        flex-direction: row;\n        justify-content: center;\n        align-items: center;\n    }\n    .box-submit-img {\n        width: 200px;\n        height: 200px;\n        object-fit: contain;\n    }\n    .card {\n        display: inline-block;\n        width: 200px;\n        height:300px;\n        margin: 50px 8px;\n        padding: 8px;\n        border-radius: 8px;\n        box-shadow: 0 30px 30px 0 rgba(140, 153, 191, 0.20);\n    }\n    .box-img {\n        width: 200px;\n        height: 100px;\n        object-fit: cover;\n    }\n    .box-title {\n        margin: 12px auto;\n        font-size: 24px;\n        font-weight: bold;\n    }\n    .box-author {\n        margin: 6px auto;\n        font-size: 16px;\n    }\n    .box-desc {\n        margin: 6px auto;\n        font-size: 16px;\n    }\n&lt;/style&gt; --&gt;\n</code></pre>"},{"location":"Project/ant/#javascript","title":"JavaScript","text":""},{"location":"Project/ant/#javascript_1","title":"\u4ec0\u4e48\u662fjavascript","text":"<p>\u6700\u65e9\u7684\u754c\u9762\u4e0d\u9700\u8981javascript\uff0c\u5c31\u662f\u540e\u7aef\u76f4\u63a5\u62c9html\u8868\u5355\uff0c\u62fc\u5728\u4e00\u8d77\u5c31\u884c</p> <p>\u73b0\u5728javascript\u53ef\u4ee5\u5b9e\u73b03D\u6e32\u67d3</p> <p>java\u548cjavascript\u7684\u5173\u7cfb</p> <p>\u96f7\u950b\u548c\u96f7\u5cf0\u5854\u7684\u5173\u7cfb</p> <p>\u6f14\u5316\u8def\u5f84\u633a\u7279\u522b\u7684</p> <p>js\u53ef\u4ee5\u901a\u8fc7html\u6807\u7b7e\u76f4\u63a5\u5f15\u5165</p>"},{"location":"Project/ant/#javascript_2","title":"javascript\u8bed\u8a00\u57fa\u7840","text":"<p>\u56fe\u7075\u5b8c\u5907\uff1a\u53ef\u4ee5\u8ba1\u7b97\u6240\u6709\u53ef\u8ba1\u7b97\u7684\u95ee\u9898</p> <p>javascript\u662f\u56fe\u7075\u5b8c\u5907\u7684</p> <p>sql\u3001html\u5c31\u4e0d\u662f\u56fe\u7075\u5b8c\u5907\u7684\u989d</p> <p>C++\u548cjava\u80af\u5b9a\u662f\u56fe\u7075\u5b8c\u5907\u7684</p> <p>js\u4ee3\u7801\u91cc\u9762\uff0c\u53d8\u91cf\u7684\u5b9a\u4e49\u5c3d\u91cf\u4e0d\u8981\u4f7f\u7528var\u4e86\uff1a</p> <pre><code>test = '1';\nif (test) {\nvar test = 2;\n}\nconsole.log(test); // \u8f93\u51fa\u7684\u662f2\n</code></pre> <p>\u5efa\u8bae\u4f7f\u7528const\u548clet</p> <p>js\u662f\u5f31\u7c7b\u578b\u7684\uff0c\u90fd\u53ef\u4ee5\u76f4\u63a5\u7528let\u5b9a\u4e49</p> <p>string \u53cc\u5f15\u53f7\u6216\u8005\u5355\u5f15\u53f7</p> <p>number</p> <p>boolean</p> <p>null</p> <p>undefined</p> <p>\u7b49\u4e8e == </p> <p>\u5168\u7b49\u4e8e ===</p> <pre><code>3 == 3; // true\n3 == '3'; // true\n3 === 3; // true\n3 === '3'; // false\n</code></pre> <p>\u5c3d\u91cf\u4f7f\u7528\u5168\u7b49\u4e8e</p> <pre><code>&lt;!-- &lt;li class=\"gallary-item\"&gt;\n                    &lt;img src=\"./data/pic/pic-1.png\" /&gt;\n                    &lt;p class=\"name\"&gt;\u843d\u65e5&lt;/p&gt;\n                    &lt;p class=\"photographer\"&gt;by \u8682\u8681&lt;/p&gt;\n                    &lt;p class=\"desc\"&gt;\u957f\u6cb3\u843d\u65e5\u5706&lt;/p&gt;\n                &lt;/li&gt;\n                &lt;li class=\"gallary-item\"&gt;\n                    &lt;img src=\"./data/pic/pic-2.png\" /&gt;\n                    &lt;p class=\"name\"&gt;\u7901\u77f3&lt;/p&gt;\n                    &lt;p class=\"photographer\"&gt;by \u8682\u8681&lt;/p&gt;\n                    &lt;p class=\"desc\"&gt;\u4e1c\u4e34\u78a3\u77f3\uff0c\u4ee5\u89c2\u6ca7\u6d77&lt;/p&gt;\n                &lt;/li&gt;\n                &lt;li class=\"gallary-item\"&gt;\n                    &lt;img src=\"./data/pic/pic-3.png\" /&gt;\n                    &lt;p class=\"name\"&gt;\u6ce2\u6d6a&lt;/p&gt;\n                    &lt;p class=\"photographer\"&gt;by \u8682\u8681&lt;/p&gt;\n                    &lt;p class=\"desc\"&gt;\u6728\u843d\u96c1\u55f7\u55f7\uff0c\u6d1e\u5ead\u6ce2\u6d6a\u9ad8&lt;/p&gt;\n                &lt;/li&gt; --&gt;\n</code></pre> <p>\u62d3\u5c55\uff1atypescript\uff0c\u517c\u5bb9js\u8bed\u6cd5</p>"},{"location":"Project/ant/#windowdom","title":"window\u548cdom","text":"<p>DOM\uff0c\u5373\u4e3a Document Object Model\uff0c\u662f\u7528\u4e8e\u63a7\u5236\u6587\u6863\u7684\u6807\u51c6\u5bf9\u8c61\u3002DOM \u548c\u8be5\u9875\u9762\u8f7d\u5165\u7684 html \u6587\u6863\u662f\u5bf9\u5e94\u7684\u3002DOM \u662f\u4e07\u7ef4\u7f51\u8054\u76df\uff08W3C\uff09\u7684\u6807\u51c6\uff0c\u5f53\u524d\u7531 WHATWG \u548c W3C \u5171\u540c\u7ef4\u62a4\u3002</p>"},{"location":"Project/ant/#json","title":"JSON\u548c\u7f51\u7edc\u8bf7\u6c42","text":"<p>JavaScript Object Notation (JSON)</p> <p>\u6570\u636e\u89c4\u8303\u7684\u683c\u5f0f</p> <pre><code>{\n\"name\": \"\u6ce2\u6d6a\",\n\"photographer\": \"\u8682\u8681\",\n\"desc\": \"\u6728\u843d\u96c1\u55f7\u55f7\uff0c\u6d1e\u5ead\u6ce2\u6d6a\u9ad8\",\n\"picPath\": \"data/pic/pic-3.png\"\n}\n</code></pre> <pre><code>{   \"numberType\": 1,\n\"stringType\": \"string\",\n\"booleanType\": false,\n\"arrayType\": [\"string\",false,1],\n\"objectType\": {},\n\"nullType\": null\n}\n</code></pre> <p>\u8bf7\u6c42\u662f\u9700\u8981\u65f6\u95f4\u7684</p> <p>\u6d4f\u89c8\u5668\u662f\u5355\u7ebf\u7a0b\u7684</p> <p>\u6d4f\u89c8\u5668\u7684\u8bbe\u8ba1\u4e2d\u6709\u5f02\u6b65\u8fd9\u4e2a\u6982\u5ff5</p> <p>\u7ebf\u7a0b\u4e0d\u4f1a\u963b\u585e</p>"},{"location":"Project/ant/#nodejs","title":"Node.js","text":"<p>\u96f6\u542f</p>"},{"location":"Project/ant/#nodejs_1","title":"node.js\u6982\u8ff0","text":"<p>js\u662f\u8fd0\u884c\u5728\u6d4f\u89c8\u5668\u5f53\u4e2d\u7684</p> <p>Node.js\u662fjavascript\u7684\u4e00\u79cd\u8fd0\u884c\u73af\u5883</p> <p>\u662f\u5c06v8\u5f15\u64ce\u52a0\u5de5\u6210\u53ef\u4ee5\u5728\u4efb\u4f55\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u8fd0\u52a8\u7684javascript\u7684\u5e73\u53f0</p> <p>\u684c\u9762\u5e94\u7528\uff1a\u8bed\u96c0\u3001\u9489\u9489\u3001vscode\u90fd\u662f\u57fa\u4e8enode\u5f00\u53d1\u7684</p> <p>javascript\u6709\u722c\u866b\u6a21\u5757</p>"},{"location":"Project/ant/#nodejs_2","title":"node.js\u57fa\u7840","text":"<p>\u7b2c\u4e00\u6b65\uff1a</p> <pre><code>npm -init -y\nnode hello.js\n</code></pre> <p>1\u3001\u4f7f\u2f64 require(\u2018os\u2019) \u5f15\u2f64\u2f00\u4e2a Node.js \u5185\u7f6e\u6a21\u5757 os 2\u3001\u8c03\u2f64 os \u6a21\u5757\u7684 platform() \u2f45\u6cd5\u83b7\u53d6\u64cd\u4f5c\u7cfb\u7edf\u5e73\u53f0\u7c7b\u578b</p> <pre><code>const os = require('os'); // os\u662f\u5185\u7f6e\u6a21\u5757\nconsole.log(os.platform()); // darwin mac\u5e73\u53f0\n</code></pre> <p>\u540c\u6b65\u548c\u5f02\u6b65</p> <p>\u540c\u6b65\uff1a\u6309\u7167\u4ee3\u7801\u987a\u5e8f\u6267\u884c</p> <p>\u5f02\u6b65\uff1a\u4e0d\u6309\u7167\u4ee3\u7801\u987a\u5e8f\u6267\u884c\uff0c\u5f02\u6b65\u7684\u6267\u884c\u6548\u7387\u66f4\u9ad8</p> <p>js\u662f\u5355\u7ebf\u7a0b\u7684\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5f02\u6b65\u7f16\u7a0b\u6765\u540c\u65f6\u6267\u884c\u591a\u4e2a\u4efb\u52a1</p> <p>\u6587\u4ef6IO\u3001\u7f51\u7edc\u8bf7\u6c42\u3001dom\u6e32\u67d3\u3001canvas\u7ed8\u5236\u3001\u8fdb\u7a0b\u95f4\u901a\u4fe1</p> <p>\u5b9e\u73b0\u65b9\u5f0f\uff1acallback\u3001promise\u3001generator\u3001async/await </p> <p>\u53d1\u5e03/\u8ba2\u9605\u6a21\u578b\u7b80\u4ecb</p> <p>\u4e8b\u4ef6\u76d1\u542c\u2192\u4e8b\u4ef6\u5bf9\u8c61\u2190\u4e8b\u4ef6\u53d1\u5e03</p> <p>\u53d1\u9001\u8005\u5c06\u6d88\u606f\u53d1\u9001\u5230\u6307\u5b9a\u5730\u65b9</p> <p>\u6d88\u606f\u5c06\u88ab\u901a\u77e5\u7ed9\u6307\u5b9a\u7684\u63a5\u53d7\u8005</p> <p>\u4e00\u4e2a\u5bf9\u8c61\u80fd\u76d1\u542c\u7684\u4e8b\u4ef6\u53ef\u4ee5\u662f\u591a\u4e2a\u7684\uff1a\u5355\u51fb\u3001\u53cc\u51fb\u7b49\u7b49</p> <p>\u53d1\u5e03\u53d1\u5e03\u8ba2\u9605\u7684\u7528\u6cd5</p> <pre><code>const EventEmiter = require('events');\nconst eventEmiter = new EventEmiter; // \u5b9e\u4f8b\u5316\n\neventEmiter.on('notice', (msg)=&gt;{\nconsole.log('I have received a message: ', msg);\n})\n//setTime\u662f\u4e00\u4e2a\u5f02\u6b65\u961f\u5217\nsetTimeout(() =&gt; {\neventEmiter.emit('notice', 'hello') // \u8fd9\u4e00\u884c\u540e\u6267\u884c\n}, 3000);  // 3\u79d2\u949f\uff0c\u5373\u4f7f\u6539\u62100\uff0c\u4e5f\u4f1a\u662f\u540e\u6267\u884c\n//\u5355\u7ebf\u7a0b\uff0c\u4efb\u52a1\u961f\u5217{task1, task2}    \u5f02\u6b65\u961f\u5217{task1, task2}\n// \u53ea\u6709\u6240\u6709\u7684\u540c\u6b65\u4efb\u52a1\u961f\u5217\u6267\u884c\u5b8c\u6bd5\u4e4b\u540e\uff0c\u624d\u4f1a\u6267\u884c\u5f02\u6b65\u961f\u5217\n\nconsole.log('hello');  // \u8fd9\u4e00\u884c\u5148\u6267\u884c\uff0c\u5f02\u6b65\n</code></pre> <p>\u5f02\u6b65\u6587\u4ef6\u8bfb\u5199</p> <pre><code>const fs = require('fs'); // file system\n\n// \u5728node\u91cc\u9762\u7ecf\u5e38\u662ferr first\u7684\uff0c\u5c31\u662f\u7b2c\u4e00\u4e2a\u53c2\u6570\u662ferr\uff0c\u7136\u540e\u6709\u9519\u8bef\u7684\u8bdd\u4f1a\u7b2c\u4e00\u65f6\u95f4\u5c31throw\u6389\nfs.readFile('a.txt', 'utf-8', (err, data) =&gt; {\nif (err) throw err;\nconsole.log(data); // \u7136\u540e\u518d\u6267\u884c\u8fd9\u884c\u4ee3\u7801  \n});\n\nconsole.log('reading file ...'); // \u5148\u6267\u884c\u8fd9\u884c\u4ee3\u7801\n</code></pre> <p>\u540c\u6b65\u6587\u4ef6\u8bfb\u5199</p> <p>\u5e26sync\u5c31\u4f1a\u6267\u884c\u540c\u6b65\u6587\u4ef6\u8bfb\u5199\uff0c\u5373\u53ea\u6709\u6267\u884c\u5b8c\u4e0a\u4e00\u884c\u4ee3\u7801\u624d\u4f1a\u7ee7\u7eed\u6267\u884c\u4e0b\u9762\u4e00\u884c\u4ee3\u7801</p> <pre><code>const fs = require('fs');\n// \u540c\u6b65\u5199\u5165\nfs.writeFileSync('a.txt', 'Hello Node.js!', 'utf-8');\n// \u540c\u6b65\u8bfb\u53d6\nconst data = fs.readFileSync('a.txt','utf-8');\n\nconsole.log(data); // \u5148\u6267\u884c\u8bfb\u53d6\u6587\u4ef6\u7684\u64cd\u4f5c\n\nconsole.log('reading file...'); // \u6700\u540e\u6267\u884c\u6253\u5370\u65e5\u5fd7\n</code></pre> <p>\u901a\u5e38\u6211\u4eec\u4f1a\u4f7f\u7528\u5f02\u6b65\u6765\u7f16\u7a0b\uff0c\u9632\u6b62\u540e\u7eed\u5835\u585e</p> <p>\u8bfb\u53d6\u6587\u4ef6\u5730\u5740</p> <pre><code>const fs = require('fs');\nconst path = require('path');\n\nconsole.log(__dirname); ///Users/lechi/Desktop/Frontend/demo, \u6253\u5370\u6587\u4ef6\u6240\u5728\u7684\u8def\u5f84\n\nlet filePath = path.join(__dirname, 'data', 'obj.json');\nconsole.log(filePath); </code></pre> <p>\u8bfb\u53d6json\u5e76\u5199\u5165json\u6587\u4ef6\u4e2d</p> <pre><code>const fs = require('fs');\nconst path = require('path');\n\nconst obj = [\n{\n\"name\": \"\u6ce2\u6d6a\",\n\"photographer\": \"\u8682\u8681\",\n\"desc\": \"\u6728\u843d\u96c1\u55f7\u55f7\uff0c\u6d1e\u5ead\u6ce2\u6d6a\u9ad8\",\n\"picPath\": \"data/pic/pic-3.png\"\n},\n{\n\"name\": \"\u843d\u65e5\",\n\"photographer\": \"\u8682\u8681\",\n\"desc\": \"\u957f\u6cb3\u843d\u65e5\u5706\",\n\"picPath\": \"data/pic/pic-1.png\"\n},\n{\n\"name\": \"\u7901\u77f3\",\n\"photographer\": \"\u8682\u8681\",\n\"desc\": \"\u4e1c\u4e34\u78a3\u77f3\uff0c\u4ee5\u89c2\u6ca7\u6d77\",\n\"picPath\": \"data/pic/pic-2.png\"\n}\n]\n\n\nconst filePath = path.join(__dirname, 'data', 'obj.json')\n\nfs.writeFile(filePath, JSON.stringify(obj,null,2), (err, data) =&gt;{\nif (err) {\nconsole.log('write fail');\n}\nelse {\nconsole.log('write success');\n}\n});\n\nconsole.log(filePath);\n</code></pre> <p>\u81ea\u5df1\u5199\u6a21\u5757</p> <p>\u5728add\u7684js\u6587\u4ef6\u91cc\uff1a</p> <pre><code>exports.add = (x,y) =&gt; {\nreturn x + y;\n};\n</code></pre> <p>\u7136\u540e\u8c03\u7528\u81ea\u5df1\u7684\u6a21\u5757</p> <pre><code>const compute = require('./add')\n// \u6216\u8005const{add} = require('/add')\nconst sum = compute.add(1, 2)\nconsole.log(sum);\n</code></pre> <p>npm</p> <p>\u662f\u5305\u7ba1\u7406\u7cfb\u7edf</p> <p>npm\u9ed8\u8ba4\u968f\u7740node\u4e00\u8d77\u5b89\u88c5</p> <p>npm\u63d0\u4f9b\u547d\u4ee4\u884c\u5de5\u5177\u7528\u4e8e\u7ba1\u7406\u6a21\u5757</p> <p>Json.stringfy</p> <p>json.parse</p>"},{"location":"Project/ant/#nodejs-web","title":"node.js web\u670d\u52a1","text":"<p>\u5b89\u88c5express\uff0c\u5e76\u4e14\u66f4\u65b0package.json\u4e2d\u7684\u4f9d\u8d56\uff1a</p> <pre><code>npm i express -S\n</code></pre> <p>http\u534f\u8bae\u7b80\u4ecb\uff1a\uff08request\u3001response\uff09</p> <p>http\u662f\u6587\u672c\u534f\u8bae\uff0c\u4e00\u6b21http\u8bf7\u6c42\u5206\u4e3a\u8bf7\u6c42\u548c\u76f8\u5e942\u4e2a\u9636\u6bb5</p> <p>\u5efa\u7acb\u4e00\u4e2a\u7b80\u5355\u7684express\u670d\u52a1</p> <pre><code>const express = require('express')\nconst app = express()\n\napp.get('/', function (req, res) {\nres.send('Hello World')\n})\n// 80\u7aef\u53e3\u662f\u9ed8\u8ba4\u7aef\u53e3\napp.listen(80, ()=&gt;{\nconsole.log('app is serving on port 80...');\n})\n</code></pre> <p>\u5982\u4f55\u5728\u7f16\u8f91\u540e\u81ea\u52a8\u91cd\u542f\u670d\u52a1\uff1f</p> <p>\u8bbf\u95ee\u9759\u6001\u8d44\u6e90</p> <p>static\u6307\u5b9a\u76ee\u5f55\u5373\u53ef</p> <p>\u65e2\u8bbf\u95ee\u9759\u6001\u8d44\u6e90\u53c8\u65b0\u5efa\u63a5\u53e3</p> <pre><code>const express = require('express')\nconst app = express()\n\n\napp.use(express.static('web'))\n\napp.get('/hello', function (req,res) {\nres.send('Hello Node')\n})\n\n\napp.listen(3000, ()=&gt;{\nconsole.log('app is serving on port 3000...');\n})\n</code></pre>"},{"location":"Project/ant/#_4","title":"\u56fe\u7247\u7ba1\u7406\u7cfb\u7edf","text":"<pre><code>    const res = await fetch('/pic/list');\nconst pics = await res.json();\npics.forEach(appendPic);\n</code></pre> <p>Index.js:</p> <pre><code>function $(selector) {\nreturn document.querySelector(selector);\n}\n\nfunction appendPic(item) {\n// const { name, desc } = item || {};\n\n// \u8865\u5145 html \u7684\u751f\u6210\u903b\u8f91\nconst html = `&lt;li class=\"gallary-item\"&gt;\n    &lt;img src=\"${item.picPath}\" /&gt;\n    &lt;p class=\"name\"&gt;${item.name}&lt;/p&gt;\n    &lt;p class=\"photographer\"&gt;by ${item.photographer}&lt;/p&gt;\n    &lt;p class=\"desc\"&gt;${item.desc}&lt;/p&gt;\n  &lt;/li&gt;`;\n\n$('#pics').innerHTML += html;\n}\n\nasync function fetchPics() {\n// \u540e\u7eed pics \u7684\u5185\u5bb9\u901a\u8fc7\u8bf7\u6c42\u540e\u7aef\u83b7\u53d6\n// const pics = [\n//   {\n//     name: '\u6ce2\u6d6a',\n//     photographer: '\u8682\u8681',\n//     desc: '\u6728\u843d\u96c1\u55f7\u55f7\uff0c\u6d1e\u5ead\u6ce2\u6d6a\u9ad8',\n//     picPath: 'data/pic/pic-3.png',\n//   },\n//   {\n//     name: '\u843d\u65e5',\n//     photographer: '\u8682\u8681',\n//     desc: '\u957f\u6cb3\u843d\u65e5\u5706',\n//     picPath: 'data/pic/pic-1.png',\n//   },\n//   {\n//     name: '\u7901\u77f3',\n//     photographer: '\u8682\u8681',\n//     desc: '\u4e1c\u4e34\u78a3\u77f3\uff0c\u4ee5\u89c2\u6ca7\u6d77',\n//     picPath: 'data/pic/pic-2.png',\n//   },\n// ];\n\n// let pics = [];\n\nconst res = await fetch('/web/data/data.json');\nconst pics = await res.json();\npics.forEach(appendPic);\n\n\n\n\n// fetch('/web/data/data.json').then(function(res) {\n//     return res.json();\n// }).then((pics) =&gt;{\n//     pics.forEach(appendPic);\n// });\n\n// \u4fee\u6539\u4e3a\u5faa\u73af\uff0c\u53ef\u4ee5\u4f7f\u7528 for\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 forEach\n// pics.forEach(appendPic);\n// appendPic(pics[0]);\n// appendPic(pics[1]);\n// appendPic(pics[2]);\n}\n\nfetchPics();\n</code></pre>"},{"location":"Project/bytedance/%E7%AC%AC%E4%BA%94%E5%B1%8A%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E9%9D%92%E8%AE%AD%E8%90%A5%E5%90%8E%E7%AB%AF%E4%B8%93%E5%9C%BA/","title":"\u7b2c\u4e94\u5c4a\u5b57\u8282\u8df3\u52a8\u9752\u8bad\u8425\u540e\u7aef\u4e13\u573a\u7b14\u8bb0","text":""},{"location":"Project/bytedance/%E7%AC%AC%E4%BA%94%E5%B1%8A%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E9%9D%92%E8%AE%AD%E8%90%A5%E5%90%8E%E7%AB%AF%E4%B8%93%E5%9C%BA/#115-go-","title":"1/15 Go\u8bed\u8a00\u57fa\u7840-\u57fa\u7840\u8bed\u6cd5","text":""},{"location":"Project/bytedance/%E7%AC%AC%E4%BA%94%E5%B1%8A%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E9%9D%92%E8%AE%AD%E8%90%A5%E5%90%8E%E7%AB%AF%E4%B8%93%E5%9C%BA/#go","title":"\u5b89\u88c5Go\u8bed\u8a00","text":"<p>\u522b\u7528brew\u5b9e\u5728\u662f\u592a\u6162\u4e86\uff0c\u76f4\u63a5\u53bb\u5b98\u7f51\u4e0b\u8f7d\u5373\u53ef</p>"},{"location":"Project/bytedance/%E7%AC%AC%E4%BA%94%E5%B1%8A%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E9%9D%92%E8%AE%AD%E8%90%A5%E5%90%8E%E7%AB%AF%E4%B8%93%E5%9C%BA/#vscode-go","title":"\u5b89\u88c5vscode go\u7684\u63d2\u4ef6","text":"<p>\u76f4\u63a5\u641c\u7d22go\u5373\u53ef</p>"},{"location":"Project/bytedance/%E7%AC%AC%E4%BA%94%E5%B1%8A%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E9%9D%92%E8%AE%AD%E8%90%A5%E5%90%8E%E7%AB%AF%E4%B8%93%E5%9C%BA/#go_1","title":"go\u8bed\u8a00\u5723\u7ecf","text":"<p>https://books.studygolang.com/gopl-zh/ch0/ch0-01.html</p>"},{"location":"Project/bytedance/%E7%AC%AC%E4%BA%94%E5%B1%8A%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E9%9D%92%E8%AE%AD%E8%90%A5%E5%90%8E%E7%AB%AF%E4%B8%93%E5%9C%BA/#go_2","title":"go\u8bed\u8a00\u5b66\u4e60\u8def\u5f84","text":"<p>https://bytedance.feishu.cn/docs/doccn3SFTuFIAVr4CDZGx48KKdd</p>"},{"location":"Tool/","title":"Tool","text":"<p>Abstract</p> <p>\u8fd9\u91cc\u662f\u8ba1\u7b97\u673a\u76f8\u5173\u7684\u4e00\u4e9b\u5de5\u5177\u4f7f\u7528\u7684\u8bf4\u660e</p> <p>\u6b63\u5728\u4e0d\u65ad\u603b\u7ed3\u66f4\u65b0\u7b14\u8bb0\u4e2d...</p>"},{"location":"Tool/#table-of-contents","title":"Table of Contents","text":"<ul> <li> <p>MIT The Missing Semester of Your CS education</p> <ul> <li>MIT notes</li> </ul> </li> <li> <p>Systematic review and meta-analysis</p> <ul> <li>Notes</li> </ul> </li> </ul>"},{"location":"Tool/MIT/missing_semester/","title":"MIT The Missing Semester of Your CS Education","text":""},{"location":"Tool/MIT/missing_semester/#information","title":"information","text":"<p>\u8bfe\u7a0b\u5730\u5740\uff1ahttps://missing-semester-cn.github.io/</p> <ul> <li>\u91cd\u70b9\u719f\u6089 <code>Git</code> <code>GitHub</code> <code>make</code> <code>gdb</code>/<code>lldb</code> <code>VS Code</code> <code>Markdown</code></li> </ul>"},{"location":"Tool/MIT/missing_semester/#course-overview-shell","title":"Course overview + Shell","text":"<p>Shell: \u5b83\u5141\u8bb8\u4f60\u6267\u884c\u7a0b\u5e8f\uff0c\u8f93\u5165\u5e76\u83b7\u53d6\u67d0\u79cd\u534a\u7ed3\u6784\u5316\u7684\u8f93\u51fa\u3002</p> <p>Bourne Again SHell, \u7b80\u79f0 \u201cbash\u201d </p> <ol> <li><code>date</code></li> </ol> <p>\u5b83\u6253\u5370\u51fa\u4e86\u5f53\u524d\u7684\u65e5\u671f\u548c\u65f6\u95f4</p> <p>2023\u5e74 2\u670818\u65e5 \u661f\u671f\u516d 10\u65f637\u520636\u79d2 CST</p> <ol> <li><code>echo hello</code></li> </ol> <p><code>echo</code> \u7a0b\u5e8f\u5c06<code>hello</code>\u53c2\u6570\u6253\u5370\u51fa\u6765</p> <p>\u6ce8\u610f\u53c2\u6570\u91cc\u9762\u4e0d\u5e94\u8be5\u6709\u7a7a\u683c\uff0c\u5982\u679c\u60a8\u5e0c\u671b\u4f20\u9012\u7684\u53c2\u6570\u4e2d\u5305\u542b\u7a7a\u683c\uff08\u4f8b\u5982\u4e00\u4e2a\u540d\u4e3a My Photos \u7684\u6587\u4ef6\u5939\uff09\uff0c\u60a8\u8981\u4e48\u7528\u4f7f\u7528\u5355\u5f15\u53f7\uff0c\u53cc\u5f15\u53f7\u5c06\u5176\u5305\u88f9\u8d77\u6765\uff0c\u8981\u4e48\u4f7f\u7528\u8f6c\u4e49\u7b26\u53f7 <code>\\</code> \u8fdb\u884c\u5904\u7406\uff08<code>My\\ Photos</code>\uff09\u3002</p> <p>\u6bd4\u5982<code>echo Hello\\ World</code></p> <pre><code>\u279c  try mkdir My Photos\n\u279c  try ls\nMy     Photos\n\u279c  try mkdir My\\ Photos\n\u279c  try ls\nMy        My Photos Photos\n</code></pre> <ol> <li>Shell \u6307\u4ee4\u641c\u7d22\u7684\u8def\u5f84</li> </ol> <pre><code>\u279c  ~ echo $PATH\n/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/go/bin:/Library/Apple/usr/bin\n\u279c  ~ which echo\necho: shell built-in command\n\u279c  ~ /bin/echo $PATH\n/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/go/bin:/Library/Apple/usr/bin\n</code></pre> <ol> <li>\u5728shell\u4e2d\u5bfc\u822a</li> </ol> <p>shell \u4e2d\u7684\u8def\u5f84\u662f\u4e00\u7ec4\u88ab\u5206\u5272\u7684\u76ee\u5f55\uff0c\u5728 Linux \u548c macOS \u4e0a\u4f7f\u7528 <code>/</code> \u5206\u5272\uff0c\u800c\u5728Windows\u4e0a\u662f <code>\\</code>\u3002</p> <p>\u8def\u5f84 <code>/</code> \u4ee3\u8868\u7684\u662f\u7cfb\u7edf\u7684\u6839\u76ee\u5f55\uff0c\u5982\u679c\u67d0\u4e2a\u8def\u5f84\u4ee5 <code>/</code> \u5f00\u5934\uff0c\u90a3\u4e48\u5b83\u662f\u4e00\u4e2a \u7edd\u5bf9\u8def\u5f84\uff0c\u5176\u4ed6\u7684\u90fd\u662f \u76f8\u5bf9\u8def\u5f84 \u3002\u5982\u679c\u67d0\u4e2a\u8def\u5f84\u4ee5 <code>/</code> \u5f00\u5934\uff0c\u90a3\u4e48\u5b83\u662f\u4e00\u4e2a \u7edd\u5bf9\u8def\u5f84\uff0c\u5176\u4ed6\u7684\u90fd\u662f \u76f8\u5bf9\u8def\u5f84 \u3002</p> <pre><code>\u279c  ~ pwd\n/Users/charleschile\n\u279c  ~ cd /home\n\u279c  /home pwd\n/home\n\u279c  /home cd ..\n\u279c  / pwd\n/\n\u279c  / cd ./home\n\u279c  /home pwd\n/home\n\u279c  /home cd\n\u279c  ~\n</code></pre> <ol> <li>\u67e5\u770b\u6307\u5b9a\u76ee\u5f55\u4e0b\u5305\u542b\u54ea\u4e9b\u6587\u4ef6\uff0c\u6211\u4eec\u4f7f\u7528 <code>ls</code> \u547d\u4ee4</li> </ol> <pre><code>\u279c  Desktop ls\nCodes                                     Personal File                             \u8349\u7a3f.docx                                 \u622a\u5c4f2023-02-16 17.39.05.png               \u5173\u952e\u8bcd\uff1a.md\nICA.docx                                  blockchain.md                             \u8349\u7a3f2.docx                                \u622a\u5c4f2023-02-17 08.44.15.png\nMale infertility as a window to health.md \u6bd5\u8bbe                                      \u622a\u5c4f2023-02-15 11.48.28.png               \u4ea4\u6613\u8bb0\u5f55.md\n\u279c  Desktop ls -l\ntotal 1248\ndrwxr-xr-x@  6 charleschile  staff     192  1 18 11:36 Codes\n-rw-r--r--@  1 charleschile  staff  260007  2 16 18:56 ICA.docx\n-rw-r--r--@  1 charleschile  staff    2292  2 17 01:13 Male infertility as a window to health.md\ndrwxrwxrwx  13 charleschile  staff     416  1 13 12:43 Personal File\n-rw-r--r--@  1 charleschile  staff   13623  2  7 11:35 blockchain.md\ndrwxrwxrwx@ 15 charleschile  staff     480  2 17 08:44 \u6bd5\u8bbe\n-rw-r--r--@  1 charleschile  staff   15101  2 16 15:08 \u8349\u7a3f.docx\n-rw-r--r--@  1 charleschile  staff   13410  2 17 04:51 \u8349\u7a3f2.docx\n-rw-r--r--@  1 charleschile  staff   22919  2 15 11:48 \u622a\u5c4f2023-02-15 11.48.28.png\n-rw-r--r--@  1 charleschile  staff  105133  2 16 17:39 \u622a\u5c4f2023-02-16 17.39.05.png\n-rw-r--r--@  1 charleschile  staff  183011  2 17 08:44 \u622a\u5c4f2023-02-17 08.44.15.png\n-rw-r--r--@  1 charleschile  staff    1018  2 10 12:26 \u4ea4\u6613\u8bb0\u5f55.md\n-rw-r--r--@  1 charleschile  staff     828  1 26 23:10 \u5173\u952e\u8bcd\uff1a.md\n</code></pre> <p><code>ls -l</code>\u8fd9\u4e2a\u53c2\u6570\u53ef\u4ee5\u66f4\u52a0\u8be6\u7ec6\u5730\u5217\u51fa\u76ee\u5f55\u4e0b\u6587\u4ef6\u6216\u6587\u4ef6\u5939\u7684\u4fe1\u606f\u3002\u9996\u5148\uff0c\u672c\u884c\u7b2c\u4e00\u4e2a\u5b57\u7b26 <code>d</code> \u8868\u793a <code>missing</code> \u662f\u4e00\u4e2a\u76ee\u5f55\u3002\u7136\u540e\u63a5\u4e0b\u6765\u7684\u4e5d\u4e2a\u5b57\u7b26\uff0c\u6bcf\u4e09\u4e2a\u5b57\u7b26\u6784\u6210\u4e00\u7ec4\u3002 \uff08<code>rwx</code>\uff09. \u5b83\u4eec\u5206\u522b\u4ee3\u8868\u4e86\u6587\u4ef6\u6240\u6709\u8005\uff08<code>missing</code>\uff09\uff0c\u7528\u6237\u7ec4\uff08<code>users</code>\uff09 \u4ee5\u53ca\u5176\u4ed6\u6240\u6709\u4eba\u5177\u6709\u7684\u6743\u9650\u3002\u5176\u4e2d <code>-</code> \u8868\u793a\u8be5\u7528\u6237\u4e0d\u5177\u5907\u76f8\u5e94\u7684\u6743\u9650\u3002\u4ece\u4e0a\u9762\u7684\u4fe1\u606f\u6765\u770b\uff0c\u53ea\u6709\u6587\u4ef6\u6240\u6709\u8005\u53ef\u4ee5\u4fee\u6539\uff08<code>w</code>\uff09\uff0c<code>missing</code> \u6587\u4ef6\u5939 \uff08\u4f8b\u5982\uff0c\u6dfb\u52a0\u6216\u5220\u9664\u6587\u4ef6\u5939\u4e2d\u7684\u6587\u4ef6\uff09\u3002\u4e3a\u4e86\u8fdb\u5165\u67d0\u4e2a\u6587\u4ef6\u5939\uff0c\u7528\u6237\u9700\u8981\u5177\u5907\u8be5\u6587\u4ef6\u5939\u4ee5\u53ca\u5176\u7236\u6587\u4ef6\u5939\u7684\u201c\u641c\u7d22\u201d\u6743\u9650\uff08\u4ee5\u201c\u53ef\u6267\u884c\u201d\uff1a<code>x</code>\uff09\u6743\u9650\u8868\u793a\u3002\u4e3a\u4e86\u5217\u51fa\u5b83\u7684\u5305\u542b\u7684\u5185\u5bb9\uff0c\u7528\u6237\u5fc5\u987b\u5bf9\u8be5\u6587\u4ef6\u5939\u5177\u5907\u8bfb\u6743\u9650\uff08<code>r</code>\uff09\u3002\u5bf9\u4e8e\u6587\u4ef6\u6765\u8bf4\uff0c\u6743\u9650\u7684\u610f\u4e49\u4e5f\u662f\u7c7b\u4f3c\u7684\u3002\u6ce8\u610f\uff0c<code>/bin</code> \u76ee\u5f55\u4e0b\u7684\u7a0b\u5e8f\u5728\u6700\u540e\u4e00\u7ec4\uff0c\u5373\u8868\u793a\u6240\u6709\u4eba\u7684\u7528\u6237\u7ec4\u4e2d\uff0c\u5747\u5305\u542b <code>x</code> \u6743\u9650\uff0c\u4e5f\u5c31\u662f\u8bf4\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u6267\u884c\u8fd9\u4e9b\u7a0b\u5e8f\u3002</p> <p>\u6bd4\u5982<code>drwxr-xr-x</code>\u4ee3\u8868\u8fd9\u662f\u4e00\u4e2a\u6587\u4ef6\u5939\uff0c<code>rwx</code>\u4ee3\u8868\u6587\u4ef6\u5939\u7684\u6240\u6709\u8005\u80fd\u591f\u8bfb\u3001\u5199\u3001\u641c\u7d22\u8fd9\u4e2a\u6587\u4ef6\u5939\u91cc\u7684\u5185\u5bb9\uff0c<code>r-x</code>\u4ee3\u8868\u7528\u6237\u7ec4\u53ea\u80fd\u8bfb\u548c\u641c\u7d22\uff0c\u4e0b\u4e00\u4e2a<code>r-x</code>\u4ee3\u8868\u5176\u4ed6\u6240\u6709\u4eba\u4e5f\u53ea\u80fd\u8bfb\u548c\u641c\u7d22</p> <ol> <li>\u6587\u4ef6\u7684\u79fb\u52a8\u548c\u91cd\u547d\u540d</li> </ol> <p>\u5b9e\u9645\u4e0a\u5c06\u6587\u4ef6\u5728\u540c\u4e00\u4e2a\u76ee\u5f55\u4e0b\u79fb\u52a8\u5c31\u76f8\u5f53\u4e8e\u66f4\u6539\u4e86\u6587\u4ef6\u540d\uff1a</p> <pre><code>mv test.md try.md\n//\u5b9e\u9645\u4e0a\u5c06test.md \u6539\u540d\u6210\u4e86try.md\n</code></pre> <p>\u6587\u4ef6\u79fb\u52a8\u6587\u4ef6\u5939\u5e76\u4e14\u6539\u540d\uff1a</p> <pre><code>\u279c  try mv try.md ../test/test.md\n</code></pre> <ol> <li>\u62f7\u8d1d\u6587\u4ef6</li> </ol> <pre><code>\u279c  test cp test.md try.md\n</code></pre> <ol> <li>\u65b0\u5efa\u6587\u4ef6\u5939</li> </ol> <pre><code>\u279c  test mkdir test1\n</code></pre> <ol> <li>\u5c55\u793a\u7a0b\u5e8f\u7684\u7528\u6237\u624b\u518c</li> </ol> <pre><code>man ls\n</code></pre> <ol> <li>\u4f7f\u7528<code>&gt;</code>\u548c<code>&lt;</code>\u5728\u7a0b\u5e8f\u4e4b\u95f4\u521b\u5efa\u8fde\u63a5    <pre><code>\u279c  test cat test.md\ntest%\n\u279c  test echo hello &gt; test.md\n\u279c  test cat test.md\nhello\n\n\n\n\u279c  test cat &lt; test.md\nhello\n\u279c  test cat &lt; test.md &gt; test2.md\n\u279c  test cat test2.md\nhello\n</code></pre></li> </ol> <p>\u4f7f\u7528<code>|</code>\u5c06\u4e00\u4e2a\u7a0b\u5e8f\u7684\u8f93\u51fa\u548c\u53e6\u5916\u4e00\u4e2a\u7a0b\u5e8f\u7684\u8f93\u5165\u8fde\u63a5\u8d77\u6765</p> <p><code>tail -n1</code>\u662f\u53d6\u51fa\u6700\u540e\u4e00\u884c\u7684\u5185\u5bb9</p> <pre><code>\u279c  ~ ls -l /\ntotal 9\ndrwxrwxr-x  35 root  admin  1120  2 16 13:53 Applications\ndrwxr-xr-x  67 root  wheel  2144  1 14 08:34 Library\ndrwxr-xr-x@  9 root  wheel   288 12  2 16:43 System\ndrwxr-xr-x   5 root  admin   160 12  2 16:43 Users\ndrwxr-xr-x   3 root  wheel    96  2 18 09:46 Volumes\ndrwxr-xr-x@ 38 root  wheel  1216 12  2 16:43 bin\ndrwxr-xr-x   2 root  wheel    64 12  2 16:43 cores\ndr-xr-xr-x   3 root  wheel  4430  2 18 09:46 dev\nlrwxr-xr-x@  1 root  wheel    11 12  2 16:43 etc -&gt; private/etc\nlrwxr-xr-x   1 root  wheel    25  2 18 09:46 home -&gt; /System/Volumes/Data/home\ndrwxr-xr-x   2 root  wheel    64 12  2 16:43 opt\ndrwxr-xr-x   6 root  wheel   192  2 18 09:46 private\ndrwxr-xr-x@ 65 root  wheel  2080 12  2 16:43 sbin\nlrwxr-xr-x@  1 root  wheel    11 12  2 16:43 tmp -&gt; private/tmp\ndrwxr-xr-x@ 11 root  wheel   352 12  2 16:43 usr\nlrwxr-xr-x@  1 root  wheel    11 12  2 16:43 var -&gt; private/var\n\u279c  ~ ls -l / | tail -n1\nlrwxr-xr-x@  1 root  wheel    11 12  2 16:43 var -&gt; private/var\n</code></pre>"},{"location":"Tool/MIT/missing_semester/#shell-tools-and-scripting","title":"Shell Tools and Scripting","text":""},{"location":"Tool/git/git/","title":"git \u4f7f\u7528","text":""},{"location":"Tool/git/git/#git_1","title":"\u4e00\u3001git\u662f\u4ec0\u4e48","text":""},{"location":"Tool/git/git/#githubhttp","title":"\u914d\u7f6egithub\u7684http\u7aef\u53e3","text":"<p>\u5728vpn\u7684\u914d\u7f6e<code>yaml</code>\u6587\u4ef6\u4e2d\uff0c\u53ef\u4ee5\u627e\u5230<code>mixed-port:7890</code></p> <p>\u6240\u4ee5\u9700\u8981\u5728\u7ec8\u7aef\u8bbe\u7f6egit\u7684http\u7aef\u53e3: <pre><code>git config --global http.proxy '127.0.0.1:7890'\n\ngit config --global https.proxy '127.0.0.1:7890'\n</code></pre></p> <p>\u5728\u53d6\u6d88\u5168\u5c40\u4ee3\u7406\u4e4b\u540e</p> <p>\u9700\u8981\u5c06\u4ee3\u7406\u7aef\u53e3\u5173\u95ed: <pre><code>git config --global --unset http.proxy\n\ngit config --global --unset https.proxy\n</code></pre></p>"},{"location":"Tool/git/git/#githubssh-key","title":"\u914d\u7f6egithub\u7684ssh key","text":""},{"location":"Tool/git/git/#github","title":"\u914d\u7f6egithub\u7684\u7528\u6237\u8bbe\u7f6e","text":"<pre><code>\u279c  ~ git config --global user.name charleschile\n\u279c  ~ git config --global user.email charles.chi.le@outlook.com\n</code></pre>"},{"location":"Tool/git/git/#ssh-key","title":"\u751f\u6210\u81ea\u5df1\u7684ssh-key","text":"<pre><code>\u279c  ~ ssh-keygen -t rsa -b 4096 -C charles.chi.le@outlook.com\n</code></pre> <p>\u6ce8\u610f\u8f93\u5165\u597d\u4e0a\u9762\u8fd9\u6761\u547d\u4ee4\u540e\uff0c\u4e00\u76f4\u6309\u56de\u8f66\uff0c\u4ec0\u4e48\u90fd\u4e0d\u7528\u8f93\u5165</p> <pre><code>Generating public/private rsa key pair.\nEnter file in which to save the key (/Users/charleschile/.ssh/id_rsa):\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\n\nYour identification has been saved in /Users/charleschile/.ssh/id_rsa\nYour public key has been saved in /Users/charleschile/.ssh/id_rsa.pub\nThe key fingerprint is:\nSHA256:MFuYaD/EEt+oNtc9nU+ssySqrMohTghqDg53F1uXVIs charles.chi.le@outlook.com\nThe key's randomart image is:\n+---[RSA 4096]----+\n|    .       .    |\n|     = =   o .   |\n|    + X o E .    |\n|   . = * o o o   |\n|.   + * S = o o  |\n|+  . o = . . +   |\n|*oo . o   . + .  |\n|O+ o o   . o o   |\n| +o...o..   .    |\n+----[SHA256]-----+\n</code></pre> <p>\u62f7\u8d1d~/.ssh/id_rsa.pub\u7684\u8f93\u5165\u5230\u526a\u5207\u677f\uff08\u5373\u62f7\u8d1d\u516c\u94a5\u5185\u5bb9\uff09</p> <pre><code>\u279c  ~ cat /Users/charleschile/.ssh/id_rsa.pub\n</code></pre> <p>\u62f7\u8d1d\u5373\u53ef</p>"},{"location":"Tool/git/git/#githubssh-key_1","title":"\u914d\u7f6egithub\u7684ssh key","text":"<p>\u6253\u5f00https://github.com/settings/keys</p> <p>New \u4e00\u4e2assh key</p>"},{"location":"Tool/mac/remacbook/","title":"MacBook \u73af\u5883\u914d\u7f6e","text":""},{"location":"Tool/mac/remacbook/#_1","title":"\u914d\u7f6e\u53c2\u8003","text":"<p>macOS Setup Guide</p>"},{"location":"Tool/mac/remacbook/#_2","title":"\u524d\u7f6e\u4e0b\u8f7d","text":"<p>\u5fae\u4fe1\u3001qq\u3001chrome\u3001glados\u3001office365\u5957\u4ef6(\u76f4\u63a5\u4eceapp store\u4e0b\u8f7d\u5373\u53ef)\u3001typora</p> <p>Magnet(xiangxijie\u7684\u89c6\u9891\u91cc\u9762\u51fa\u73b0)</p>"},{"location":"Tool/mac/remacbook/#xcode","title":"Xcode\u4e0b\u8f7d","text":"<p>\u60f3\u4e0b\u8f7dhomebrew\u5c31\u5fc5\u987b\u8981\u4e0b\u8f7dXcode..</p> <p>\u76f4\u63a5\u4eceapp store\u4e0b\u8f7dxcode\u5373\u53ef\uff0c\u5e94\u8be5\u662f\u8981\u5f88\u4e45\u7684</p> <pre><code>sudo xcode-select --install\n</code></pre>"},{"location":"Tool/mac/remacbook/#homebrew","title":"homebrew","text":"<p>\u7136\u540e\u53c2\u8003</p> <p>https://zhuanlan.zhihu.com/p/30704752</p> <pre><code>/bin/zsh -c \"$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)\"\n</code></pre> <p>\u4f1a\u9047\u5230\u62a5\u9519:</p> <pre><code>fatal: not in a git directory\nError: Command failed with exit 128: git\n</code></pre> <p>\u89e3\u51b3\u65b9\u6cd5\uff1a</p> <p>\u5148\u67e5\u770bbrew\u7684version</p> <pre><code>brew -v\n</code></pre> <p>\u7136\u540e\u770b\u5230\u63d0\u793a\uff1a(\u76f4\u63a5\u8dd1\u4e0b\u9762\u4e24\u884c\u4ee3\u7801)</p> <pre><code>git config --global --add safe.directory /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core\ngit config --global --add safe.directory /usr/local/Homebrew/Library/Taps/homebrew/homebrew-cask\n</code></pre>"},{"location":"Tool/mac/remacbook/#iterm2","title":"iTerm2","text":"<pre><code>brew install --cask iterm2\n</code></pre>"},{"location":"Tool/mac/remacbook/#iterm2_1","title":"\u914d\u7f6eiTerm2","text":"<p>\u53c2\u8003\u7f51\u7ad9https://zhuanlan.zhihu.com/p/550022490 \u53c2\u8003\u914d\u7f6e\u4e3b\u9898</p>"},{"location":"Tool/mac/remacbook/#nerd-font","title":"\u6216\u8005\u53ef\u4ee5\u76f4\u63a5\u53c2\u8003nerd-font\u7684\u5b98\u65b9\u4ed3\u5e93","text":"<p>https://github.com/ryanoasis/nerd-fonts#option-4-homebrew-fonts <pre><code>brew tap homebrew/cask-fonts\nbrew install font-hack-nerd-font\n</code></pre></p>"},{"location":"Tool/mac/remacbook/#_3","title":"\u66f4\u6362\u5b57\u4f53","text":"<p>\u53c2\u8003\u7f51\u7ad9:https://zhuanlan.zhihu.com/p/361282459</p>"},{"location":"Tool/mac/remacbook/#git","title":"git","text":"<pre><code>brew install git\n</code></pre>"},{"location":"Tool/mac/remacbook/#zsh","title":"zsh","text":"<pre><code>brew install zsh\n</code></pre> <p>\u7136\u540e\u53c2\u8003\uff1ahttps://zhuanlan.zhihu.com/p/35283688</p> <pre><code># \u8fd9\u4e2a\u547d\u4ee4\u6765\u67e5\u770b\u6211\u4eec\u7684\u7535\u8111\u4e0a\u662f\u5426\u5b89\u88c5\u4e86 Zsh \nzsh --version\n</code></pre> <pre><code># \u67e5\u770b\u7cfb\u7edf\u5f53\u524d\u6240\u6709\u7684 shell\ncat /etc/shells\n\n# \u67e5\u770b\u5f53\u524d\u7684shell\necho $SHELL\n</code></pre> <pre><code>sh -c \"$(curl -fsSL https://gitee.com/mirrors/oh-my-zsh/raw/master/tools/install.sh)\"\n</code></pre> <p>\u539f\u914d\u7f6e\u6587\u4ef6</p> <pre><code># If you come from bash you might have to change your $PATH.\n# export PATH=$HOME/bin:/usr/local/bin:$PATH\n\n# Path to your oh-my-zsh installation.\nexport ZSH=\"$HOME/.oh-my-zsh\"\n\n# Set name of the theme to load --- if set to \"random\", it will\n# load a random theme each time oh-my-zsh is loaded, in which case,\n# to know which specific one was loaded, run: echo $RANDOM_THEME\n# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes\nZSH_THEME=\"powerlevel10k/powerlevel10k\"\n\n# Set list of themes to pick from when loading at random\n# Setting this variable when ZSH_THEME=random will cause zsh to load\n# a theme from this variable instead of looking in $ZSH/themes/\n# If set to an empty array, this variable will have no effect.\n# ZSH_THEME_RANDOM_CANDIDATES=( \"robbyrussell\" \"agnoster\" )\n\n# Uncomment the following line to use case-sensitive completion.\n# CASE_SENSITIVE=\"true\"\n\n# Uncomment the following line to use hyphen-insensitive completion.\n# Case-sensitive completion must be off. _ and - will be interchangeable.\n# HYPHEN_INSENSITIVE=\"true\"\n\n# Uncomment one of the following lines to change the auto-update behavior\n# zstyle ':omz:update' mode disabled  # disable automatic updates\n# zstyle ':omz:update' mode auto      # update automatically without asking\n# zstyle ':omz:update' mode reminder  # just remind me to update when it's time\n\n# Uncomment the following line to change how often to auto-update (in days).\n# zstyle ':omz:update' frequency 13\n\n# Uncomment the following line if pasting URLs and other text is messed up.\n# DISABLE_MAGIC_FUNCTIONS=\"true\"\n\n# Uncomment the following line to disable colors in ls.\n# DISABLE_LS_COLORS=\"true\"\n\n# Uncomment the following line to disable auto-setting terminal title.\n# DISABLE_AUTO_TITLE=\"true\"\n\n# Uncomment the following line to enable command auto-correction.\n# ENABLE_CORRECTION=\"true\"\n\n# Uncomment the following line to display red dots whilst waiting for completion.\n# You can also set it to another string to have that shown instead of the default red dots.\n# e.g. COMPLETION_WAITING_DOTS=\"%F{yellow}waiting...%f\"\n# Caution: this setting can cause issues with multiline prompts in zsh &lt; 5.7.1 (see #5765)\n# COMPLETION_WAITING_DOTS=\"true\"\n\n# Uncomment the following line if you want to disable marking untracked files\n# under VCS as dirty. This makes repository status check for large repositories\n# much, much faster.\n# DISABLE_UNTRACKED_FILES_DIRTY=\"true\"\n\n# Uncomment the following line if you want to change the command execution time\n# stamp shown in the history command output.\n# You can set one of the optional three formats:\n# \"mm/dd/yyyy\"|\"dd.mm.yyyy\"|\"yyyy-mm-dd\"\n# or set a custom format using the strftime function format specifications,\n# see 'man strftime' for details.\n# HIST_STAMPS=\"mm/dd/yyyy\"\n\n# Would you like to use another custom folder than $ZSH/custom?\n# ZSH_CUSTOM=/path/to/new-custom-folder\n\n# Which plugins would you like to load?\n# Standard plugins can be found in $ZSH/plugins/\n# Custom plugins may be added to $ZSH_CUSTOM/plugins/\n# Example format: plugins=(rails git textmate ruby lighthouse)\n# Add wisely, as too many plugins slow down shell startup.\nplugins=(git)\n\nsource $ZSH/oh-my-zsh.sh\n\n# User configuration\n\n# export MANPATH=\"/usr/local/man:$MANPATH\"\n\n# You may need to manually set your language environment\n# export LANG=en_US.UTF-8\n\n# Preferred editor for local and remote sessions\n# if [[ -n $SSH_CONNECTION ]]; then\n#   export EDITOR='vim'\n# else\n#   export EDITOR='mvim'\n# fi\n\n# Compilation flags\n# export ARCHFLAGS=\"-arch x86_64\"\n\n# Set personal aliases, overriding those provided by oh-my-zsh libs,\n# plugins, and themes. Aliases can be placed here, though oh-my-zsh\n# users are encouraged to define aliases within the ZSH_CUSTOM folder.\n# For a full list of active aliases, run `alias`.\n#\n# Example aliases\n# alias zshconfig=\"mate ~/.zshrc\"\n# alias ohmyzsh=\"mate ~/.oh-my-zsh\"\n</code></pre>"},{"location":"Tool/mac/remacbook/#vscode","title":"vscode","text":"<pre><code>brew install --cask visual-studio-code\n</code></pre>"},{"location":"Tool/mac/remacbook/#python","title":"python","text":"<pre><code>brew install python\n</code></pre> <pre><code>pip3 install mkdocs-material -i https://pypi.tuna.tsinghua.edu.cn/simple\n</code></pre>"},{"location":"Tool/mac/remacbook/#git_1","title":"\u5982\u4f55\u5c06\u547d\u4ee4\u884c\u4e2d\u7684git\u63d0\u793a\u8bed\u8a00\u6539\u4e3a\u82f1\u6587","text":"<p>https://blog.csdn.net/michael_wgy_/article/details/105858848</p>"},{"location":"Tool/mac/remacbook/#macvscodecpp","title":"\u8ba4\u8bc6mac\u6587\u4ef6\u5e76\u5207\u914d\u7f6evscode\u7f16\u5199cpp","text":"<p>\u53c2\u7167yangxijie\u7684\u6559\u7a0b</p> <p>Install c/c++ \u548ccode runner\u63d2\u4ef6</p> <p><code>vscode-icons-mac</code>\uff1a\u8c03\u6574\u6587\u4ef6\u7ba1\u7406\u5668\u90a3\u91cc\u7684\u56fe\u6807</p> <p><code>Bracket Pair Colorizer</code>\uff1a\u5c06\u767d\u8272\u7684\u62ec\u53f7\u53d8\u4e3a\u5339\u914d\u7684\u5f69\u8272</p>"},{"location":"Tool/mac/troubleshooting/","title":"Mac Troubleshooting","text":""},{"location":"Tool/mac/troubleshooting/#ipad","title":"iPad\u5728\u968f\u822a\u72b6\u6001\u4e0b\u5206\u8fa8\u7387\u7684\u66f4\u6539","text":"<p>\u53c2\u8003\uff1ahttps://blog.csdn.net/wyx963323759/article/details/125003461</p> <p>\u89e3\u51b3\u65b9\u6848\uff1a\u901a\u8fc7 displayplacer \u53ef\u4ee5\u7075\u6d3b\u8c03\u6574 ipad \u7684\u4f4d\u7f6e\uff0c\u662f\u5426\u65cb\u8f6c\uff0c\u4ee5\u53ca\u5206\u8fa8\u7387\u8bbe\u7f6e</p>"},{"location":"Tool/mac/troubleshooting/#displayplacer","title":"displayplacer \u5b89\u88c5","text":"<pre><code>brew tap jakehilborn/jakehilborn &amp;&amp; brew install displayplacer\n</code></pre>"},{"location":"Tool/mac/troubleshooting/#displayplacer_1","title":"displayplacer \u8bbe\u7f6e","text":"<p>\u67e5\u770b\u5f53\u524d\u591a\u5c4f\u8be6\u7ec6\u53c2\u6570:</p> <pre><code>displayplacer list\n</code></pre> <p>\u66f4\u6539iPad\u7684\u5206\u8fa8\u7387\uff1a</p> <pre><code>displayplacer \"id:6161706C-6950-6164-0000-053900000000 res:1112x834 hz:60 color_depth:4 origin:(0,0) degree:0\"\n</code></pre> <p>\u73b0\u5728\u4e09\u53f0\u663e\u793a\u5668\u7684\u53c2\u6570\uff1a</p> <pre><code>displayplacer \"id:FB5C2A5F-8168-BD9A-131D-7B9A493CA81C res:1920x1080 hz:144 color_depth:8 scaling:off origin:(0,0) degree:0\" \"id:748363EE-ED26-C6C5-82A3-0EE425DFD994 res:1680x1050 color_depth:4 scaling:on origin:(1920,0) degree:0\" \"id:6161706C-6950-6164-0000-053900000000 res:1112x834 hz:60 color_depth:4 scaling:on origin:(3600,789) degree:0\"\n</code></pre> <p>\u539f\u59cb\u53c2\u6570\uff1a <pre><code>displayplacer \"id:748363EE-ED26-C6C5-82A3-0EE425DFD994 res:1680x1050 color_depth:4 enabled:true scaling:on origin:(0,0) degree:0\" \"id:FB5C2A5F-8168-BD9A-131D-7B9A493CA81C res:1920x1080 hz:60 color_depth:8 enabled:true scaling:off origin:(1680,0) degree:0\" \"id:D02F83A2-B7BC-6AD5-FE14-E2A880478F1D res:2560x1600 hz:60 color_depth:8 enabled:true scaling:off origin:(3600,808) degree:0\"\n</code></pre> \u82f9\u679c\u672c\u8eab\uff1a <pre><code>displayplacer \"id:748363EE-ED26-C6C5-82A3-0EE425DFD994 res:1680x1050 color_depth:4 enabled:true scaling:on origin:(0,0) degree:0\"\n</code></pre> \u5927\u5c4f\u5e55\uff1a <pre><code>displayplacer \"id:FB5C2A5F-8168-BD9A-131D-7B9A493CA81C res:1920x1080 hz:60 color_depth:8 enabled:true scaling:off origin:(1680,0) degree:0\"\n</code></pre></p> <p>\u526f\u5c4f\uff1a <pre><code>displayplacer \"id:D02F83A2-B7BC-6AD5-FE14-E2A880478F1D res:2560x1600 hz:60 color_depth:8 enabled:true scaling:off origin:(1920,808) degree:0\"\n</code></pre></p> <p>\u4fee\u6539\u540e\uff1a \u5927\u5c4f\u5e55\uff1a <pre><code>displayplacer \"id:FB5C2A5F-8168-BD9A-131D-7B9A493CA81C res:1920x1080 hz:60 color_depth:4 enabled:true scaling:off origin:(1680,0) degree:0\"\n</code></pre></p> <p>\u526f\u5c4f\uff1a <pre><code>displayplacer \"id:D02F83A2-B7BC-6AD5-FE14-E2A880478F1D res:1440x900 hz:60 color_depth:4 enabled:true scaling:on origin:(1920,808) degree:0\"\n</code></pre></p>"},{"location":"Tool/mkdocs/MkDocs%20Material/","title":"\u4ece0\u5f00\u59cb\u90e8\u7f72\u4e00\u4e2aMaterial for MkDocs \u4e2a\u4eba\u7b14\u8bb0","text":""},{"location":"Tool/mkdocs/MkDocs%20Material/#1","title":"1. \u8d44\u6599","text":"<ul> <li> <p>MkDocs-Material\u5b98\u65b9github\u4ed3\u5e93</p> </li> <li> <p>MkDocs-Material\u5b98\u65b9\u7f51\u7ad9</p> </li> </ul>"},{"location":"Tool/mkdocs/MkDocs%20Material/#2","title":"2. \u5efa\u7acb\u7f51\u7ad9","text":"<p>\u5982\u679c\u5bf9python\u719f\u6089\u7684\u8bdd\uff0c\u5b98\u7f51\u63a8\u8350\u4f7f\u7528<code>pip</code>\u8fdb\u884c\u4e0b\u8f7d\u5b89\u88c5</p>"},{"location":"Tool/mkdocs/MkDocs%20Material/#1_1","title":"1. \u65b0\u5efa\u4e00\u4e2a\u4e2a\u4eba\u7b14\u8bb0\u7684\u6587\u4ef6\u5730\u5740\u5730\u5740","text":""},{"location":"Tool/mkdocs/MkDocs%20Material/#2-getting-started","title":"2. getting started","text":"<p>\u5728terminal\u4e2d\u8f93\u5165:</p> <pre><code>pip install mkdocs-material\n</code></pre> <p>\u6216\u8005\u5982\u679c\u4f7f\u7528pycharm\u7684\u8bdd\uff0c\u53ef\u4ee5\u76f4\u63a5\u5728<code>Preference-Project-Python Interpreter</code>\u4e2d\u6dfb\u52a0<code>mkdocs-material</code></p>"},{"location":"Tool/mkdocs/MkDocs%20Material/#3-creating-your-site","title":"3. creating your site","text":"<p>\u5728\u81ea\u5df1\u4e2a\u4eba\u7b14\u8bb0\u7684\u5730\u5740\u4e0b\uff0c\u5728terminal\u4e2d\u8f93\u5165:</p> <pre><code>mkdocs new .\n</code></pre> <p>\u4f1a\u8df3\u51fa\u4e24\u884c\u63d0\u793a\uff1a</p> <pre><code>INFO     -  Writing config file: ./mkdocs.yml\nINFO     -  Writing initial docs: ./docs/index.md\n</code></pre> <p>\u5373\u751f\u6210\u4e86\u4e24\u4e2a\u6587\u4ef6<code>./mkdocs.yml</code>\u548c<code>./docs/index.md</code></p>"},{"location":"Tool/mkdocs/MkDocs%20Material/#4-minimal-configuration","title":"4. Minimal configuration","text":"<p>\u5728<code>mkdocs.yml</code>\u6587\u4ef6\u4e2d\u52a0\u5165:</p> <pre><code>theme:\nname: material\n</code></pre> <p>\u5982\u679c\u4f7f\u7528vscode\uff0c\u90a3\u4e48\u53ef\u4ee5\u4e0b\u8f7dYAML\u63d2\u4ef6</p> <p>\u4e0b\u8f7d\u597dYAML\u63d2\u4ef6\u540e\uff0c\u70b9\u51fb\u63d2\u4ef6\u9875\u9762\u7684\u8bbe\u7f6e\u6309\u94ae\u9009\u62e9\u6269\u5c55\u8bbe\u7f6e\u9009\u9879</p> <p>\u5728\u65b0\u9875\u9762\u4e2d\u9009\u62e9<code>\u5728setting.json\u4e2d\u7f16\u8f91</code></p> <p>\u4fee\u6539\u9875\u9762\u4e2dyaml\u7684\u8bbe\u7f6e\u4e3a:</p> <pre><code>{\n\"yaml.schemas\": {\n\"https://squidfunk.github.io/mkdocs-material/schema.json\": \"mkdocs.yml\"\n},\n\"yaml.customTags\": [\n\n\"!ENV scalar\",\n\"!ENV sequence\",\n\"tag:yaml.org,2002:python/name:materialx.emoji.to_svg\",\n\"tag:yaml.org,2002:python/name:materialx.emoji.twemoji\",\n\"tag:yaml.org,2002:python/name:pymdownx.superfences.fence_code_format\"\n]\n}\n</code></pre>"},{"location":"Tool/mkdocs/MkDocs%20Material/#5-mkdocs-materiallive-preview-serverlive-server","title":"5. \u9884\u89c8\u7f51\u7ad9\uff08mkdocs-material\u63d0\u4f9blive preview server\uff0c\u53ef\u4ee5\u5728\u4fee\u6539\u66f4\u6539\u540e\u81ea\u52a8\u66f4\u65b0\uff0c\u548clive server\u7c7b\u4f3c\uff09","text":"<p>\u6ce8\u610f\u5728vscode\u4e2d\u53ef\u4ee5\u4f7f\u7528markdown all in one \u63d2\u4ef6\uff0c\u4f7f\u7528<code>shift + ctrl + v</code>\u5373\u8bfe\u9884\u89c8\u5e76\u4e14\u7f16\u8f91markdown\u6587\u4ef6</p> <p>\u5728\u7ec8\u7aef\u8f93\u5165\u5373\u53ef\uff1a</p> <pre><code>mkdocs serve --dirtyreload\n</code></pre> <p>\u6ce8\u610f\u8fd9\u91cc\u7684<code>--dirtyload</code>\u540e\u7f00\u662f\u4e3a\u4e86\u5904\u7406\u5927\u6587\u4ef6\u9879\u76ee\uff0c\u5e73\u65f6\u4f7f\u7528\u65f6\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528<code>mkdocs serve</code></p>"},{"location":"Tool/mkdocs/MkDocs%20Material/#6","title":"6. \u5efa\u7acb\u7f51\u9875","text":"<p>\u7ed3\u675f\u7f16\u8f91\u540e\u53ef\u4ee5\u5728\u7ec8\u7aef\u8f93\u5165:</p> <pre><code>mkdocs build\n</code></pre> <p>\u4f1a\u8df3\u51fa\u4ee5\u4e0b\u4fe1\u606f:</p> <pre><code>INFO     -  Cleaning site directory\nINFO     -  Building documentation to directory: /Users/lechi/Desktop/Codes/personalBlog/site\nINFO     -  Documentation built in 0.32 seconds\n</code></pre> <p>\u5373\u5728\u81ea\u5df1\u7684\u6587\u4ef6\u5939\u4e0b\u65b0\u5efa\u4e86\u4e00\u4e2asite\u6587\u4ef6\u5939\uff0c\u91cc\u9762\u5305\u542b\u7740<code>build</code>\u751f\u6210\u7684\u9759\u6001\u7f51\u9875\u7684\u6240\u6709\u5185\u5bb9</p>"},{"location":"Tool/mkdocs/MkDocs%20Material/#8","title":"8. \u53d1\u5e03\u9875\u9762","text":"<p>\u5728bash\u7ec8\u7aef\u8f93\u5165\u4ee5\u4e0b   \u6ce8\u610f\u5728push\u524d\u5148\u8c03\u6574vpn <pre><code>git add .\ngit commit -m \"message\"\ngit push\nmkdocs gh-deploy\n</code></pre></p>"},{"location":"Tool/mkdocs/MkDocs%E7%BE%8E%E5%8C%96/","title":"Material for MkDocs \u7684\u7f8e\u5316","text":"<p>\u4ee5\u4e0b\u90fd\u662f\u5728mkdocs.yml\u4e0b\u66f4\u6539</p>"},{"location":"Tool/mkdocs/MkDocs%E7%BE%8E%E5%8C%96/#1","title":"1. \u4fee\u6539\u989c\u8272","text":""},{"location":"Tool/mkdocs/MkDocs%E7%BE%8E%E5%8C%96/#yml","title":"\u4fee\u6539\u989c\u8272\u5b8c\u6bd5\u540e\u7684yml\u6587\u4ef6\uff08\u4f9b\u53c2\u8003\uff09\uff1a","text":"<pre><code>site_name: My Docs\n\nextra_css:\n- stylesheets/extra.css\n\ntheme:\nname: material\npalette:\n- media: \"(prefers-color-scheme: light)\"\nscheme: default\ntoggle:\nicon: material/weather-sunny\nname: Switch to happy mode\naccent: pink\n\n# Palette toggle for dark mode\n- media: \"(prefers-color-scheme: dark)\"\nscheme: slate\ntoggle:\nicon: material/weather-night\nname: Switch to light mode\nprimary: blue grey\naccent: pink\n</code></pre>"},{"location":"Tool/mkdocs/MkDocs%E7%BE%8E%E5%8C%96/#schemelightdark","title":"\u4fee\u6539scheme\uff08\u5373light\u548cdark\u4e24\u79cd\u4e3b\u9898\uff09","text":"<p>\u4fee\u6539<code>scheme</code>\u5c5e\u6027\u5373\u53ef\uff0c\u5206\u4e3adefault\u548cslate</p>"},{"location":"Tool/mkdocs/MkDocs%E7%BE%8E%E5%8C%96/#_1","title":"\u4fee\u6539\u6807\u9898\u680f\u989c\u8272","text":"<p>\u4fee\u6539<code>primary\u5c5e\u6027\u5373\u53ef</code></p>"},{"location":"Tool/mkdocs/MkDocs%E7%BE%8E%E5%8C%96/#_2","title":"\u4fee\u6539\u4ea4\u4e92\u5143\u7d20\u989c\u8272\uff0c\u5982\u94fe\u63a5","text":"<p>\u4fee\u6539<code>accent</code>\u5c5e\u6027\u5373\u53ef</p>"},{"location":"Tool/mkdocs/MkDocs%E7%BE%8E%E5%8C%96/#_3","title":"\u5207\u6362\u4e3b\u9898\u8bbe\u7f6e","text":"<p>\u5982\u4e0b\u4fee\u6539\uff1a</p> <pre><code>theme:\npalette: # Palette toggle for light mode\n- scheme: default\ntoggle:\nicon: material/brightness-7 name: Switch to dark mode\n\n# Palette toggle for dark mode\n- scheme: slate\ntoggle:\nicon: material/brightness-4\nname: Switch to light mode\n</code></pre> <p>icon\u4e5f\u53ef\u4ee5\u8bbe\u7f6e</p>"},{"location":"Tool/mkdocs/MkDocs%E7%BE%8E%E5%8C%96/#_4","title":"\u8bbe\u7f6e\u4e3b\u9898\u6309\u7167\u6d4f\u89c8\u8005\u7cfb\u7edf\u4e3b\u9898\u81ea\u52a8\u5207\u6362","text":"<pre><code>media: \"(prefers-color-scheme: light)\"\n</code></pre>"},{"location":"Tool/mkdocs/MkDocs%E7%BE%8E%E5%8C%96/#_5","title":"\u81ea\u5b9a\u4e49\u989c\u8272","text":"<p>\u9009\u989c\u8272\u7f51\u7ad9\uff1ahttps://materialui.co/colors</p> <p>\u8be6\u7ec6\u8bf4\u660ecss\u6587\u4ef6\u5f15\u5165\uff1ahttps://squidfunk.github.io/mkdocs-material/customization/</p> <p>extra.css\u6587\u4ef6\u793a\u4f8b\uff1a</p> <pre><code>:root {\n--md-primary-fg-color:        #EE0F0F;\n--md-primary-fg-color--light: #ECB7B7;\n--md-primary-fg-color--dark:  #90030C;\n}\n</code></pre> <p>Medics.yml\u6587\u4ef6\u793a\u4f8b\uff1a</p> <pre><code>extra_css:\n- stylesheets/extra.css\n</code></pre>"},{"location":"Tool/mkdocs/MkDocs%E7%BE%8E%E5%8C%96/#2","title":"2. \u4fee\u6539\u5bfc\u822a\u680f","text":"<p>\u542f\u7528instant loading\u8fbe\u5230\u6240\u6709\u5185\u90e8\u94fe\u63a5\u4e0a\u7684\u70b9\u51fb\u5c06\u88ab\u62e6\u622a\u5e76\u901a\u8fc7XHR\u53d1\u9001\uff0c\u800c\u65e0\u9700\u5b8c\u5168\u91cd\u65b0\u52a0\u8f7d\u9875\u9762\u7684\u76ee\u7684\uff1a</p> <pre><code>theme:\nfeatures:\n- navigation.instant\n</code></pre> <p>\u5f53anchor tracking\u88ab\u542f\u7528\u65f6\uff0c\u5730\u5740\u680f\u4e2d\u7684URL\u4f1a\u81ea\u52a8\u66f4\u65b0\u6d3b\u52a8\u951a\uff0c\u5982\u76ee\u5f55\u4e2d\u7a81\u51fa\u663e\u793a\u7684\u90a3\u6837:</p> <pre><code>theme:\nfeatures:\n- navigation.tracking\n</code></pre>"},{"location":"Tool/mkdocs/MkDocs%E7%BE%8E%E5%8C%96/#_6","title":"\u6253\u5f00\u5bfc\u822a\u680f","text":"<pre><code>theme:\nfeatures:\n- navigation.tabs\n</code></pre>"},{"location":"Tool/mkdocs/MkDocs%E7%BE%8E%E5%8C%96/#_7","title":"\u4fee\u6539\u5b57\u4f53","text":""},{"location":"Tool/mkdocs/Online%20personal%20notebook%20plan/","title":"Online personal notebook plan","text":""},{"location":"Tool/mkdocs/Online%20personal%20notebook%20plan/#_1","title":"\u5173\u4e8e\u4e2a\u4eba\u7b14\u8bb0\u7684\u5e03\u5c40\u548c\u7ec4\u6210","text":"<p>\u4ee5\u4e0b\u4e3a\u53c2\u8003\u8fc7\u7684\u4e2a\u4eba\u7b14\u8bb0\u6216\u8005\u535a\u5ba2\uff0c\u4ee5\u53ca\u4ed6\u4eec\u7684\u7ec4\u6210\uff1a</p>"},{"location":"Tool/mkdocs/Online%20personal%20notebook%20plan/#1","title":"1. \u6768\u5e0c\u6770\u7684\u4e2a\u4eba\u7f51\u7ad9","text":"<p>https://yang-xijie.github.io \u53c2\u8003\u90e8\u5206\uff1a\u5173\u4e8e\uff08\u4e2a\u4eba\u90e8\u5206\u3001\u7f51\u7ad9\u6784\u5efa\u8bf4\u660e\u3001\u6d4b\u8bd5\u6587\u6863\uff09\u3001\u8f6c\u8f7d\u6587\u7ae0\u3001\u4e09\u6b21\u5143\uff08\u968f\u7b14\u3001\u6587\u7ae0\u3001\u6587\u5b66\u3001\u7231\u597d\uff09\u3001\u5f00\u53d1\uff08\u6280\u672f\u6808\u6574\u7406\uff09\u3001\u535a\u5ba2</p>"},{"location":"Tool/mkdocs/Online%20personal%20notebook%20plan/#2-isshikis-notebook","title":"2. Isshiki\u4fee's Notebook","text":"<p>https://note.isshikih.top/</p> <p>\u53c2\u8003\u90e8\u5206\uff1a\u5c01\u9762\uff08\u989c\u8272\u4e3b\u9898&amp;\u591c\u95f4\u6a21\u5f0f\uff09\u3001\u6280\u672f\u4ea4\u6d41\uff08\u5e38\u7528\u5de5\u5177\uff09\u3001\u8bfe\u7a0b\u7b14\u8bb0</p>"},{"location":"Tool/mkdocs/Online%20personal%20notebook%20plan/#3","title":"3. \u9e64\u7fd4\u4e07\u91cc\u7684\u7b14\u8bb0\u672c","text":"<p>\u53c2\u8003\u90e8\u5206\uff1ahome\\computer science\\web\\others</p>"},{"location":"Tool/mkdocs/Online%20personal%20notebook%20plan/#4-sakuratsuyu","title":"4. sakuratsuyu","text":"<p>\u53c2\u8003\u90e8\u5206\uff1ahttps://sakuratsuyu.github.io/Note/</p>"},{"location":"Tool/mkdocs/Online%20personal%20notebook%20plan/#_2","title":"\u603b\u7ed3\uff1a","text":""},{"location":"Tool/mkdocs/Online%20personal%20notebook%20plan/#home-page","title":"\u4e3b\u9875\uff08Home Page\uff09","text":"<p>\u6b22\u8fce\u90e8\u5206\u3001\u989c\u8272\u4e3b\u9898&amp;\u591c\u95f4\u6a21\u5f0f</p>"},{"location":"Tool/mkdocs/Online%20personal%20notebook%20plan/#computer-science-course","title":"\u8bfe\u7a0b\u7b14\u8bb0 (Computer Science Course)","text":""},{"location":"Tool/mkdocs/Online%20personal%20notebook%20plan/#programming-problem","title":"\u7b97\u6cd5\u5237\u9898 (Programming Problem)","text":""},{"location":"Tool/mkdocs/Online%20personal%20notebook%20plan/#software-development-project","title":"\u9879\u76ee\u5f00\u53d1(Software Development Project)","text":"<p>\u6280\u672f\u6808\u6574\u7406\u3001\u53c2\u4e0e\u9879\u76ee</p>"},{"location":"Tool/mkdocs/Online%20personal%20notebook%20plan/#reprinted-article","title":"\u8f6c\u8f7d\u6587\u7ae0\uff08Reprinted Article\uff09","text":""},{"location":"Tool/mkdocs/Online%20personal%20notebook%20plan/#tool","title":"\u5de5\u5177(Tool)","text":""},{"location":"Tool/mkdocs/Online%20personal%20notebook%20plan/#blog","title":"\u751f\u6d3b\u535a\u5ba2(Blog)","text":"<p>\u968f\u7b14\u3001\u6587\u7ae0\u3001\u6587\u5b66\u3001\u7231\u597d</p>"},{"location":"Tool/mkdocs/Online%20personal%20notebook%20plan/#about-others","title":"\u5173\u4e8e(About &amp; Others)","text":"<p>\u4e2a\u4eba\u90e8\u5206\u3001\u7f51\u7ad9\u6784\u5efa\u8bf4\u660e\u3001\u6d4b\u8bd5\u6587\u6863</p>"},{"location":"Tool/resume/resume/","title":"Resume","text":""},{"location":"Tool/resume/resume/#latex-resume-remplate","title":"LaTex resume remplate","text":"<p>https://github.com/treyhunner/resume</p>"},{"location":"Tool/resume/resume/#resumecls","title":"resume.cls","text":"<pre><code>% resume.cls\n\n% \\documentstyle{resume}\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n% Copyright (C) 2010 by Trey Hunner\n%\n% Copying and distribution of this file, with or without modification,\n% are permitted in any medium without royalty provided the copyright\n% notice and this notice are preserved.  This file is offered as-is,\n% without any warranty.\n%\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\n\\ProvidesClass{resume}[2010/07/10 v0.9 Resume class]\n\n\\LoadClass[11pt,letterpaper]{article}\n\n\\usepackage[parfill]{parskip}       % Do not indent paragraphs\n\\usepackage{array}                  % required for boldface tabular columns\n\\usepackage{ifthen}\n\n\\nofiles                            % .aux files are not needed for resumes\n\\pagestyle{empty}                   % resumes do not need page numbers\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n% HEADINGS: Commands for printing name and address\n\n\\def \\name#1{\\def\\@name{#1}}        % \\name command can be used to set name\n\\def \\@name {}                      % Set \\@name to empty by default\n\n\\def \\addressSep {$\\diamond$}         % Set default address seperator\n\n% One or two address lines can be specified \n\\let \\@addressone \\relax\n\\let \\@addresstwo \\relax\n\n% \\address command can be used to set first and second address (optional)\n\\def \\address #1{\n  \\@ifundefined{@addresstwo}{\n    \\def \\@addresstwo {#1}\n  }{\n    \\def \\@addressone {#1}\n  }\n}\n\n% \\printaddress is used to style an address line (given as input)\n\\def \\printaddress #1{\n  \\begingroup\n    \\def \\\\ {\\addressSep\\ }\n    \\centerline{#1}\n  \\endgroup\n  \\par\n  \\addressskip\n}\n\n% \\printname is used to print the name as a page header\n\\def \\printname {\n  \\begingroup\n    \\centerline{\\textbf{\\MakeUppercase{\\namesize\\@name}}}\n  \\endgroup\n  \\par\n  \\nameskip\n}\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n% DOCUMENT: Create the head of the document\n\n\\AtBeginDocument{                     % Begin document\n  \\printname                        % Print the name specified with \\name\n  \\@ifundefined{@addressone}{}{     % Print the first address if specified\n    \\printaddress{\\@addressone}}\n  \\@ifundefined{@addresstwo}{}{     % Print the second address if specified\n    \\printaddress{\\@addresstwo}}\n}\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n% SECTIONS: Create section headings\n\n% Used to create large resume section\n\\newenvironment{rSection}[1]{\n  \\sectionskip\n  \\textbf{\\MakeUppercase{#1}}\n  \\sectionlineskip\n  \\hrule\n  \\begin{list}{}{\n    \\setlength{\\leftmargin}{1.5em}\n  }\n  \\item[]\n}{\n  \\end{list}\n}\n\n% Used to format job listing\n\\newenvironment{rSubsection}[4]{\n  %%%%%%%%%%%%%%%%%%%%%% Default Layout: %%%%%%%%%%%%%%%%%%%%%%%%\n  %%    Employer (bold)                     Dates (regular)    %%\n  %%    Title (emphasis)                Location (emphasis)    %%\n  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n  \\textbf{#1}                 \\hfill                  {    #2}% Stop a space\n  \\ifthenelse{\\equal{#3}{}}{}{\n  \\\\\n  \\emph{#3}                \\hfill                  \\emph{#4}% Stop a space\n  }\\smallskip\n  % \\cdot used for bullets, items non-indented\n  \\begin{list}{$\\cdot$}{\\leftmargin=0em}\n  \\itemsep -0.5em \\vspace{-0.5em}\n}{\n  \\end{list}\n  \\vspace{0.5em}\n}\n\n\\def\\namesize{\\huge}\n\\def\\nameskip{\\medskip}\n\\def\\addressskip{\\smallskip}\n\\def\\sectionskip{\\bigskip}\n\\def\\sectionlineskip{\\medskip}\n</code></pre>"},{"location":"Tool/resume/resume/#resumetex","title":"resume.tex","text":"<pre><code>\\documentclass{resume}\n\n\\usepackage[left=0.75in,top=0.6in,right=0.75in,bottom=0.6in]{geometry}\n\n\\name{John Q. Public}\n\\address{ 4489 Oxford Lane \\\\ San Antonio, PA 90024  }\n\\address{ 555~$\\cdot$~356~$\\cdot$~7936 \\\\ jpublic@example.edu }\n\n\\def\\nameskip{\\bigskip}\n\\def\\sectionskip{\\medskip}\n\n\\begin{document}\n\n  \\begin{rSection}{Education}\n    {\\bf University of California, Berkeley} \\hfill {\\em June 2004} \\\\ \n    { B.S. in Computer Science \\&amp; Engineering } \\\\\n    { Minor in Linguistics } \\smallskip \\\\\n    { Member of Eta Kappa Nu } \\\\\n    { Member of Upsilon Pi Epsilon } \\\\\n    Overall GPA: 5.678\n  \\end{rSection}\n\n  \\begin{rSection}{Experience}\n\n    \\begin{rSubsection}{ACME, Inc}{October 2010 - Present}{Web Developer}{Palo Alto, CA}\n    \\item Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec a diam lectus.\n    \\item Donec et mollis dolor. Praesent et diam eget libero Adobe Coldfusion egestas mattis sit amet vitae augue.\n    \\item Nam tincidunt congue enim, ut porta lorem Microsoft SQL lacinia consectetur.\n    \\item Donec ut libero sed arcu vehicula ultricies a non tortor. Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n    \\item Pellentesque auctor nisi id magna consequat JavaScript sagittis.\n    \\item Aliquam at massa ipsum. Quisque bash bibendum purus convallis nulla ultrices ultricies.\n    \\end{rSubsection}\n\n    \\begin{rSubsection}{AJAX Hosting}{December 2009 - October 2010}{Lead Developer}{Austin, TX}\n    \\item Aenean ut gravida lorem. Ut turpis felis, Perl pulvinar a semper sed, adipiscing id dolor.\n    \\item Curabitur dapibus enim sit amet elit pharetra tincidunt website feugiat nisl imperdiet. Ut convallis AJAX libero in urna ultrices accumsan.\n    \\item Cum sociis natoque penatibus et magnis dis MySQL parturient montes, nascetur ridiculus mus.\n    \\item In rutrum accumsan ultricies. Mauris vitae nisi at sem facilisis semper ac in est.\n    \\item Nullam cursus suscipit nisi, et ultrices justo sodales nec. Fusce venenatis facilisis lectus ac semper.\n    \\end{rSubsection}\n\n    \\begin{rSubsection}{TinySoft}{January 2008 - April 2010}{Web Designer \\&amp; Developer}{Gainesville, GA}\n    \\item Vivamus PostgreSQL fermentum semper porta. Nunc diam velit PHP, adipiscing ut tristique vitae\n    \\item Maecenas convallis ullamcorper ultricies stylesheets.\n    \\item Quisque mi metus, unit tests CSS ornare sit amet fermentum et, tincidunt et orci.\n    \\item Curabitur venenatis pulvinar tellus gravida ornare. Sed et erat faucibus nunc euismod ultricies ut id\n    \\end{rSubsection}\n\n  \\end{rSection}\n\n  \\begin{rSection}{Technical Strengths}\n    \\begin{tabular}{ @{} &gt;{\\bfseries}l @{\\hspace{6ex}} l }\n      Computer Languages &amp; Prolog, Haskell, AWK, Erlang, Scheme, ML \\\\\n      Protocols \\&amp; APIs &amp; XML, JSON, SOAP, REST \\\\\n      Databases &amp; MySQL, PostgreSQL, Microsoft SQL \\\\\n      Tools &amp; SVN, Vim, Emacs\n    \\end{tabular}\n  \\end{rSection}\n\n\\end{document}\n</code></pre>"},{"location":"Tool/sublime/sublime/","title":"sublime\u7684\u8bbe\u7f6e","text":""},{"location":"Tool/sublime/sublime/#packagecontrol","title":"\u5b89\u88c5PackageControl","text":"<p>\u70b9\u51fb\u4e0a\u65b9\u5de5\u5177\u680f Tools - Install Package Control</p> <p>\u4e0b\u8f7dCppFastOlympicCoding</p>"},{"location":"Tool/sublime/sublime/#fira-code","title":"\u4e0b\u8f7dfira-code","text":"<p>\u524d\u5f80github\u5c06\u9700\u8981\u7684zip\u5305\u4e0b\u8f7d\u4e0b\u6765\uff0c\u7136\u540e\u53f3\u952eopen\u5c31\u884c</p>"},{"location":"Tool/sublime/sublime/#install-package","title":"\u4e0d\u80fd\u4f7f\u7528install package \u7684\u89e3\u51b3\u529e\u6cd5","text":"<p>\u539f\u56e0\u662fmacOS\u7684\u7248\u672c\u592a\u9ad8\u5bfc\u81f4\u6ca1\u6709\u65e7\u7248\u7684SSL\u4e86</p> <p>\u800csublime\u9700\u8981\u4f9d\u8d56openSSL1\u6216\u80052</p> <p>\u53c2\u8003<code>https://github.com/wbond/package_control/issues/1612</code></p> <pre><code>brew install openssl@1.1 &amp;&amp; ln -sf $(set -- `brew --cellar openssl@1.1`/1.1.1? &amp;&amp; echo \"$1\")/lib/libcrypto.dylib /usr/local/lib/\n</code></pre> <p>\u5373\u53ef</p>"},{"location":"Tool/systematicReview/bilibilil/","title":"B\u7ad9\u6559\u7a0b","text":""},{"location":"Tool/systematicReview/bilibilil/#metarmeta","title":"\u3010meta\u5206\u6790\u89c6\u9891\u6559\u7a0b\u3011\u57fa\u4e8eR\u8bed\u8a00\u7684meta\u5206\u6790","text":""},{"location":"Tool/systematicReview/bilibilil/#1-rmeta","title":"1. \u57fa\u4e8er\u8bed\u8a00\u7684meta\u5206\u6790","text":"<p>meta-analysis</p> <p>\u5bf9\u4e0d\u540c\u7814\u7a76\u7ed3\u679c\u8fdb\u884c\u6536\u96c6\u3001\u5408\u5e76\u53ca\u7edf\u8ba1\u5206\u6790\u7684\u65b9\u6cd5</p> <p>\u5c06\u4ee5\u5f80\u7684\u7814\u7a76\u7ed3\u679c\u66f4\u4e3a\u5ba2\u89c2\u5730\u603b\u548c\u53cd\u6620\u51fa\u6765</p> <p>\u52a0\u6743\u5e73\u5747</p>"},{"location":"Tool/systematicReview/bilibilil/#_1","title":"\u5f02\u8d28\u6027","text":"<p>\u7edf\u8ba1\u5b66\u5f02\u8d28\u6027\uff1a</p> <p>Q\u7edf\u8ba1\u91cf\u4ee5\u53caI2\u7edf\u8ba1\u91cf\u53ef\u4ee5\u68c0\u9a8c\u5f02\u8d28\u6027\uff08\u8d8a\u5927\u8d8a\u5f02\u8d28\uff09</p>"},{"location":"Tool/systematicReview/bilibilil/#1","title":"1. \u9009\u9898","text":""},{"location":"Tool/systematicReview/bilibilil/#2","title":"2. \u6587\u732e\u68c0\u7d22","text":"<p>MEDLINE, cochranne library, Ovid, embase, web of science, pubmed</p> <p>pubmed MeSH\u4e3b\u9898\u8bcd\u68c0\u7d22</p>"},{"location":"Tool/systematicReview/bilibilil/#3-r","title":"3. R\u4f5c\u56fe","text":"<p>\u68ee\u6797\u56fe\u3001\u6f0f\u6597\u56fe\u3001\u654f\u611f\u6027\u5206\u6790\u548c\u4e9a\u7ec4\u5206\u6790\u5c55\u793a\uff08\u836f\u654f\uff09</p>"},{"location":"Tool/systematicReview/bilibilil/#2-metar","title":"2. \u4f20\u7edf\u610f\u4e49\u4e0a\u7684meta\u5206\u6790\u5728r\u4e0a\u7684\u5b9e\u73b0","text":"<p>Q\u68c0\u9a8c0.05</p> <p>I2\u68c0\u9a8c 40%\uff1f</p> <p>fixed effect model \u56fa\u5b9a\u6548\u5e94\u6a21\u578b</p> <p>random effect model \u968f\u673a\u6548\u5e94\u6a21\u578b</p>"},{"location":"Tool/systematicReview/bilibilil/#3-metar","title":"3. \u8bca\u65ad\u6027\u5b9e\u9a8c\u7684meta\u5206\u6790\u5728r\u4e2d\u7684\u5b9e\u73b0","text":""},{"location":"Tool/systematicReview/bilibilil/#4-rrob","title":"4. \u5982\u4f55\u7528r\u505a\u51fa\u504f\u501a\u98ce\u9669\u8bc4\u4f30\u56fe\uff08ROB\uff09","text":""},{"location":"Tool/systematicReview/bilibilil/#5-rmeta","title":"5. \u5982\u4f55\u7528r\u8bed\u8a00\u5b9e\u73b0\u7d2f\u79efmeta\u5206\u6790","text":""},{"location":"Tool/systematicReview/bilibilil/#_2","title":"B\u7ad9\u6559\u7a0b","text":""},{"location":"Tool/systematicReview/bilibilil/#_3","title":"\u7cfb\u7edf\u6027\u6587\u732e\u7efc\u8ff0\u5199\u4f5c\u6559\u7a0b","text":""},{"location":"Tool/systematicReview/bilibilil/#1_1","title":"1. \u4ec0\u4e48\u662f\u6587\u732e\u7efc\u8ff0","text":""},{"location":"Tool/systematicReview/bilibilil/#2_1","title":"2. \u4e3a\u4ec0\u4e48\u8981\u5199\u6587\u732e\u7efc\u8ff0","text":""},{"location":"Tool/systematicReview/bilibilil/#3","title":"3. \u6587\u732e\u7efc\u8ff0\u5206\u7c7b","text":""},{"location":"Tool/systematicReview/bilibilil/#4","title":"4. \u7cfb\u7edf\u6027\u7efc\u8ff0\u662f\u4ec0\u4e48","text":""},{"location":"Tool/systematicReview/bilibilil/#5","title":"5. \u7cfb\u7edf\u6027\u7efc\u8ff0\u600e\u4e48\u5199","text":""},{"location":"Tool/systematicReview/bilibilil/#_4","title":"\u56fe\u4e66\u9986\u7cbe\u51c6\u83b7\u53d6\u751f\u7269\u533b\u5b66\u6587\u732e\u8bb2\u5ea7","text":""},{"location":"Tool/systematicReview/bilibilil/#1_2","title":"1. \u573a\u666f\u76ee\u7684","text":"<p>\u627e\u5230\u611f\u5174\u8da3\u3001research gap\uff0c\u627e\u5230\u7814\u7a76\u65b9\u5411</p> <p>The meta-analysis of exercise for osteoarthritis --- \uff08\u6c42\u5168\uff09</p>"},{"location":"Tool/systematicReview/bilibilil/#2_2","title":"2. \u6587\u732e\u7c7b\u578b","text":"<p>\u56fe\u4e66\u9986\u9986\u85cf\u8d44\u6e90</p> <p>\u641c\u7d22\u5f15\u64ce\uff1agoogle scholar</p> <p>Meta-analysis\u9700\u8981\u9ad8\u8d28\u91cf\u7684\u5b9e\u9a8c\u6587\u732e</p>"},{"location":"Tool/systematicReview/bilibilil/#3_1","title":"3. \u83b7\u53d6\u65b9\u5f0f","text":"<p>\u751f\u7269\u533b\u5b66\u4e3b\u8981\u7684\u6570\u636e\u5e93\uff1apubmed, medline, embase, cbm\uff08\u4e2d\u56fd\u7684pbmed\uff09, web of science</p> <p>pubmed \u57fa\u672c\u4e0a\u4f1a\u5305\u542bmedline</p> <p>embase\u548cpubmed\u6709\u90e8\u5206\u4ea4\u96c6</p> <p>web of science\uff08\u6709\u6838\u5fc3\u7b49\u7ea7\uff0c\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u7b5b\u9009\u51fa\u9ad8\u8d28\u91cf\u7684\u671f\u520a\uff09</p>"},{"location":"Tool/systematicReview/bilibilil/#4_1","title":"4. \u68c0\u7d22\u65b9\u6cd5","text":"<p>pubmed\u6536\u5f55\u8303\u56f4\uff1amedline, old-midline(1950-1965, \u6ca1\u6709MeSH\u5b57\u6bb5), pre-medline </p>"},{"location":"Tool/systematicReview/bilibilil/#1_3","title":"1. \u68c0\u7d22\u8bcd\u7684\u9009\u62e9\u4e0e\u6269\u5145","text":"<p>\u81ea\u7136\u8bed\u8a00\u68c0\u7d22 -- \u81ea\u7531\u8bcd</p> <p>\u4eba\u5de5\u8bed\u8a00\u68c0\u7d22 -- \u4e3b\u9898\u8bcd \uff08\u51c6\u786e\u3001\u800c\u4e14\u641e\u5b9a\u4e86\u540c\u4e49\u8bcd\uff0c\u4f46\u662f\u6709\u5f88\u591a\u8fd8\u6ca1\u8fdb\u884c\u8fc7MeSH\u6807\u6ce8\u7684\u6587\u7ae0\uff09</p>"},{"location":"Tool/systematicReview/bilibilil/#2_3","title":"2. \u68c0\u7d22\u5f0f\u7684\u7f16\u5236","text":""},{"location":"Tool/systematicReview/bilibilil/#3_2","title":"3. \u68c0\u7d22\u65b9\u6cd5\u7684\u9009\u62e9","text":""},{"location":"Tool/systematicReview/bilibilil/#4_2","title":"4. \u68c0\u7d22\u7b56\u7565\u7684\u8c03\u6574","text":""},{"location":"Tool/systematicReview/bilibilil/#dissertation-meta-analysis-of-the-relationship-between-male-infertility-and-plasma-entrogen-and-plasma-androgen-concentration","title":"Dissertation: Meta-analysis of the relationship between male infertility and plasma entrogen and plasma androgen concentration","text":"<p>also, the sperm count and the sperm quality</p> <p>\u5173\u952e\u8bcd\u786e\u5b9a\u6cd5\uff1a</p> <p>male infertility</p> <p>plasma entrogen, androgen</p> <p>PICO\u786e\u5b9a\u6cd5\uff1a</p> <p>participant: male infertility</p> <p>intervention</p> <p>compare</p> <p>outcome</p> \u5173\u952e\u8bcd \u4e3b\u9898\u8bcd \u81ea\u7531\u8bcd male infertility aspermia, asthenozoospermia, azoospermia, oligospermia, sertoli Cell-Only Syndrome, teratozoospermia sperm count androgens dihydrotestosterone, nandrolone, oxandrolone, oxymetholone, stanozolol, testosterone estrogen"},{"location":"Tool/systematicReview/bilibilil/#_5","title":"\u4e3b\u9898\u8bcd\u786e\u8ba4","text":"<p>\u4f7f\u7528pubmed mesh database\u786e\u8ba4\u4e3b\u9898\u8bcd</p>"},{"location":"Tool/systematicReview/bilibilil/#male-infertilityhttpswwwncbinlmnihgovmesh68007248","title":"\u5173\u952e\u8bcdmale infertility\uff08https://www.ncbi.nlm.nih.gov/mesh/68007248\uff09","text":"<p>MeSH\u4e3b\u9898\u8bcdtree</p> <p>Aspermia, Asthenozoospermia, Azoospermia, Oligospermia, Sertoli Cell-Only Syndrome, Teratozoospermia</p>"},{"location":"Tool/systematicReview/bilibilil/#sperm-count-httpswwwncbinlmnihgovmesh68013076","title":"\u5173\u952e\u8bcdsperm count \uff08https://www.ncbi.nlm.nih.gov/mesh/68013076\uff09","text":"<p>\u6ca1\u6709\u5176\u4ed6\u81ea\u7531\u8bcd</p>"},{"location":"Tool/systematicReview/bilibilil/#androgens-httpswwwncbinlmnihgovmesh68000728","title":"\u5173\u952e\u8bcdandrogens \uff08https://www.ncbi.nlm.nih.gov/mesh/68000728\uff09","text":"<p>https://www.ncbi.nlm.nih.gov/mesh/82000728 \uff08[Pharmacological Action]\uff09</p> <p>Dihydrotestosterone, Nandrolone, Oxandrolone, Oxymetholone, Stanozolol, Testosterone</p>"},{"location":"Tool/systematicReview/bilibilil/#estrogen-httpswwwncbinlmnihgovmesh68004967","title":"\u5173\u952e\u8bcdestrogen \uff08https://www.ncbi.nlm.nih.gov/mesh/68004967\uff09","text":"<p>https://www.ncbi.nlm.nih.gov/mesh/82004967\uff08[Pharmacological Action]\uff09</p> <p>Chlorotrianisene (MeSH Term) Coumestrol (MeSH Term) Dienestrol (MeSH Term) Diethylstilbestrol (MeSH Term) Epimestrol (MeSH Term) Equol (MeSH Term) Estradiol (MeSH Term) Estrogenic Steroids, Alkylated (MeSH Term) Estrogens, Conjugated (USP) (MeSH Term) Estrogens, Esterified (USP) (MeSH Term) Estrone (MeSH Term) Ethinyl Estradiol (MeSH Term) Genistein (MeSH Term) Hexestrol (MeSH Term) Mestranol (MeSH Term) Quinestrol (MeSH Term) Zearalenone (MeSH Term) Zeranol (MeSH Term)</p>"},{"location":"Tool/systematicReview/bilibilil/#sperm-count","title":"\u5173\u952e\u8bcdsperm count","text":"<p>((male infertility) OR (sperm count)) AND ((androgen) OR (estrogen))</p> <p>((\"Infertility, Male\"[Mesh]) OR (\"Sperm Count\"[Mesh])) AND ((\"Androgens\"[Mesh]) OR (\"Androgens\" [Pharmacological Action]) OR (\"Estrogens\"[Mesh]) OR (\"Estrogens\" [Pharmacological Action]))</p>"},{"location":"Tool/systematicReview/jhu/","title":"JHU Introduction to Systematic Review and Meta-Analysis","text":""},{"location":"Tool/systematicReview/jhu/#module-1-introduction","title":"Module 1 Introduction","text":""},{"location":"Tool/systematicReview/jhu/#module-2-framing-the-question","title":"Module 2 Framing the Question","text":""},{"location":"Tool/systematicReview/jhu/#module-3-searching-principles-and-bias-assessment","title":"Module 3 Searching Principles and Bias Assessment","text":""},{"location":"Tool/systematicReview/jhu/#module-4-minimizing-metabias-qualitative-synthesis-and-interpreting-results","title":"Module 4 Minimizing Metabias, Qualitative Synthesis, and Interpreting Results","text":""},{"location":"Tool/systematicReview/jhu/#module-5-planning-the-meta-analysis-and-statistical-methods","title":"Module 5 Planning the Meta-analysis and Statistical Methods","text":""},{"location":"Tool/systematicReview/jhu/#module-6-wrap-up-and-final-peer-review-assignment","title":"Module 6 Wrap Up and Final Peer Review Assignment","text":""},{"location":"Tool/systematicReview/notes/","title":"Notes for My Dissertation","text":"<ul> <li> 1. \u5b66\u4e60JHU \u7684 Introduction to Systematic Review and Meta-Analysis</li> </ul> <p>\u5173\u4e8er\u8bed\u8a00\u7684meta\u5206\u6790\uff0cgoogle\u641c\u7d22meta analysis r tutorial</p> <p>\u4e0b\u8f7d\u4e86\u4e00\u672cmeta-analysis with R</p>"},{"location":"Tool/vim/vim/","title":"Vim","text":""},{"location":"Tool/vim/vim/#neovim","title":"Neovim","text":""},{"location":"Tool/vim/vim/#_1","title":"\u53c2\u8003\u6559\u7a0b","text":"<p>https://www.bilibili.com/video/BV1Td4y1578E/?spm_id_from=333.1007.top_right_bar_window_history.content.click&amp;vd_source=eef58fdde5150dcee73d678306f9cd48</p>"},{"location":"Tool/vim/vim/#neovim_1","title":"\u4e0b\u8f7dneovim","text":"<pre><code>brew install neovim\n</code></pre>"},{"location":"Tool/vim/vim/#lua","title":"\u80cc\u666f\uff1aLua","text":"<p>Lua \u662f\u4e00\u4e2a\u5c0f\u5de7\u7684\u811a\u672c\u8bed\u8a00\u3002\u4f5c\u8005\u662f\u5df4\u897f\u4eba\u3002\u8be5\u8bed\u8a00\u7684\u8bbe\u8ba1\u76ee\u7684\u662f\u4e3a\u4e86\u5d4c\u5165\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u4ece\u800c\u4e3a\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u7075\u6d3b\u7684\u6269\u5c55\u548c\u5b9a\u5236\u529f\u80fd\u3002</p> <p>Lua \u7531\u6807\u51c6 C \u7f16\u5199\u800c\u6210\uff0c\u4ee3\u7801\u7b80\u6d01\u4f18\u7f8e\uff0c\u51e0\u4e4e\u5728\u6240\u6709\u64cd\u4f5c\u7cfb\u7edf\u548c\u5e73\u53f0\u4e0a\u90fd\u53ef\u4ee5\u7f16\u8bd1\uff0c\u8fd0\u884c\u3002</p> <p>Lua \u811a\u672c\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u88ab C/C++ \u4ee3\u7801\u8c03\u7528\uff0c\u4e5f\u53ef\u4ee5\u53cd\u8fc7\u6765\u8c03\u7528 C/C++ \u7684\u51fd\u6570\uff0c\u8fd9\u4f7f\u5f97 Lua \u5728\u5e94\u7528\u7a0b\u5e8f\u4e2d\u53ef\u4ee5\u88ab\u5e7f\u6cdb\u5e94\u7528\u3002\u4e0d\u4ec5\u4ec5\u4f5c\u4e3a\u6269\u5c55\u811a\u672c\uff0c\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u666e\u901a\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u4ee3\u66ff XML,Ini \u7b49\u6587\u4ef6\u683c\u5f0f\uff0c\u5e76\u4e14\u66f4\u5bb9\u6613\u7406\u89e3\u548c\u7ef4\u62a4\u3002</p>"},{"location":"Tool/vim/vim/#lua-annotation","title":"lua annotation","text":"<p>Lua\u4e2d\u6709\u4e24\u79cd\u6ce8\u91ca\uff1a\u884c\u6ce8\u91ca\u548c\u5757\u6ce8\u91ca\u3002 \u884c\u6ce8\u91ca\u4ee5\u201c--\u201d\u5f00\u5934\uff0c\u53ef\u4ee5\u6ce8\u91ca\u8fd9\u4e00\u884c\u540e\u9762\u7684\u5185\u5bb9\u3002 \u5757\u6ce8\u91ca\u4ee5\u201c--[[\u201d\u5f00\u59cb\uff0c\u4ee5\u201c--]]\u201d\u7ed3\u5c3e\uff0c\u53ef\u4ee5\u6ce8\u91ca\u8fd9\u4e2a\u8303\u56f4\u5185\u7684\u6574\u4e2a\u5185\u5bb9\uff1b\u5757\u6ce8\u91ca\u53ef\u4ee5\u6ce8\u91ca\u591a\u884c\u5185\u5bb9\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u793a\u4f8b\uff1a</p> <pre><code>print(\"hello\")\n-- \u8fd9\u662f\u884c\u6ce8\u91ca\n--[[\n\u8fd9\u662f\u5757\u6ce8\u91ca\uff0c\n\u5757\u6ce8\u91ca\u53ef\u4ee5\n\u6ce8\u91ca\u591a\u884c\uff01\n--]]\n</code></pre>"},{"location":"Tool/vim/vim/#vim-syntax","title":"vim syntax","text":"<pre><code>-- source the init.lua again\n:so\n</code></pre>"},{"location":"Tool/vim/vim/#all-the-commands-used-to-customize-the-neovim","title":"All the commands used to customize the neovim","text":""},{"location":"Tool/vim/vim/#terminal-commands","title":"terminal commands","text":"<pre><code>mkdir .config/nvim\n# \u521b\u5efa\u7a7a\u6587\u4ef6\ntouch init.lua \nmkdir .config/\n</code></pre>"},{"location":"Tool/vim/vim/#initlua","title":"init.lua","text":"<pre><code>vim.opt.relativenumber = true\nvim.opt.number = true\n</code></pre>"},{"location":"Tool/vim/vim/#neovim-ide-from-scratch","title":"Neovim IDE from Scratch","text":"<p>\u53c2\u8003youtube\u89c6\u9891</p> <p>https://www.youtube.com/watch?v=ctH-a-1eUME&amp;list=PLhoH5vyxr6Qq41NFL4GvhFp-WLd5xzIzZ</p> <p>github\u4ed3\u5e93\uff1a</p> <p>https://github.com/LunarVim/Neovim-from-scratch/tree/01-options</p> <pre><code>\u279c  ~ git clone git@github.com:ChristianChiarulli/Neovim-from-scratch.git ~/.config/nvim\n</code></pre> <p>\u8fd9\u662f\u4f7f\u7528vim\u7f16\u8f91\u7684\u7b2c\u4e00\u884c\u6587\u5b57</p>"},{"location":"Tool/vim/vim/#neovim-as-an-ide-for-r","title":"neovim as an IDE for R","text":"<p>How to use Neovim or VIM Editor as an IDE for R</p>"}]}