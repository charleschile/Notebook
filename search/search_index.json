{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"About Me","text":"<p> about me </p> <p>Charles Chi Le  (\u4e50\u9a70 in simplified Chinese)</p> <p>         Hi there! I am currently a Master's Student in Electrical and Computer Engineering with a concentration in software development at Duke University .        </p> <p>I graduated from Zhejiang University (ZJU)  and  the University of Edinburgh (UoE) in June 2022. I received dual bachelor's degrees in Biomedical Sciences from both ZJU and UoE. </p> <p>         I am also an enthusiastic self-learner and interested in various fields of computer science. Here are my course notes for all the courses that I have taken where I share my self-learning experiences and resources.        </p> <p>         For future career interests, I am particularly interested in software engineering.          </p> <p> Contact Me: <ul> <li>CV</li> <li>\u4e2d\u6587\u7b80\u5386</li> <li>Github</li> <li>email</li> </ul> </p> <p> Professional Experiences: <ul> <li>Backend Software Development Engineer Intern @ MeiTuan - Food Delivery Advertising Engine Team &amp; Advertising Basic Retrieval Team</li> </ul> </p>"},{"location":"About/interesting/","title":"something interesting","text":"<p>prompt engineering for developers https://www.deeplearning.ai/short-courses/ deep learning \u5434\u6069\u8fbe \u5f00\u53d1\u8005\u7528gpt\u5199\u4ee3\u7801</p>"},{"location":"About/me/","title":"About Me","text":"<p> Charles Chi Le (\u4e50\u9a70) Graduated @ ZJU &amp; UoE majoring in Biomedical Sciences Currently Master's student @ Duke majoring in Electrical and Computer Engineering (specialized in software development)</p>"},{"location":"About/test/","title":"Test","text":""},{"location":"About/test/#mac","title":"\u65b0mac\u6d4b\u8bd5","text":""},{"location":"About/test/#mklink","title":"\u6d4b\u8bd5mklink","text":""},{"location":"About/test/#_1","title":"\u6d4b\u8bd5\u4ee3\u7406","text":""},{"location":"About/test/#0918-rog-windows","title":"0918 \u65b0rog windows\u7b14\u8bb0\u672c\u6d4b\u8bd5","text":""},{"location":"About/test/#0803-934","title":"0803 9:34","text":""},{"location":"About/test/#this-is-a-test-web-page","title":"This is a test web page","text":""},{"location":"About/test/#test-the-github","title":"Test the github","text":""},{"location":"About/test/#20230712-mac","title":"20230712 \u6d4b\u8bd5\u65b0mac\u80fd\u5426\u987a\u5229\u8fd0\u884c","text":""},{"location":"About/test/#0","title":"0. \u6d4b\u8bd5\u65b0\u7535\u8111\u662f\u5426\u80fd\u591f\u540c\u6b65\u7b14\u8bb0","text":""},{"location":"About/test/#1-b","title":"1. \u6d4b\u8bd5b\u7ad9\u89c6\u9891\u5d4c\u5165","text":"<p>\u4ee3\u7801\u5757\uff1a</p> <pre><code>&lt;iframe src=\"//player.bilibili.com/player.html?aid=14909587&amp;bvid=BV1Hx411V7n9&amp;cid=24297387&amp;page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" width=\"800\" height=\"500\"&gt; &lt;/iframe&gt;\n</code></pre>"},{"location":"About/test/#2","title":"2. \u6d4b\u8bd5\u56fe\u7247\u63d2\u5165","text":"<p>\u6b63\u786e\u4ee3\u7801\u5757\uff1a</p> <pre><code>![\u5317\u957f\u5c3e\u5c71\u96c0](1.jpeg)\n</code></pre> <p>\u4ee5\u4e0b\u90fd\u662f\u9519\u8bef\u4ee3\u7801</p> <pre><code>![/docs/pics/\u5fbd\u7ae0.png](/docs/pics/\u5fbd\u7ae0.png)\n![/pics/\u5fbd\u7ae0.png](/pics/\u5fbd\u7ae0.png)\n![docs/pics/\u5fbd\u7ae0.png](docs/pics/\u5fbd\u7ae0.png)\n![pics/\u5fbd\u7ae0.png](pics/\u5fbd\u7ae0.png)\n</code></pre>"},{"location":"About/test/#3","title":"3. \u6d4b\u8bd5\u97f3\u4e50\u63d2\u5165","text":"<p>\u4ee3\u7801\u5757\uff1a</p> <pre><code>&lt;iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"450\" src=\"//music.163.com/outchain/player?type=0&amp;id=5156824747&amp;auto=0&amp;height=430\"&gt;&lt;/iframe&gt;\n</code></pre> <p>height\u4e3a\u63d2\u5165\u6a21\u5757\u7684\u9ad8\u5ea6</p> <p>auto\u4e3a\u4e00\u65f6\uff0c\u4e3a\u81ea\u52a8\u64ad\u653e\u6a21\u5f0f\uff0c\u4e3a0\u65f6\uff0c\u4e3a\u975e\u81ea\u52a8\u64ad\u653e\u6a21\u5f0f</p> <p>\u4ee3\u7801\u5757\uff1a</p> <pre><code>&lt;iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"100%\" height=\"100\" src=\"https://music.163.com/outchain/player?type=2&amp;amp;id=38018486&amp;amp;auto=0&amp;amp;height=100\"&gt;&lt;/iframe&gt;\n</code></pre> <p>https://music.163.com/#/song?id=1808040375&amp;userid=1455818378</p> <p>https://music.163.com/playlist?id=7799509690&amp;userid=1455818378</p> Future bass <p>type=0\u662f\u64ad\u653e\u5217\u8868</p> <p>type=2\u662f\u5355\u66f2</p> <p>hello! here is Chi Le</p>"},{"location":"Course/","title":"Computer Science Course","text":"<p>Abstract</p> <p>\u8fd9\u91cc\u662fCS\u8bfe\u7a0b\u76f8\u5173\u7684\u7b14\u8bb0</p> <p>\u5305\u62ec\u4e86\u4ece\u8ba1\u7b97\u673a\u3001\u6570\u5b66\u5165\u95e8\u8bfe\u5230\u540e\u7eedcs\u8fdb\u9636\u8bfe\u7a0b\uff0c</p> <p>\u6b63\u5728\u4e0d\u65ad\u603b\u7ed3\u66f4\u65b0\u7b14\u8bb0\u4e2d...</p>"},{"location":"Course/#table-of-contents","title":"Table of Contents","text":"<ul> <li> <p>Duke Introductory C Programming</p> <ul> <li>Course information</li> <li>Module 1 Programming Fundamentals</li> </ul> </li> <li> <p>Harvard CS50's introduction to computer science</p> <ul> <li>cs50 notes</li> </ul> </li> <li> <p>Berkeley CS61A: Structure and Interpretation of Computer Programs</p> <ul> <li>Course information</li> <li>week 1</li> </ul> </li> <li> <p>Berkeley CS61B: Data Structures and Algorithms</p> <ul> <li>Course information</li> <li>week 1</li> </ul> </li> </ul>"},{"location":"Course/15445/1/","title":"CMU 15445","text":"<p>\u6570\u636e\u5e93\uff1aorganized collection of inter-related data that models some aspect of the real-world</p> <p>sqlLite</p> <p>\u6570\u636e\u5e93\u662f\u5927\u90e8\u5206\u8ba1\u7b97\u673a\u8f6f\u4ef6\u7684\u6838\u5fc3</p> <p>Flat File Strawman\uff1a\u666e\u901a\u7684\u5b58\u653e\u65b9\u6cd5\u4f7f\u7528\u6587\u4ef6\u5b58\u6570\u636e</p> <p>\u4e00\u4e2a\u4e13\u8f91\u600e\u4e48\u53ea\u5bf9\u5e94\u4e00\u4e2a\u97f3\u4e50\u5bb6\uff1f</p> <p>\u5982\u679c\u6709\u4eba\u5c06\u5e74\u4efd\u91cd\u5199\u6210invalid\u5b57\u7b26\u4e32\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1f</p> <p>\u5982\u679c\u4e00\u5f20\u4e13\u8f91\u6709\u5f88\u591a\u4e2a\u97f3\u4e50\u5bb6\u8be5\u600e\u4e48\u529e\uff1f</p> <p>\u5982\u679c\u5728\u4e00\u4e2a\u4e13\u8f91\u4e0a\u5220\u9664\u4e00\u4e2a\u6b4c\u624b\uff1f</p> <p>\u5982\u4f55\u627e\u4e00\u6761\u7279\u5b9a\u7684\u8bb0\u5f55\uff1f</p> <p>\u5982\u4f55\u5efa\u7acb\u4e00\u4e2a\u65b0\u7684\u5e94\u7528\u6765\u7528\u8fd9\u4e2a\u6570\u636e\u5e93\uff1f</p> <p>\u5982\u4f55\u8ba9\u591a\u4e2a\u4eba\u540c\u65f6\u6539\u4e00\u4efd\u6587\u4ef6\uff1f</p> <p>\u5982\u679c\u66f4\u65b0\u6570\u636e\u7684\u65f6\u5019\u6302\u4e86\u600e\u4e48\u529e\uff1f</p> <p>\u5982\u679c\u6587\u4ef6\u8981\u590d\u5236\u6210\u591a\u4efd\u8be5\u600e\u4e48\u529e\uff1f</p> <p>database management system (DBMS)</p> <p>is software that allows applications to store and analyze information in a database</p> <p>definition, creation, querying, update, administration</p> <p>\u5b9a\u4e49\uff0c\u521b\u5efa\uff0c\u67e5\u8be2\uff0c\u66f4\u65b0\u548c\u7ba1\u7406\u6570\u636e</p> <p>Relational Model</p> <p>\u5173\u7cfb\u578b\u6570\u636e\u5e93:</p> <p>\u9700\u8981\u5728\u7b80\u5355\u6613\u7528\u7684\u6570\u636e\u7ed3\u6784\u4e2d\u5b58\u50a8</p> <p>\u9700\u8981\u7528\u9ad8\u7ea7\u7684\u8bed\u8a00\uff0c\u63a5\u8fd1\u81ea\u7136\u8bed\u8a00</p> <p>\u7269\u7406\u4e0a\u5b58\u50a8\u6570\u636e\u65f6\u5f00\u53d1\u6570\u636e\u5e93\u7684\u4eba\u8003\u8651\u7684\u4e8b\u60c5</p> <p>data model \u8868\u8fbe\u7684\u5b57\u6bb5</p> <p>schema \u4e00\u7ec4\u6570\u636e\u7ec4\u6210\u8d77\u6765\u7528model\u7684\u65b9\u6cd5</p>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE1/","title":"\u7b2c1\u8bb2 C++\u5165\u95e8\u53ca\u7b80\u5355\u7684\u987a\u5e8f\u7ed3\u6784","text":""},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE1/#1","title":"1. \u53d8\u91cf\u7684\u5b9a\u4e49","text":"<ol> <li>\u53d8\u91cf\u7684\u5b9a\u4e49 \u53d8\u91cf\u5fc5\u987b\u5148\u5b9a\u4e49\uff0c\u624d\u53ef\u4ee5\u4f7f\u7528\u3002\u4e0d\u80fd\u91cd\u540d\u3002 \u53d8\u91cf\u5b9a\u4e49\u7684\u65b9\u5f0f\uff1a <pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main()\n{\n    int a = 5;\n    int b, c = a, d = 10 / 2;\n\n    return 0;\n\n}\n</code></pre></li> </ol>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE1/#2","title":"2. \u8f93\u5165\u8f93\u51fa","text":"<p>\u6574\u6570\u7684\u8f93\u5165\u8f93\u51fa\uff1a <pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main()\n{\n    int a, b;\n    cin &gt;&gt; a &gt;&gt; b;\n    cout &lt;&lt; a + b &lt;&lt; endl;\n    return 0;\n}\n</code></pre> \u5b57\u7b26\u4e32\u7684\u8f93\u5165\u8f93\u51fa\uff1a <pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nusing namespace std;\n\nint main()\n{\n    string str;\n    cin &gt;&gt; str;\n    cout &lt;&lt; str;\n    return 0;\n}\n</code></pre> \u8f93\u5165\u8f93\u51fa\u591a\u4e2a\u4e0d\u540c\u7c7b\u578b\u7684\u53d8\u91cf\uff1a <pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nusing namespace std;\n\nint main()\n{\n    int a, b;\n    string str;\n\n    cin &gt;&gt; a;\n    cin &gt;&gt; b &gt;&gt; str;\n\n    cout &lt;&lt; str &lt;&lt; \" !!! \" &lt;&lt; a + b &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre></p>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE1/#3","title":"3. \u8868\u8fbe\u5f0f","text":"<p>\u6574\u6570\u7684\u52a0\u51cf\u4e58\u9664\u56db\u5219\u8fd0\u7b97\uff1a <pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nusing namespace std;\n\nint main()\n{\n    int a = 6 + 3 * 4 / 2 - 2;\n\n    cout &lt;&lt; a &lt;&lt; endl;\n\n    int b = a * 10 + 5 / 2;\n\n    cout &lt;&lt; b &lt;&lt; endl;\n\n    cout &lt;&lt; 23 * 56 - 78 / 3 &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre></p> <p>\u6d6e\u70b9\u6570\uff08\u5c0f\u6570\uff09\u7684\u8fd0\u7b97\uff1a <pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nusing namespace std;\n\nint main()\n{\n    float x = 1.5, y = 3.2;\n\n    cout &lt;&lt; x * y &lt;&lt; ' ' &lt;&lt; x + y &lt;&lt; endl;\n\n    cout &lt;&lt; x - y &lt;&lt; ' ' &lt;&lt; x / y &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre> \u6574\u578b\u53d8\u91cf\u7684\u81ea\u589e\u3001\u81ea\u51cf\uff1a <pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nusing namespace std;\n\nint main()\n{\n    int a = 1;\n    int b = a ++ ;\n\n    cout &lt;&lt; a &lt;&lt; ' ' &lt;&lt; b &lt;&lt; endl;\n\n    int c = ++ a;\n\n    cout &lt;&lt; a &lt;&lt; ' ' &lt;&lt; c &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre> \u53d8\u91cf\u7684\u7c7b\u578b\u8f6c\u6362\uff1a <pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nusing namespace std;\n\nint main()\n{\n    float x = 123.12;\n\n    int y = (int)x;\n\n    cout &lt;&lt; x &lt;&lt; ' ' &lt;&lt; y &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre></p>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE1/#4","title":"4. \u987a\u5e8f\u8bed\u53e5","text":"<p>(1) \u8f93\u51fa\u7b2c\u4e8c\u4e2a\u6574\u6570\uff1a <pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nusing namespace std;\n\nint main()\n{\n    int a, b, c;\n    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;\n    cout &lt;&lt; b &lt;&lt; endl;\n    return 0;\n}\n</code></pre></p> <p>(2) \u8ba1\u7b97 (a + b) * c\u7684\u503c <pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nusing namespace std;\n\nint main()\n{\n    int a, b, c;\n\n    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;\n\n    cout &lt;&lt; (a + b) * c &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre></p> <p>(3) \u5e26\u4f59\u9664\u6cd5 <pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nusing namespace std;\n\nint main()\n{\n    int a, b;\n\n    cin &gt;&gt; a &gt;&gt; b;\n\n    int c = a / b, d = a % b;\n\n    cout &lt;&lt; c &lt;&lt; ' ' &lt;&lt; d &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre> (4) \u6c42\u53cd\u4e09\u4f4d\u6570\uff1a <pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nusing namespace std;\n\nint main()\n{\n    int n;\n    cin &gt;&gt; n;\n\n    int a = n % 10;\n    n = n / 10;\n    int b = n % 10;\n    n = n / 10;\n    int c = n;\n\n    cout &lt;&lt; a &lt;&lt; b &lt;&lt; c &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre> (5) \u4ea4\u6362\u4e24\u4e2a\u6574\u6570 <pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nusing namespace std;\n\nint main()\n{\n    int a = 3, b = 4;\n\n    int t = a;\n    a = b;\n    b = t;\n\n    cout &lt;&lt; a &lt;&lt; ' ' &lt;&lt; b &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre> (6) \u8f93\u51fa\u83f1\u5f62 <pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nusing namespace std;\n\nint main()\n{\n    char c;\n\n    cin &gt;&gt; c;\n\n    cout &lt;&lt; \"  \" &lt;&lt; c &lt;&lt; endl;\n    cout &lt;&lt; \" \" &lt;&lt; c &lt;&lt; c &lt;&lt; c &lt;&lt; endl;\n    cout &lt;&lt; c &lt;&lt; c &lt;&lt; c &lt;&lt; c &lt;&lt; c &lt;&lt; endl;\n    cout &lt;&lt; \" \" &lt;&lt; c &lt;&lt; c &lt;&lt; c &lt;&lt; endl;\n    cout &lt;&lt; \"  \" &lt;&lt; c &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre></p>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE5/","title":"\u7b2c\u4e94\u8bb2 \u5b57\u7b26\u4e32","text":"<p>\u5b57\u7b26\u4e32\u662f\u8ba1\u7b97\u673a\u4e0e\u4eba\u7c7b\u6c9f\u901a\u7684\u91cd\u8981\u624b\u6bb5\u3002\u2014\u2014\u95eb\u5b66\u707f</p> <p>\u5df2\u7ecf\u5728\u6570\u5b66\u4e0a\u8bc1\u660e\u4e86\u7a0b\u5e8f\u53ef\u4ee5\u5b9e\u73b0\u4efb\u610f\u7684\u903b\u8f91</p>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE5/#1-ascii","title":"1. \u5b57\u7b26\u4e0e\u6574\u6570\u7684\u8054\u7cfb\u2014\u2014ASCII\u7801","text":"<p>\u6bcf\u4e2a\u5e38\u7528\u5b57\u7b26\u90fd\u5bf9\u5e94\u4e00\u4e2a-128 ~ 127\u7684\u6570\u5b57\uff0c\u4e8c\u8005\u4e4b\u95f4\u53ef\u4ee5\u76f8\u4e92\u8f6c\u5316\u3002\u6ce8\u610f\uff1a\u76ee\u524d\u8d1f\u6570\u6ca1\u6709\u4e0e\u4e4b\u5bf9\u5e94\u7684\u5b57\u7b26\u3002</p> <pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main()\n{\n    char c = 'a';\n    cout &lt;&lt; (int)c &lt;&lt; endl;\n\n    int a = 66;\n    cout &lt;&lt; (char)97 &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre> <p>(\u91cd\u8981)\u5e38\u7528ASCII\u503c\uff1a'A'- 'Z'\u662f65 ~ 90\uff0c'a' - 'z'\u662f97 - 122\uff0c0 - 9\u662f 48 - 57\u3002 \u5b57\u7b26\u53ef\u4ee5\u53c2\u4e0e\u8fd0\u7b97\uff0c\u8fd0\u7b97\u65f6\u4f1a\u5c06\u5176\u5f53\u505a\u6574\u6570\uff1a</p> <pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main()\n{\n    int a = 'B' - 'A';\n    int b = 'A' * 'B';\n    char c = 'A' + 2;\n\n    cout &lt;&lt; a &lt;&lt; endl;\n    cout &lt;&lt; b &lt;&lt; endl;\n    cout &lt;&lt; c &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE5/#2","title":"2. \u5b57\u7b26\u6570\u7ec4","text":"<p>\u5b57\u7b26\u4e32\u5c31\u662f\u5b57\u7b26\u6570\u7ec4\u52a0\u4e0a\u7ed3\u675f\u7b26<code>\\0</code></p> <p>\u53ef\u4ee5\u4f7f\u7528\u5b57\u7b26\u4e32\u6765\u521d\u59cb\u5316\u5b57\u7b26\u6570\u7ec4\uff0c\u4f46\u6b64\u65f6\u8981\u6ce8\u610f\uff0c\u6bcf\u4e2a\u5b57\u7b26\u4e32\u7ed3\u5c3e\u4f1a\u6697\u542b\u4e00\u4e2a'\\0'\u5b57\u7b26\uff0c\u56e0\u6b64\u5b57\u7b26\u6570\u7ec4\u7684\u957f\u5ea6\u81f3\u5c11\u8981\u6bd4\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u591a 1!</p> <pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main()\n{\n    char a1[] = {'C', '+', '+'};            // \u5217\u8868\u521d\u59cb\u5316\uff0c\u6ca1\u6709\u7a7a\u5b57\u7b26\n    char a2[] = {'C', '+', '+', '\\0'};      // \u5217\u8868\u521d\u59cb\u5316\uff0c\u542b\u6709\u663e\u793a\u7684\u7a7a\u5b57\u7b26\n    char a3[] = \"C++\";                      // \u81ea\u52a8\u6dfb\u52a0\u8868\u793a\u5b57\u7b26\u4e32\u7ed3\u5c3e\u7684\u7a7a\u5b57\u7b26\n    char a4[6] = \"Daniel\";                  // \u9519\u8bef\uff1a\u6ca1\u6709\u7a7a\u95f4\u53ef\u4ee5\u5b58\u653e\u7a7a\u5b57\u7b26\n    return 0;\n}\n</code></pre>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE5/#21","title":"2.1 \u5b57\u7b26\u6570\u7ec4\u7684\u8f93\u5165\u8f93\u51fa\uff1a","text":"<pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main()\n{\n    char str[100];\n\n    cin &gt;&gt; str;             // \u8f93\u5165\u5b57\u7b26\u4e32\u65f6\uff0c\u9047\u5230\u7a7a\u683c\u6216\u8005\u56de\u8f66\u5c31\u4f1a\u505c\u6b62\n    cout &lt;&lt; str &lt;&lt; endl;    // \u8f93\u51fa\u5b57\u7b26\u4e32\u65f6\uff0c\u9047\u5230\u7a7a\u683c\u6216\u8005\u56de\u8f66\u4e0d\u4f1a\u505c\u6b62\uff0c\u9047\u5230'\\0'\u65f6\u505c\u6b62\n    printf(\"%s\\n\", str); // \u6ce8\u610f\u5b57\u7b26\u4e32\u672c\u8eab\u5c31\u662f\u5730\u5740\uff0c\u4e0d\u9700\u8981\u52a0&amp;\n\n    return 0;\n}\n</code></pre> <p>\u8bfb\u5165\u4e00\u884c\u5b57\u7b26\u4e32\uff0c\u5305\u62ec\u7a7a\u683c\uff1a</p> <pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main()\n{\n    char str[100];\n\n    fgets(str, 100, stdin);  // gets\u51fd\u6570\u5728\u65b0\u7248C++\u4e2d\u88ab\u79fb\u9664\u4e86\uff0c\u56e0\u4e3a\u4e0d\u5b89\u5168\u3002\n                             // \u53ef\u4ee5\u7528fgets\u4ee3\u66ff\uff0c\u4f46\u6ce8\u610ffgets\u4e0d\u4f1a\u5220\u9664\u884c\u672b\u7684\u56de\u8f66\u5b57\u7b26\n  // 100\u8868\u793a\u8f93\u5165\u6700\u591a\u591a\u5c11\u4e2a\u5b57\u7b26\n\n    cout &lt;&lt; str &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre> <p>string \u7684\u8bdd\u8981\u7528get line(cin, s)]</p> <p>Char s[100]\u7684\u8bdd\u8981\u7528cin.getline(s, 100)</p> <p>Puts(s) \u7b49\u4ef7\u4e8eprint(\"%s\\n\", s)\uff0c \u6ce8\u610f\u5305\u62ec\u4e86\u6362\u884c\u7b26</p>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE5/#22","title":"2.2 \u5b57\u7b26\u6570\u7ec4\u7684\u5e38\u7528\u64cd\u4f5c","text":"<p>\u4e0b\u9762\u51e0\u4e2a\u51fd\u6570\u9700\u8981\u5f15\u5165\u5934\u6587\u4ef6\uff1a</p> <p><code>#include &lt;string.h&gt;</code></p> <p>\u6216\u8005<code>#include &lt;cstring&gt;</code></p> <pre><code>(1) strlen(str)\uff0c\u6c42\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\n(2) strcmp(a, b)\uff0c\u6bd4\u8f83\u4e24\u4e2a\u5b57\u7b26\u4e32\u7684\u5927\u5c0f\uff0ca &lt; b\u8fd4\u56de-1\uff0ca == b\u8fd4\u56de0\uff0ca &gt; b\u8fd4\u56de1\u3002\u8fd9\u91cc\u7684\u6bd4\u8f83\u65b9\u5f0f\u662f\u5b57\u5178\u5e8f\uff01\n(3) strcpy(a, b)\uff0c\u5c06\u5b57\u7b26\u4e32b\u590d\u5236\u7ed9\u4ecea\u5f00\u59cb\u7684\u5b57\u7b26\u6570\u7ec4\u3002\u6ce8\u610f\u987a\u5e8f\uff01\n</code></pre> <p>\u5b57\u5178\u5e8f\uff0c\u4ece\u5934\u5f00\u59cb\uff0c\u6bd4ASCII\u7801\uff0c\u6bd4\u5982abc &lt; abde 10 &lt; 2\uff08\u4e00\u4f4d\u4e00\u4f4d\u7684\u6bd4\u8f83\uff09strcmp\u8fd4\u56de\u7684\u662f-1</p> <p>\u5b57\u5178\u5e8f\u672c\u8eab\u5177\u6709\u8d2a\u5fc3\u7684\u6027\u8d28\uff0c\u6240\u4ee5\u591a\u548c\u8d2a\u5fc3\u76f8\u5173</p> <p>strlen\u662f\u4e0d\u5305\u542b\\0\u7684</p> <p>\u56de\u8f66\u4e00\u822c\u662f\u5237\u65b0\u7f13\u5b58\uff0c\u6240\u4ee5\u6309\u4e86\u56de\u8f66\u4e4b\u540e\uff0c\u4f1a\u5c06\u7f13\u5b58\u4e2d\u7684\u4e1c\u897f\u4f20\u9012\u7ed9\u7a0b\u5e8f</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;string.h&gt;\n\nusing namespace std;\n\nint main()\n{\n    char a[100] = \"hello world!\", b[100];\n\n    cout &lt;&lt; strlen(a) &lt;&lt; endl; // 12\n\n    strcpy(b, a);\n\n    cout &lt;&lt; strcmp(a, b) &lt;&lt; endl; //0\n\n    return 0;\n}\n</code></pre>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE5/#23","title":"2.3\u904d\u5386\u5b57\u7b26\u6570\u7ec4\u4e2d\u7684\u5b57\u7b26","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n\nusing namespace std;\n\nint main()\n{\n    char s1[100], s2[100];\n    scanf(\"%s\", s1);\n    for (int i = 0, len = strlen(s1); i &lt; len; i++) cout &lt;&lt; s1[i] &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE5/#3-string","title":"3. \u6807\u51c6\u5e93\u7c7b\u578bstring","text":"<p>\u53ef\u53d8\u957f\u7684\u5b57\u7b26\u5e8f\u5217\uff0c\u6bd4\u5b57\u7b26\u6570\u7ec4\u66f4\u52a0\u597d\u7528\uff0c\u9700\u8981\u5f15\u5165\u5934\u6587\u4ef6\uff1a <code>#include &lt;string&gt;</code></p>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE5/#31","title":"3.1 \u5b9a\u4e49\u548c\u521d\u59cb\u5316","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nusing namespace std;\n\nint main()\n{\n    string s1;              // \u9ed8\u8ba4\u521d\u59cb\u5316\uff0cs1\u662f\u4e00\u4e2a\u7a7a\u5b57\u7b26\u4e32\n    string s2 = s1;         // s2\u662fs1\u7684\u526f\u672c\uff0c\u6ce8\u610fs2\u53ea\u662f\u4e0es1\u7684\u503c\u76f8\u540c\uff0c\u5e76\u4e0d\u6307\u5411\u540c\u4e00\u6bb5\u5730\u5740\n    string s3 = \"hiya\";     // s3\u662f\u8be5\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u7684\u526f\u672c\n    string s4(10, 'c');     // s4\u7684\u5185\u5bb9\u662f \"cccccccccc\"\n\n    return 0;\n}\n</code></pre>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE5/#32-string","title":"3.2 string\u4e0a\u7684\u64cd\u4f5c","text":"<p>\uff081\uff09 string\u7684\u8bfb\u5199</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;string.h&gt;\nusing namespace std;\n\nint main () {\n    string a;\n    cin &gt;&gt; a;\n//    cout &lt;&lt; a &lt;&lt; endl;\n    printf(\"%s\", a.c_str());\n    return 0;\n}\n</code></pre> <p>\u6ce8\u610f\uff1a\u4e0d\u80fd\u7528scanf(\"%s\", &amp;s)\u6765\u8bfb\u5165string</p> <p>\u6ce8\u610f\uff1a\u4e0d\u80fd\u7528printf\u76f4\u63a5\u8f93\u51fastring\uff0c\u9700\u8981\u5199\u6210\uff1aprintf(\u201c%s\u201d, s.c_str());</p> <p>\uff082\uff09 \u4f7f\u7528getline\u8bfb\u53d6\u4e00\u6574\u884c</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nusing namespace std;\n\nint main () {\n    string a;\n    getline(cin, a);\n    cout &lt;&lt; a &lt;&lt; endl;\n    return 0;\n}\n</code></pre> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;cstdio&gt;\n\nusing namespace std;\n\nint main()\n{\n    char s[100]; // \u80fd\u4e00\u76f4\u8bfb\u5165\uff0c\u5305\u62ec\u7a7a\u683c\n    cin.getline(s, 100); // \u8bfb\u5165\u5b57\u7b26\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\n\n    // \u5f15\u5165string\n    string s1, s2;\n    cin &gt;&gt; s1; // \u53ea\u80fd\u8bfb\u5165\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u9047\u5230\u7a7a\u683c\u548c\u56de\u8f66\u4f1a\u76f4\u63a5\u505c\u6b62\n    getline (cin, s2); // \u524d\u9762\u5199cin,\u540e\u9762\u5199\u8bfb\u5165\u7684\u5b57\u7b26\u4e32\uff0c\u4f1a\u76f4\u63a5\u5f00\u59cb\u8bfb\u5165\uff0c\u54ea\u6015\u7b2c\u4e00\u4e2a\u5b57\u7b26\u662f\u7a7a\u683c\n\n    cout &lt;&lt; s &lt;&lt; endl &lt;&lt; s1 &lt;&lt; endl &lt;&lt; s2 &lt;&lt; endl;\n    return 0;\n}\n</code></pre> <p>\uff083\uff09 string\u7684\u7684empty\u548csize\u64cd\u4f5c\uff08\u6ce8\u610fsize\u662f\u65e0\u7b26\u53f7\u6574\u6570\uff0c\u56e0\u6b64 s.size() &lt;= -1\u4e00\u5b9a\u6210\u7acb\uff09?????</p> <p>empty\u544a\u8bc9\u6211\u4eec\u5b57\u7b26\u4e32\u662f\u4e0d\u662f\u7a7a\u7684\uff0c\u7a7a\u7684\u5c31\u662ftrue(0)\uff0c\u5426\u5219\u662ffalse(1)</p> <p>string\u7684size\u529f\u80fd\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO1\uff0c\u6bd4strlen\u597d\u591a\u4e86\uff01</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nusing namespace std;\n\nint main()\n{\n    string s1, s2 = \"abc\";\n\n    cout &lt;&lt; s1.empty() &lt;&lt; endl; // 1\n    cout &lt;&lt; s2.empty() &lt;&lt; endl; // 0\n    cout &lt;&lt; s1.size() &lt;&lt; endl; // 0\n    cout &lt;&lt; s2.size() &lt;&lt; endl; // 3\n\n    return 0;\n}\n</code></pre> <p>\uff084\uff09 string\u7684\u6bd4\u8f83</p> <p>\u652f\u6301 &gt;, &lt;, &gt;=, &lt;=, ==, !=\u7b49\u6240\u6709\u6bd4\u8f83\u64cd\u4f5c\uff0c\u6309<code>\u5b57\u5178\u5e8f</code>\u8fdb\u884c\u6bd4\u8f83\u3002</p> <p>\uff085\uff09 \u4e3astring\u5bf9\u8c61\u8d4b\u503c</p> <pre><code>string s1(10, 'c'), s2;     // s1\u7684\u5185\u5bb9\u662f cccccccccc\uff1bs2\u662f\u4e00\u4e2a\u7a7a\u5b57\u7b26\u4e32\ns1 = s2;                    // \u8d4b\u503c\uff1a\u7528s2\u7684\u526f\u672c\u66ff\u6362s1\u7684\u526f\u672c\n                            // \u6b64\u65f6s1\u548cs2\u90fd\u662f\u7a7a\u5b57\u7b26\u4e32\n</code></pre> <p>\uff086\uff09 \u4e24\u4e2a<code>string</code>\u5bf9\u8c61\u76f8\u52a0</p> <pre><code>string s1 = \"hello,  \"\", s2 = \"world\\n\";\nstring s3 = s1 + s2;                    // s3\u7684\u5185\u5bb9\u662f hello, world\\n\ns1 += s2;                               // s1 = s1 + s2\n</code></pre> <p>\uff087\uff09 \u5b57\u9762\u503c\u548cstring\u5bf9\u8c61\u76f8\u52a0\uff1a</p> <p>\u505a\u52a0\u6cd5\u8fd0\u7b97\u65f6\uff0c\u5b57\u9762\u503c\u548c\u5b57\u7b26\u90fd\u4f1a\u88ab\u8f6c\u5316\u6210string\u5bf9\u8c61\uff0c\u56e0\u6b64\u76f4\u63a5\u76f8\u52a0\u5c31\u662f\u5c06\u8fd9\u4e9b\u5b57\u9762\u503c\u4e32\u8054\u8d77\u6765\uff1a</p> <pre><code>string s1 = \"hello\", s2 = \"world\";      // \u5728s1\u548cs2\u4e2d\u90fd\u6ca1\u6709\u6807\u70b9\u7b26\u53f7\nstring s3 = s1 + \", \" + s2 + '\\n';\n</code></pre> <p>\u5f53\u628astring\u5bf9\u8c61\u548c\u5b57\u7b26\u5b57\u9762\u503c\u53ca\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u6df7\u5728\u4e00\u6761\u8bed\u53e5\u4e2d\u4f7f\u7528\u65f6\uff0c\u5fc5\u987b\u786e\u4fdd\u6bcf\u4e2a\u52a0\u6cd5\u8fd0\u7b97\u7b26\u7684\u4e24\u4fa7\u7684\u8fd0\u7b97\u5bf9\u8c61\u81f3\u5c11\u6709\u4e00\u4e2a\u662fstring\uff1a</p> <p>\u666e\u901a\u5b57\u7b26\u4e32\u548cstring\u4e0d\u662f\u4e00\u4e2a\u4e1c\u897f\uff01</p> <pre><code>string s4 = s1 + \", \";  // \u6b63\u786e\uff1a\u628a\u4e00\u4e2astring\u5bf9\u8c61\u548c\u6709\u4e00\u4e2a\u5b57\u9762\u503c\u76f8\u52a0\nstring s5 = \"hello\" + \", \"; // \u9519\u8bef\uff1a\u4e24\u4e2a\u8fd0\u7b97\u5bf9\u8c61\u90fd\u4e0d\u662fstring\n\nstring s6 = s1 + \", \" + \"world\";  // \u6b63\u786e\uff0c\u6bcf\u4e2a\u52a0\u6cd5\u8fd0\u7b97\u90fd\u6709\u4e00\u4e2a\u8fd0\u7b97\u7b26\u662fstring\nstring s7 = \"hello\" + \", \" + s2;  // \u9519\u8bef\uff1a\u4e0d\u80fd\u628a\u5b57\u9762\u503c\u76f4\u63a5\u76f8\u52a0\uff0c\u8fd0\u7b97\u662f\u4ece\u5de6\u5230\u53f3\u8fdb\u884c\u7684\n</code></pre>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE5/#33-string","title":"3.3 \u5904\u7406string\u5bf9\u8c61\u4e2d\u7684\u5b57\u7b26","text":"<p>\u53ef\u4ee5\u5c06<code>string</code>\u5bf9\u8c61\u5f53\u6210\u5b57\u7b26\u6570\u7ec4\u6765\u5904\u7406\uff1a</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;;\nusing namespace std;\n\nint main () {\n    string s = \"hello, world!\";\n    for (int i = s.size() - 1; i &gt;= 0; i--) cout &lt;&lt; s[i];\n    return 0;\n}\n</code></pre> <p>\u6216\u8005\u4f7f\u7528\u57fa\u4e8e\u8303\u56f4\u7684for \u8bed\u53e5\uff1a</p> <p>\u8fd9\u4e2a\u53ebC++\u7684\u8303\u56f4\u904d\u5386\uff0cfor (char c : s)\uff0c\u524d\u9762\u662f\u5b57\u7b26\u6570\u7ec4\u91cc\u6bcf\u4e2a\u5b57\u7b26\u7684\u7c7b\u578b</p> <p>\u6ce8\u610f\u5f97\u5230\u7684\u4e1c\u897f\u662f\uff0cstring\u91cc\u9762\u590d\u5236\u8fc7\u6765\u7684\u503c\uff0c\u6240\u4ee5\u4e0d\u80fd\u7528\uff1a</p> <pre><code>for (char c : s) {\n  c = 'a';\n}\n</code></pre> <p>\u800c\u8981\u7528</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nusing namespace std;\n\nint main()\n{\n    string s = \"Hello, world!\";\n    for (char c: s) cout &lt;&lt; c;\n    cout &lt;&lt; endl;\n    for (char &amp;c: s) c = 'a';\n    cout &lt;&lt; s;\n    return 0;\n}\n</code></pre> <p>cpp\u4e2d\u8fd8\u63d0\u4f9b<code>auto</code>\u81ea\u52a8\u8bc6\u522b\u7c7b\u578b</p> <p>\u6bd4\u5982\uff1a</p> <pre><code>for (auto &amp;c : c) {\n    c = 'a'\n}\n</code></pre> <p>\u540e\u9762\u590d\u6742\u8d77\u6765\u4e4b\u540e\u7528auto\u4f1a\u975e\u5e38\u7b80\u5355</p> <p>\u6ce8\u610f\uff1afgets\u4f1a\u628a\u672b\u5c3e\u7684\u56de\u8f66\u8bfb\u8fdb\u6765</p> <p>\u5220\u6389\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\uff1a</p> <pre><code>s.pop_back();\n</code></pre> <p>\u53d6\u5b57\u7b26\u4e32\uff1a</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;string&gt;\nusing namespace std;\nint main () {\n    string a, b;\n    while (cin &gt;&gt; a &gt;&gt; b) {\n        int p = 0;\n        for (int i = 0; i &lt; a.size(); i++) {\n            if (a[i] &gt; a[p]) {\n                p = i;\n            }\n        }\n        cout &lt;&lt; a.substr(0, p + 1) + b +  a.substr(p + 1) &lt;&lt; endl;\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE5/#760","title":"760. \u5b57\u7b26\u4e32\u957f\u5ea6","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\nusing namespace std;\n\nint main () {\n    string s;\n    getline(cin, s); // \u6ce8\u610fgetline\u8f93\u5165\u4e00\u6574\u884c\n    printf(\"%d\", s.size());\n    return 0;\n}\n</code></pre>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE5/#772","title":"772. \u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26","text":"<p>char\u5728\u8fd0\u7b97\u4e2d\u4f1a\u88ab\u81ea\u52a8\u8f6c\u5316\u4e3a\u6570\u5b57</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\nusing namespace std;\nchar str[100010];\nint cnt[26];\n\nint main () {\n    scanf(\"%s\", str);\n\n    for (int i = 0; str[i]; i++) {\n        cnt[str[i] - 'a']++;\n    }\n    for (int i = 0; str[i]; i++) {\n        if (cnt[str[i] - 'a'] == 1) {\n            cout &lt;&lt; str[i] &lt;&lt; endl;\n            return 0;\n        }\n\n    }\n    puts(\"no\");\n\n    return 0;\n}\n</code></pre> <p>\u542c\u52301.5\u5b57\u7b26\u4e32\u5339\u914d1:47:32</p>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE6/","title":"\u7b2c\u516d\u8bb2 \u51fd\u6570","text":"<p>\u51fd\u6570\u8ba9\u4ee3\u7801\u53d8\u5f97\u66f4\u52a0\u7b80\u6d01</p>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE6/#1","title":"1. \u51fd\u6570","text":"<p>\u4e00\u4e2a\u5178\u578b\u7684\u51fd\u6570\u5b9a\u4e49\u5305\u62ec\u4ee5\u4e0b\u90e8\u5206\uff1a\u8fd4\u56de\u7c7b\u578b\u3001\u51fd\u6570\u540d\u5b57\u3001\u75310\u4e2a\u6216\u591a\u4e2a\u5f62\u53c2\u7ec4\u6210\u7684\u5217\u8868\u4ee5\u53ca\u51fd\u6570\u4f53\u3002</p>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE6/#11","title":"1.1 \u7f16\u5199\u51fd\u6570","text":"<p>\u6211\u4eec\u6765\u7f16\u5199\u4e00\u4e2a\u6c42\u9636\u4e58\u7684\u7a0b\u5e8f\u3002\u7a0b\u5e8f\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;cstdio&gt;\n\nusing namespace std;\n//\u51fd\u6570\u58f0\u660e\nint fact(int n);  //\u5f62\u53c2\n\n//\u51fd\u6570\u5b9a\u4e49\nint fact(int val) // \u5b9e\u53c2\n{\n    int ret = 1;\n    while (val &gt; 1)\n        ret *= val -- ;\n    return ret;\n}\n\nint main()\n{\n    int t = fact(5);\n    cout &lt;&lt; t;\n    return 0;\n}\n</code></pre> <p>\u51fd\u6570\u540d\u5b57\u662ffact\uff0c\u5b83\u4f5c\u7528\u4e8e\u4e00\u4e2a\u6574\u578b\u53c2\u6570\uff0c\u8fd4\u56de\u4e00\u4e2a\u6574\u578b\u503c\u3002return\u8bed\u53e5\u8d1f\u8d23\u7ed3\u675ffact\u5e76\u8fd4\u56deret\u7684\u503c\u3002</p>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE6/#12","title":"1.2 \u8c03\u7528\u51fd\u6570","text":"<pre><code>int main()\n{\n    int j = fact(5);\n    cout &lt;&lt; \"5! is \" &lt;&lt; j &lt;&lt; endl;\n\n    return 0;\n</code></pre> <p>\u4e0d\u5199return\u4f1a\u8fd4\u56de\u968f\u673a\u503c</p>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE6/#13","title":"1.3 \u5f62\u53c2\u548c\u5b9e\u53c2","text":"<p>\u5b9e\u53c2\u662f\u5f62\u53c2\u7684\u521d\u59cb\u503c\u3002\u7b2c\u4e00\u4e2a\u5b9e\u53c2\u521d\u59cb\u5316\u7b2c\u4e00\u4e2a\u5f62\u53c2\uff0c\u7b2c\u4e8c\u4e2a\u5b9e\u53c2\u521d\u59cb\u5316\u7b2c\u4e8c\u4e2a\u5f62\u53c2\uff0c\u4f9d\u6b21\u7c7b\u63a8\u3002\u5f62\u53c2\u548c\u5b9e\u53c2\u7684\u7c7b\u578b\u548c\u4e2a\u6570\u5fc5\u987b\u5339\u914d\u3002</p> <pre><code>fact(\"hello\");      // \u9519\u8bef\uff1a\u5b9e\u53c2\u7c7b\u578b\u4e0d\u6b63\u786e\nfact();             // \u9519\u8bef\uff1a\u5b9e\u53c2\u6570\u91cf\u4e0d\u8db3\nfact(42, 10, 0);    // \u9519\u8bef\uff1a\u5b9e\u53c2\u6570\u91cf\u8fc7\u591a\nfact(3.14);         // \u6b63\u786e\uff1a\u8be5\u5b9e\u53c2\u80fd\u8f6c\u6362\u6210int\u7c7b\u578b\uff0c\u7b49\u4ef7\u4e8efact(3);\n</code></pre> <p>\u5f62\u53c2\u4e5f\u53ef\u4ee5\u8bbe\u7f6e\u9ed8\u8ba4\u503c\uff0c\u4f46\u6240\u6709\u9ed8\u8ba4\u503c\u5fc5\u987b\u662f\u6700\u540e\u51e0\u4e2a\u3002\u5f53\u4f20\u5165\u7684\u5b9e\u53c2\u4e2a\u6570\u5c11\u4e8e\u5f62\u53c2\u4e2a\u6570\u65f6\uff0c\u6700\u540e\u6ca1\u6709\u88ab\u4f20\u5165\u503c\u7684\u5f62\u53c2\u4f1a\u4f7f\u7528\u9ed8\u8ba4\u503c\u3002</p>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE6/#14","title":"1.4 \u51fd\u6570\u7684\u5f62\u53c2\u5217\u8868","text":"<p>\u51fd\u6570\u7684\u5f62\u53c2\u5217\u8868\u53ef\u4ee5\u4e3a\u7a7a\uff0c\u4f46\u662f\u4e0d\u80fd\u7701\u7565\u3002</p> <pre><code>oid f1() {/* \u2026. */}            // \u9690\u5f0f\u5730\u5b9a\u4e49\u7a7a\u5f62\u53c2\u5217\u8868\nvoid f2(void) {/* \u2026 */}         // \u663e\u5f0f\u5730\u5b9a\u4e49\u7a7a\u5f62\u53c2\u5217\u8868\n</code></pre> <p>\u5f62\u53c2\u5217\u8868\u4e2d\u7684\u5f62\u53c2\u901a\u5e38\u7528\u9017\u53f7\u9694\u5f00\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5f62\u53c2\u90fd\u662f\u542b\u6709\u4e00\u4e2a\u58f0\u660e\u7b26\u7684\u58f0\u660e\u3002\u5373\u4f7f\u4e24\u4e2a\u5f62\u53c2\u7684\u7c7b\u578b\u4e00\u6837\uff0c\u4e5f\u5fc5\u987b\u628a\u4e24\u4e2a\u7c7b\u578b\u90fd\u5199\u51fa\u6765\uff1a</p> <pre><code>int f3(int v1, v2) {/* \u2026 */}        // \u9519\u8bef\nint f4(int v1, int v2) {/* \u2026 */}    // \u6b63\u786e\n</code></pre>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE6/#16","title":"1.6 \u5c40\u90e8\u53d8\u91cf\u3001\u5168\u5c40\u53d8\u91cf\u4e0e\u9759\u6001\u53d8\u91cf","text":"<p>\u5c40\u90e8\u53d8\u91cf\u53ea\u53ef\u4ee5\u5728\u51fd\u6570\u5185\u90e8\u4f7f\u7528\uff0c\u5168\u5c40\u53d8\u91cf\u53ef\u4ee5\u5728\u6240\u6709\u51fd\u6570\u5185\u4f7f\u7528\u3002\u5f53\u5c40\u90e8\u53d8\u91cf\u4e0e\u5168\u5c40\u53d8\u91cf\u91cd\u540d\u65f6\uff0c\u4f1a\u4f18\u5148\u4f7f\u7528\u5c40\u90e8\u53d8\u91cf\u3002</p> <p>\u9759\u6001\u53d8\u91cf\uff1a</p> <pre><code>static int cnt; //\u521d\u59cb\u4e3a0\n</code></pre> <p>\u9759\u6001\u53d8\u91cf\u76f8\u5f53\u4e8e\u51fd\u6570\u5185\u90e8\u5f00\u4e86\u4e00\u4e2a\u53ea\u6709\u8be5\u51fd\u6570\u80fd\u7528\u7684\u5168\u5c40\u53d8\u91cf</p> <p>\u9759\u6001\u53d8\u91cf\u5f00\u5728\u5806\u91cc\u9762\uff0c\u4e0d\u7528\u62c5\u5fc3\u7206\u6808</p>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE6/#2","title":"2. \u53c2\u6570\u4f20\u9012","text":""},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE6/#21","title":"2.1 \u4f20\u9012\u53c2\u6570","text":"<p>\u5f53\u521d\u59cb\u5316\u4e00\u4e2a\u975e\u5f15\u7528\u7c7b\u578b\u7684\u53d8\u91cf\u65f6\uff0c\u521d\u59cb\u503c\u88ab\u62f7\u8d1d\u7ed9\u53d8\u91cf\u3002\u6b64\u65f6\uff0c\u5bf9\u53d8\u91cf\u7684\u6539\u52a8\u4e0d\u4f1a\u5f71\u54cd\u521d\u59cb\u503c\u3002</p> <pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nint f(int x)\n{\n    x = 5;\n}\n\nint main()\n{\n    int x = 10;\n\n    f(x);\n    cout &lt;&lt; x &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE6/#22","title":"2.2 \u4f20\u5f15\u7528\u53c2\u6570","text":"<p>\u5f53\u51fd\u6570\u7684\u5f62\u53c2\u4e3a\u5f15\u7528\u7c7b\u578b\u65f6\uff0c\u5bf9\u5f62\u53c2\u7684\u4fee\u6539\u4f1a\u5f71\u54cd\u5b9e\u53c2\u7684\u503c\u3002\u4f7f\u7528\u5f15\u7528\u7684\u4f5c\u7528\uff1a\u907f\u514d\u62f7\u8d1d\u3001\u8ba9\u51fd\u6570\u8fd4\u56de\u989d\u5916\u4fe1\u606f\u3002</p> <pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nint f(int &amp;x)\n{\n    x = 5;\n}\n\nint main()\n{\n    int x = 10;\n\n    f(x);\n    cout &lt;&lt; x &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE6/#23","title":"2.3 \u6570\u7ec4\u5f62\u53c2","text":"<p>\u5728\u51fd\u6570\u4e2d\u5bf9\u6570\u7ec4\u4e2d\u7684\u503c\u7684\u4fee\u6539\uff0c\u4f1a\u5f71\u54cd\u51fd\u6570\u5916\u9762\u7684\u6570\u7ec4\u3002</p> <p>\u4e00\u7ef4\u6570\u7ec4\u5f62\u53c2\u7684\u5199\u6cd5\uff1a</p> <pre><code>// \u5c3d\u7ba1\u5f62\u5f0f\u4e0d\u540c\uff0c\u4f46\u8fd9\u4e09\u4e2aprint\u51fd\u6570\u662f\u7b49\u4ef7\u7684\nvoid print(int *a) {/* \u2026 */} // \u6570\u7ec4\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u6307\u9488\nvoid print(int a[]) {/* \u2026 */}\nvoid print(int a[10]) {/* \u2026 */}\n</code></pre> <pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nvoid print(int a[])\n{\n    for (int i = 0; i &lt; 10; i ++ )\n        cout &lt;&lt; a[i] &lt;&lt; endl;\n}\n\nint main()\n{\n    int a[10];\n\n    for (int i = 0; i &lt; 10; i ++ )\n        a[i] = i;\n\n    print(a);\n\n    return 0;\n}\n</code></pre> <p>\u591a\u7ef4\u6570\u7ec4\u5f62\u53c2\u7684\u5199\u6cd5\uff1a</p> <pre><code>// \u591a\u7ef4\u6570\u7ec4\u4e2d\uff0c\u9664\u4e86\u7b2c\u4e00\u7ef4\u4e4b\u5916\uff0c\u5176\u4f59\u7ef4\u5ea6\u7684\u5927\u5c0f\u5fc5\u987b\u6307\u5b9a\nvoid print(int (*a)[10]) {/* \u2026 */}\nvoid print(int a[][10]) {/* \u2026 */}\n</code></pre> <pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nvoid print(int a[][10])\n{\n    for (int i = 0; i &lt; 10; i ++ )\n    {\n        for (int j = 0; j &lt; 10; j ++ )\n            cout &lt;&lt; a[i][j] &lt;&lt; ' ';\n        cout &lt;&lt; endl;\n    }\n}\n\nint main()\n{\n    int a[10][10];\n\n    for (int i = 0; i &lt; 10; i ++ )\n        for (int j = 0; j &lt; 10; j ++ )\n            a[i][j] = j;\n\n    print(a);\n\n    return 0;\n}\n</code></pre>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE6/#3-return","title":"3. \u8fd4\u56de\u7c7b\u578b\u548creturn\u8bed\u53e5","text":"<p>return\u8bed\u53e5\u7ec8\u6b62\u5f53\u524d\u6b63\u5728\u6267\u884c\u7684\u51fd\u6570\u5e76\u5c06\u63a7\u5236\u6743\u8fd4\u56de\u5230\u8c03\u7528\u8be5\u51fd\u6570\u7684\u5730\u65b9\u3002return\u8bed\u53e5\u6709\u4e24\u79cd\u5f62\u5f0f\uff1a</p> <pre><code>return; // void,\u53ef\u4ee5\u7701\u7565\nreturn expression;\n</code></pre>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE6/#31","title":"3.1 \u65e0\u8fd4\u56de\u503c\u51fd\u6570","text":"<p>\u6ca1\u6709\u8fd4\u56de\u503c\u7684return\u8bed\u53e5\u53ea\u80fd\u7528\u5728\u8fd4\u56de\u7c7b\u578b\u662fvoid\u7684\u51fd\u6570\u4e2d\u3002\u8fd4\u56devoid\u7684\u51fd\u6570\u4e0d\u8981\u6c42\u975e\u5f97\u6709return\u8bed\u53e5\uff0c\u56e0\u4e3a\u5728\u8fd9\u7c7b\u51fd\u6570\u7684\u6700\u540e\u4e00\u53e5\u540e\u9762\u4f1a\u9690\u5f0f\u5730\u6267\u884creturn\u3002</p> <p>\u901a\u5e38\u60c5\u51b5\u4e0b\uff0cvoid\u51fd\u6570\u5982\u679c\u60f3\u5728\u5b83\u7684\u4e2d\u95f4\u4f4d\u7f6e\u63d0\u524d\u9000\u51fa\uff0c\u53ef\u4ee5\u4f7f\u7528return\u8bed\u53e5\u3002return\u7684\u8fd9\u79cd\u7528\u6cd5\u6709\u70b9\u7c7b\u4f3c\u4e8e\u6211\u4eec\u7528break\u8bed\u53e5\u9000\u51fa\u5faa\u73af\u3002</p> <pre><code>void swap(int &amp;v1, int &amp;v2)\n{\n    // \u5982\u679c\u4e24\u4e2a\u503c\u76f8\u7b49\uff0c\u5219\u4e0d\u9700\u8981\u4ea4\u6362\uff0c\u76f4\u63a5\u9000\u51fa\n    if (v1 == v2)\n        return;\n    // \u5982\u679c\u7a0b\u5e8f\u6267\u884c\u5230\u4e86\u8fd9\u91cc\uff0c\u8bf4\u660e\u8fd8\u9700\u8981\u7ee7\u7eed\u5b8c\u6210\u67d0\u4e9b\u529f\u80fd\n\n    int tmp = v2;\n    v2 = v1;\n    v1 = tmp;\n    // \u6b64\u5904\u65e0\u987b\u663e\u793a\u7684return\u8bed\u53e5\n}\n</code></pre>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE6/#32","title":"3.2 \u6709\u8fd4\u56de\u503c\u7684\u51fd\u6570","text":"<p>\u53ea\u8981\u51fd\u6570\u7684\u8fd4\u56de\u7c7b\u578b\u4e0d\u662fvoid\uff0c\u5219\u8be5\u51fd\u6570\u5185\u7684\u6bcf\u6761return\u8bed\u53e5\u5fc5\u987b\u8fd4\u56de\u4e00\u4e2a\u503c\u3002return\u8bed\u53e5\u8fd4\u56de\u503c\u7684\u7c7b\u578b\u5fc5\u987b\u4e0e\u51fd\u6570\u7684\u8fd4\u56de\u7c7b\u578b\u76f8\u540c\uff0c\u6216\u8005\u80fd\u9690\u5f0f\u5730\u8f6c\u6362\u51fd\u6570\u7684\u8fd4\u56de\u7c7b\u578b\u3002</p> <pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nint max(int x, int y)\n{\n    if (x &gt; y) return x;\n\n    return y;\n}\n\nint main()\n{\n    int x, y;\n    cin &gt;&gt; x &gt;&gt; y;\n\n    cout &lt;&lt; max(x, y) &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE6/#4","title":"4. \u51fd\u6570\u9012\u5f52","text":"<p>\u5728\u4e00\u4e2a\u51fd\u6570\u5185\u90e8\uff0c\u4e5f\u53ef\u4ee5\u8c03\u7528\u51fd\u6570\u672c\u8eab\u3002</p> <p>\u5c31\u662f\u51fd\u6570\u81ea\u5df1\u8c03\u7528\u81ea\u5df1</p> <pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nint fact(int n)\n{\n    if (n &lt;= 1) return 1;\n    return n * fact(n - 1);\n}\n\nint main()\n{\n    int n;\n    cin &gt;&gt; n;\n\n    cout &lt;&lt; fact(n) &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre> <p>\u770b\u52301.6\u51fd\u65701:54:19</p>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE7/","title":"\u7b2c\u4e03\u8bb2 \u7c7b\u3001\u7ed3\u6784\u4f53\u3001\u6307\u9488\u4e0e\u5f15\u7528","text":"<p>\u7c7b\u53ef\u4ee5\u5c06\u53d8\u91cf\u3001\u6570\u7ec4\u548c\u51fd\u6570\u5b8c\u7f8e\u5730\u6253\u5305\u5728\u4e00\u8d77\u3002</p>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE7/#1","title":"1. \u7c7b\u4e0e\u7ed3\u6784\u4f53","text":"<p>\u7c7b\u5b8c\u5168\u662f\u4e3a\u4eba\u7c7b\u670d\u52a1\u7684</p> <p>\u53ef\u4ee5\u6253\u5305\u5f88\u591a\u590d\u6742\u7684\u4e1c\u897f</p> <p>\u7c7b\u7684\u5b9a\u4e49\uff1a</p> <pre><code>class Person\n{\n    private:\n        int age, height;\n        double money;\n        string books[100];\n\n    public:\n        string name;\n\n        void say()\n        {\n            cout &lt;&lt; \"I'm \" &lt;&lt; name &lt;&lt; endl;\n        }\n\n        int get_age()\n        {\n            return age;\n        }\n\n        void add_money(double x)\n        {\n            money += x;\n        }\n};\n</code></pre> <p>\u7c7b\u4e2d\u7684\u53d8\u91cf\u548c\u51fd\u6570\u88ab\u7edf\u4e00\u79f0\u4e3a\u7c7b\u7684<code>\u6210\u5458\u53d8\u91cf</code>\u3002</p> <p>private\u540e\u9762\u7684\u5185\u5bb9\u662f\u79c1\u6709\u6210\u5458\u53d8\u91cf\uff0c\u5728\u7c7b\u7684\u5916\u90e8\u4e0d\u80fd\u8bbf\u95ee\uff1bpublic\u540e\u9762\u7684\u5185\u5bb9\u662f\u516c\u6709\u6210\u5458\u53d8\u91cf\uff0c\u5728\u7c7b\u7684\u5916\u90e8\u53ef\u4ee5\u8bbf\u95ee\u3002</p> <p>\u7c7b\u7684\u4f7f\u7528\uff1a</p> <pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nconst int N = 1000010;\n\nclass Person\n{\n    private:\n        int age, height;\n        double money;\n        string books[100];\n\n    public:\n        string name;\n\n        void say()\n        {\n            cout &lt;&lt; \"I'm \" &lt;&lt; name &lt;&lt; endl;\n        }\n\n        int set_age(int a)\n        {\n            age = a;\n        }\n\n        int get_age()\n        {\n            return age;\n        }\n\n        void add_money(double x)\n        {\n            money += x;\n        }\n} person_a, person_b, persons[100];\n\nint main()\n{\n    Person c;\n\n    c.name = \"yxc\";      // \u6b63\u786e\uff01\u8bbf\u95ee\u516c\u6709\u53d8\u91cf\n    c.age = 18;          // \u9519\u8bef\uff01\u8bbf\u95ee\u79c1\u6709\u53d8\u91cf\n    c.set_age(18);       // \u6b63\u786e\uff01set_age()\u662f\u5171\u6709\u6210\u5458\u53d8\u91cf\n    c.add_money(100);\n\n    c.say();\n    cout &lt;&lt; c.get_age() &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre> <p>\u7ed3\u6784\u4f53\u548c\u7c7b\u7684\u4f5c\u7528\u662f\u4e00\u6837\u7684\u3002\u4e0d\u540c\u70b9\u5728\u4e8e\u7c7b\u9ed8\u8ba4\u662fprivate\uff0c\u7ed3\u6784\u4f53\u9ed8\u8ba4\u662fpublic\u3002</p> <pre><code>struct Person\n{\n    private:\n        int age, height;\n        double money;\n        string books[100];\n\n    public:\n        string name;\n\n        void say()\n        {\n            cout &lt;&lt; \"I'm \" &lt;&lt; name &lt;&lt; endl;\n        }\n\n        int set_age(int a)\n        {\n            age = a;\n        }\n\n        int get_age()\n        {\n            return age;\n        }\n\n        void add_money(double x)\n        {\n            money += x;\n        }\n} person_a, person_b, persons[100];\n</code></pre> <p>\u7ed3\u6784\u4f53\u6784\u9020\u51fd\u6570:</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;cstdio&gt;\n\nusing namespace std;\nstruct Person {\n    int age, height;\n    double money;\n    Person() {}\n    Person(int _age, int _height) : age(_age), height(_height) {}\n    Person(int _age, int _height, double _money) : age(_age), height(_height), money(_money) {}\n};\n\nint main () {\n    Person p = {18, 180};\n    cout &lt;&lt; p.money &lt;&lt; endl;\n}\n</code></pre> <p>\u4ee3\u7801\u957f\u7684\u65f6\u5019\u624d\u4f1a\u663e\u793a\u51fa\u7c7b\u548c\u7ed3\u6784\u9898\u7684\u4f5c\u7528\u548c\u597d\u5904</p>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE7/#2","title":"2. \u6307\u9488\u548c\u5f15\u7528","text":"<p>\u6307\u9488\u6307\u5411\u5b58\u653e\u53d8\u91cf\u7684\u503c\u7684\u5730\u5740\u3002\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u6307\u9488\u6765\u4fee\u6539\u53d8\u91cf\u7684\u503c\u3002</p> <p>\u64cd\u4f5c\u7cfb\u7edf\u8fd0\u884c\u7a0b\u5e8f\uff0c\u6bcf\u4e2a\u7a0b\u5e8f\u90fd\u662f\u4e00\u4e2a\u8fdb\u7a0b\uff08process\uff09</p> <p>\u8fdb\u7a0b\u7684\u7a7a\u95f4\uff08\u5185\u5b58\uff09\uff0c\u6240\u6709\u8fdb\u7a0b\u8fd0\u884c\u7684\u5927\u5c0f</p> <p>\u6620\u5c04\u4e4b\u540e\uff0c\u5185\u5b58\u4f1a\u53d8\u6210\u4e00\u4e2a16g\u7684\u6570\u7ec4\uff0c\u7f16\u7801\u4e4b\u540e\u5185\u5b58\u7684\u5730\u5740\u662f16\u8fdb\u5236\u7684</p> <p>\u5047\u8bbe\u662f4G\u5185\u5b58\uff0c\u4ece0X00000000 - 0 XFFFFFFFF\uff0c 2\u768432\u6b21\u653e \uff08\u5355\u4f4d\u662f\u5b57\u8282byte\uff09</p> <p>\u5185\u5b58\u5728\u4e0a\u9762\u7684\u662f\u6808\uff0c\u5728\u4e0b\u9762\u7684\u662f\u5806\uff0c\u5c40\u90e8\u53d8\u91cf\u5168\u90e8\u5728\u6808\uff0c\u5168\u5c40\u53d8\u91cf\u5728\u5806\u7a7a\u95f4\uff08\u9ed8\u8ba4\u5168\u90e8\u521d\u59cb\u5316\u62100\uff09</p> <p>\u6307\u9488</p> <p>\u8f93\u51fa\u5730\u5740\uff1a</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\nchar a, b;\n\nint main () {\n\n    char c, d;\n    cout &lt;&lt; (void*)&amp;a &lt;&lt; endl;\n    cout &lt;&lt; (void*)&amp;b &lt;&lt; endl;\n    cout &lt;&lt; (void*)&amp;c &lt;&lt; endl;\n    cout &lt;&lt; (void*)&amp;d &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre> <p>\u8f93\u51fa\uff1a(\u6ce8\u610f\u5927\u5c0f\u987a\u5e8f)</p> <pre><code>0x10d9bd040\n0x10d9bd041\n0x7ff7b254a8fb\n0x7ff7b254a8fa\n</code></pre> <pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main()\n{\n    int a = 10;\n    int *p = &amp;a;  //*\u8868\u793ap\u662fint\u7c7b\u578b\u7684\u6307\u9488\n\n    *p += 5; // *p\u8fd9\u4e2a\u5730\u5740\u8868\u793a\u7684\u771f\u6b63\u7684\u6570\uff0ca\u4e5f\u968f\u7740\u53d8\u5316\n    cout &lt;&lt; a &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre> <p>\u6570\u7ec4\u540d\u662f\u4e2a\u6307\u9488\uff0c\u662f\u6570\u7ec4\u7b2c\u4e00\u4e2a\u53d8\u91cf\u7684\u5730\u5740\uff0c\u6570\u7ec4\u7684\u5730\u5740\u5fc5\u987b\u662f\u8fde\u7eed\u7684\u4e00\u6bb5</p> <p>\u6570\u7ec4\u540d\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u6307\u9488\u3002\u6307\u9488\u53ef\u4ee5\u505a\u8fd0\u7b97\uff1a</p> <pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main()\n{\n    int a[5] = {1, 2, 3, 4, 5};\n\n    for (int i = 0; i &lt; 5; i ++ )\n        cout &lt;&lt; *(a + i) &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre> <p>\u6bcf\u4e2aint\u53d8\u91cf\u5305\u542b4\u4e2a\u5b57\u8282</p> <p>\u5f15\u7528\u548c\u6307\u9488\u7c7b\u4f3c\uff0c\u76f8\u5f53\u4e8e\u7ed9\u53d8\u91cf\u8d77\u4e86\u4e2a\u522b\u540d\u3002</p> <pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main()\n{\n    int a = 10;\n    int &amp;p = a;\n\n    p += 5;\n    cout &lt;&lt; a &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre> <p>\u6570\u7ec4\u91cc\u9762\u53d6a[2]\uff1a</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nchar a, b;\nint main () {\n    char c;\n    int a[5] = {1, 2, 3, 4, 5};\n    int *p = a;\n    cout &lt;&lt; *(p + 2) &lt;&lt; endl; // a[2]\n    return 0;\n}\n</code></pre> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\n\nint main () {\n    char c;\n    int a[5] = {1, 2, 3, 4, 5};\n    int *p = &amp;a[0], *q = &amp;a[2];\n    cout &lt;&lt; q - p &lt;&lt; endl; // \u8fd9\u4e2a\u662f\u5730\u5740\u7684\u51cf\u6cd5\n\n    return 0;\n}\n</code></pre> <p>\u5e38\u7528\u65b9\u6cd5\uff1a\uff08\u522b\u540d\uff09</p> <p>\u6539\u53d8a\uff0cp\u4e5f\u4f1a\u53d8\uff1b\u6539\u53d8p\uff0ca\u4e5f\u4f1a\u53d8</p> <pre><code>int *p = &amp;a; // c\u8bed\u8a00\u5199\u6cd5\nint &amp;p = a; // c++\u7684\u5f15\u7528\u3001\u522b\u540d\uff0c\u662f\u4e0a\u9762\u7684\u7b80\u7528\n</code></pre>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE7/#3","title":"3. \u94fe\u8868","text":"<p>\u7b97\u6cd5\u5f53\u4e2d\u7684\u67d0\u4e00\u79cd\u7ed3\u6784</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\nstruct Node {\n    int val;\n    Node* next;\n    Node(int _val) : val(_val), next(NULL) {}\n};\n\nint main () {\n    Node* p = new Node(1); // new \u52a8\u6001\u5f00\u8f9f\u4e00\u4e2a\u5185\u5b58\u7a7a\u95f4\n//    p-&gt;next = p; // \u524d\u9762\u8fd9\u4e2a\u53d8\u91cf\u662f\u5730\u5740\u7684\u8bdd\uff0c\u5c31\u7528-&gt;\u5426\u5219\u4f1a\u7528p.next\n    Node* q = new Node(2);\n    auto o = new Node(3);\n\n    p-&gt;next = q;\n    q-&gt;next = o;\n    Node* head = p;\n    //\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u70b9\u53eb\u505a\u5934\u8282\u70b9\uff0c\u4e60\u60ef\u5c06\u7b2c\u4e00\u4e2a\u8282\u70b9\u7684\u5730\u5740\u5b58\u5230head\u91cc\u9762\n    //\u94fe\u8868\u7684\u904d\u5386\u65b9\u5f0f\n\n    // \u6dfb\u52a0\u4e00\u4e2a\u8282\u70b9\n    Node* u = new Node(4);\n    u-&gt;next = head;\n    head = u;\n\n    // \u5220\u9664\u4e00\u4e2a\u8282\u70b9\uff0c\u94fe\u8868\u7684\u5220\u9664\u662f\u6307\u5728\u539f\u94fe\u8868\u7684\u904d\u5386\u8fc7\u7a0b\u4e2d\uff0c\u628a\u8fd9\u4e2a\u70b9\u8df3\u8fc7\u53bb\uff0c\u904d\u5386\u4e0d\u5230\u8fd9\u4e2a\u70b9\u5c31\u53ef\u4ee5\u4e86\n    head-&gt;next = head-&gt;next-&gt;next;\n\n    for(Node* i = head; i != NULL;i = i-&gt;next)\n        cout &lt;&lt; i-&gt;val &lt;&lt; endl;\n    return 0;\n}\n</code></pre> <pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nstruct Node\n{\n    int val;\n    Node* next; // \u53ef\u4ee5\u5b9a\u4e49\u7ed3\u6784\u4f53\u7684\u6307\u9488\uff0c\u4f46\u662f\u4e0d\u80fd\u5b9a\u4e49\u8fd9\u4e2a\u7ed3\u6784\u4f53\u7684\u53d8\u91cf\uff0c\u5c31\u662f\u4e00\u4e2a64\u4f4d\u7684\u6574\u6570\n} *head;\n\nint main()\n{\n    for (int i = 1; i &lt;= 5; i ++ )\n    {\n        Node* p = new Node();\n        p-&gt;val = i;\n        p-&gt;next = head;\n        head = p;\n    }\n\n    for (Node* p = head; p; p = p-&gt;next)\n        cout &lt;&lt; p-&gt;val &lt;&lt; ' ';\n    cout &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre> <p>\u542c\u52301.7\u7c7b\u7ed3\u6784\u4f53\u4e0e\u6307\u9488\u76841:13</p>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE8/","title":"\u7b2c\u516b\u8bb2 STL\u3001\u4f4d\u8fd0\u7b97\u548c\u5e38\u7528\u5e93\u51fd\u6570","text":"<p>STL\u662f\u63d0\u9ad8C++\u7f16\u5199\u6548\u7387\u7684\u4e00\u4e2a\u5229\u5668\u3002</p>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE8/#1-include","title":"1. #include  <p>vector\u662f\u53d8\u957f\u6570\u7ec4\uff0c\u652f\u6301\u968f\u673a\u8bbf\u95ee\uff0c\u4e0d\u652f\u6301\u5728\u4efb\u610f\u4f4d\u7f6e O(1)O(1) \u63d2\u5165\u3002\u4e3a\u4e86\u4fdd\u8bc1\u6548\u7387\uff0c\u5143\u7d20\u7684\u589e\u5220\u4e00\u822c\u5e94\u8be5\u5728\u672b\u5c3e\u8fdb\u884c\u3002</p>","text":""},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE8/#11","title":"1.1 \u58f0\u660e","text":"<pre><code>#include &lt;vector&gt;   // \u5934\u6587\u4ef6\nvector&lt;int&gt; a;      // \u76f8\u5f53\u4e8e\u4e00\u4e2a\u957f\u5ea6\u52a8\u6001\u53d8\u5316\u7684int\u6570\u7ec4\nvector&lt;int&gt; b[233]; // \u76f8\u5f53\u4e8e\u7b2c\u4e00\u7ef4\u957f233\uff0c\u7b2c\u4e8c\u4f4d\u957f\u5ea6\u52a8\u6001\u53d8\u5316\u7684int\u6570\u7ec4\nstruct rec{\n  int x, y;\n};\nvector&lt;rec&gt; c;      // \u81ea\u5b9a\u4e49\u7684\u7ed3\u6784\u4f53\u7c7b\u578b\u4e5f\u53ef\u4ee5\u4fdd\u5b58\u5728vector\u4e2d\n</code></pre>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE8/#12-sizeempty","title":"1.2 size/empty","text":"<p>size\u51fd\u6570\u8fd4\u56devector\u7684\u5b9e\u9645\u957f\u5ea6\uff08\u5305\u542b\u7684\u5143\u7d20\u4e2a\u6570\uff09\uff0cempty\u51fd\u6570\u8fd4\u56de\u4e00\u4e2abool\u7c7b\u578b\uff0c\u8868\u660evector\u662f\u5426\u4e3a\u7a7a\u3002\u4e8c\u8005\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662f O(1)O(1)\u3002 \u6240\u6709\u7684STL\u5bb9\u5668\u90fd\u652f\u6301\u8fd9\u4e24\u4e2a\u65b9\u6cd5\uff0c\u542b\u4e49\u4e5f\u76f8\u540c\uff0c\u4e4b\u540e\u6211\u4eec\u5c31\u4e0d\u518d\u91cd\u590d\u7ed9\u51fa\u3002</p> <pre><code>a.size()\na.empty() // \u5982\u679c\u662f\u7a7a\u5c31\u662ftrue\n</code></pre>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE8/#13-clear","title":"1.3 clear","text":"<p>clear\u51fd\u6570\u628avector\u6e05\u7a7a\u3002</p>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE8/#14","title":"1.4 \u8fed\u4ee3\u5668","text":"<p>\u8fed\u4ee3\u5668\u5c31\u50cfSTL\u5bb9\u5668\u7684\u201c\u6307\u9488\u201d\uff0c\u53ef\u4ee5\u7528\u661f\u53f7*\u64cd\u4f5c\u7b26\u89e3\u9664\u5f15\u7528\u3002</p> <p>\u4e00\u4e2a\u4fdd\u5b58int\u7684vector\u7684\u8fed\u4ee3\u5668\u58f0\u660e\u65b9\u6cd5\u4e3a\uff1a</p> <pre><code>vector&lt;int&gt;::iterator it = a.begin();\n</code></pre> <p>vector\u7684\u8fed\u4ee3\u5668\u662f\u201c\u968f\u673a\u8bbf\u95ee\u8fed\u4ee3\u5668\u201d\uff0c\u53ef\u4ee5\u628avector\u7684\u8fed\u4ee3\u5668\u4e0e\u4e00\u4e2a\u6574\u6570\u76f8\u52a0\u51cf\uff0c\u5176\u884c\u4e3a\u548c\u6307\u9488\u7684\u79fb\u52a8\u7c7b\u4f3c\u3002\u53ef\u4ee5\u628avector\u7684\u4e24\u4e2a\u8fed\u4ee3\u5668\u76f8\u51cf\uff0c\u5176\u7ed3\u679c\u4e5f\u548c\u6307\u9488\u76f8\u51cf\u7c7b\u4f3c\uff0c\u5f97\u5230\u4e24\u4e2a\u8fed\u4ee3\u5668\u5bf9\u5e94\u4e0b\u6807\u4e4b\u95f4\u7684\u8ddd\u79bb\u3002</p>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE8/#15-beginend","title":"1.5 begin/end","text":"<p>begin\u51fd\u6570\u8fd4\u56de\u6307\u5411vector\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668\u3002\u4f8b\u5982a\u662f\u4e00\u4e2a\u975e\u7a7a\u7684vector\uff0c\u5219*a.begin()\u4e0ea[0]\u7684\u4f5c\u7528\u76f8\u540c\u3002</p> <p>\u6240\u6709\u7684\u5bb9\u5668\u90fd\u53ef\u4ee5\u89c6\u4f5c\u4e00\u4e2a\u201c\u524d\u95ed\u540e\u5f00\u201d\u7684\u7ed3\u6784\uff0cend\u51fd\u6570\u8fd4\u56devector\u7684\u5c3e\u90e8\uff0c\u5373\u7b2cn \u4e2a\u5143\u7d20\u518d\u5f80\u540e\u7684\u201c\u8fb9\u754c\u201d\u3002*a.end()\u4e0ea[n]\u90fd\u662f\u8d8a\u754c\u8bbf\u95ee\uff0c\u5176\u4e2dn = a.size()\u3002</p> <p>\u4e0b\u9762\u4e24\u4efd\u4ee3\u7801\u90fd\u904d\u5386\u4e86vector a\uff0c\u5e76\u8f93\u51fa\u5b83\u7684\u6240\u6709\u5143\u7d20\u3002 <p>*a.begin()\u548ca[1]\u4e00\u4e2a\u610f\u601d</p> <pre><code>for (int i = 0; i &lt; a.size(); i ++)\n    cout &lt;&lt; a[i] &lt;&lt; endl;\n\nfor (vector&lt;int&gt;::iterator it = a.begin(); it != a.end(); it ++)\n    cout &lt;&lt; *it &lt;&lt; endl;\n</code></pre>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE8/#16-frontback","title":"1.6 front/back","text":"<p>front\u51fd\u6570\u8fd4\u56devector\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c\u7b49\u4ef7\u4e8ea.begin()\u548ca[0]\u3002 back\u51fd\u6570\u8fd4\u56devector\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff0c\u7b49\u4ef7\u4e8e--a.end()\u548ca[a.size() \u2013 1]\u3002</p>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE8/#17-push_backpop_back","title":"1.7 push_back()\u548cpop_back()","text":"<p>a.push_back(x)\u628a\u5143\u7d20x\u63d2\u5165\u5230vector a\u7684\u5c3e\u90e8\u3002 b.pop_back()\u5220\u9664vector a\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u3002</p> <p>vector\u7684\u5e95\u5c42\u539f\u7406\u662f\u500d\u589e</p> <p>\u4f1a\u5747\u644a\u65f6\u95f4\u590d\u6742\u5ea6</p>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE8/#2-include","title":"2. #include  <p>\u5934\u6587\u4ef6queue\u4e3b\u8981\u5305\u62ec\u5faa\u73af\u961f\u5217queue\u548c\u4f18\u5148\u961f\u5217priority_queue\u4e24\u4e2a\u5bb9\u5668\u3002</p> <p>\u961f\u5217\u6027\u8d28\uff0c\u5148\u8fdb\u5148\u51fa</p>","text":""},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE8/#21","title":"2.1 \u58f0\u660e","text":"<pre><code>queue&lt;int&gt; q;\nstruct rec{\u2026}; queue&lt;rec&gt; q;                        //\u7ed3\u6784\u4f53rec\u4e2d\u5fc5\u987b\u5b9a\u4e49\u5c0f\u4e8e\u53f7\npriority_queue&lt;int&gt; q;                              // \u5927\u6839\u5806\npriority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; q;   // \u5c0f\u6839\u5806\npriority_queue&lt;pair&lt;int, int&gt;&gt;q;\n</code></pre> <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;queue&gt;\nusing namespace std;\n\nint main () {\n    queue&lt;int&gt; q; // \u961f\u5217\n    priority_queue&lt;int&gt; a; // \u5927\u6839\u5806\n    priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; b; // \u5c0f\u6839\u5806\n    struct Rec {\n        int a, b;\n        bool operator&lt; (const Rec&amp; t) const {\n            return a &lt; t.a;\n        }\n    };\n    priority_queue&lt;Rec&gt; d;\n    d.push({1, 2});\n    return 0;\n}\n</code></pre>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE8/#22-queue","title":"2.2 \u5faa\u73af\u961f\u5217queue","text":"<pre><code>push    // \u4ece\u961f\u5c3e\u63d2\u5165\npop     // \u4ece\u961f\u5934\u5f39\u51fa\nfront   // \u8fd4\u56de\u961f\u5934\u5143\u7d20\nback    // \u8fd4\u56de\u961f\u5c3e\u5143\u7d20\n</code></pre>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE8/#23-priority_queue","title":"2.3 \u4f18\u5148\u961f\u5217priority_queue","text":"<pre><code>push    // \u628a\u5143\u7d20\u63d2\u5165\u5806\npop     // \u5220\u9664\u5806\u9876\u5143\u7d20\ntop     // \u67e5\u8be2\u5806\u9876\u5143\u7d20\uff08\u6700\u5927\u503c\uff09\n</code></pre> <p>queue\u662f\u6ca1\u6709clear\u51fd\u6570\u7684</p>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE8/#3-include","title":"3. #include  <p>\u5934\u6587\u4ef6stack\u5305\u542b\u6808\u3002\u58f0\u660e\u548c\u524d\u9762\u7684\u5bb9\u5668\u7c7b\u4f3c\u3002</p> <pre><code>push    // \u5411\u6808\u9876\u63d2\u5165\npop     // \u5f39\u51fa\u6808\u9876\u5143\u7d20\n</code></pre>","text":""},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE8/#4-include","title":"4. #include  <p>\u53cc\u7aef\u961f\u5217\u5728\u4e24\u8fb9\u90fd\u5148\u8fdb\u540e\u51fa</p> <p>\u53cc\u7aef\u961f\u5217deque\u662f\u4e00\u4e2a\u652f\u6301\u5728\u4e24\u7aef\u9ad8\u6548\u63d2\u5165\u6216\u5220\u9664\u5143\u7d20\u7684\u8fde\u7eed\u7ebf\u6027\u5b58\u50a8\u7a7a\u95f4\u3002\u5b83\u5c31\u50cf\u662fvector\u548cqueue\u7684\u7ed3\u5408\u3002\u4e0evector\u76f8\u6bd4\uff0cdeque\u5728\u5934\u90e8\u589e\u5220\u5143\u7d20\u4ec5\u9700\u8981 O(1)O(1) \u7684\u65f6\u95f4\uff1b\u4e0equeue\u76f8\u6bd4\uff0cdeque\u50cf\u6570\u7ec4\u4e00\u6837\u652f\u6301\u968f\u673a\u8bbf\u95ee\u3002</p> <pre><code>[]              // \u968f\u673a\u8bbf\u95ee\nbegin/end       // \u8fd4\u56dedeque\u7684\u5934/\u5c3e\u8fed\u4ee3\u5668\nfront/back      // \u961f\u5934/\u961f\u5c3e\u5143\u7d20\npush_back       // \u4ece\u961f\u5c3e\u5165\u961f\npush_front      // \u4ece\u961f\u5934\u5165\u961f\npop_back        // \u4ece\u961f\u5c3e\u51fa\u961f\npop_front       // \u4ece\u961f\u5934\u51fa\u961f\nclear           // \u6e05\u7a7a\u961f\u5217\n</code></pre>","text":""},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE8/#5-include","title":"5. #include  <p>\u5934\u6587\u4ef6set\u4e3b\u8981\u5305\u62ecset\u548cmultiset\u4e24\u4e2a\u5bb9\u5668\uff0c\u5206\u522b\u662f\u201c\u6709\u5e8f\u96c6\u5408\u201d\u548c\u201c\u6709\u5e8f\u591a\u91cd\u96c6\u5408\u201d\uff0c\u5373\u524d\u8005\u7684\u5143\u7d20\u4e0d\u80fd\u91cd\u590d\uff0c\u800c\u540e\u8005\u53ef\u4ee5\u5305\u542b\u82e5\u5e72\u4e2a\u76f8\u7b49\u7684\u5143\u7d20\u3002set\u548cmultiset\u7684\u5185\u90e8\u5b9e\u73b0\u662f\u4e00\u68f5\u7ea2\u9ed1\u6811\uff0c\u5b83\u4eec\u652f\u6301\u7684\u51fd\u6570\u57fa\u672c\u76f8\u540c\u3002</p> <p>set\u52a8\u6001\u7ef4\u62a4\u4e00\u4e2a\u6709\u5e8f\u7684\u96c6\u5408</p>","text":""},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE8/#51","title":"5.1 \u58f0\u660e","text":"<pre><code>set&lt;int&gt; s;\nstruct rec{\u2026}; set&lt;rec&gt; s;  // \u7ed3\u6784\u4f53rec\u4e2d\u5fc5\u987b\u5b9a\u4e49\u5c0f\u4e8e\u53f7\nmultiset&lt;double&gt; s;\n</code></pre>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE8/#52-sizeemptyclear","title":"5.2 size/empty/clear","text":"<p>\u4e0evector\u7c7b\u4f3c</p>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE8/#53","title":"5.3 \u8fed\u4ee3\u5668","text":"<p>set\u548cmultiset\u7684\u8fed\u4ee3\u5668\u79f0\u4e3a\u201c\u53cc\u5411\u8bbf\u95ee\u8fed\u4ee3\u5668\u201d\uff0c\u4e0d\u652f\u6301\u201c\u968f\u673a\u8bbf\u95ee\u201d\uff0c\u652f\u6301\u661f\u53f7*\u89e3\u9664\u5f15\u7528\uff0c\u4ec5\u652f\u6301++\u548c--\u4e24\u4e2a\u4e0e\u7b97\u672f\u76f8\u5173\u7684\u64cd\u4f5c\u3002</p> <p>\u8bbeit\u662f\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u4f8b\u5982set::iterator it; <p>\u82e5\u628ait ++\uff0c\u5219it\u4f1a\u6307\u5411\u201c\u4e0b\u4e00\u4e2a\u201d\u5143\u7d20\u3002\u8fd9\u91cc\u7684\u201c\u4e0b\u4e00\u4e2a\u201d\u5143\u7d20\u662f\u6307\u5728\u5143\u7d20\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u7684\u7ed3\u679c\u4e2d\uff0c\u6392\u5728it\u4e0b\u4e00\u540d\u7684\u5143\u7d20\u3002\u540c\u7406\uff0c\u82e5\u628ait --\uff0c\u5219it\u5c06\u4f1a\u6307\u5411\u6392\u5728\u201c\u4e0a\u4e00\u4e2a\u201d\u7684\u5143\u7d20\u3002</p>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE8/#54-beginend","title":"5.4 begin/end","text":"<p>\u8fd4\u56de\u96c6\u5408\u7684\u9996\u3001\u5c3e\u8fed\u4ee3\u5668\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5747\u4e3a O(1)O(1)\u3002</p> <p>s.begin()\u662f\u6307\u5411\u96c6\u5408\u4e2d\u6700\u5c0f\u5143\u7d20\u7684\u8fed\u4ee3\u5668\u3002</p> <p>s.end()\u662f\u6307\u5411\u96c6\u5408\u4e2d\u6700\u5927\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u8fed\u4ee3\u5668\u3002\u6362\u8a00\u4e4b\uff0c\u5c31\u50cfvector\u4e00\u6837\uff0c\u662f\u4e00\u4e2a\u201c\u524d\u95ed\u540e\u5f00\u201d\u7684\u5f62\u5f0f\u3002\u56e0\u6b64-- s.end()\u662f\u6307\u5411\u96c6\u5408\u4e2d\u6700\u5927\u5143\u7d20\u7684\u8fed\u4ee3\u5668\u3002</p>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE8/#55-insert","title":"5.5 insert","text":"<p>s.insert(x)\u628a\u4e00\u4e2a\u5143\u7d20x\u63d2\u5165\u5230\u96c6\u5408s\u4e2d\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(logn)O(logn)\u3002</p> <p>\u5728set\u4e2d\uff0c\u82e5\u5143\u7d20\u5df2\u5b58\u5728\uff0c\u5219\u4e0d\u4f1a\u91cd\u590d\u63d2\u5165\u8be5\u5143\u7d20\uff0c\u5bf9\u96c6\u5408\u7684\u72b6\u6001\u65e0\u5f71\u54cd\u3002</p>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE8/#56-find","title":"5.6 find","text":"<p>s.find(x)\u5728\u96c6\u5408s\u4e2d\u67e5\u627e\u7b49\u4e8ex\u7684\u5143\u7d20\uff0c\u5e76\u8fd4\u56de\u6307\u5411\u8be5\u5143\u7d20\u7684\u8fed\u4ee3\u5668\u3002\u82e5\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56des.end()\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(logn)O(logn)\u3002</p> <pre><code>if (a.find(x) == a.end()) // \u7528\u6765\u5224\u65ad\u662f\u5426\u5b58\u5728\u8fd9\u4e2a\u6570x\n</code></pre>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE8/#57-lower_boundupper_bound","title":"5.7 lower_bound/upper_bound","text":"<p>\u8fd9\u4e24\u4e2a\u51fd\u6570\u7684\u7528\u6cd5\u4e0efind\u7c7b\u4f3c\uff0c\u4f46\u67e5\u627e\u7684\u6761\u4ef6\u7565\u6709\u4e0d\u540c\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(logn)O(logn)\u3002</p> <p>s.lower_bound(x)\u67e5\u627e\u5927\u4e8e\u7b49\u4e8ex\u7684\u5143\u7d20\u4e2d\u6700\u5c0f\u7684\u4e00\u4e2a\uff0c\u5e76\u8fd4\u56de\u6307\u5411\u8be5\u5143\u7d20\u7684\u8fed\u4ee3\u5668\u3002</p> <p>s.upper_bound(x)\u67e5\u627e\u5927\u4e8ex\u7684\u5143\u7d20\u4e2d\u6700\u5c0f\u7684\u4e00\u4e2a\uff0c\u5e76\u8fd4\u56de\u6307\u5411\u8be5\u5143\u7d20\u7684\u8fed\u4ee3\u5668\u3002</p> <p>\u6ce8\u610f\u4e0a\u9762\u5e76\u4e0d\u662f\u76f8\u53cd\uff0c\u800c\u662f\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8e\uff0c\u4e00\u4e2a\u5927\u4e8e</p>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE8/#58-erase","title":"5.8 erase","text":"<p>\u8bbeit\u662f\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0cs.erase(it)\u4eces\u4e2d\u5220\u9664\u8fed\u4ee3\u5668it\u6307\u5411\u7684\u5143\u7d20\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(logn)O(logn)\u3002</p> <p>\u8bbex\u662f\u4e00\u4e2a\u5143\u7d20\uff0cs.erase(x)\u4eces\u4e2d\u5220\u9664\u6240\u6709\u7b49\u4e8ex\u7684\u5143\u7d20\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(k+logn)O(k+logn)\uff0c\u5176\u4e2d kk \u662f\u88ab\u5220\u9664\u7684\u5143\u7d20\u4e2a\u6570\u3002</p>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE8/#59-count","title":"5.9 count","text":"<p>s.count(x)\u8fd4\u56de\u96c6\u5408s\u4e2d\u7b49\u4e8ex\u7684\u5143\u7d20\u4e2a\u6570\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(k+logn)O(k+logn)\uff0c\u5176\u4e2d kk \u4e3a\u5143\u7d20x\u7684\u4e2a\u6570\u3002</p>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE8/#6-include","title":"6. #include  <p>map\u5bb9\u5668\u662f\u4e00\u4e2a\u952e\u503c\u5bf9key-value\u7684\u6620\u5c04\uff0c\u5176\u5185\u90e8\u5b9e\u73b0\u662f\u4e00\u68f5\u4ee5key\u4e3a\u5173\u952e\u7801\u7684\u7ea2\u9ed1\u6811\u3002Map\u7684key\u548cvalue\u53ef\u4ee5\u662f\u4efb\u610f\u7c7b\u578b\uff0c\u5176\u4e2dkey\u5fc5\u987b\u5b9a\u4e49\u5c0f\u4e8e\u53f7\u8fd0\u7b97\u7b26\u3002</p> <p>map a; <p>a[1] = 2;</p> <p>a[1000000] = 3;</p> <p>cout &lt;&lt; a[1000000];</p>","text":""},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE8/#61","title":"6.1 \u58f0\u660e","text":"<pre><code>map&lt;key_type, value_type&gt; name;\n\n//\u4f8b\u5982\uff1a\nmap&lt;long long, bool&gt; vis;\nmap&lt;string, int&gt; hash;\nmap&lt;pair&lt;int, int&gt;, vector&lt;int&gt;&gt; test;\n</code></pre>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE8/#62-sizeemptyclearbeginend","title":"6.2 size/empty/clear/begin/end","text":"<p>\u5747\u4e0eset\u7c7b\u4f3c\u3002</p>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE8/#63-inserterase","title":"6.3 insert/erase","text":"<p>\u4e0eset\u7c7b\u4f3c\uff0c\u4f46\u5176\u53c2\u6570\u5747\u662fpair\u3002"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE8/#64-find","title":"6.4 find","text":"<p>h.find(x)\u5728\u53d8\u91cf\u540d\u4e3ah\u7684map\u4e2d\u67e5\u627ekey\u4e3ax\u7684\u4e8c\u5143\u7ec4\u3002</p>"},{"location":"Course/cppFundamental/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE8/#65","title":"6.5 []\u64cd\u4f5c\u7b26","text":"<p>h[key]\u8fd4\u56dekey\u6620\u5c04\u7684value\u7684\u5f15\u7528\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(logn)O(logn)\u3002</p> <p>[]\u64cd\u4f5c\u7b26\u662fmap\u6700\u5438\u5f15\u4eba\u7684\u5730\u65b9\u3002\u6211\u4eec\u53ef\u4ee5\u5f88\u65b9\u4fbf\u5730\u901a\u8fc7h[key]\u6765\u5f97\u5230key\u5bf9\u5e94\u7684value\uff0c\u8fd8\u53ef\u4ee5\u5bf9h[key]\u8fdb\u884c\u8d4b\u503c\u64cd\u4f5c\uff0c\u6539\u53d8key\u5bf9\u5e94\u7684value\u3002</p> <p>\u770b\u52301.7\u4e60\u9898\u53ca\u7ec3\u4e601.8STL \u76841:40</p>"},{"location":"Course/cppPrimer/cppPrimer/","title":"\u7cbe\u8bfb Cpp Primer","text":""},{"location":"Course/cppPrimer/cppPrimer/#_1","title":"\u7cbe\u8bfb Cpp Primer","text":""},{"location":"Course/cs144/information/","title":"CS144 information","text":"<p>\u524d5\u4e2aLab\u4ecebyte_stream\u5f00\u59cb\uff0c\u4e00\u6b65\u4e00\u6b65\u5730\u6307\u5bfc\u4f60\u5b9e\u73b0\u51fa\u4e00\u4e2a\u80fd\u771f\u5b9e\u4f7f\u7528\u7684TCP\uff0c\u603b\u5f97\u6765\u8bf4\u6709\u8da3\u800c\u53c8\u6709\u7528\uff0c\u4e14\u96be\u5ea6\u4e5f\u4e0d\u7b97\u5f88\u5927\u3002</p> <p>Lab2\u548cLab3\u7684test case\u4e0d\u591f\u591a\uff0c\u5bfc\u81f4\u9519\u8bef\u6216\u8005\u662f\u4e0eLab\u671f\u671b\u7684\u8bbe\u8ba1\u4e0d\u7b26\u7684\u5b9e\u73b0\u4e5f\u80fd\u901a\u8fc7\u5168\u90e8\u7684test case\u3002\u7136\u540e\u5728Lab4\u91cc\uff0c\u8fd9\u4e9b\u95ee\u9898\u4f1a\u5168\u90e8\u66b4\u9732\u51fa\u6765......\u7ed3\u679c\u5c31\u662f\u5728\u505aLab4\u7684\u65f6\u5019\u5b8c\u5168\u4e0d\u80fd\u4fe1\u4efb\u81ea\u5df1\u5728Lab2\u548cLab3\u91cc\u7684\u76f8\u5e94\u5b9e\u73b0\uff0c\u8fd9\u6837\u4e5f\u5927\u5927\u589e\u52a0\u4e86debug\u96be\u5ea6\u3002</p> <p>Lab4\u91cc\u6709\u4e24\u4e2atest case\u5373fsm_ack_rst\u548cfsm_ack_rst_relaxed\u671f\u5f85\u7684\u884c\u4e3a\u662f\u5b8c\u5168\u76f8\u53cd\u7684\u3002\u5b9e\u9645\u4e0a\u5728\u5b98\u65b9\u7684FAQ\u9875\u9762\u4e0a\u7ed9\u51fa\u7684\u72b6\u6001\u673a\u662f\u4e0efsm_ack_rst\u671f\u5f85\u7684\u884c\u4e3a\u4e00\u81f4\uff0c\u4f46Lab4\u9ed8\u8ba4\u542f\u7528\u7684\u5374\u662ffsm_ack_rst_relaxed......</p> <p>\u5b98\u65b9\u63d0\u4f9b\u7684VirtualBox Image\u4e2d\u7684GDB\u662f\u6709bug\u7684\uff0c\u5728cmake_build_type=Debug\u751f\u6210\u7684binary\u4e0a\u4e0d\u80fd\u6b63\u786e\u5730\u6253\u65ad\u70b9\u3002\u5728Lab4\u4e4b\u524d\u6211\u8fd8\u80fd\u9760\u8089\u773c\u8c03\u8bd5\uff0c\u4f46\u662fLab4\u5b9e\u5728\u662f\u8089\u773c\u8c03\u4e0d\u52a8\u4e86\uff0c\u4e0d\u5f97\u4e0d\u5bfb\u6c42\u89e3\u51b3\u65b9\u6848\u3002\u540e\u6765\u95ee\u4e86\u4e00\u4f4d\u4e4b\u524d\u4e5f\u505a\u8fc7\u8fd9\u4e2aLab\u7684\u6e05\u534e\u5927\u4f6c @RT Huang\uff0c\u4ed6\u544a\u8bc9\u6211\u8bf4\u4ed6\u7528\u7684\u662fLLDB\u3002\u6211\u5c31\u8d76\u7d27\u6362\u4e86LLDB\uff0c\u8fd9\u624d\u80fd\u6109\u5feb\u7684\u8fdb\u884c\u8c03\u8bd5\u3002\u987a\u5e26\u4e00\u63d0\uff0c\u8fd9\u4f4d\u5927\u4f6c\u5728GitHub\u4e0a\u6709\u81ea\u5df1\u5b8c\u6210\u8fd9\u95e8\u8bfe\u7a0b\u548cLab\u7684\u7b14\u8bb0\uff0c\u4e5f\u662f\u503c\u5f97\u53c2\u8003\u7684Orz \u6211\u5ba4\u53cb @Comzyh\u540e\u6765\u6015\u6211\u641e\u5b9a\u4e0d\u4e86\u53c8\u6ca1\u4eba\u6559\u6211\uff0c\u5c31\u4e5f\u6765\u505a\u8fd9\u4e2aLab\u4e86\uff0c\u636e\u4ed6\u8bf4\u5f00\u4e86-O0\u4e4b\u540eGDB\u5c31\u80fd\u6b63\u5e38\u5de5\u4f5c\u4e86\uff0c\u4f46\u6211\u81ea\u5df1\u4e4b\u524d\u5c1d\u8bd5\u7684\u65f6\u5019\u8fd9\u6837\u8fd8\u662f\u4e0d\u80fd\u6b63\u5e38\u5de5\u4f5c\u3002</p> <p>\u200b                   </p>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/","title":"CS50 notebook","text":""},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#cs50","title":"CS50\u7f51\u7ad9\u3001\u8d44\u6599","text":"<ul> <li>manual pages to find CS50's libraries and functions</li> <li>C style from CS50</li> </ul>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#cs50_1","title":"CS50\u65b9\u6cd5\u8bba","text":"<ol> <li>\u770bnotes 2h</li> <li>\u770blecture 2.5h \u63a8\u8350\u4e0a\u7528edx\u4e0a\u7684\u94fe\u63a5\u53bbYouTube\u770b\uff0c\u800c\u4e0d\u662f\u7528edx\u81ea\u5e26\u7684\u64ad\u653e\u5668\uff0c\u56e0\u4e3a\u603b\u662f\u4f1a\u5361</li> <li>\u770bshorts 1.5h\uff0cshorts\u5f88\u91cd\u8981\uff0c\u5728\u4f5c\u4e1a\u91cc\u9762\u7ecf\u5e38\u4f1a\u7528\u5230</li> <li>\u505alab\uff08week2\u5f00\u59cb\u6709\uff09 \u65f6\u95f4\u4e0d\u5b9a</li> <li>\u505a\u4f5c\u4e1a\uff08\u5c3d\u91cf\u9009\u62e9feel more comfortable\u7684\u96be\u5ea6 \uff09 \u65f6\u95f4\u7ecf\u5e38\u8d85\u8fc73\u5c0f\u65f6</li> </ol> <p>\u5f88\u591a\u8bb2\u89e3\u975e\u5e38\u5f62\u8c61\uff0c\u6bd4\u5982week0\u6495\u4e66\uff0cweek3\u8bb2\u89e3merge sort\u65f6\u5c06\u5b57\u6bcd\u4ece\u7b2c0\u5c42sort\u5230\u7b2c\u4e09\u5c42\u5f97\u51fa\u590d\u6742\u5ea6nlogn</p> <p>\u5410\u69fd\uff1aweek3\u7684tideman\u4f5c\u4e1a\u4e00\u5927\u5806\u9009\u4e3e\u89c4\u5219\uff0c\u975e\u5e38\u96be\uff0c\u5bf9\u4e8e\u521a\u5b66\u7684\u4eba\u4e0d\u53c2\u8003\u5176\u4ed6\u4eba\u7684\u601d\u8def\uff0c\u5361\u597d\u51e0\u5929\u751a\u81f3\u51e0\u661f\u671f\u90fd\u6709\u53ef\u80fd</p>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#tips","title":"\u5c0ftips","text":"<p>atof()\u7528\u4e8e\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570(double)</p>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#_1","title":"\u5355\u8bcd","text":"<p>heck \u7cdf\u7cd5\uff0c\u89c1\u9b3c</p> <p>Exclamation \u611f\u53f9\u53f7</p> <p>Period \u53e5\u53f7</p> <p>Pedantically \u5356\u5f04\u5b66\u95ee\u5730\uff1b\u5b66\u7a76\u5f0f\u5730\uff0c\u8fc2\u8150\u5730</p> <p>Trait \u7279\u8d28\uff0c\u7279\u5f81</p> <p>Round to the nearest integer \u56db\u820d\u4e94\u5165\u5230\u6700\u8fd1\u7684\u6574\u6570</p> <p>Retrace the steps \u91cd\u6eaf\u4ee5\u524d\u7684\u6b65\u9aa4</p> <p>substitution cipher \u66ff\u6362\u5bc6\u7801</p> <p>encrypt \u628a\u2026\u2026\u52a0\u5bc6\uff0c\u5c06\u2026\u2026\u8bd1\u6210\u5bc6\u7801</p> <p>conceal \u9690\u85cf\uff1b\u9690\u7792</p> <p>Divide and conquer \u5206\u800c\u6cbb\u4e4b\uff0c\u5404\u4e2a\u51fb\u7834</p> <p>Zoom out \u7f29\u5c0f</p> <p>curly braces \u82b1\u62ec\u53f7{}</p> <p>on the order of \u8fd1\u4f3c</p> <p>Iterate \u8fed\u4ee3</p> <p>Resemble \u7c7b\u4f3c</p> <p>Prompt \u4fc3\u4f7f</p> <p>Shuffled \u6253\u4e71\u7684\uff0c\u6d17\u724c</p> <p>Elapsed \u7ecf\u8fc7</p> <p>Plurality \u591a\u6570\uff1b\u590d\u6570\uff1b\u517c\u804c\uff1b\u80dc\u51fa\u7968\u6570</p> <p>appointed by the monarch \u7531\u541b\u4e3b\u4efb\u547d</p> <p>First-past-the-post \u6700\u9ad8\u7968\u8005\u5f53\u9009</p> <p>Ballot \u9009\u4e3e</p> <p>Head-to-head \u767d\u5203\u6218</p> <p>Margin \u5dee\u8ddd</p> <p>glint \u95ea\u70c1\uff0c\u53d1\u5149</p> <p>scan line \u626b\u63cf\u7ebf</p> <p>precondition \u524d\u63d0\uff0c\u5148\u51b3\u6761\u4ef6</p> <p>equated with \u76f8\u7b49\u4e8e</p> <p>wrap around to \u73af\u7ed5\u00b7</p> <p>tinker with \u80e1\u4e71\u5730\u4fee\u8865\uff1btinker \u5c0f\u4fee\u8865\uff1b\u7b28\u624b\u7b28\u811a\u5730\u505a\u4e8b</p> <p>ampersand &amp;\u8bb0\u53f7\u540d\u79f0(address operator)</p> <p>asterisk *\u8bb0\u53f7\u540d\u79f0</p> <p>toggle \u5207\u6362\uff0c\u8f6c\u6362</p> <p>allocate \u5206\u914d</p> <p>poke around \u95f2\u901b</p> <p>whittle down \u524a\u5f31</p> <p>intimidating \u4ee4\u4eba\u671b\u800c\u751f\u754f\u7684</p> <p>screw up \u62e7\u7d27\uff1b\u9f13\u821e\uff1b\u5f04\u7cdf</p> <p>discipline \u7eaa\u5f8b\uff0c\u98ce\u7eaa\uff1b\u60e9\u7f5a\uff0c\u5904\u5206\uff1b\u8bad\u5bfc\uff0c\u7ba1\u6559</p> <p>creep up \u8815\u5347\uff1b\u6e17\u4e0a\u6765</p> <p>volatile \u6613\u53d8\u7684</p> <p>factorial \u9636\u4e58\u7684</p> <p>ephemeral \u77ed\u6682\u7684\uff0c\u77ed\u751f\u7684</p> <p>companion \u540c\u4f34\uff0c\u4f34\u4fa3</p> <p>grid \u683c\u6805 a grid of pixels</p> <p>metadata \u5143\u6570\u636e</p> <p>debute \u9996\u6b21\u53c2\u4e0e,\u9996\u6b21\u767b\u53f0</p> <p>tradeoff \u6743\u8861\uff0c\u6298\u4e2d</p> <p>snippet \u4ee3\u7801\u7247\u6bb5</p>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#assignments","title":"Assignments","text":""},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#week1-mario-more","title":"week1 mario-more","text":"<pre><code>#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    int height, row, column, space;\n    // Prompt user for height\n    do\n    {\n        height = get_int(\"Enter Your Height: \");\n    }\n    while (height &lt; 1 || height &gt; 8);\n\n    // For each row\n    for (row = 0; row &lt; height; row++)\n    {\n        // For each space\n        for (space = 0; space &lt; height - row - 1; space++)\n        {\n            printf(\" \");\n        }\n        // For each column\n        for (column = 0; column &lt;= row; column++)\n        {\n            printf(\"#\");\n        }\n        // Constant two spaces\n        printf(\"  \");\n        // The right part\n        for (column = 0; column &lt;= row; column++)\n        {\n            printf(\"#\");\n        }\n        // Move to next row\n        printf(\"\\n\");\n    }\n\n}\n</code></pre>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#week1-credit","title":"week1 credit","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;cs50.h&gt;\n\nbool check_card(long card);\nint get_length(long card);\nbool checksum(long card);\nvoid print_card_type(long card);\n\nint main(void)\n{\n    long card_number;\n    // Prompt user for credit card number\n    do\n    {\n        card_number = get_long(\"Number: \");\n    }\n    while (card_number &lt; 0);\n    // Print card type\n    if (check_card(card_number) == true)\n    {\n        print_card_type(card_number);\n    }\n    else\n    {\n        printf(\"INVALID\\n\");\n    }\n}\n// Check card lenth and check sum\nbool check_card(long card)\n{\n    int length = get_length(card);\n    return (length == 13 || length == 15 || length == 16) &amp;&amp; checksum(card);\n}\n// Get the length of credit card\nint get_length(long card)\n{\n    int i;\n    for (i = 0; card != 0; card /= 10, i++);\n    return i;\n}\n// Check sum\nbool checksum(long card)\n{\n    int sum = 0;\n    int i;\n    for (i = 0; card != 0; card /= 10, i++)\n    {\n        if (i % 2 == 0)\n        {\n            sum += card % 10;\n        }\n        else\n        {\n            int multiple = 2 * (card % 10);\n            sum += multiple / 10 + multiple % 10;\n        }\n    }\n    return (sum % 10) == 0;\n}\n// Identify and print card type\nvoid print_card_type(long card)\n{\n    if ((card &gt;= 34e13 &amp;&amp; card &lt; 35e13) || (card &gt;= 37e13 &amp;&amp; card &lt; 38e13))\n    {\n        printf(\"AMEX\\n\");\n    }\n    else if (card &gt;= 51e14 &amp;&amp; card &lt; 56e14)\n    {\n        printf(\"MASTERCARD\\n\");\n    }\n    else if ((card &gt;= 4e12 &amp;&amp; card &lt; 5e12) || (card &gt;= 4e15 &amp;&amp; card &lt; 5e15))\n    {\n        printf(\"VISA\\n\");\n    }\n    else\n    {\n        printf(\"INVALID\\n\");\n    }\n}\n</code></pre>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#week2-lab","title":"week2 lab","text":"<p>\u601d\u8def\uff1a</p> <ol> <li> <p>\u628a\u4e00\u4e2a\u5355\u8bcd\u6240\u6709\u7684\u5b57\u6bcd\u5168\u90e8\u8f6c\u6362\u6210\u5927\u5199</p> </li> <li> <p>A\u5bf9\u5e94\u7684\u662f65\uff0c\u6240\u4ee5\u76f8\u52a0\u7684\u4e3aword[i - 65]</p> </li> </ol> <pre><code>#include &lt;ctype.h&gt;\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\n// Points assigned to each letter of the alphabet\nint POINTS[] = {1, 3, 3, 2, 1, 4, 2, 4, 1, 8, 5, 1, 3, 1, 1, 3, 10, 1, 1, 1, 1, 4, 4, 8, 4, 10};\n\nint compute_score(string word);\n\nint main(void)\n{\n    // Get input words from both players\n    string word1 = get_string(\"Player 1: \");\n    string word2 = get_string(\"Player 2: \");\n\n    // Score both words\n    int score1 = compute_score(word1);\n    int score2 = compute_score(word2);\n\n    // TODO: Print the winner\n    if (score1 &gt; score2)\n    {\n        printf(\"Player 1 wins!\\n\");\n    }\n    if (score1 &lt; score2)\n    {\n        printf(\"Player 2 wins\\n\");\n    }\n    else\n    {\n        printf(\"Tie!\\n\");\n    }\n}\n\nint compute_score(string word)\n{\n    // TODO: Compute and return score for string\n    int length = strlen(word);\n    int sum = 0;\n    for (int i = 0; i &lt;length; i++)\n    {\n        word[i] = toupper(word[i]);\n    }\n\n    for (int j = 0; j &lt; length; j++)\n    {\n        int m = (int)word[j]-65;\n        sum = sum + POINTS[m];\n    }\n    return sum;\n}\n</code></pre>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#week2-readability","title":"week2 readability","text":"<p>\u6ce8\u610f\u8fd9\u9053\u9898\u4e2d\u7684\u8ba1\u7b97\u7ed3\u679c\u662f\u56db\u820d\u4e94\u5165\u7684\uff0c\u56db\u820d\u4e94\u5165\u7684\u5de7\u5999\u65b9\u6cd5\u662f(int)(x + 0.5)</p> <pre><code>#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n#include &lt;ctype.h&gt;\n\nint count_letters(string text);\nint count_words(string text);\nint count_sentences(string text);\n\nint main(void)\n{\n    // prompt user for imput\n    string input = get_string(\"Text: \");\n    int letters = count_letters(input);\n    int words = count_words(input);\n    int sentences = count_sentences(input);\n    // printf(\"%i letters\\n\", letters);\n    // printf(\"%i words\\n\", words);\n    // printf(\"%i sentences\\n\", sentences);\n    // index = 0.0588 * L - 0.296 * S - 15.8\n    double L = (double)letters / (double)words * 100;\n    double S = (double)sentences / (double)words * 100;\n    double index1 = 0.0588 * L - 0.296 * S - 15.8;\n    int index = (int)(index1 + 0.5);\n    // printf(\"L is %f\\n\", L);\n    // printf(\"S is %f\\n\", S);\n    // printf(\"index1 is %f\\n\", index1);\n    // printf(\"index is %i\\n\",index);\n\n    if (index &gt;= 16)\n    {\n        printf(\"Grade 16+\\n\");\n    }\n    else if (index &lt; 1)\n    {\n        printf(\"Before Grade 1\\n\");\n    }\n    else\n    {\n        printf(\"Grade %i\\n\", index);\n    }\n}\n\n// count the number of letters in the text\nint count_letters(string text)\n{\n    int count_of_letters = 0;\n    int length = strlen(text);\n    for (int i = 0; i &lt; length; i++)\n    {\n        if (isalpha(text[i]))\n        {\n            count_of_letters = count_of_letters + 1;\n        }\n    }\n    return count_of_letters;\n}\n\n// count the number of words in the text\nint count_words(string text)\n{\n    int count_of_words = 1;\n    int length = strlen(text);\n    for (int i = 0; i &lt; length; i++)\n    {\n        if (text[i] == ' ')\n        {\n            count_of_words = count_of_words + 1;\n        }\n    }\n    return count_of_words;\n}\n\n// count the number of sentences in the text\nint count_sentences(string text)\n{\n    int count_of_sentences = 0;\n    int length = strlen(text);\n    for (int i = 0; i &lt; length; i++)\n    {\n        if (text[i] == '.')\n        {\n            count_of_sentences = count_of_sentences + 1;\n        }\n        else if (text[i] == '!')\n        {\n            count_of_sentences = count_of_sentences + 1;\n        }\n        else if (text[i] == '?')\n        {\n            count_of_sentences = count_of_sentences + 1;\n        }\n        else\n        {\n            count_of_sentences = count_of_sentences + 0;\n        }\n    }\n    return count_of_sentences;\n}\n</code></pre>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#week2-substitution","title":"week2 substitution","text":"<ol> <li>\u539f\u5b57\u6bcd\u7684\u5927\u5c0f\u5199\u72b6\u6001\u4fdd\u7559\uff0c\u4e14key\u6709\u53ef\u80fd\u662f\u5927\u5c0f\u6df7\u6742\u7684\uff0c\u4f46\u662f\u8f93\u51fa\u7684\u5927\u5c0f\u5199\u662f\u4ee5plain text\u4e3a\u4f9d\u636e\u7684</li> <li>\u53ea\u6709alphabetical character\u9700\u8981\u88ab\u8f6c\u6362\uff0c\u5176\u4ed6\u7684\u90fd\u4e0d\u9700\u8981</li> <li>\u957f\u5ea6\u4e0d\u6b63\u786e\uff08\u957f\u4e8e\uff0c\u5c0f\u4e8e\uff09\u7684\u53ef\u4ee5\u8981\u62a5error</li> <li>\u6ca1\u6709\u8f93\u5165\uff0c\u9700\u8981\u62a5usage</li> <li>\u8f93\u5165\u591a\u4e2aargv[]\u4e5f\u9700\u8981\u62a5usage</li> <li>\u8981\u6709exit status\u76f4\u63a5\u9000\u51fa\u7a0b\u5e8f</li> </ol> <p>\u601d\u8def\uff1a</p> <ol> <li>\u5148\u5224\u65adkey\u662f\u5426\u7b26\u5408\u539f\u5219</li> <li>\u518d\u5bf9plaintext\u5206\u7c7b\u8ba8\u8bba</li> </ol> <pre><code>#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n#include &lt;ctype.h&gt;\n\nstring encrypt(string text, string substitute);\nbool check_duplicate(string text);\nbool check_invalid(string text);\n\nint main(int argc, string argv[])\n{\n    // check if there is no command-line argument\n    if (argc == 1)\n    {\n        // if no command-line argument, exit\n        printf(\"Usage: ./substitution key\\n\");\n        return 1;\n    }\n\n    string key = argv[1];\n    int length = strlen(key);\n\n    // check whether the key is valid\n    if (argc == 2)\n    {\n        if (length != 26)\n        {\n            // if length does not equal to 26, exit\n            printf(\"Key must contain 26 characters.\\n\");\n            return 1;\n        }\n        else if (check_duplicate(key))\n        {\n            // if there are duplicate characters, exit\n            printf(\"Key must not contain duplicate characters.\\n\");\n            return 1;\n        }\n        else if (check_invalid(key))\n        {\n            // if there are invalid characters, exit\n            printf(\"Invalid character in key.\\n\");\n            return 1;\n        }\n        else\n        {\n            // plain text should be provided and encrypted if the key is valid\n            string plain_text = get_string(\"plaintext: \");\n            string cipher_text = encrypt(plain_text, key);\n            printf(\"ciphertext: %s\\n\", cipher_text);\n            return 0;\n        }\n    }\n    else\n    {\n        printf(\"Usage: ./substitution key\\n\");\n        return 1;\n    }\n}\n\n// implementation of substitution cipher\nstring encrypt(string text, string substitute)\n{\n    int text_len = strlen(text);\n    int substitute_len = strlen(substitute);\n    // convert all the letters of key to uppercase\n    for (int i = 0; i &lt; substitute_len; i++)\n    {\n        substitute[i] = toupper(substitute[i]);\n    }\n    // substitution\n    for (int j = 0; j &lt; text_len; j++)\n    {\n        if (text[j] &gt;= 'A' &amp;&amp; text[j] &lt;= 'Z')\n        {\n            text[j] = substitute[(int)text[j] - 65];\n        }\n        else if (text[j] &gt;= 'a' &amp;&amp; text[j] &lt;= 'z')\n        {\n            text[j] = substitute[(int)text[j] - 97] + 32;\n        }\n        else\n        {\n            text[j] = text[j];\n        }\n    }\n    return text;\n}\n\n// check if there are duplicate characters\nbool check_duplicate(string text)\n{\n    int text_len = strlen(text);\n    int check = 0;\n    for (int i = 0; i &lt; text_len; i++)\n    {\n        for (int j = i + 1; j &lt; text_len; j++)\n        {\n            if (text[i] == text[j])\n            {\n                check = check + 1;\n            }\n        }\n    }\n    return check != 0;\n}\n\n// check if there are invalid characters\nbool check_invalid(string text)\n{\n    int text_len = strlen(text);\n    int check2 = 0;\n    for (int i = 0; i &lt; text_len; i++)\n    {\n        if (isalpha(text[i]))\n        {\n            check2 = check2 + 0;\n        }\n        else\n        {\n            check2 = check2 + 1;\n        }\n    }\n    return check2 != 0;\n}\n</code></pre>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#week3-lab","title":"week3 lab","text":"<pre><code>sort1 uses: bubble sort\n\nHow do you know?: when sorting sorted50000.txt, bubble sort does not need to swap any of the numbers and just exits, so it should cost less than selection sort.\n\nsort2 uses: merge sort\n\nHow do you know?: the time of sorting 50000 random numbers cost by sort2 algoritm is the smallest. Merge sort has the smallest big O when sorting large amount of numbers.\n\nsort3 uses: selection sort\n\nHow do you know?: when sorting reversed50000.txt, selection sort should cost less than the bubble sort.\n</code></pre>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#week3-plurality","title":"week3 plurality","text":"<pre><code>#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\n// Max number of candidates\n#define MAX 9\n\n// Candidates have name and vote count\ntypedef struct\n{\n    string name;\n    int votes;\n}\ncandidate;\n\n// Array of candidates\ncandidate candidates[MAX];\n\n// Number of candidates\nint candidate_count;\n\n// Function prototypes\nbool vote(string name);\nvoid print_winner(void);\n\nint main(int argc, string argv[])\n{\n    // Check for invalid usage\n    if (argc &lt; 2)\n    {\n        printf(\"Usage: plurality [candidate ...]\\n\");\n        return 1;\n    }\n\n    // Populate array of candidates\n    candidate_count = argc - 1;\n    if (candidate_count &gt; MAX)\n    {\n        printf(\"Maximum number of candidates is %i\\n\", MAX);\n        return 2;\n    }\n    for (int i = 0; i &lt; candidate_count; i++)\n    {\n        candidates[i].name = argv[i + 1];\n        candidates[i].votes = 0;\n    }\n\n    int voter_count = get_int(\"Number of voters: \");\n\n    // Loop over all voters\n    for (int i = 0; i &lt; voter_count; i++)\n    {\n        string name = get_string(\"Vote: \");\n\n        // Check for invalid vote\n        if (!vote(name))\n        {\n            printf(\"Invalid vote.\\n\");\n        }\n    }\n\n    // Display winner of election\n    print_winner();\n}\n\n// Update vote totals given a new vote\nbool vote(string name)\n{\n    int b = 0;\n    for (int i = 0; i &lt; candidate_count; i++)\n    {\n        if (strcmp(candidates[i].name, name) == 0)\n        {\n            candidates[i].votes = candidates[i].votes + 1;\n            b = b + 1;\n            return true;\n        }\n    }\n\n    return b != 0;\n}\n\n// Print the winner (or winners) of the election\nvoid print_winner(void)\n{\n    int max = candidates[0].votes;\n\n    for (int i = 1; i &lt; candidate_count; i++)\n    {\n        if (candidates[i].votes &gt; max)\n        {\n            max = candidates[i].votes;\n        }\n    }\n\n    for (int i = 0; i &lt; candidate_count; i++)\n    {\n        if (candidates[i].votes == max)\n        {\n            printf(\"%s\\n\", candidates[i].name);\n        }\n    }\n\n}\n</code></pre>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#week3-tideman","title":"week3 tideman","text":"<p>\u50a8\u5b58\u540d\u5b57\u7684\u662f string candidates[]</p> <p>\u540d\u5b57\u7684\u6570\u91cf\u662f candidate_count</p> <p>ranks[]\u91cc\u9762\u50a8\u5b58\u540d\u6b21</p> <p>bool vote:</p> <pre><code>#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\n// Max number of candidates\n#define MAX 9\n\n// preferences[i][j] is number of voters who prefer i over j\nint preferences[MAX][MAX];\n\n// locked[i][j] means i is locked in over j\nbool locked[MAX][MAX];\n\n// Each pair has a winner, loser\ntypedef struct\n{\n    int winner;\n    int loser;\n}\npair;\n\n// check whether the edges will create a cycle\nbool check_cycle(int winner, int loser);\n\n// Array of candidates\nstring candidates[MAX];\npair pairs[MAX * (MAX - 1) / 2];\n\nint pair_count;\nint candidate_count;\n\n// Function prototypes\nbool vote(int rank, string name, int ranks[]);\nvoid record_preferences(int ranks[]);\nvoid add_pairs(void);\nvoid sort_pairs(void);\nvoid lock_pairs(void);\nvoid print_winner(void);\n\nint main(int argc, string argv[])\n{\n    // Check for invalid usage\n    if (argc &lt; 2)\n    {\n        printf(\"Usage: tideman [candidate ...]\\n\");\n        return 1;\n    }\n\n    // Populate array of candidates\n    candidate_count = argc - 1;\n    if (candidate_count &gt; MAX)\n    {\n        printf(\"Maximum number of candidates is %i\\n\", MAX);\n        return 2;\n    }\n    for (int i = 0; i &lt; candidate_count; i++)\n    {\n        candidates[i] = argv[i + 1];\n    }\n\n    // Clear graph of locked in pairs\n    for (int i = 0; i &lt; candidate_count; i++)\n    {\n        for (int j = 0; j &lt; candidate_count; j++)\n        {\n            locked[i][j] = false;\n        }\n    }\n\n    pair_count = 0;\n    int voter_count = get_int(\"Number of voters: \");\n\n    // Query for votes\n    for (int i = 0; i &lt; voter_count; i++)\n    {\n        // ranks[i] is voter's ith preference\n        int ranks[candidate_count];\n\n        // Query for each rank\n        for (int j = 0; j &lt; candidate_count; j++)\n        {\n            string name = get_string(\"Rank %i: \", j + 1);\n\n            if (!vote(j, name, ranks))\n            {\n                printf(\"Invalid vote.\\n\");\n                return 3;\n            }\n        }\n\n        record_preferences(ranks);\n\n        printf(\"\\n\");\n    }\n\n    add_pairs();\n    sort_pairs();\n    lock_pairs();\n    print_winner();\n    return 0;\n}\n\n// Update ranks given a new vote\nbool vote(int rank, string name, int ranks[])\n{\n    for (int i = 0; i &lt; candidate_count; i++)\n    {\n        if (strcmp(candidates[i], name) == 0)\n        {\n            ranks[rank] = i;\n            return true;\n        }\n    }\n    return false;\n}\n\n// Update preferences given one voter's ranks\nvoid record_preferences(int ranks[])\n{\n    for (int i = 0; i &lt; candidate_count; i++)\n    {\n        for (int j = i + 1; j &lt; candidate_count; j++)\n        {\n            preferences[ranks[i]][ranks[j]]++;\n        }\n    }\n    return;\n}\n\n// Record pairs of candidates where one is preferred over the other\nvoid add_pairs(void)\n{\n    for (int i = 0; i &lt; candidate_count; i++)\n    {\n        for (int j = i + 1; j &lt; candidate_count; j++)\n        {\n            if (preferences[i][j] &gt; preferences[j][i])\n            {\n                pairs[pair_count].winner = i;\n                pairs[pair_count].loser = j;\n                pair_count = pair_count + 1;\n            }\n            else if (preferences[i][j] &lt; preferences[j][i])\n            {\n                pairs[pair_count].winner = j;\n                pairs[pair_count].loser = i;\n                pair_count = pair_count + 1;\n            }\n        }\n    }\n    return;\n}\n\n// Sort pairs in decreasing order by strength of victory\nvoid sort_pairs(void)\n{\n    bool swapped;\n    for (int i = 0; i &lt; pair_count - 1; i++)\n    {\n        swapped = false;\n        for (int j = 0; j &lt; pair_count - 1; j++)\n        {\n            if (preferences[pairs[j].winner][pairs[j].loser] &lt; preferences[pairs[j + 1].winner][pairs[j + 1].loser])\n            {\n                pair temp = pairs[j];\n                pairs[j] = pairs[j + 1];\n                pairs[j + 1] = temp;\n                swapped = true;\n            }\n        }\n        if (swapped == false)\n        {\n            break;\n        }\n    }\n    return;\n}\n\n// Lock pairs into the candidate graph in order, without creating cycles\nvoid lock_pairs(void)\n{\n    for (int i = 0; i &lt; pair_count; i++)\n    {\n        if (!check_cycle(pairs[i].loser, pairs[i].winner))\n        {\n            locked[pairs[i].winner][pairs[i].loser] = true;\n        }\n    }\n    return;\n}\n\n// Print the winner of the election\nvoid print_winner(void)\n{\n    for (int i = 0; i &lt; candidate_count; i++)\n    {\n        int locked_edge_numbers = 0;\n        for (int j = 0; j &lt; candidate_count; j++)\n        {\n            if (locked[j][i] == false)\n            {\n                locked_edge_numbers++;\n                if (locked_edge_numbers == candidate_count)\n                {\n                    printf(\"%s\\n\", candidates[i]);\n                }\n            }\n        }\n    }\n    return;\n}\n\n// check whether the edges will create a cycle\nbool check_cycle(int loser, int winner)\n{\n    if (loser == winner)\n    {\n        return true;\n    }\n    for (int i = 0; i &lt; candidate_count; i++)\n    {\n        if (locked[loser][i])\n        {\n            if (check_cycle(i, winner))\n            {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nbool cycle(int end, int cycle_start)\n{\n    // Return True if there is a cycle created (recursion base case)\n    if (end == cycle_start)\n    {\n        return true;\n    }\n    // Loop through candidates\n    for (int i = 0; i &lt; candidate_count; i++)\n    {\n        if (locked[end][i])\n        {\n            if (cycle(i, cycle_start))\n            {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n</code></pre>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#week4-lab","title":"week4 lab","text":"<pre><code>// Modifies the volume of an audio file\n\n#include &lt;stdint.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\n// Number of bytes in .wav header\nconst int HEADER_SIZE = 44;\n\n// Create an array to store header file\nuint8_t header[HEADER_SIZE];\n\n// using the int16_t type to store audio sample\nint16_t buffer;\n\nint main(int argc, char *argv[])\n{\n    // Check command-line arguments\n    if (argc != 4)\n    {\n        printf(\"Usage: ./volume input.wav output.wav factor\\n\");\n        return 1;\n    }\n\n    // Open files and determine scaling factor\n    FILE *input = fopen(argv[1], \"r\");\n    if (input == NULL)\n    {\n        printf(\"Could not open file.\\n\");\n        return 1;\n    }\n\n    FILE *output = fopen(argv[2], \"w\");\n    if (output == NULL)\n    {\n        printf(\"Could not open file.\\n\");\n        return 1;\n    }\n\n    float factor = atof(argv[3]);\n\n    // TODO: Copy header from input file to output file\n    fread(&amp;header, sizeof(header), 1, input);\n    fwrite(&amp;header, sizeof(header), 1, output);\n\n    // TODO: Read samples from input file and write updated data to output file\n    while (fread(&amp;buffer, sizeof(buffer), 1, input))\n    {\n        buffer *= factor;\n        fwrite(&amp;buffer, sizeof(buffer), 1, output);\n    }\n    // Close files\n    fclose(input);\n    fclose(output);\n}\n</code></pre>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#week4-filter-more","title":"week4 filter-more","text":"<pre><code>#include \"helpers.h\"\n#include &lt;math.h&gt;\n\n// Convert image to grayscale\nvoid grayscale(int height, int width, RGBTRIPLE image[height][width])\n{\n    for (int i = 0; i &lt; height; i++)\n    {\n        for (int j = 0; j &lt; width; j++)\n        {\n            int average = round((image[i][j].rgbtRed + image[i][j].rgbtGreen + image[i][j].rgbtBlue) / 3.0);\n            image[i][j].rgbtRed = average;\n            image[i][j].rgbtBlue = average;\n            image[i][j].rgbtGreen = average;\n        }\n    }\n    return;\n}\n\n// Reflect image horizontally\nvoid reflect(int height, int width, RGBTRIPLE image[height][width])\n{\n    for (int i = 0; i &lt; height; i++)\n    {\n        if (width % 2 == 1)\n        {\n            for (int j = 0; j &lt; ((width + 1) / 2) - 1; j ++)\n            {\n                RGBTRIPLE replace[i][j];\n                replace[i][j] = image[i][j];\n                image[i][j] = image[i][width - 1 - j];\n                image[i][width - 1 - j] = replace[i][j];\n            }\n        }\n        else\n        {\n            for (int j = 0; j &lt; width / 2; j ++)\n            {\n                RGBTRIPLE replace[i][j];\n                replace[i][j] = image[i][j];\n                image[i][j] = image[i][width - 1 - j];\n                image[i][width - 1 - j] = replace[i][j];\n            }\n        }\n    }\n    return;\n}\n\n// Blur image\nvoid blur(int height, int width, RGBTRIPLE image[height][width])\n{\n    RGBTRIPLE replace[height][width];\n    for (int i = 0; i &lt; height; i++)\n    {\n        for (int j = 0; j &lt; width; j++)\n        {\n            float blueSum = 0;\n            float greenSum = 0;\n            float redSum = 0;\n            float counter = 0;\n            for (int x = i - 1; x &lt; i + 2; x++)\n            {\n                for (int y = j - 1; y &lt; j + 2; y++)\n                {\n                    if (x &lt; 0 || x &gt; height - 1)\n                    {\n                        continue;\n                    }\n                    if (y &lt; 0 || y &gt; width - 1)\n                    {\n                        continue;\n                    }\n                    blueSum += image[x][y].rgbtBlue;\n                    greenSum += image[x][y].rgbtGreen;\n                    redSum += image[x][y].rgbtRed;\n                    counter++;\n                }\n            }\n            replace[i][j].rgbtBlue = round(blueSum / counter);\n            replace[i][j].rgbtGreen = round(greenSum / counter);\n            replace[i][j].rgbtRed = round(redSum / counter);\n        }\n    }\n    for (int i = 0; i &lt; height; i++)\n    {\n        for (int j = 0; j &lt; width; j++)\n        {\n            image[i][j].rgbtBlue = replace[i][j].rgbtBlue;\n            image[i][j].rgbtGreen = replace[i][j].rgbtGreen;\n            image[i][j].rgbtRed = replace[i][j].rgbtRed;\n        }\n    }\n    return;\n}\n\n// Detect edges\nvoid edges(int height, int width, RGBTRIPLE image[height][width])\n{\n    RGBTRIPLE replace[height][width];\n    int kernelX[3][3] = {{-1, 0, 1}, {-2, 0, 2}, {-1, 0, 1}};\n    int kernelY[3][3] = {{-1, -2, -1}, {0, 0, 0}, {1, 2, 1}};\n    for (int i = 0; i &lt; height; i++)\n    {\n        for (int j = 0; j &lt; width; j++)\n        {\n            int gxBlue = 0;\n            int gyBlue = 0;\n            int gxGreen = 0;\n            int gyGreen = 0;\n            int gxRed = 0;\n            int gyRed = 0;\n            for (int x = i - 1; x &lt; i + 2; x++)\n            {\n                for (int y = j - 1; y &lt; j + 2; y++)\n                {\n                    if (x &lt; 0 || x &gt; height - 1)\n                    {\n                        continue;\n                    }\n                    if (y &lt; 0 || y &gt; width - 1)\n                    {\n                        continue;\n                    }\n                    gxBlue += image[x][y].rgbtBlue * kernelX[x - i + 1][y - j + 1];\n                    gyBlue += image[x][y].rgbtBlue * kernelY[x - i + 1][y - j + 1];\n                    gxGreen += image[x][y].rgbtGreen * kernelX[x - i + 1][y - j + 1];\n                    gyGreen += image[x][y].rgbtGreen * kernelY[x - i + 1][y - j + 1];\n                    gxRed += image[x][y].rgbtRed * kernelX[x - i + 1][y - j + 1];\n                    gyRed += image[x][y].rgbtRed * kernelY[x - i + 1][y - j + 1];\n                }\n            }\n            // calculate Sobel operator\n            int blue = round(sqrt(gxBlue * gxBlue + gyBlue * gyBlue));\n            int green = round(sqrt(gxGreen * gxGreen + gyGreen * gyGreen));\n            int red = round(sqrt(gxRed * gxRed + gyRed * gyRed));\n            // cap at 255\n            if (blue &gt; 255)\n            {\n                blue = 255;\n            }\n            if (green &gt; 255)\n            {\n                green = 255;\n            }\n            if (red &gt; 255)\n            {\n                red = 255;\n            }\n            replace[i][j].rgbtBlue = blue;\n            replace[i][j].rgbtGreen = green;\n            replace[i][j].rgbtRed = red;\n        }\n    }\n    for (int i = 0; i &lt; height; i++)\n    {\n        for (int j = 0; j &lt; width; j++)\n        {\n            // assign new values to pixels\n            image[i][j].rgbtBlue = replace[i][j].rgbtBlue;\n            image[i][j].rgbtGreen = replace[i][j].rgbtGreen;\n            image[i][j].rgbtRed = replace[i][j].rgbtRed;\n        }\n    }\n\n\n    return;\n}\n</code></pre>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#week4-recover","title":"week4 recover","text":"<pre><code>#include&lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\n\n\n\nint main(int argc, char *argv[])\n{\n    //Make sure that you have one command line argument\n    if (argc != 2)\n    {\n        printf( \"Please enter file to open.\\n\");\n        return 1;\n    }\n\n// open memory card file\nFILE *file=fopen(argv[1],\"r\");\nif(file == NULL)\n{ \n    printf(\"not a file\\n\");\n}\n\n// set jpg count\nint jpg_found=0;\n\n// set filecount\nint filecount=0;\n\n// set buffer with 512 bytes. \nunsigned char buffer[512]; // alternate : unsigned char buffer[BUFFER_SIZE]  but you have to :#define BUFFER_SIZE 512 at top\n\n// define file for images\nFILE *img=NULL;\n\n// set filename \nchar filename[8]; // 8= 3 digits(000-049) 1 dot 3 char(jpg) 1 /0(null terminating char)\n\n// read file\nwhile(fread(buffer,512,1,file)==1) // data,size,qty,file; while this condition is satisfied\n\n// check if jpg using 1st four bytes\n {\n if (buffer[0] == 0xff &amp;&amp; buffer[1] == 0xd8 &amp;&amp; buffer[2] == 0xff &amp;&amp; (buffer[3] &amp; 0xf0) == 0xe0) // for buffer[3] condition watch walkthrough video explanation\n{\nif( jpg_found==1) // already opened a prior jpg byte then close it\n{\n    fclose(img);\n}\nelse // if not then you found a jpeg so increment counter\n{ \n    jpg_found=1;\n}\n\nsprintf(filename,\"%03i.jpg\",filecount); // print filename 000.jpg and increasing each time\nimg=fopen(filename,\"w\"); // open file for images to append/write \nfilecount++; // after each file is opened increment file count counter\n}\nif(jpg_found==1) // once found jpeg write from buffer to img file \n{\n    fwrite(&amp;buffer,512,1,img);\n}\n}\nfclose(file); // close file(memory card to buffer) and img(buffer to img file)\nfclose(img);\n\n// done\nreturn 0;\n\n}\n</code></pre>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#week-2-arrays","title":"WEEK 2 Arrays","text":""},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#compiling","title":"compiling","text":"<p>Compiling source codes into machine codes is actually made up of four smaller steps:</p> <ul> <li>preprocessing</li> <li>compiling</li> <li>assembling</li> <li>linking</li> </ul> <p>preprocessing: replacing the lines that starts with a #.</p> <p>Exp. #include  will tell clang to look for that header file, because it contains content, such as prototypes of functions. <p>Compiling: taking our source code in C and converting it into assembly language</p> <p>Assembling: take the code in assemble and translate it into binary.</p> <p>Compiling: combine the compiled libraries and compiled binary of our program </p>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#debugging","title":"debugging","text":"<ol> <li>use printf</li> <li>There is a debugger in VS code: red dot or called breakpoint Debug50 ./filename</li> <li>rubber duck  talk to it</li> </ol> <pre><code>#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint get_negative_int(void);\n\nint main(void)\n{\n  int i = get_negative_int();\n  printf(\"%i\\n\",i);\n}\n\nint get_negative_int(void)\n{\n  int n;\n  do\n  {\n    n = get_int(\"waht's the number: \");\n  }\n  while (n &gt;= 0);\n  return n;\n}\n</code></pre>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#memory","title":"memory","text":"<p>Bool: 1byte</p> <p>Char: 1byte (8bits in 1 byte), by ASCII 256 different characters can be represented</p> <p>Double: 8 bytes</p> <p>Float: 4bytes</p> <p>int: 4bytes</p> <p>Long: 8bytes</p> <p>String: variable</p> <p>RAM: random-access memory, stores zeroes and ones </p>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#arrays","title":"arrays","text":"<p>Declaration: tepe name[size]</p> <p>Float lechi[50]</p> <pre><code>bool truthtable[3] = { false, false, true};\n</code></pre> <pre><code>bool battleship[10][10];\n</code></pre> <p>\u5728C\u91cc\u9762\uff0c\u5c06\u4e00\u4e2aarray\u590d\u5236\u5230\u53e6\u4e00\u4e2a\u65f6\uff0c\u4e0d\u80fd\u76f4\u63a5\u7528=\u8d4b\u503c\uff0c\u800c\u662f\u8981\u7528loop</p> <p>\u6574\u4e2aarray\u4e0d\u662f\u4e00\u4e2avariable\uff0c\u4f46\u662farray\u91cc\u7684\u6bcf\u4e2aelement\u662f\u4e00\u4e2a\u53d8\u91cf</p> <pre><code>int foo[3] = {1, 2, 3};\nint bar[3];\n\nfor (int j = 0; j &lt; 3; j++)\n{\nbar[j] = int[j];\n}\n</code></pre> <p>Square bracket: [ ]</p> <p>It turns out we can refer to multiple variables with one name with another type called an array</p> <p>Array is 0-indexed</p> <pre><code>#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    int n = get_int(\"How many scores? \");\n\n    int scores[n];\n\n    for (int i = 0; i &lt; n; i++)\n    {\n      scores[i] = get_int(\"Score: \");\n    }\n\n    printf(\"Average: %f\\n\", (scores[0] + scores[1] + scores[2]) / 3.0);\n} \n</code></pre>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#characters","title":"characters","text":"<p>We can explicitly convert chars to ints by:</p> <pre><code>printf(\"i%i%i%\\n\", (int)c1, (int)c2, (int)c3);\n</code></pre>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#strings","title":"strings","text":"<p>Strings are actually just arrays of characters </p> <pre><code>    string s = \"HI!\";\n    printf(\"%i %i %i %i\\n\", s[0], s[1], s[2], s[3]);\n</code></pre> <p>the output is 72 73 33 0</p> <p>In C, strings end with a sopecial chatacter '\\0', so 4 bytes are needed to store a string with 3 bytes.</p> <p>Eight 0s called NUL</p> <p>**a program to capitalize the letters in a string: **</p> <pre><code>#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint main()void\n{\n  string name = get_string(\"your name in lower case: \");\n  for (int i = 0, n = strlen(name); i &lt; n; i++)\n  {\n    if ( s[i] &gt;= 'a' &amp;&amp; s[i] &lt;= 'z')\n    {\n      printf(\"%c\", s[i] - 32);\n    }\n    else\n    {\n      printf(\"%c\", s[i]);\n    }\n  }\n}\n</code></pre>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#small-tips-to-improve-the-loop","title":"small tips to improve the loop","text":"<p>Use:</p> <pre><code>for (int i = 0, n = strlen(s); i &lt; n; i++)\n</code></pre> <p>Rather than:</p> <pre><code>for (int i = 0; i &lt; strlen(s); i++)\n</code></pre>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#command-line-arguments","title":"command-line arguments","text":"<p>argc: argument count</p> <p>argv: argument vector (is an array of the arguments)</p> <pre><code>#include &lt;stdio.h&gt;\nint main(int argc, string argv[])\n{\n    printf(\"hello, %s\\n\", argv[1]);\n}\n</code></pre> <p>and then in terminal:</p> <pre><code>make filename\n./filename Lechi\nhello, Lechi\n</code></pre> <p>\u6ce8\u610f\uff1a</p> <ol> <li>\u4e0d\u662fargv[0]</li> <li>argc\u662f\u4f20\u9012\u7ed9\u5e94\u7528\u7a0b\u5e8f\u7684\u53c2\u6570\u4e2a\u6570\uff0cargv\u662f\u4f20\u9012\u7ed9\u5e94\u7528\u7a0b\u5e8f\u7684\u53c2\u6570\uff0c\u4e14\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\u7a0b\u5e8f\u540d\u3002</li> </ol> <pre><code>#include &lt;stdio.h&gt;\n\nint main(int argc, string argv[])\n{\n  if (argc == 2)\n  {\n    printf(\"hello, %s\\n\", argv[1]);\n  }\n  else\n  {\n    print(\"hello, world!\");\n  }\n}\n</code></pre> <p>\u4ee5\u4e0a\u7a0b\u5e8f\u5224\u65ad\u662f\u5426\u4e3a\u4e00\u4e2a\u8f93\u5165\u53c2\u6570\u65f6\uff0cargc\u9700\u8981\u548c2\u6bd4\u8f83</p>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#exit-status","title":"Exit status","text":"<p>Return non-zero value from main to exit from the program</p> <p>Exp. return 1;</p> <pre><code>#include &lt;stdio.h&gt;\n\nint main(int argc, string argv[])\n{\n  if (argc != 2)\n  {\n    printf(\"sorry, something went wrong!\");\n    return 1;\n  }\n  else\n  {\n    print(\"hello, %s\\n\", argv[1]);\n    return 0; \n  }\n}\n</code></pre> <p>Error code \u5c31\u662fexit status</p>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#functions","title":"functions","text":"<p>Function declarations</p> <p>Return-type function-name(argument-list)</p> <pre><code>// includes\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\n// declare function prototype\nint add_two_ints(int a, int b);\n\nint main(void)\n{\n    // ask user for input\n    int x = get_int(\"Give me an integer: \");\n    int y = get_int(\"Give me another integer: \");\n\n    // add the two numbers together via a function call\n    int z = add_two_ints(x, y);\n\n    // output the result\n    printf(\"The sum of %i and %i is %i!\\n\", x, y, z);\n\n}\n\nint add_two_ints(int a, int b)\n{\n    int sum = a + b;\n    return sum;\n}\n</code></pre> <p>Valid_triangle</p> <pre><code>bool valid_triangle(float a, float b, float c);\n\nbool valid_triangle(float a, float b, float c)\n{\n  // check for all positive sides\n  if (a &lt;= 0 || b &lt;= 0 || c &lt;= 0)\n  {\n    return false;\n  }\n  // check that sum of any two sides greater than the third\n  if ((a + b &lt;= c) || (a + c &lt;= b) || (b + C &lt;= a))\n  {\n    return false;\n  }\n  // if the sides passed both two tests, then the triangle is valid\n  return true;\n}\n</code></pre>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#variable-scope","title":"variable scope","text":"<p>local variable </p> <p>global variable</p>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#compare-string-in-c","title":"compare string in C","text":"<p>use strcmp()</p> <pre><code>if (strcmp(phrase, password) == 0)\n</code></pre>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#pass-by-value","title":"pass by value","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;cs50.h&gt;\n\nint set_int(int x);\n\nint main(void)\n{\n    int a = 5;\n    a = set_int(a);\n    printf(\"%i\\n\", a);\n}\n\nint set_int(int x)\n{\n    x = 20;\n    return x;\n}\n</code></pre> <p>\u8f93\u51fa\u7684\u662f20</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;cs50.h&gt;\n\nvoid set_int(int x);\n\nint main(void)\n{\n    int a = 5;\n    set_int(a);\n    printf(\"%i\\n\", a);\n}\n\nvoid set_int(int x)\n{\n    x = 20;\n}\n</code></pre> <p>\u8f93\u51fa\u65f65</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;cs50.h&gt;\n\nvoid set_array(int x[4]);\n\nint main(void)\n{\n    int number[4] = {1, 2, 3, 4};\n    set_array(number);\n    printf(\"%i\\n\", number[0]);\n}\n\nvoid set_array(int x[4])\n{\n    x[0] = 20;\n}\n</code></pre> <p>\u8f93\u51fa\u4e3a20\uff0carray\u65f6pass by reference\uff0cint\u662fpass by value</p>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#_2","title":"\u4e24\u79cd\u4e0d\u540c\u7684\u5c06\u5b57\u6bcd\u8f6c\u6362\u6210\u5927\u5199\u7684\u65b9\u6cd5","text":"<ol> <li>\u53ea\u8f93\u51fa\u5927\u5199\uff0c\u4f46\u662f\u4e0d\u6539\u53d8\u539f\u6765\u7684\u5b57\u7b26\u4e32\uff08\u6709\u4e24\u79cd\u8f93\u51fa\u65b9\u5f0f\uff09</li> </ol> <pre><code>#include &lt;ctype.h&gt;\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\n    string s = get_string(\"Before: \");\n     int n = strlen(s);\n    for (int i = 0; i &lt; n; i++)\n    {\n    // \u7b2c\u4e00\u79cd\u8f93\u51fa\u65b9\u5f0f\n      printf(\"%c\", toupper(s[i]));\n    // \u7b2c\u4e8c\u79cd\u8f93\u51fa\u65b9\u5f0f\n      putchar(toupper(s[i]));\n    }\n}\n</code></pre> <ol> <li>\u76f4\u63a5\u5c06\u6574\u4e2a\u5b57\u7b26\u4e32\u53d8\u6210\u5927\u5199\uff08\u4e5f\u662f\u4e24\u79cd\u64cd\u4f5c\u65b9\u5f0f\uff09</li> </ol> <pre><code>#include &lt;ctype.h&gt;\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\n    string s = get_string(\"Before: \");\n     int n = strlen(s);\n    for (int i = 0; i &lt; n; i++)\n    {\n      // \u76f4\u63a5\u4f7f\u7528ascii(\u8fd9\u79cd\u65b9\u6cd5\u7684\u4e0d\u8db3\u4e4b\u5904\u662f\u9700\u8981\u4f7f\u7528for\u8bed\u53e5\u6765\u907f\u514d\u975e\u5c0f\u5199\u7684\u60c5\u51b5\uff0c\u6bd4\u5982\u5927\u5199\u7684E\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u4f1a\u53d8\u6210%)\n     s[i] = s[i] - 32;\n      // \u8c03\u7528toupper()\n      s[i] = toupper(s[i]);\n    }\n  printf(\"%s\", s);\n}\n</code></pre>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#week-3-algorithms","title":"WEEK 3 Algorithms","text":""},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#searching","title":"searching","text":"<p>Focus on algorithms that solve problems with arrays</p> <p>Efficiency - running time</p> <p>Computer scientists tend to describe running time with big O notation, which we can think of as \u201con the order of\u201d something, as though we want to convey an idea of running time and not an exact number of milliseconds or steps.</p> <p>y = n x: Describe them both as having big O of n or on the order of n running time</p> <p>y = lgx: it takes \"big O of logn\" steps (The base of the logarithm, 2, is also removed since it\u2019s a constant factor.</p> <p>common running times are as followed: $$ O(n^2) \\ O(n\\log_nn) \\ O(n) \\ O(log_nn) \\ O(1) \\ $$ Computer scientist also use big omega notation $$ \\omega $$ Big Omega notation describes the lower bound of number of steps for our algorithm, or how few steps it might take, in  the best case. Big O, on the order of, is the upper bound of number of steps, or how many steps it might take, in the worst case. $$ \\omega(n^2) \\ \\omega(n\\log_nn) \\ \\omega(n) \\ \\omega(log_nn) \\ \\omega(1) \\ $$ big Theta, which we use to describe running times of algorithms if the upper bound and lower bound is the same. $$ \\theta(n^2) \\ \\theta(n\\log_nn) \\ \\theta(n) \\ \\theta(log_nn) \\ \\theta(1) \\ $$</p> <p>if the running time is O(1), a constant of steps in a program is required no matter how big the problem is.</p>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#linear-search-binary-search","title":"linear search, binary search","text":"<p>Linear search: \u4ece\u5de6\u5230\u53f3\u4e00\u4e2a\u4e2a\u627e</p> <pre><code>For i from 0 to n-1\n    If number behind doors[i]\n        Return true\nReturn false\n</code></pre> <p>The big O running time is O(n)</p> <p>the lower bound, big Omega would be omega(1)</p> <p>If the numbers are sorted, we can use binary search</p> <pre><code>If no doors\n    Return false\nIf number behind doors[middle]\n    Return true\nElse if number &lt; doors[middle]\n    Search doors[0] through doors[middle - 1]\nElse if number &gt; doors[middle]\n    Search doors [middle + 1] through doors[n - 1]\n</code></pre> <p>the big O running time is O(log n)</p> <p>the lower bound, big Omega would be omega(1)</p> <p>\u5982\u679c\u8981\u7528\u4e8c\u5206\u641c\u7d22\u7684\u8bdd\uff0c\u5fc5\u987b\u8981\u5148\u5bf9\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f</p>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#searching-with-code","title":"searching with code","text":"<p>\u5728c\u91cc\u9762\u4e0d\u80fd\u76f4\u63a5\u6bd4\u8f83\u5b57\u7b26\u4e32\u662f\u5426\u76f8\u540c\uff0c\u6bd4\u5982\u4f7f\u7528(name[1] == \"Charlie\")</p> <p>\u4f46\u662f\u53ef\u4ee5\u4f7f\u7528<code>strcmp</code>\u6765\u6bd4\u8f83\u5b57\u7b26\u4e32</p> <p><code>strcmp</code> returns a negative value if the first string comes before the second string, <code>0</code> if the strings are the same, and a positive value if the first string comes after the second string.</p> <p>\u5982\u679c\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32\u5728\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u4e32\u4e4b\u524d\uff0c' strcmp '\u8fd4\u56de\u8d1f\u503c\uff0c\u5982\u679c\u4e24\u4e2a\u5b57\u7b26\u4e32\u76f8\u540c\uff0c\u5219\u8fd4\u56de' 0 '\uff0c\u5982\u679c\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32\u5728\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u4e32\u4e4b\u540e\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u6b63\u503c\u3002</p> <p>\u5f53\u5b57\u7b26\u4e32\u76f8\u540c\u65f6\u8fd4\u56de\u627e\u5230\uff1a</p> <pre><code>if (strcmp(names[i], \"Ron\") == 0)\n        {\n            printf(\"Found\\n\");\n            return 0;\n        }\n</code></pre> <p>\u6216\u8005</p> <pre><code>if (!strcmp(names[i], \"Ron\"))\n        {\n            printf(\"Found\\n\");\n            return 0;\n        }\n</code></pre>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#structs-data-structure","title":"structs (data structure)","text":"<p>a not well-designed way to maintain both names and their phone numbers in 2 arrays</p> <pre><code>string names[] = {\"Carter\", \"David\"};\nstring numbers[] = {\"+1-617-495-1000\", \"+1-949-468-2750\"};\n</code></pre> <p>We can create a struct with a data type person that includes both names and phone numbers. define our own data structure with <code>typedef struct</code></p> <pre><code>typedef struct\n{\n  string name;\n  string number;\n}\nperson;\n</code></pre> <p>Exp. Phonebook</p> <pre><code>#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\ntypedef struct\n{\n    string name;\n    string number;\n}\nperson;\n\nint main(void)\n{\n    person people[2];\n\n    people[0].name = \"Carter\";\n    people[0].number = \"+1-617-495-1000\";\n\n    people[1].name = \"David\";\n    people[1].number = \"+1-949-468-2750\";\n\n    for (int i = 0; i &lt; 2; i++)\n    {\n        if (strcmp(people[i].name, \"David\") == 0)\n        {\n            printf(\"Found %s\\n\", people[i].number);\n            return 0;\n        }\n    }\n    printf(\"Not found\\n\");\n    return 1;\n}\n</code></pre> <p>\u5c01\u88c5\uff1aencapulation is idea that related data is grouped together, and here we\u2019ve encapsulated two pieces of information, <code>name</code> and <code>number</code> into the same data structure.</p>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#sorting","title":"sorting","text":"<p>Taking in an unsorted list of numbers as an imput and produce an output of a sorted list of numbers</p>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#selection-sort-demonstration","title":"selection sort demonstration","text":"<p>\u6bcf\u6b21\u6311\u51falist\u91cc\u6700\u5c0f\u7684\u90a3\u4e2a\u6570\u7136\u540e\u548c\u7b2c\u4e00\u4f4d\u7684\u6570\u8fdb\u884c\u4ea4\u6362</p> <pre><code>For i from 0 to n\u20131\n    Find smallest number between numbers[i] and numbers[n-1]\n    Swap smallest number with numbers[i]\n</code></pre> <p>\u7b2c\u4e00\u6b65\u662f\u627e\u51fan\u4e2a\u6570\u91cc\u7684\u6700\u5c0f\u503c\uff0c\u7b2c\u4e8c\u6b65\u662fn-1</p> <p>\u6240\u4ee5\u603b\u7684\u662fn+(n-1)+(n-2)+\u2026(1)</p> <p>\u8ba1\u7b97\u4e3an(n+1)/2=n^2/2+n/2\uff0c\u5f53\u6570\u636e\u65e0\u9650\u5927\u65f6\uff0cupper bound of running time\u662fO(n^2)</p> <p>\u6700\u5c0f\u6b65\u9aa4\u7684\u60c5\u51b5\u662f\u6574\u4e2alist\u5c31\u662f\u6309\u7167\u4ece\u5c0f\u5230\u5927\u6392\u5217\u7684\uff0c\u4f46\u662f\u8fd9\u4e2a\u7b97\u6cd5\u672c\u8eab\u4e0d\u4f1a\u56e0\u4e3a\u4ece\u5c0f\u5230\u5927\u6392\u5217\u800c\u81ea\u52a8\u9000\u51fa\uff0c\u4ecd\u7136\u4f1a\u628a\u6240\u6709\u8fc7\u7a0b\u8d70\u4e00\u904d\uff0c\u6240\u4ee5it has the lower bound of running time of \\omega(n^2)</p>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#bubble-sort-demonstration","title":"bubble sort demonstration","text":"<p>\u6bcf\u6b21\u4ee5\u76f8\u90bb\u7684\u8fde\u4e2a\u6570\u4e3a\u5355\u4f4d\uff0c\u5927\u5c0f\u6392\u5e8f\uff0c\u7136\u540e\u4e00\u904d\u4e00\u904d\u6392\u76f4\u5230\u7ed3\u675f</p> <p>\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u4ee552741630\uff08\u4e00\u51718\u4e2a\u6570\uff09\u4e3a\u4f8b\uff0c\u7b2c\u4e00\u6b21\u4e24\u4e24\u6bd4\u8f83\u6392\u5e8f\u540e\uff0c\u6700\u5927\u503c7\u5fc5\u7136\u4f1a\u5230\u8fbe\u961f\u5c3e\uff1b\u4f46\u662f\u7b2c\u4e8c\u6b21\u64cd\u4f5c\u64cd\u4f5c\u4ecd\u7136\u4f1a\u5bf9\u6574\u4e2alist\u64cd\u4f5c\u4e00\u904d\uff0c\u5305\u62ec\u6700\u540e\u4e00\u4f4d\u76847</p> <pre><code>Repeat n-1 times\n    For i from 0 to n\u20132\n        If numbers[i] and numbers[i+1] out of order\n            Swap them\n     If no waps\n     Quit\n</code></pre> <p>\u4e00\u5171\u9700\u8981n-1\u6b21\uff0c\u6bcf\u6b21n-1\u6b21\u6bd4\u8f83</p> <p>\u4e00\u5171\u662fn^2-2n+1</p> <p>upper bound of running time\u662fO(n^2)</p> <p>The lower bound \u5c31\u662f\\omega(n)</p>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#recursion","title":"recursion","text":"<p>\u5c31\u662ffunction\u81ea\u5df1\u8c03\u7528\u81ea\u5df1</p> <p>\u539f\u6765\u7684\u5199\u65b9\u5757</p> <pre><code>#\n##\n###\n####\n</code></pre> <p>\u662f\u8fd9\u6837</p> <pre><code>#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nvoid draw(int n);\n\nint main(void)\n{\n    int height = get_int(\"Height: \");\n\n    draw(height);\n}\n\nvoid draw(int n)\n{\n    for (int i = 0; i &lt; n; i++)\n    {\n        for (int j = 0; j &lt; i + 1; j++)\n        {\n            printf(\"#\");\n        }\n        printf(\"\\n\");\n    }\n}\n</code></pre> <p>\u8fd0\u7528\u9012\u5f52\uff08\u5c06n\u5c42\u4e1c\u897f\u770b\u6210\uff0cn-1\u5c42\u52a0\u4e0an\u4e2a#\uff09\uff0c\u81ea\u5df1\u8c03\u7528\u81ea\u5df1\uff08\u6574\u4e2adraw\uff08\uff09\u90e8\u5206\u662f\u4ece\u4e0b\u5f80\u4e0a\u5199\u7684\uff09</p> <pre><code>#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nvoid draw(int n);\n\nint main(void)\n{\n    int height = get_int(\"Height: \");\n\n    draw(height);\n}\n\nvoid draw(int n)\n{\n    if (n &lt;= 0)\n    {\n        return;\n    }\n    draw(n-1);\n    for (int i = 0; i &lt; n; i++)\n    {\n        printf(\"#\");\n    }\n    printf(\"\\n\");\n}\n</code></pre> <p>\u5728\u6bd4\u5982\u9636\u4e58\uff1a\u5199\u4e00\u4e2afactorial function\u6765\u5b9e\u73b0\u9636\u4e58, \u5373\uff1a</p> <p>fact(1)=1</p> <p>Fact(2)=1*2</p> <p>Fact(3)=1* 2 *3</p> <p>Fact(n)=n*fact(n-1)</p> <pre><code>int fact(int n);\nint fact(int n)\n{\n  // base case\n  if (n == 1)\n  {\n    return 1;\n  }\n  //recursive case\n else\n {\n   return n * fact(n-1);\n }\n}\n</code></pre> <p>\u518d\u518d\u6bd4\u5982\u6590\u6ce2\u90a3\u5951\u6570\u5217\uff1a\u5199\u4e2aFibonacci number sequence</p> <pre><code>int fibo(int n);\nint fibo(int n)\n{\n  if (n ==1)\n    return 0;\n\n  else if (n == 2)\n    return 1;\n\n  else\n    return fibo(n-1) + fibo(n-2)\n}\n</code></pre> <p>\u518d\u6bd4\u5982\uff1aCollatz conjecture</p> <p></p> <pre><code>int collatz(int n);\nint collatz(int n)\n{\n  if (n == 1)\n    return 0;\n\n  else if ((n % 2) == 0)\n    return collatz(n = n/2) + 1;\n\n  else\n    return collatz(3*n + 1) + 1;\n\n}\n</code></pre>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#merge-sort","title":"merge sort","text":"<p>Merge sort\u662f\u5c06\u9012\u5f52\u601d\u60f3\u8fd0\u7528\u5728sort\u91cc</p> <pre><code>If only one number\n  Quit\nElse\n    Sort left half of number\n    Sort right half of number\n    Merge sorted halves\n</code></pre> <p>the upper bound of merge sort is O(nlogn)</p> <p>the lower bound is also \\omega(nlogn)</p> <p>\u56de\u5fc6cs50\u91cc\u516b\u4e2a\u6570\u4ece\u6700\u4e0a\u9762\u4e00\u5c42\u6446\u5230\u6700\u4e0b\u9762\u4e00\u5c42\u8981\u7ecf\u53863\u6b21\u4e0b\u964d\uff08log2 8\uff09\uff0c\u6bcf\u6b21\u4e0b\u964d\u8fd98\u4e2a\u6570\u6bcf\u4e2a\u90fd\u8981\u6bd4\u8f83\u7136\u540e\u653e\u5230\u4e0b\u4e00\u5c42</p> <p>\u6240\u4ee5\u662f8log8\uff0c\u5373n logn</p>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#week-4","title":"WEEK 4","text":""},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#pixels","title":"pixels","text":"<ul> <li>white, with R: 255, G: 255, and B: 255, and #FFFFFF</li> <li>red, with R: 255, G: 0, and B: 0, and #FF0000</li> <li>green, with R: 0, G: 255, and B: 0, and #00FF00</li> <li>blue, with R: 0, G: 0, and B: 255, and #0000FF</li> <li>black, #000000</li> </ul>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#hexadecimal","title":"hexadecimal (\u5341\u516d\u8fdb\u5236)","text":"<pre><code>0 1 2 3 4 5 6 7 8 9 A B C D E F\n</code></pre> <p>helps us humans represent larger numeric values with fewer digits needed.</p>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#addresses-pointers","title":"addresses, pointers","text":"<ul> <li> <p>A pointer is a variable that stores an address in memory, where some other variable might be stored.</p> </li> <li> <p>The <code>&amp;</code> operator can be used to get the address of some variable, as with <code>&amp;n</code>. And the <code>*</code> operator declares a variable as a pointer, as with <code>int *p</code>, indicating that we have a variable called <code>p</code> that points to an <code>int</code>. So, to store the address of a variable <code>n</code> into a pointer <code>p</code>, we would write:</p> </li> <li> <p>&amp;\u5728\u544a\u8bc9\u7535\u8111\u8fd9\u4e2a\u503c\u4e0d\u662f\u4e00\u4e2aint\u800c\u662f\u67d0\u4e2a\u53d8\u91cf\u7684\u5730\u5740</p> </li> </ul> <pre><code>int *p = &amp;n;\n</code></pre> <pre><code>#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    int n = 50;\n    int *p = &amp;n;\n    printf(\"%p\\n\", p);  // 0x7ffda0a4767c\n    printf(\"%i\\n\", *p);  // 50\n}\n\n$ ./address\n0x7ffda0a4767c\n50\n</code></pre> <p>segmentation faults, where we\u2019ve tried to read or write to memory we don\u2019t have permission to.</p>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#strings_1","title":"strings","text":"<p>We can declare a string with <code>string s = \"HI!\";</code>, which will be stored one character at a time in memory. And we can access each character with <code>s[0]</code>, <code>s[1]</code>, <code>s[2]</code>, and <code>s[3]</code></p> <p>s<code>is a variable of type</code>string`, which is a pointer to a character.</p> <pre><code>#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    char *s = \"HI!\";\n    printf(\"%s\\n\", s);\n}\n</code></pre> <p>to see the addresses of characters in a string</p> <pre><code>#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    string s = \"HI!\";\n    char *p = &amp;s[0];\n    printf(\"%p\\n\", p);\n    printf(\"%p\\n\", s);\n}\n</code></pre>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#pointer-arithmetic","title":"pointer arithmetic","text":"<pre><code>#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    char *s = \"Hi!\";\n    printf(\"%c\\n\", *s);\n    printf(\"%c\\n\", *\uff08s + 1\uff09);\n    printf(\"%c\\n\", *\uff08s + 2\uff09);\n\n    // \u6216\u8005\u7b49\u6548\u4ee5\u4e0b\n    char *s = \"HI!\";\n    printf(\"%c\\n\", s[0]);\n    printf(\"%c\\n\", s[1]);\n    printf(\"%c\\n\", s[2]);\n}\n</code></pre> <p><code>*s</code> goes to the address stored in <code>s</code>, and <code>*(s + 1)</code> goes to the location in memory with the next character, an address that is one byte higher.</p> <p><code>s[1]</code> is syntactic sugar, like an abstraction for <code>*(s + 1)</code>, equivalent in function but more human-friendly to read and write.</p>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#pointers","title":"pointers","text":"<p>pointers provide an alternative way to pass data between functions</p> <ul> <li>when we pass data by value, we only pass a copy of that data</li> </ul> <p>if we use pointers instead, we have power to pass the actual variable itself</p> data type size int 4 char 1 float 4 double 8 long long 8 string ? <p>&amp; is used to extract the exact address of an already existing variable</p> <p>array\u7684\u540d\u79f0\u672c\u8eab\u5c31\u662fpointer  </p> <p>segmentation fault: go to the NULL place </p> <p>dereferenfce: int* p \u5c31\u662f\u53bb\u5230p\u7684\u5730\u5740\uff0c\u7136\u540e\u627e\u5230\u5bf9\u5e94\u7684p\u503c</p> <p>if i want to identify multiple pointers in one line, we can use </p> <pre><code>int* pa, *pb, *pc;\n</code></pre>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#compare-and-copy","title":"compare and copy","text":"<pre><code>#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    char *s = get_string(\"s: \");\n    char *t = get_string(\"t: \");\n\n    if (s == t)\n    {\n        printf(\"Same\\n\");\n    }\n    else\n    {\n        printf(\"Different\\n\");\n    }\n}\n\n\n$ make compare\n$ ./compare\ns: HI!\nt: BYE!\nDifferent\n$ ./compare\ns: HI!\nt: HI!\nDifferent\n</code></pre> <ul> <li>Even when our inputs are the same, we see \u201cDifferent\u201d printed.</li> <li>Each \u201cstring\u201d is a pointer, <code>char *</code>, to a different location in memory, where the first character of each string is stored. So even if the characters in the string are the same, this will always print \u201cDifferent\u201d.</li> </ul>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#memory-allocation","title":"memory allocation","text":"<ul> <li>We\u2019ll need to use a new function, <code>malloc</code>, to allocate some number of bytes in memory. And we\u2019ll use <code>free</code> to mark memory as usable when we\u2019re done with it, so the operating system can do something else with it.</li> <li>Our computers might slow down if a program we\u2019re running has a bug where it allocates more and more memory but never frees it. The operating system will take longer and longer to find enough available memory for our program.</li> </ul> <pre><code>#include &lt;cs50.h&gt;\n#include &lt;ctype.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\n    char *s = get_string(\"s: \");\n\n    char *t = malloc(strlen(s) + 1);\n\n    for (int i = 0, n = strlen(s) + 1; i &lt; n; i++)\n    {\n        t[i] = s[i];\n    }\n\n    t[0] = toupper(t[0]);\n\n    printf(\"s: %s\\n\", s);\n    printf(\"t: %s\\n\", t);\n}\n</code></pre> <p>\u5feb\u6377\u5b57\u7b26\u4e32\u66ff\u6362</p> <pre><code>#include &lt;cs50.h&gt;\n#include &lt;ctype.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\n    char *s = get_string(\"s: \");\n\n    char *t = malloc(strlen(s) + 1);\n\n    strcpy(t, s);\n\n    t[0] = toupper(t[0]);\n\n    printf(\"s: %s\\n\", s);\n    printf(\"t: %s\\n\", t);\n\n    free(t);\n}\n</code></pre> <p>We can add some error-checking to our program:</p> <pre><code>#include &lt;cs50.h&gt;\n#include &lt;ctype.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\n    char *s = get_string(\"s: \");\n\n    char *t = malloc(strlen(s) + 1);\n    if (t == NULL)\n    {\n        return 1;\n    }\n\n    strcpy(t, s);\n\n    if (strlen(t) &gt; 0)\n    {\n        t[0] = toupper(t[0]);\n    }\n\n    printf(\"s: %s\\n\", s);\n    printf(\"t: %s\\n\", t);\n\n    free(t);\n}\n</code></pre> <ul> <li>If our computer is out of memory, <code>malloc</code> will return <code>NULL</code>, the null pointer, or a special value of all <code>0</code> bits that indicates there isn\u2019t an address to point to. So we should check for that case, and exit if <code>t</code> is <code>NULL</code>.</li> <li>We should also check that <code>t</code> has a length, before trying to capitalize the first character.</li> </ul>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#valgrind","title":"valgrind \u5185\u5b58\u6cc4\u9732","text":"<ul> <li><code>valgrind</code> is a command-line tool that we can use to run our program and see if it has any memory-related issues.</li> <li>We\u2019ll run <code>valgrind ./filename</code> after compiling, and we\u2019ll see a lot of output</li> </ul> <pre><code>int *x = malloc(3 * sizeof(int));\n</code></pre>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#garbage-values","title":"garbage values","text":"<pre><code>int main(void)\n{   \n    int *x;  \n    int *y; \n\n    x = malloc(sizeof(int));                    \n\n    *x = 42;\n    *y = 13;    \n\n    y = x;        \n\n    *y = 13;   \n}\n</code></pre> <ul> <li>In the first two lines, we declare two pointers. Then, we allocate memory for <code>x</code>, but not <code>y</code>, so we can assign a value to the memory <code>x</code> is pointing to with <code>*x = 42;</code>. But <code>*y = 13;</code> is problematic, since we haven\u2019t allocated any memory for <code>y</code>, and the garbage value there points to some area in memory we likely don\u2019t have access to.</li> <li>We can write <code>y = x;</code> so that <code>y</code> points to the same allocated memory as <code>x</code>, and use <code>*y = 13;</code> to set the value there.</li> </ul>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#define-custom-types","title":"define custom types","text":"<p>typedef  ; <pre><code>struct car\n{\n    int year;\n    char model[10];\n    char plate[7];\n    int odometer;\n    double engine_size;\n\n}\n\ntypedef struct car car_t;\n\nor we can use:\n\ntypedef struct car\n{\n    int year;\n    char model[10];\n    char plate[7];\n    int odometer;\n    double engine_size;\n}\ncar_t;\n</code></pre>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#dynamic-memory-allocation","title":"dynamic memory allocation","text":"<p>text</p> <p>initialized data</p> <p>uninitialized data</p> <p>heap</p> <p>stack</p> <p>environment variables</p> <p>statically obtain an integer</p> <p>int x;</p> <p>dynamically obtain an intetger</p> <p>int *px = malloc(sizeof(int));</p> <pre><code>// get an integer from the user\nint x = GetInt();\n// array of floats on the stack\nfloat stack_array[x];\n// array of floats on the heap\nfloat* heap_array = malloc(x * sizeof (float));\n</code></pre>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#free-memory","title":"free memory","text":"<p>every block of memory that you malloc(), should be free()</p>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#swap","title":"swap","text":"<pre><code>void swap(int *a, int *b)\n{\n    int tmp = *a;\n    *a = *b;\n    *b = tmp;\n}\n</code></pre> <pre><code>#include &lt;stdio.h&gt;\n\nvoid swap(int *a, int *b);\n\nint main(void)\n{\n    int x = 1;\n    int y = 2;\n\n    printf(\"x is %i, y is %i\\n\", x, y);\n    swap(&amp;x, &amp;y);\n    printf(\"x is %i, y is %i\\n\", x, y);\n}\n\nvoid swap(int *a, int *b)\n{\n    int tmp = *a;\n    *a = *b;\n    *b = tmp;\n}\n</code></pre> <p>With <code>&amp;x</code>, we can get the address of <code>x</code> to pass in.</p> <ul> <li>The machine code section is our compiled program\u2019s binary code. When we run our program, that code is loaded into memory.</li> <li>Just below, or in the next part of memory, are global variables we declared in our program.</li> <li>The heap section is an empty area from where <code>malloc</code> can get free memory for our program to use. As we call <code>malloc</code>, we start allocating memory from the top down.</li> <li>The stack section is used by functions and local variables in our program as they are called, and grows upwards.</li> <li>If we call <code>malloc</code> for too much memory, we will have a heap overflow, since we end up going past our heap. Or, if we call too many functions without returning from them, we will have a stack overflow, where our stack has too much memory allocated as well.</li> </ul>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#scnaf","title":"scnaf","text":"<pre><code>#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    int x;\n    printf(\"x: \");\n    scanf(\"%i\", &amp;x);\n    printf(\"x: %i\\n\", x);\n}\n</code></pre> <pre><code>#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    char *s;\n    printf(\"s: \");\n    scanf(\"%s\", s);\n    printf(\"s: %s\\n\", s);\n}\n</code></pre> <p>We can call <code>malloc</code> to allocate memory:</p> <pre><code>#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    char *s = malloc(4);\n    printf(\"s: \");\n    scanf(\"%s\", s);\n    printf(\"s: %s\\n\", s);\n}\n</code></pre>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#files","title":"files","text":"<pre><code>// Saves names and numbers to a CSV file\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\n    // Open CSV file\n    FILE *file = fopen(\"phonebook.csv\", \"a\");\n    if (!file)\n    {\n        return 1;\n    }\n\n    // Get name and number\n    string name = get_string(\"Name: \");\n    string number = get_string(\"Number: \");\n\n    // Print to file\n    fprintf(file, \"%s,%s\\n\", name, number);\n\n    // Close file\n    fclose(file);\n}\n</code></pre> <ul> <li><code>fopen</code> is a new function we can use to open a file with a new type, <code>FILE</code>.</li> <li>We can use <code>fprintf</code> to write to a file.</li> </ul> <p>the file manipulation functions all live in stdio.h</p> <p>fopen() FILE* ptr = fopen(, ); <p>FILE* ptr1 = fopen(, ); <p>read append</p> <p>fclose()</p> <p>fclose(ptr1)</p> <p>fgetc() file get a character</p> <p>char ch = fgetc() <p>read all the characters fron a file:</p> <pre><code>char ch;\nwhile ((ch = fgetc(ptr)) != EOF);\nprintf(\"%c\", ch);\n</code></pre> <p>EOF end of file</p> <p>fputc()</p> <p>fread()</p> <p>fread(, , , );  <pre><code>int arr[10];\nfread(arr, sizeof(int), 10, ptr);\n\ndouble* arr2 = malloc(sizeof(double) * 80);\nfread(arr2, sizeof(double), 80, ptr);\n\nchar c;\nfread(&amp;c, sizeof(char), 1, ptr); // \u7b2c\u4e00\u4e2a\u7a7a\u5fc5\u987b\u6307\u5411\u4e00\u4e2a\u5730\u5740(pointed by &lt;buffer&gt;)\n</code></pre> <p>fwrite()</p> <p>fwrite(, , , );  <pre><code>int arr[10];\n\nfwrite(arr, sizeof(int), 10, ptr);\n</code></pre>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#jpeg","title":"jpeg","text":"<p>Let\u2019s look at a program that opens a file and tells us if it\u2019s a JPEG file, a particular format for image files, with <code>jpeg.c</code>:</p> <pre><code>// Detects if a file is a JPEG\n\n#include &lt;stdint.h&gt;\n#include &lt;stdio.h&gt;\n\ntypedef uint8_t BYTE;\n\nint main(int argc, char *argv[])\n{\n    // Check usage\n    if (argc != 2)\n    {\n        return 1;\n    }\n\n    // Open file\n    FILE *file = fopen(argv[1], \"r\");\n    if (!file)\n    {\n        return 1;\n    }\n\n    // Read first three bytes\n    BYTE bytes[3];\n    fread(bytes, sizeof(BYTE), 3, file);\n\n    // Check first three bytes\n    if (bytes[0] == 0xff &amp;&amp; bytes[1] == 0xd8 &amp;&amp; bytes[2] == 0xff)\n    {\n        printf(\"Yes, possibly\\n\");\n    }\n    else\n    {\n        printf(\"No\\n\");\n    }\n\n    // Close file\n    fclose(file);\n}\n\n\n\n$ make jpeg\n$ ./jpeg .src4/lecture.jpg\nYes, possibly\n</code></pre> <p>We\u2019ll learn more about these in this week\u2019s problem set as well, and even implement our own version of image filters, like one that only shows the color red:</p> <pre><code>#include \"helpers.h\"\n\n// Only let red through\nvoid filter(int height, int width, RGBTRIPLE image[height][width])\n{\n    // Loop over all pixels\n    for (int i = 0; i &lt; height; i++)\n    {\n        for (int j = 0; j &lt; width; j++)\n        {\n            image[i][j].rgbtBlue = 0x00;\n            image[i][j].rgbtGreen = 0x00;\n        }\n    }\n}\n\nmake filter\n./filter hidden.bmp newfilename.bmp\ncode newfilename.bmp\n</code></pre>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#week-5","title":"WEEK 5","text":""},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#linked-lists","title":"linked lists \u94fe\u8868","text":"<pre><code>typedef struct node\n{\n    int number;\n    struct node *next;\n}\nnode;\n\nnode *list = NULL;\nnode *n = malloc(sizeof(node));\n\nif (n != NULL)\n{\n  (*n).number = 1;\n}\n\nif (n != NULL)\n{\n    n-&gt;number = 1;\n    n-&gt;next = NULL;\n}\n\nlist = n; \n</code></pre> <ul> <li>We start this struct with <code>typedef struct node</code> so that we can refer to a <code>struct node</code> inside our struct.</li> <li>Then, we\u2019ll have an <code>int</code> called <code>number</code>, for the value we want to store, and then a pointer to the next node with <code>struct node</code>. (We haven\u2019t fully defined <code>node</code> yet, so the compiler needs to know it\u2019s a custom struct still.)</li> <li>Finally, <code>node</code> at the end lets us use just <code>node</code> in the rest of our program.</li> </ul>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#grwoing-arrays","title":"grwoing arrays","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main(void)\n{\n    int *list = malloc(3 * sizeof(int));\n    if (list == NULL)\n    {\n        return 1;\n    }\n\n    list[0] = 1;\n    list[1] = 2;\n    list[2] = 3;\n}\n</code></pre> <p><code>if (list = NULL)</code> \u8fd9\u53e5\u662f\u4e3a\u4e86\u9632\u6b62\u5728memory allocation\u7684\u65f6\u5019\u4ea7\u751f\u9519\u8bef\u6ca1\u6709\u6210\u529f\u4e3alist \u4ea7\u751f\u7a7a\u95f4\uff0c\u56e0\u4e3amalloc\u529f\u80fd\u4f1afail</p> <p>\u8fd9\u4e2a\u65b9\u6cd5\u548c\u4ee5\u4e0b\u4ee3\u7801\u7684\u533a\u522b\u662f\u8fd9\u4e2a\u662f\u4eceheap\u4e2d\u7684memory\u6765\u4ea7\u751f\u8fd9\u4e2alist\u7684</p> <pre><code>int list[3];\nlist[0] = 1;\nlist[1] = 2;\nlist[2] = 3;\n</code></pre> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main(void)\n{\n    int *list = malloc(3 * sizeof(int));\n    if (list == NULL)\n    {\n        return 1;\n    }\n\n    list[0] = 1;\n    list[1] = 2;\n    list[2] = 3;\n\n    int *temp = malloc(4 * sizeof(int));\n    if (temp == NULL)\n    {\n        free(list);\n        return 1;\n    }\n\n    for (int i = 0; i &lt; 3; i++)\n    {\n        temp[i] = list[i];\n    }\n    temp[3] = 4;\n\n    free(list);\n    list = temp;\n    for (int i = 0; i &lt; 4; i++)\n    {\n        printf(\"%i\\n\", list[i]);\n    }\n    free(list);\n    return 0;\n\n\n\n}\n</code></pre> <p>use <code>realloc</code> resize old aaray to be certain size</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main(void)\n{ \n    // Dynamically allocate an array of size 3\n    int *list = malloc(3 * sizeof(int));\n    if (list == NULL)\n    {\n        return 1;\n    }\n\n    // Assign three numbers to that array\n    list[0] = 1;\n    list[1] = 2;\n    list[2] = 3;\n\n    // Time passes\n\n    // Resize old array to be of size 4\n    int *tmp = realloc(list, 4 * sizeof(int));\n    if (tmp == NULL)\n    {\n        free(list);\n        return 1;\n    }\n\n    // Add fourth number to new array\n    tmp[3] = 4;\n\n    // Remember new array\n    list = tmp;\n\n    // Print new array\n    for (int i = 0; i &lt; 4; i++)\n    {\n        printf(\"%i\\n\", list[i]);\n    }\n\n    // Free new array\n    free(list);\n    return 0;\n}\n</code></pre>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#growing-linked-lists","title":"growing linked lists","text":"<pre><code>typedef struct node\n{\n    int number;\n    struct node *next;\n}\nnode;\n\nnode *list = NULL;\nnode *n = malloc(sizeof(node));\n\nif (n != NULL)\n{\n  (*n).number = 1;\n}\n\nif (n != NULL)\n{\n    n-&gt;number = 1;\n    n-&gt;next = NULL;\n}\n\nlist = n; \n\n\nn = malloc(sizeof(node));\nif (n != NULL)\n{\n    n-&gt;number = 2;\n    n-&gt;next = NULL;\n}\nlist-&gt;next = n;\n\nnode *n = malloc(sizeof(node));\nif (n != NULL)\n{\n    n-&gt;number = 3;\n    n-&gt;next = NULL;\n}\n\nlist-&gt;next-&gt;next = n;\n</code></pre>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#implementing-linked-lists","title":"implementing linked lists","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\ntypedef struct node\n{\n    int number;\n    struct node *next;\n}\nnode;\n\nint main(void)\n{\n    node *list = NULL;\n    node *n = malloc(sizeof(node));\n    if (n == NULL)\n    {\n        return 1;\n    }\n    n-&gt;number = 1;\n    n-&gt;next = NULL;\n    list = n;\n\n    n = malloc(sizeof(node));\n    if (n == NULL)\n    {\n        free(list);\n        return 1;\n    }\n    n-&gt;number = 2;\n    n-&gt;next = NULL;\n    list-&gt;next = n;\n\n    n = malloc(sizeof(node));\n    if(n == NULL)\n    {\n        free(list-&gt;next);\n        free(list);\n        return 1;\n    }\n    n-&gt;number = 3;\n    n-&gt;next = NULL;\n    list-&gt;next-&gt;next = n;\n\n    for (node *temp = list; temp != NULL; temp = temp-&gt;next)\n    {\n        printf(\"%i\", temp-&gt;number);\n    }\n    while (list != NULL)\n    {\n        node *temp = list-&gt;next;\n        free(list);\n        list = tmp;\n    }\n    return 0;\n\n\n}\n</code></pre>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#trees","title":"trees","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\ntypedef struct node\n{\n    int number;\n    struct node *left;\n    struct node *right;\n\n}\nnode;\n\nint main(void)\n{\n    // set the tree size to 0\n    node *tree = NULL;\n\n    // add number to list\n    node *n = malloc(sizeof(node));\n    if(n == NULL)\n    {\n        return 1;\n    }\n    n-&gt;number = 2;\n    n-&gt;left = NULL;\n    n-&gt;right = NULL;\n    tree = n;\n\n    n = malloc(sizeof(node));\n    if(n == NULL)\n    {\n        free_tree(tree);\n        return 1;\n\n    }\n    n-&gt;number = 1;\n    n-&gt;left = NULL;\n    n-&gt;right = NULL;\n    tree-&gt;left = n;\n\n    n = malloc(sizeof(node));\n    if(n == NULL)\n    {\n        free_tree(tree);\n        return 1;\n\n    }\n    n-&gt;number = 3;\n    n-&gt;left = NULL;\n    n-&gt;right = NULL;\n    tree-&gt;right = n;\n\n    print_tree(tree);\n    return 0;\n\n}\n</code></pre>"},{"location":"Course/cs50/CS50%20intoduction%20to%20computer%20science/#more-data-structres","title":"more data structres","text":""},{"location":"Course/cs61a/information/","title":"CS61a Course Information","text":"<p>HobbitQia \u7684\u4ee3\u7801\u5b9e\u73b0\uff1a https://github.com/HobbitQia/CS61A-Fall-2020</p> <p>\u9700\u8981solution\u7684\u53ef\u4ee5\u53bbArchive.org\u91cc\u9762\u641c\u5b58\u6863\uff0c\u9700\u8981\u641c\u7684\u5185\u5bb9\u7c7b\u4f3c<code>cs61a.org/lab/sol-lab02</code></p> <p>\u6309\u7167reading-playlist\uff08lecture\uff09-lab-disc-hw-q&amp;a-project reading\u662f\u6700\u7cbe\u534e\u7684\u90e8\u5206</p> <p>\u6559\u6750\u7684pdf\u7248\u672c\u53ef\u4ee5\u5728 https://github.com/josemreis/composing-programs-to-pdf/blob/main/sample/composing-programs.pdf \u627e\u5230</p> <p>\u6216\u8005https://github.com/daxwann/ComposingPrograms-to-PDF \uff08\u6709\u76ee\u5f55\u7248\u672c\uff09</p>"},{"location":"Course/cs61a/week1/","title":"CS 61A FALL 2022","text":""},{"location":"Course/cs61a/week1/#1026","title":"\u524d\u671f\u8d44\u6599\u6536\u96c6\uff0810/26\u5f00\u59cb\uff09","text":"<p>\u8fd9\u95e8\u8bfe\u662fSICP\u7684\u53d8\u79cd\uff0c\u4f7f\u7528Python 3\u6765\u5c55\u793a\u62bd\u8c61\u65b9\u6cd5\u3001\u7f16\u7a0b\u8303\u5f0f\u548c\u7ba1\u7406\u5927\u578b\u7a0b\u5e8f\u7684\u6280\u672f\u3002</p> <p>CS61A \u5bf9\u5e94\u7684\u6559\u6750\u662f\u300a\u8ba1\u7b97\u673a\u7a0b\u5e8f\u7684\u6784\u9020\u548c\u89e3\u91ca\uff08SICP\uff09\u300b \uff0c\u6838\u5fc3\u601d\u60f3\u662f\u62bd\u8c61\uff0c\u4e3b\u8981\u8bb2\u7684\u662f\uff1a</p> <ol> <li>\u7f16\u7a0b\u8303\u5f0f\u2014\u2014\u5305\u62ec\u51fd\u6570\u5f0f\u7f16\u7a0b(FP)\u3001\u9762\u5411\u5bf9\u8c61\u7684\u7f16\u7a0b(OOP)\u3001\u7ed3\u6784\u5316\u67e5\u8be2\u8bed\u8a00(SQL)\uff1b</li> <li>\u5982\u4f55\u5bf9\u4e00\u4e2a\u95ee\u9898\u62c6\u5206\u548c\u7a0b\u5e8f\u5b9e\u73b0\uff08\u8fd9\u4e2a\u5f88\u5173\u952e\uff09\uff1b</li> <li>\u4e5f\u6559\u4e86\u4e00\u70b9\u7f16\u8bd1\u539f\u7406\u7684\u5185\u5bb9\u2014\u2014\u5199\u4e2ascheme \u89e3\u91ca\u5668\u3002</li> </ol> <p>\u5343\u8a00\u4e07\u8bed\u96be\u4ee5\u8868\u8fbe\u6211\u5bf9\u8fd9\u95e8\u8bfe\u7684\u559c\u7231\u548c\u5bf9UCB, Dr. John Denero, Dr. Hany Faird\u7684\u611f\u8c22\u3002\u5c31\u4ee5\u4ed6\u4eec\u7684\u4eba\u751f\u5efa\u8bae\u7ed3\u675f\u5427\u3002</p> <p>When I was getting married, I was a PhD student at the time. My mom pulled me aside on my wedding day and said \"John I want to give you some advice\". I was like oh she's going to like tell me to listen to my wife or whatever. But she didn't. She said only two words that have stuck with me for a long time. She said \"don't compare\". That's all. And then she was like okay you can go back to do whatever you're doing. At the time this was very hard for me to process because I was in a university which is all about comparing people based on like what their exam score was. It turns out that out there in the world, there are no exams that everybody takes that are standardized anymore. All that matter is what you go and get done on your own particular path. So, comparing yourselves to other people becomes meaningless rapidly as what really matter is what you could do yourself, like what you're capable of and what you bother to do and how you choose to spend your time. It took years of this two-word phrase \"don't compare\" to marinate inside of me and for me to realize that my self-worth really has nothing to do with what other people can do or whether I can do it better than them or worse than them. It has everything to do with what i've done and what i'm gonna do next and how I spend my time and better myself. I should just focus on improving myself and forget about what everybody else is doing. (John Denero) It is something that took me a long time in life to understand not to compare. And there's a trap too that we do. We compare for example how big our house is to that one friend and how much money we make to another friend, and the kind of clothes we have to this friend and how smart we are to that friend. We pick and choose these things and that's first of all, even doing that individually is meaningless right? But it's also a trap and this is the problem with social media, you see these sore of curated worlds of other people and it's a trap. One of the great things of getting older is you will get there, I promise, you will realize it's a trap and comparing means absolutely nothing. It really is a very internal thing of what are you doing, who do you want to be, how do you want to go through this world, how do you want to treat other people. At the end of the day, that, and almost nothing else, is going to matter. And you got to just trust that it's going to be there. (Hany Faird)</p> <p>\u5b66\u4e60\u987a\u5e8f\uff1a\u57fa\u672c\u4e0a\u662f\u6309\u7167reading-playlist\uff08lecture\uff09-lab-disc-hw-q&amp;a-project\uff0c\u6309\u7167\u6bcf\u5929\u7684\u4efb\u52a1\u4f9d\u6b21\u5b8c\u6210\u5373\u53ef\u3002</p> <p>\u5b98\u65b9\u7684solutions\u4f1a\u5728\u4f5c\u4e1a\u622a\u6b62\u540e\u516c\u5e03\uff0c\u4f46\u662f\u56e0\u4e3a\u51e0\u4e4e\u6bcf\u5b66\u671f\u7684\u4f5c\u4e1a\u90fd\u5dee\u4e0d\u591a\uff0c\u6240\u4ee5\u5728\u8bfe\u7a0b\u7ed3\u675f\u540e\u4f1a\u5168\u90e8\u4e0b\u67b6\u3002\u56e0\u6b64\u5982\u679c\u662f\u8ddf\u6700\u65b0\u7684\u8bfe\u5efa\u8bae\u6bcf\u6b21\u7684solutions\u5148\u4fdd\u5b58\u4e0b\u6765\uff0c\u5982\u679c\u662f\u5b66\u4ee5\u524d\u7684\u53ef\u4ee5\u627e\u627e\u7f51\u4e0a\u7684\u8d44\u6e90\uff08\u7b14\u8005\u6709\u90e8\u520620fa\u548c21fa\u7684\uff09\u5b98\u65b9\u7684\u7b54\u6848\u8fd8\u662f\u975e\u5e38\u503c\u5f97\u770b\u7684\uff0c\u5199\u7684\u975e\u5e38\u7b80\u6d01\uff0c\u503c\u5f97\u6211\u4eec\u597d\u597d\u501f\u9274\u5b66\u4e60\u3002</p> <p>reading\u662f\u6700\u7cbe\u534e\u7684\u90e8\u5206\uff0c\u53ef\u4ee5\u770b\u51fa\u6559\u6388\u6539\u7f16\u7ecf\u5178\u6559\u6750\u662f\u4e0b\u4e86\u5fc3\u601d\u7684\u3002lecture\u53ef\u4ee5\u7528\u4f5c\u8865\u5145\uff0c\u4f1a\u6709\u5177\u4f53\u7684\u4ee3\u7801\u793a\u4f8b\uff0c\u540c\u65f6\u4e5f\u4f1a\u8865\u5145\u4e00\u4e9breading\u91cc\u6ca1\u6709\u7684\u4e1c\u897f\uff0c\u800cQ&amp;A\u66f4\u591a\u7684\u662f\u8ba8\u8bba\u4e0a\u8bfe/\u4f5c\u4e1a/\u5f80\u5e74\u8003\u8bd5\u7684\u4e00\u4e9b\u95ee\u9898\uff0c\u4e5f\u7ecf\u5e38\u8ba8\u8bba\u4e00\u4e9b\u6709\u610f\u601d\u7684\u8bdd\u9898\u3002\u7b14\u8005\u8bb0\u5f97\u5728\u7b2c\u516d\u6b21\u8bfe\u65f6Q&amp;A\u4e0b\u9762\u5df2\u7ecf\u6709\u65f6\u95f4\u6233\u4e86\uff0c\u9009\u62e9\u81ea\u5df1\u60f3\u770b\u7684\u95ee\u9898\u5373\u53ef\u3002</p> <p>\u53c2\u8003\u4ee3\u7801\uff1a</p> <p>https://github.com/HobbitQia/CS61A-Fall-2020</p> <p>https://github.com/311zzb/cs61a_fall2020</p>"},{"location":"Course/cs61a/week1/#week-1","title":"Week 1","text":""},{"location":"Course/cs61a/week1/#lecture-1-wed-welcome","title":"Lecture 1-Wed Welcome","text":"<p>An introduction to computer science!</p> <p>A course about managing complexity, mastering abstraction, programming paradigms. </p> <p>computer science includes systems, artificial intelligence, graphics, security, networking, programming languages, theory and scientific computing.</p> <p>Learning happens when you don't solve the problem, when you are struggling through. When you solved the problem, you've learned it. It's over, right? </p> <p>So the process of failure, the process of struggling, the process of taking hours to solve something is where the learning is happening.</p> <p>If somebody shortcuts that for you, or you shortcut that for somebody, you've cheated them.</p> <p>You've cheated and you've cheated them.</p> <p>And so don't be frustrated by things not working, that's the way it's supposed to be. That's what the process of learning is and it's okay</p> <p><code>Build good habits</code></p> <p>lab: the most important part of this course</p> <p>Lecture -&gt; Q&amp;A -&gt; lab intro -&gt; finish the lab -&gt; try the homework -&gt; lecture -&gt; discussion intro -&gt; tutorials -&gt; finish the homework -&gt; lecture Q&amp;A</p> <p>Lab 1h</p> <p>3 programming languages: python, scheme, SQL</p>"},{"location":"Course/cs61a/week1/#chapter-11-programming-in-python","title":"chapter 1.1 programming in python","text":"<p>And, as imagination bodies forth</p> <p>The forms of things to unknown, and the poet's pen</p> <p>Turns them to shapes, and gives to airy nothing</p> <p>A local habitation and a name      ---William Shakespeare, A Midsummer-Night's Dream</p> <p>\u60f3\u8c61\u4f1a\u628a\u4e0d\u77e5\u540d\u7684\u4e8b\u7269\u7528\u4e00\u79cd\u5f62\u5f0f\u5448\u73b0\u51fa\u6765\uff0c</p> <p>\u8bd7\u4eba\u7684\u7b14\u518d\u4f7f\u5b83\u4eec\u6709\u5982\u5b9e\u7684\u5f62\u8c61\uff0c</p> <p>\u7a7a\u865a\u7684\u65e0\u7269\u4e5f\u4f1a\u6709\u4e86\u5c45\u5904\u548c\u540d\u5b57</p> <p>Structure and Interpretation of Computer Programs (SICP)</p> <p>Python excels as an instructional language</p> <p>prompt, &gt;&gt;&gt;</p> <p>press -P (previous) and -N (next). -D exits a session <pre><code>from urllib.request import urlopen\nshakespeare = urlopen(\"http://composingprograms.com/shakespeare.txt\")\nwords = set(shakespeare.read().decode().split()) \n{w for w in words if len(w) == 6 and w[::-1] in words}\n</code></pre>"},{"location":"Course/cs61a/week1/#lab00","title":"lab00","text":"<p>\u4f7f\u7528exit()\u6216\u8005control+d\u9000\u51fa\u5230\u547d\u4ee4\u884c\u754c\u9762</p> <p>shell\u4e2d\u6587\u4ef6\u540d\u5e26\u6709\u7a7a\u683c\u7684\u5904\u7406\u529e\u6cd5\uff1a</p> <pre><code>cd Desktop/CS\\ Notebook\n</code></pre> <pre><code>mkdir # \u65b0\u5efa\u4e00\u4e2a\u6587\u4ef6\u5939\nmv ~/Downloads/lab00 ~/Desktop/cs61a/lab # \u79fb\u52a8\u6587\u4ef6\u5939\ncd # change into the specific direcory\n</code></pre> <p>Numbers may be combined with mathematical operators to form compound expressions. In addition to the <code>+</code> operator (addition), the <code>-</code> operator (subtraction), the <code>*</code> operator (multiplication) and the <code>**</code> operator (exponentiation), there are three division-like operators to remember:</p> <ul> <li>Floating point division (<code>/</code>): divides the first number number by the second, evaluating to a number with a decimal point even if the numbers divide evenly.</li> <li>Floor division (<code>//</code>): divides the first number by the second and then rounds down, evaluating to an integer.</li> <li>Modulo (<code>%</code>): evaluates to the positive remainder left over from division.</li> </ul> <p>Floating point division (/) \u5f97\u5230\u6d6e\u70b9\u6570\uff0c\u5373\u4f7f\u662f\u6574\u9664</p> <p>Floor division (//) \u5411\u4e0b\u53d6\u6574\u6570\uff0c\u5f97\u5230\u7684\u662fint</p> <p>% \u5f97\u5230\u6b63\u6574\u4f59\u6570</p> <pre><code>&gt;&gt;&gt; 7 / 4\n1.75\n&gt;&gt;&gt; (2 + 6) / 4\n2.0\n&gt;&gt;&gt; 7 // 4        # Floor division (rounding down)\n1\n&gt;&gt;&gt; 7 % 4         # Modulus (remainder of 7 // 4)\n3\n</code></pre> <p>\u6bd4\u5982\uff1a</p> <pre><code>-7 % 5 = 3\n\u539f\u56e0\u5728\u4e8e-7 = 5 * \uff08-2\uff09+ 3\n</code></pre> <p>\u5728python interpreter \u4e2d\uff0c\u53d8\u91cf\u7684\u503c\u7b49\u4e8e\u6700\u540e\u4e00\u4e2a\u7b49\u53f7\u540e\u7684\u503c\u3002</p> <p>\u6bd4\u5982\uff1a</p> <pre><code>&gt;&gt;&gt; y = 5\n&gt;&gt;&gt; y = y + 3\n&gt;&gt;&gt; y * 2\n\ny *2\u7ed3\u675f\u540e\uff0cterminal\u4e2d\u8fd4\u56de\u7684\u662f16\uff1by*2\u53ea\u662f\u8fdb\u884c\u4e86\u8ba1\u7b97\uff0c\u5e76\u6ca1\u6709\u6539\u53d8y\u7684\u503c\n\u4f46\u662f\u73b0\u5728y\u7684\u503c\u4ecd\u7136\u662f8\n</code></pre> <p>The lines in the triple-quotes <code>\"\"\"</code> are called a docstring</p> <p>The lines that begin with <code>&gt;&gt;&gt;</code> are called doctests</p>"},{"location":"Course/cs61a/week1/#ok-autograder-commands","title":"OK autograder commands","text":"<pre><code>python3 OK\npython3 ok --submit // Could not submit: Late Submission of cal/cs61a/fa20/lab00\n</code></pre> <ul> <li><code>-i</code>: The <code>-i</code> option runs your Python script, then opens an interactive session. In an interactive session, you run Python code line by line and get immediate feedback instead of running an entire file all at once. To exit, type <code>exit()</code> into the interpreter prompt. You can also use the keyboard shortcut <code>Ctrl-D</code> on Linux/Mac machines or <code>Ctrl-Z Enter</code> on Windows.</li> </ul> <p>If you edit the Python file while running it interactively, you will need to exit and restart the interpreter in order for those changes to take effect.</p> <pre><code>python3 -i \n</code></pre> <ul> <li><code>-m doctest</code>: Runs doctests in a particular file. Doctests are surrounded by triple quotes (<code>\"\"\"</code>) within functions.</li> </ul> <p>Each test in the file consists of <code>&gt;&gt;&gt;</code> followed by some Python code and the expected output (though the <code>&gt;&gt;&gt;</code> are not seen in the output of the doctest command).</p> <pre><code> python3 -m doctest \n</code></pre>"},{"location":"Course/cs61a/week1/#chapter-12-elements-of-programming","title":"chapter 1.2 elements of programming","text":"<p>every powerful language has 3 mechanisms:</p> <ul> <li>Primitive expressions and statements -- represent the simplest building blocks that the language provides</li> <li>Means of combination -- by which compound elements are built from simpler ones</li> <li>Means of abstraction -- by which compound elements can be named and manipulated as units</li> </ul> <p>In programming, we deal with functions and data</p> <p><code>max(7.5, 9.5)</code> operator(operand, operand)</p> <p>we say that the function max is called with arguments 7.5 and 9.5, returns a value of 9.5\\</p> <p><code>pow()</code>raises its first argument to the power of its argument</p> <p>The <code>=</code> symbol is called the assignment operator in Python (and many other languages). Assignment is our simplest means of abstraction, for it allows us to use simple names to refer to the results of compound operations, such as the <code>area</code> computed above. In this way, complex programs are constructed by building, step by step, computational objects of increasing complexity.</p> <p>The possibility of binding names to values and later retrieving those values by name means that the interpreter must maintain some sort of memory that keeps track of the names, values, and bindings. This memory is called an environment.</p>"},{"location":"Course/cs61a/week1/#lecture-1-fri-functions","title":"Lecture 1-Fri Functions","text":"<p>notation</p> <p>all expressions can use functions call notation</p> <p>raise 6 to 3<sup>rd</sup> power:</p> <pre><code>6 ** 3\n\nfrom operator import add, mul\n</code></pre> <p>Add(2,3)</p> <p>Operator: add</p> <p>Operand subexpressions: 2, 3</p> <p>\u4ece\u6700\u91cc\u9762\u5230\u6700\u5916\u9762\uff0c\u5206\u522bevaluate\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u53eb\u505aevaluation procedure</p>"},{"location":"Course/cs61a/week1/#names-assignment-and-user-defined-functions","title":"names, assignment, and user-defined functions","text":"<pre><code>from math import pi, sin\n</code></pre> <p>Primitive expressions: 2, add, 'hello'</p> <p>call expression: max(2, 3,) \u7531operator\u548coprand\u7ec4\u6210</p>"},{"location":"Course/cs61a/week1/#environment-diagrams","title":"Environment diagrams","text":"<p>Visualize the interpreter's process</p> <p>code on the left,  and fames on the right</p> <p>execution rule of assignment statements:</p> <ol> <li>Evaluate all expressions to the right of = from left to right</li> <li>Bind all names to the left of = to the resulting values in the current frame</li> </ol> <p>Current frame\u8fd9\u610f\u5473\u7740\uff1a</p> <pre><code>a = 1\nb = 2\nb, a = a + b, b // b = 3, a = 2\n//\u800c\u5982\u4e0b\u4f1a\u5bfc\u81f4:\nb = a + b\na = b // a = 3\n</code></pre>"},{"location":"Course/cs61a/week1/#defining-functions","title":"defining functions","text":"<p>The assignment is a simple means of abstraction: binds names to values</p> <p>The function definition is a more powerful means of abstraction: binds names to expressions</p> <p>Indent \u7f29\u8fdb</p> <pre><code>def &lt;name&gt; (&lt;formal parameters&gt;): // function signature\n  return &lt;return expression&gt; // function body\n</code></pre> <p>an environment is a sequence of frames</p> <pre><code>&gt;&gt;&gt; def square(square):\n...     return mul(square, square)\n...\n&gt;&gt;&gt; square(4)\n16\n</code></pre> <p>\u6ce8\u610f\u5148\u5728local frame\u91cc\u9762\u627e\uff0c\u7136\u540e\u518d\u5230global frame\u4e2d\u53bb\u627e</p>"},{"location":"Course/cs61a/week1/#hw01-variables-functions-control","title":"Hw01 variables &amp; functions, control","text":"<p>To check if <code>b</code> evenly divides <code>a</code>, you can use the expression <code>a % b == 0</code>, which can be read as, \"the remainder of dividing <code>a</code> by <code>b</code> is 0.\"</p>"},{"location":"Course/cs61a/week1/#non-pure-functions","title":"non-pure functions","text":"<p>Print() is non-pure function that can generate side effects</p> <pre><code>&gt;&gt;&gt; print(print(1), print(2))\n1\n2\nNone None\n</code></pre> <p>Be careful with <code>print</code>! The fact that it returns <code>None</code> means that it should not be the expression in an assignment statement.</p> <p>pure functions are essential for writing concurrent programs</p>"},{"location":"Course/cs61a/week1/#week-2","title":"Week 2","text":""},{"location":"Course/cs61a/week1/#lecture-2","title":"Lecture 2","text":"<p>operand subexpression</p> <p>Evaluation procedure for call expressions:</p> <ol> <li>Evaluate the operator and then the operand subexpressions </li> <li>Apply the function that is the value of the operator to the arguments that are the values of the operands</li> </ol>"},{"location":"Course/cs61a/week1/#chapter-14","title":"Chapter 1.4","text":"<p>domain \u8f93\u5165\u503c\u7684\u53d8\u5316\u8303\u56f4</p> <p>range \u8f93\u51fa\u503c\u7684\u503c\u57df</p> <p>the qualities of good functions all reinforce the idea that functions are abstractions</p> <p>\u5b9a\u4e49\u51fd\u6570\u4ee5\u53ca\u5b83\u7684doctoring\uff1a</p> <pre><code>&gt;&gt;&gt; def pressure(v, t, n):\n        \"\"\"Compute the pressure in pascals of an ideal gas.\n\n        Applies the ideal gas law: http://en.wikipedia.org/wiki/Ideal_gas_law\n\n        v -- volume of gas, in cubic meters\n        t -- absolute temperature in degrees kelvin\n        n -- particles of gas\n        \"\"\"\n        k = 1.38e-23  # Boltzmann's constant\n        return n * k * t / v\n\n  &gt;&gt;&gt; help(pressure)\n</code></pre> <p>\u53ef\u4ee5\u76f4\u63a5\u5728\u5b9a\u4e49\u51fd\u6570\u7684\u65f6\u5019\u8bbe\u5b9an\u7684\u9ed8\u8ba4\u503c(indicate its default value)\uff1a </p> <pre><code>def pressure(v, t, n=6.022e23):\n</code></pre> <p>\u5982\u679c\u4f7f\u7528\u9ed8\u8ba4\u503c\u7684\u8bdd\uff0c\u5728\u8f93\u5165\u7684\u65f6\u5019\u53ef\u4ee5\u53ea\u8f93\u5165\u4e24\u4e2a\u53d8\u91cf\uff1a</p> <pre><code>&gt;&gt;&gt; pressure(1, 273.15)\n2269.974834\n</code></pre>"},{"location":"Course/cs61a/week1/#chpater-15-control","title":"Chpater 1.5 Control","text":"<p>Rather than being evaluated, statements are executed. </p> <p>we have seen three kinds of statements already: assignment, <code>def</code>, and <code>return</code> statements</p> <p>A statement is executed by the interpreter to perform an action</p> <p></p> <p>conditional statements execute the suite annd skip the remaining </p>"},{"location":"Course/cs61a/week1/#boolean-contexts","title":"Boolean contexts","text":"<p>False values in Python: False, 0, '', None</p> <p>True values in Python: anything else(True)</p>"},{"location":"Course/cs61a/week1/#statement-expression","title":"statement \u548cexpression\u7684\u533a\u522b","text":"<p>statements are instructions that perform some action, while expressions are units of code that evaluate to a value.</p> <p>A statement is a line of code that performs some action, such as assigning a value to a variable, calling a function, or looping over a sequence. Statements are typically terminated by a newline character, although semicolons can be used to separate multiple statements on a single line.</p> <p>For example, the following are examples of statements in Python:</p> <pre><code>x = 5             # assign a value to x\nprint(\"hello\")    # call the print function\nwhile x &gt; 0:      # loop while x is greater than 0\n    x -= 1\n</code></pre> <p>On the other hand, an expression is a combination of values, variables, and operators that evaluates to a single value. Expressions can be used as part of a larger statement, or they can be used on their own to return a value.</p> <p>For example, the following are examples of expressions in Python:</p> <pre><code>3 + 4             # evaluates to 7\nx + 2             # evaluates to the value of x plus 2\nlen(\"hello\")      # evaluates to 5 (the length of the string)\n</code></pre>"},{"location":"Course/cs61a/week1/#short-circuting","title":"short-circuting","text":"<p>In Python, short-circuiting is a behavior exhibited by logical operators (i.e. \"and\" and \"or\") where the second operand is not evaluated if the result of the expression can be determined by evaluating the first operand alone.</p> <p>\u4f8b\u5982\uff0c\u5728\u8868\u8fbe\u5f0f\"a and b\"\u4e2d\uff0c\u5982\u679c\"a\"\u7684\u503c\u4e3aFalse\uff0c\u90a3\u4e48\u4e0d\u7ba1\"b\"\u7684\u503c\u662f\u591a\u5c11\uff0c\u6574\u4e2a\u8868\u8fbe\u5f0f\u90fd\u5c06\u4e3aFalse\u3002\u56e0\u6b64\uff0c\u4e0d\u9700\u8981\u6c42\u201cb\u201d\uff0cPython\u5c06\u201c\u77ed\u8def\u201d\u8868\u8fbe\u5f0f\u7684\u6c42\u503c\uff0c\u8282\u7701\u65f6\u95f4\u548c\u8ba1\u7b97\u8d44\u6e90\u3002</p> <p>\u7c7b\u4f3c\u5730\uff0c\u5728\u8868\u8fbe\u5f0f\"a or b\"\u4e2d\uff0c\u5982\u679c\"a\"\u7684\u503c\u4e3aTrue\uff0c\u90a3\u4e48\u4e0d\u7ba1\"b\"\u7684\u503c\u662f\u591a\u5c11\uff0c\u6574\u4e2a\u8868\u8fbe\u5f0f\u90fd\u5c06\u4e3aTrue\u3002\u540c\u6837\uff0c\u4e0d\u9700\u8981\u8ba1\u7b97\u201cb\u201d\uff0cPython\u4f1a\u7f29\u77ed\u8ba1\u7b97\u8fc7\u7a0b\u3002</p> <pre><code>1   def fib(n):\n2       \"\"\"Compute the nth Fibonacci number, for n &gt;= 2.\"\"\"\n3       pred, curr = 0, 1   # Fibonacci numbers 1 and 2\n4       k = 2               # Which Fib number is curr?\n5       while k &lt; n:\n6           pred, curr = curr, pred + curr\n7           k = k + 1\n8       return curr\n9   \n10  result = fib(8)\n</code></pre>"},{"location":"Course/cs61a/week1/#156-tesing","title":"1.5.6 tesing","text":""},{"location":"Course/cs61a/week1/#assertions","title":"assertions","text":"<pre><code>assert fib(8) == 13, 'The 8th Fibonacci number should be 13'\n</code></pre> <p>When writing Python in files, rather than directly into the interpreter, tests are typically written in the same file or a neighboring file with the suffix <code>_test.py</code>.</p>"},{"location":"Course/cs61a/week1/#doctests","title":"doctests","text":"<p>Python provides a convenient method for placing simple tests directly in the docstring of a function. The first line of a docstring should contain a one-line description of the function, followed by a blank line. A detailed description of arguments and behavior may follow. In addition, the docstring may include a sample interactive session that calls the function:</p> <pre><code>def sum_naturals(n):\n        \"\"\"Return the sum of the first n natural numbers.\n\n        &gt;&gt;&gt; sum_naturals(10)\n        55\n        &gt;&gt;&gt; sum_naturals(100)\n        5050\n        \"\"\"\n        total, k = 0, 1\n        while k &lt;= n:\n            total, k = total + k, k + 1\n        return total\n</code></pre> <p><code>testmod()</code> is used to run tests in a module, while <code>run_docstring_examples()</code> is used to test a specific function or method.</p> <p>Testmod()</p> <pre><code>&gt;&gt;&gt; from doctest import testmod\n&gt;&gt;&gt; testmod()\n</code></pre> <p>Run_docstring_examples</p> <pre><code>&gt;&gt;&gt; from doctest import run_docstring_examples\n&gt;&gt;&gt; run_docstring_examples(sum_naturals, globals(), True)\n</code></pre> <p>When writing Python in files, all doctests in a file can be run by starting Python with the doctest command line option:</p> <p>\u8fd9\u4e2a\u547d\u4ee4\u4e0d\u9700\u8981\u4e0a\u9762\u4e24\u4e2a\u529f\u80fd\uff0c\u53ef\u4ee5\u5728\u6709doctests\u7684\u60c5\u51b5\u4e0b\uff0c\u76f4\u63a5\u7528\u547d\u4ee4\u884c\u4f7f\u7528\uff0c\u6709\u9519\u7684\u8bdd\u4f1a\u62a5\u9519\uff0c\u5982\u679c\u6ca1\u6709\u9519\u5c31\u4e0d\u4f1a\u8fd4\u56de\u4efb\u4f55\u4e1c\u897f</p> <pre><code>python3 -m doctest &lt;python_source_file&gt;\n</code></pre>"},{"location":"Course/cs61a/week1/#lab01","title":"lab01","text":"<p>\u8fd9\u4e2a\u662f\u6b7b\u5faa\u73af\uff1a(python\u91cc\u9762\u53ea\u67090\u662ffalse)</p> <pre><code>positive = 28\nwhile positive: # If this loops forever, just type Infinite Loop\n    print(\"positive?\")\n    positive -= 3\n</code></pre> <p>Python \u7684\u5faa\u73af\u53ea\u6709\u78b0\u52300\uff08\u76f8\u5f53\u4e8eFalse\uff09\u624d\u4f1a\u505c\u4e0b\u6765</p> <pre><code>&gt;&gt;&gt; True and 13\n&gt;&gt;&gt; 13\n\n&gt;&gt;&gt; False or 0\n&gt;&gt;&gt; 0\n\n&gt;&gt;&gt; not 10\n&gt;&gt;&gt; False\n-- OK! --\n\n&gt;&gt;&gt; not None\n&gt;&gt;&gt; True\n</code></pre> <p>python \u91cc\u9762\u4f7f\u7528and\u65f6\uff0c\u5982\u679c\u7b2c\u4e00\u4e2a\u6570\u662f\u9519\u7684\uff0c\u90a3\u4e48\u4f1a\u76f4\u63a5\u8fd4\u56de\u7b2c\u4e00\u4e2a\u6570\uff1b\u5982\u679c\u7b2c\u4e00\u4e2a\u6570\u662f\u5bf9\u7684\uff0c\u90a3\u4e48\u4f1a\u8fd4\u56de\u7b2c\u4e8c\u4e2a\u6570\uff1b\u7b2c\u4e8c\u4e2a\u6570\u53ea\u6709\u5728\u7b2c\u4e00\u4e2a\u6570\u662f\u5bf9\u7684\u60c5\u51b5\u4e0b\u624d\u4f1a\u88ab\u5224\u65ad</p> <p>\u7406\u89e3\uff1aand\u662f\u903b\u8f91\u8fd0\u7b97\uff0c\u5982\u679c\u7b2c\u4e00\u4e2a\u662f\u9519\u7684\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8868\u8fbe\u5f0f\u5c31\u662f\u9519\u7684\uff0c\u5373\u8fd4\u56de\u7b2c\u4e00\u4e2a\u503c\uff1b\u5982\u679c\u7b2c\u4e00\u4e2a\u6570\u5b57\u662f\u5bf9\u7684\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8868\u8fbe\u5f0f\u7684\u503c\u53d6\u51b3\u4e8e\u7b2c\u4e8c\u4e2a\u503c\uff1a\u6bd4\u5982\uff0c\u7b2c\u4e8c\u4e2a\u503c\u5982\u679c\u662f\u9519\u8bef\u7684\uff0c\u90a3\u4e48\u5c31\u8fd4\u56de\u9519\u8bef\uff08\u5373\u7b2c\u4e8c\u4e2a\u503c\uff09\u5982\u679c\u662f\u6b63\u786e\u7684\uff0c\u4e5f\u662f\u8fd4\u56de\u7b2c\u4e8c\u4e2a\u6b63\u786e\u7684\u503c</p> <p>\u800c\u4f7f\u7528or\u7684\u65f6\u5019\uff0c\u5982\u679c\u7b2c\u4e00\u4e2a\u6570\u662f\u5bf9\u7684\uff0c\u90a3\u4e48\u76f4\u63a5\u8fd4\u56de\u7b2c\u4e00\u4e2a\u6570\uff1b\u5982\u679c\u7b2c\u4e00\u4e2a\u6570\u662f\u9519\u7684\uff0c\u90a3\u4e48\u76f4\u63a5\u8fd4\u56de\u7b2c\u4e8c\u4e2a\u6570</p> <p>OR\u662f\u8fd9\u8981\u6709\u4e00\u4e2a\u6570true\u5c31\u662ftrue</p> <p>In Python, the <code>and</code> and <code>or</code> operators are used to evaluate logical expressions.</p> <p>The <code>and</code> operator returns the first operand if it evaluates to False, and the second operand otherwise. The second operand is only evaluated if the first operand is True. So, when we evaluate the expression <code>True and 13</code>, the first operand <code>True</code> is not False, so Python returns the second operand <code>13</code>.</p> <p>The <code>or</code> operator returns the first operand if it evaluates to True, and the second operand otherwise. The second operand is only evaluated if the first operand is False. So, when we evaluate the expression <code>False or 0</code>, the first operand <code>False</code> is not True, so Python returns the second operand <code>0</code>.</p> <p><code>-v</code>is for verbose</p> <pre><code>python3 -m doctest file.py -v\n</code></pre> <p>cs 61a \u91cc\u9762print('DEBUG: result is', result)\uff0c\u4ee5DEBUG\u5f00\u5934\u7684\u8f93\u51fa\u90fd\u4f1a\u88abok autograder\u5ffd\u7565</p>"},{"location":"Course/cs61a/week1/#debugging","title":"Debugging","text":""},{"location":"Course/cs61a/week1/#running-doctests","title":"running doctests","text":"<p>\u5728statement\u91cc\u9762\u5199\u597ddoctests\uff0c\u7136\u540e\u53ef\u4ee5assertion, Testmod(), Run_docstring_examples(), \u6216\u8005\u547d\u4ee4\u884c\uff08\u53ef\u4ee5\u53bb\u6389-v\uff09:</p> <pre><code>python3 -m doctest file.py -v\n</code></pre>"},{"location":"Course/cs61a/week1/#print","title":"\u4f7f\u7528print\u6253\u70b9","text":"<pre><code>print('DEBUG: result is', result)\n</code></pre>"},{"location":"Course/cs61a/week1/#flaglong-term-debugging","title":"\u4f7f\u7528flag\u4f5c\u4e3along-term debugging\u7684\u5de5\u5177","text":"<pre><code>debug = True\n\ndef foo(n):\ni = 0\nwhile i &lt; n:\n    i += func(i)\n    if debug:\n        print('DEBUG: i is', i)\n</code></pre>"},{"location":"Course/cs61a/week1/#interative-debugging-use-of-an-interactive-repl","title":"interative debugging (use of an interactive REPL)","text":"<pre><code>python -i file.py\n</code></pre> <p>\u7136\u540e\u76f4\u63a5\u5728\u547d\u4ee4\u884c\u4e2d\u8f93\u5165\u7c7b\u4f3c:</p> <pre><code>print(foo(2))\n</code></pre> <p>\u4f1a\u76f4\u63a5\u8fd4\u56defoo(2)\u7684\u503c</p>"},{"location":"Course/cs61a/week1/#assert","title":"assert","text":"<p>\u4e0b\u9762\u7684\u8bed\u53e5\u7528\u6765\u76f4\u63a5\u786e\u8ba4\u8f93\u5165\u7684\u662f\u6574\u6570\uff1a</p> <pre><code>def double(x):\n    assert isinstance(x, int), \"The input to double(x) must be an integer\"\n    return 2 * x\n</code></pre>"},{"location":"Course/cs61b/information/","title":"CS61b Course Information","text":"<p>\u9009\u62e9\u7684\u662f2021\u5e74\u7684spring</p> <p>2021spring\u7684\u8bfe\u7a0b\u81ea\u52a8\u8bc4\u5206\u673a\u6709\u516c\u5f00\uff08\u8bfe\u7a0b\u4ee3\u7801\uff1aMB7ZPY\uff09</p>"},{"location":"Course/cs61b/information/#labhwproject","title":"\u5148\u505aLab\u548cHW\uff0cProject\u7559\u5230\u6700\u540e\u6765\u505a","text":"<p>project\u7684\u96be\u5ea6\u548c\u4ee3\u7801\u91cf\u8fd8\u662f\u6bd4\u524d\u9762\u4e24\u4e2a\u5927\u7684\uff0c\u5982\u679c\u5c0f\u767d\u4e0a\u6765\u7b2c\u4e00\u5468\u5c31\u6b7b\u78d5\u5f88\u5bb9\u6613\u60f3\u653e\u5f03\u3002\u6211\u5efa\u8bae\u5148\u505a\u5bb9\u6613\u7684\uff0c\u57f9\u517b\u4fe1\u5fc3\u540e\u518d\u6765\u4e13\u653bproject\u3002</p> <p>\u8bfe\u672c\uff1ahttps://joshhug.gitbooks.io/hug61b/content/</p> <p>\u81ea\u52a8\u8bc4\u5206\u673a\uff1ahttps://www.gradescope.com/</p> <p>\u53c2\u8003\u7684\u7b14\u8bb0\uff1ahttps://blog.csdn.net/fourier_transformer/category_9856976.html</p> <p>\u53c2\u8003\u7684\u81ea\u5b66\u8bb0\u5f55\uff08\u77e5\u4e4e\uff09\uff1ahttps://zhuanlan.zhihu.com/p/434144861</p> <p>https://zhuanlan.zhihu.com/p/432135426</p> <p>61b\u548c\u666e\u6797\u65af\u987f\u7684algorithms\u5f02\u66f2\u540c\u5de5\uff0c\u4fe9\u8bfe\u53ef\u4ee5\u4e00\u8d77\u4e0a</p> <p>61b\u5c5e\u4e8ealgorithms\u7684\u8be6\u7ec6\u7248</p> <p>\u8d76\u65f6\u95f4\u4e0a61b\u5c31\u591f\u4e86\uff0c\u6211\u4e2a\u4eba\u89c9\u5f97algorithms\u6bd461b\u96be\u4e00\u4e9b</p>"},{"location":"Course/cs61b/information/#_1","title":"\u5173\u4e8e\u4e0a\u8bfe\u7684\u5fc3\u5f97","text":"<ol> <li>\u5728\u770breading\u7684\u65f6\u5019\u53ef\u4ee5\u5148\u770b\u89c6\u9891\uff0c\u5e76\u4e0d\u662f\u6d6a\u8d39\u65f6\u95f4\uff0c\u800c\u662f\u4f1a\u66f4\u52a0\u76f4\u89c2\u4e00\u70b9</li> </ol>"},{"location":"Course/cs61b/lab1/","title":"Lab 1","text":"<p>\u53ea\u8981\u5c06Collatz\u7684\u65b9\u6cd5\u6539\u4e00\u4e0b\u4e0a\u4f20\u5c31\u884c\uff0c\u5f88\u7b80\u5355</p>"},{"location":"Course/cs61b/project0/","title":"Project 0","text":"<p>assignment\u4e2d\u76f4\u63a5\u8bf4\u660e\u4e86\uff1a<code>tilt</code> will take you 3 to 10 hours to complete</p> <p>row: \u6392\uff0c\u884c</p> <p>Column: \u7eb5\u5217</p>"},{"location":"Course/cs61b/project0/#1-2048","title":"1. 2048\u7684\u5f97\u5206\u539f\u7406\uff1a","text":"<p>Each time two tiles merge to form a larger tile, the player earns a number of points on the new tile.</p> <p>The \u201cMax Score\u201d is the maximum score the user has achieved in that game session. It isn\u2019t updated until the game is over, so that is why it remains 0 throughout the animated GIF example.</p>"},{"location":"Course/cs61b/project0/#2","title":"2. \u7a0b\u5e8f\u8bbe\u8ba1\u601d\u8def","text":"<p>Model-View-Controller Pattern (MVC), and Observe Pattern.</p> <p>The MVC pattern divides our problem into three parts:</p> <ul> <li>The model represents the subject matter being represented and acted upon \u2013 in this case incorporating the state of a board game and the rules by which it may be modified. Our model resides in the <code>Model</code>, <code>Side</code>, <code>Board</code>, and <code>Tile</code> classes. The instance variables of <code>Model</code> fully determine what the state of the game is. Note: You\u2019ll only be modifying the <code>Model</code> class.</li> <li>A view of the model, which displays the game state to the user. Our view resides in the <code>GUI</code> and <code>BoardWidget</code> classes.</li> <li>A controller for the game, which translates user actions into operations on the model. Our controller resides mainly in the <code>Game</code> class, although it also uses the GUI class to read keystrokes.</li> </ul>"},{"location":"Course/cs61b/project0/#3","title":"3. \u9898\u76ee\u7684\u89e3\u8bfb","text":"<p>tile\u5c31\u662f\u6bcf\u4e2a\u65b9\u683c\uff0c\u4f7f\u7528<code>tile.value()</code>\u6765\u83b7\u53d6tile\u7684\u6570\u5b57</p> <p>side\u4ee3\u8868\u7684\u662f\u65b9\u5411\uff0c\u53ef\u4ee5\u4f7f\u7528<code>Side s = Side.NORTH</code>(\u8fd9\u91cc\u4e0d\u9700\u8981\u4f7f\u7528new)</p> <p>\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528<code>public static void printSide(Side.NORTH)</code></p> <p>This class represents the board of tiles itself. It has three methods that you\u2019ll use: <code>setViewingPerspective</code>, <code>tile</code>, <code>move</code>. Optionally, for experimentation, you can use <code>getRandomNonNullTile</code>.</p>"},{"location":"Course/cs61b/project0/#4","title":"4. \u95ee\u9898\u70b9","text":"<p>guiding\u91cc\u9762\u8bf4\u8981\u4f7f\u7528java 15\u4f46\u662f\u622a\u56fe\u91cc\u9762\u7528\u7684\u662f14.0.2\uff0c\u6211\u7528\u7684\u5168\u90e8\u90fd\u662f15\uff08\u52a8\u56fe\u91cc\u9762\u7528\u768415\uff09\uff0c\u6ca1\u6709\u95ee\u9898</p>"},{"location":"Course/cs61b/project0/#5","title":"5. \u524d\u4e09\u4e2a\u90fd\u76f8\u5f53\u7b80\u5355\uff0c\u63a0\u8fc7","text":""},{"location":"Course/cs61b/project0/#6-tilt","title":"6. tilt","text":"<p>Computer science is essentially about one thing: Managing complexity. Writing the <code>tilt</code> method is a rich experience that will give you a chance to try just that. </p> <p>side\u7684\u4e00\u957f\u4e32\u89e3\u91ca\u770b\u4e0a\u53bb\u6709\u70b9\u96be\u4ee5\u7406\u89e3\uff1a\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u80cc\u540e\u7684\u60f3\u6cd5\u662f\uff0c\u901a\u8fc7\u4f7f\u7528\u4e0b\u9762\u7684col()\u548crow()\u65b9\u6cd5\u4ece\u91cd\u5b9a\u5411\u8f6c\u6362\u5230\u6807\u51c6\u5750\u6807\uff0c\u53ef\u4ee5\u5b89\u6392\u4f7f\u7528\u5b8c\u5168\u76f8\u540c\u7684\u4ee3\u7801\u6765\u8ba1\u7b97\u5411\u4efb\u4f55\u7279\u5b9a\u65b9\u5411\u503e\u659c\u68cb\u76d8\u7684\u7ed3\u679c\u3002</p> <p>\u8fd8\u662f\u770b\u4e0d\u61c2</p> <p>Tile t = board.tile(1, 2); board.move(1, 3, t); t = board.tile(1, 0); board.move(1, 2, t);</p> <p>Important: Make sure to use <code>board.setViewingPerpsective</code> to set the perspective back to <code>Side.NORTH</code> before you finish your call to <code>tilt</code>, otherwise weird stuff will happen.</p> <pre><code>                if (nullRow == size) {\n                    board.move(col, nullRow, t);\n                } else if (board.tile(col, row).value() == board.tile(col, nullRow + 1).value()\n                        &amp;&amp; b[col][nullRow] == null) {\n                    board.move(col, nullRow + 1, t);\n                } else if (nullRow == row + 1)\n</code></pre> <pre><code>    public boolean tilt(Side side) {\n        boolean changed;\n        changed = false;\n\n        // TODO: Modify this.board (and perhaps this.score) to account\n        // for the tilt to the Side SIDE. If the board changed, set the\n        // changed local variable to true.\n\n        // hello, world! program hhhhh\n//        for (int c = 0; c &lt; board.size(); c += 1) {\n//            for (int r = 0; r &lt; board.size(); r += 1) {\n//                Tile t = board.tile(c, r);\n//                if (board.tile(c, r) != null) {\n//                    // board.move(col, row, t)\u91cc\u9762\u586b\u7684\u6570\u5b57\u662f\u76ee\u6807\u7684\u884c\u548c\u5217\u6570\u5b57\n//                    board.move(c, 1, t);\n//                    changed = true;\n//                    score += 7;\n//                }\n//            }\n//        }\n\n        board.setViewingPerspective(side);\n        int size = board.size();\n        // \u4f7f\u7528Boolean\u77e9\u9635\u6765\u5b58\u50a8\u662f\u5426\u4fee\u6539\n        Boolean[][] b = new Boolean[size][size];\n        for (int row = size - 2; row &gt;= 0; row -= 1) {\n            for (int col = 0; col &lt; size; col += 1) {\n                if (board.tile(col, row) == null) {\n                    continue;\n                }\n                Tile t = board.tile(col, row);\n                // \u5148\u5c06\u76ee\u6807\u683c\u5411\u4e0a\u5e73\u79fb\u5230\u4e0d\u80fd\u5e73\u79fb\u4e86\u4e3a\u6b62\uff1b\n                int nullCol = col;\n                int nullRow = row + 1;\n                for (int r = row + 1; r &lt; size; r += 1) {\n                    if (board.tile(col, r) == null) {\n                        nullRow = r;\n                    } else {\n                        break;\n                    }\n                }\n                // \u548c\u4e34\u8fd1\u7684\u4e00\u683c\u8fdb\u884c\u6bd4\u8f83\uff0c\u5982\u679c\u4e00\u6837\u8fdb\u884c\u5408\u5e76\n                if (nullRow == row + 1 &amp;&amp; board.tile(col, nullRow) == null) {\n                    if (nullRow + 1 &lt; size) {\n                        if (board.tile(col, nullRow + 1).value() == board.tile(col, row).value()) {\n                            board.move(col, nullRow + 1, t);\n                            changed = true;\n                            b[col][nullRow + 1] = true;\n                            score += board.tile(col, nullRow + 1).value();\n                        } else {\n                            board.move(col, nullRow, t);\n                            changed = true;\n                        }\n                    } else {\n                        board.move(col, nullRow, t);\n                        changed = true;\n                    }\n                } else if (nullRow == row + 1 &amp;&amp; board.tile(col, nullRow) != null &amp;&amp; board.tile(col, nullRow).value() == board.tile(col, row).value()) {\n                    board.move(col, nullRow, t);\n                    changed = true;\n                    b[col][nullRow] = true;\n                    score += board.tile(col, nullRow ).value();\n                } else if (board.tile(col, nullRow) == null &amp;&amp; nullRow == size - 1) {\n                    board.move(col, nullRow, t);\n                    changed = true;\n                } else if (nullRow + 1 &lt; size &amp;&amp; board.tile(col, nullRow) == null &amp;&amp; board.tile(col, row).value() == board.tile(col,nullRow + 1).value() &amp;&amp; b[col][nullRow + 1] == null) {\n                    board.move(col, nullRow + 1, t);\n                    changed = true;\n                    b[col][nullRow + 1] = true;\n                    score += board.tile(col, nullRow + 1).value();\n                } else if (nullRow + 1 &lt; size &amp;&amp; board.tile(col, nullRow) == null &amp;&amp; board.tile(col, row).value() == board.tile(col,nullRow + 1).value() &amp;&amp; b[col][nullRow + 1] != null) {\n                    board.move(col, nullRow, t);\n                    changed = true;\n                } else if (nullRow + 1 &lt; size &amp;&amp; board.tile(col, nullRow) == null &amp;&amp; board.tile(col, row).value() != board.tile(col,nullRow + 1).value()) {\n                    board.move(col, nullRow, t);\n                    changed = true;\n                }\n\n            }\n        }\n\n        board.setViewingPerspective(Side.NORTH);\n        checkGameOver();\n        if (changed) {\n            setChanged();\n        }\n        return changed;\n    }\n</code></pre>"},{"location":"Course/cs61b/project0/#autograder-score6400-6400","title":"Autograder Score640.0 / 640.0","text":"<p>\u4e0d\u96be\uff0c\u4f46\u662f\u5199\u4e86\u4e00\u5ea7\u5c4e\u5c71\uff1a\uff09</p>"},{"location":"Course/cs61b/week1/","title":"CS61B week1","text":""},{"location":"Course/cs61b/week1/#lecture-1","title":"Lecture 1","text":"<p>\u5b66\u4e60\u7684\u987a\u5e8f\uff1aReading\uff08\u7cbe\u534e\u7684\u8bfe\u7a0b\u5185\u5bb9\uff09-&gt; Guide \uff08\u8bfe\u7a0b\u5185\u5bb9\u7684\u603b\u7ed3\uff09-&gt; Slides + Video -&gt; Lab -&gt; HW -&gt; project</p> <p>entry code: 93PK75</p> <p>lab1 setup\u5c31\u662f\u6559\u4e86\u4e00\u4e0b\u600e\u4e48\u914d\u7f6e\u81ea\u5df1\u7684\u7535\u8111\uff0c\u7528\u6765\u8dd1java</p> <pre><code>cd . \u56de\u5230\u73b0\u5728\u8fd9\u4e2a\u6587\u4ef6\u5939\uff0c\u76f8\u5f53\u4e8e\u4ec0\u4e48\u90fd\u6ca1\u505a\ncd .. \u56de\u5230parent\u6587\u4ef6\u5939\nls -l \u4f1a\u628a\u8bfb\u5199\u72b6\u6001\u90fd\u7ed9\u663e\u793a\u51fa\u6765\nmkdir \u65b0\u5efa\u6587\u4ef6\u5939\ncp \u590d\u5236\u4e00\u4e2a\u6587\u4ef6\nmv \u79fb\u52a8\u4e00\u4e2a\u6587\u4ef6\nopen . \u662f\u6253\u5f00file explorer\u5728\u73b0\u5728\u7684\u6587\u4ef6\u5939\nrm -r\n</code></pre> <p>println\u5305\u542b\u4e86\u4e00\u4e2a\u65b0\u7684\u884c</p> <p>Java\u6709static typing, a key feature of Java compiler is that it performs a static type check.</p> <p>\u51fa\u73b0\u7c7b\u578b\u9519\u8bef\u7684\u8bdd\uff0ccompiler\u4f1a\u62d2\u7edd\u8fd0\u884c</p> <p>python\u662fdynamically typed language</p> <p>Java\u53ef\u4ee5<code>System.out.println(5 + \" \");</code>\u4e5f\u53ef\u4ee5<code>String h = 5 + \"horse\";</code></p> <p>\u4f46\u662fpython\u4e0d\u53ef\u4ee5<code>print(5 + \"horse\")</code>\uff0c\u56e0\u4e3apython doesn't know what the statement is supposed to be, a number or a string?</p> <p>As an analogy, programming in Python can be a bit like Dan Osman free-soloing Lover's Leap. It can be very fast, but dangerous. Java, by contrast is more like using ropes, helmets, etc. as in this video.</p>"},{"location":"Course/cs61b/week1/#comment","title":"comment","text":"<p>In a Javadoc comment, the block comment starts with an extra asterisk, e.g. <code>/**</code>, and the comment often (but not always) contains descriptive tags. </p>"},{"location":"Course/cs61b/week1/#array","title":"\u5b9a\u4e49array","text":"<pre><code>public class HelloNumbers {\n    public static void main(String[] args){\n        int[] numbers = new int[]{1, 3, 5, 7};\n        System.out.println(numbers[3]);\n        System.out.println(numbers.length);\n    }\n}\n</code></pre>"},{"location":"Course/cs61b/week1/#continuebreak","title":"continue\u548cbreak","text":"<p>\u89e3\u91ca\u662f<code>continue</code>\u53ef\u4ee5\u76f4\u63a5\u8df3\u8fc7\u73b0\u5728\u6240\u5728\u7684\u8fd9\u4e2a\u5faa\u73af\uff0c\u8fdb\u5165\u5230\u4e0b\u4e00\u4e2ai\u7684\u81ea\u589e\u5faa\u73af</p> <p>The <code>continue</code> statement skips the current iteration of the loop, effectively jumping straight to the increment condition.</p> <p>\u800c<code>break</code>\u662f\u76f4\u63a5\u7ec8\u6b62\u5305\u542b\u8fd9\u4e2a<code>break</code>\u7684\u6700\u5185\u5c42\u7684\u5faa\u73af</p> <p>By contrast, the <code>break</code> keyword completely terminates the innermost loop when it is called. </p> <pre><code>public class HelloNumbers {\n    public static void main (String[] args) {\n        String[] a = {\"cat\", \"horse\", \"dog\", \"elephant\"};\n        for (int i = 0; i &lt; a.length; i += 1) {\n            if (a[i].contains(\"horse\")) {\n                continue;\n            }\n            for (int j = 0; j &lt; 3; j += 1) {\n                System.out.println(a[i]);\n            }\n        }\n    }\n}\n</code></pre> <p>\u200b   \u8f93\u51fa\u662f\uff1a</p> <pre><code>cat\ncat\ncat\ndog\ndog\ndog\nelephant\nelephant\nelephant\n</code></pre> <p>\u800c\u5c06<code>continue</code>\u6539\u6210<code>break</code>\u4e4b\u540e\uff0c\u90a3\u4e48\u4f1a\u8f93\u51fa\uff1a</p> <pre><code>cat\ncat\ncat\n</code></pre> <p>\u53e6\u5916\u4e00\u4e2a<code>break</code>\u7684\u4f8b\u5b50\uff1a</p> <pre><code>public class HelloNumbers {\n    public static void main(String[] args) {\n        String[] a = {\"cat\", \"dog\", \"laser horse\", \"ketchup\", \"horse\", \"horbse\"};\n\n        for (int i = 0; i &lt; a.length; i += 1) {\n            for (int j = 0; j &lt; 3; j += 1) {\n                System.out.println(a[i]);\n                if (a[i].contains(\"horse\")) {\n                    break;\n                }\n            }\n        }\n    }\n}\n</code></pre> <p>\u8f93\u51fa\uff1a</p> <pre><code>cat\ncat\ncat\ndog\ndog\ndog\nlaser horse\nketchup\nketchup\nketchup\nhorse\nhorbse\nhorbse\nhorbse\n</code></pre> <p>\u5728\u8fd9\u4e2a\u4f8b\u5b50\u91cc\u9762\uff0c<code>horse</code>\u548c<code>laser horse</code>\u90fd\u53ea\u8f93\u51fa\u4e86\u4e00\u6b21\uff0c\u7136\u540e\u5185\u5c42\u7684\u5faa\u73af\u5c31\u76f4\u63a5\u88ab\u7ec8\u6b62\u4e86</p>"},{"location":"Course/cs61b/week1/#forenhanced-for-loop","title":"\u589e\u5f3afor\u5faa\u73af(enhanced for loop)","text":"<pre><code>public class EnhancedForBreakDemo {\n    public static void main(String[] args) {\n        String[] a = {\"cat\", \"dog\", \"laser horse\", \"ketchup\", \"horse\", \"horbse\"};\n\n        for (String s : a) {\n            for (int j = 0; j &lt; 3; j += 1) {\n                System.out.println(s);\n                if (s.contains(\"horse\")) {\n                    break;\n                }                \n            }\n        }\n    }\n}\n</code></pre> <p>\u8f93\u51fa\u662f</p> <pre><code>cat\ncat\ncat\ndog\ndog\ndog\nlaser horse\nketchup\nketchup\nketchup\nhorse\nhorbse\nhorbse\nhorbse\n</code></pre>"},{"location":"Course/cs61b/week1/#lecture-2","title":"Lecture 2","text":"<p>\u8c03\u7528\u5176\u4ed6\u7c7b\u7684\u7c7b\u88ab\u79f0\u4e3a\u88ab\u8c03\u7528\u7c7b\u7684\u201cclient\u201d</p> <p>A class that uses another class is sometimes called a \"client\" of that class, i.e. <code>DogLauncher</code> is a client of <code>Dog</code>.</p> <pre><code>public class Dog {\n\n    // instance variable\n    public int weightInPounds;\n    /** one integer constructor for dogs. */\n    public Dog(int w) {\n        weightInPounds = w;\n    }\n    // non-static method a.k.a Instance Method\n    public void makeNoise() {\n        if (weightInPounds &lt; 10) {\n            System.out.println(\"yip!\");\n        } else if (weightInPounds &lt; 30) {\n            System.out.println(\"bark.\");\n        } else {\n            System.out.println(\"wooof!\");\n        }\n    }\n}\n</code></pre> <pre><code>public class DogLauncher {\n    public static void main(String[] args) {\n        Dog d;\n        // An Object in Java is an instance of any class.\n        d = new Dog();\n        // Members of a class are accessed using dot notation.\n        d.weightInPounds = 20;\n        d.makeNoise();\n    }\n}\n</code></pre>"},{"location":"Course/cs61b/week1/#key-features","title":"key features","text":"<ul> <li>An <code>Object</code> in Java is an instance of any class.</li> <li>The <code>Dog</code> class has its own variables, also known as instance variables or non-static variables. These must be declared inside the class, unlike languages like Python or Matlab, where new variables can be added at runtime.</li> <li>The method that we created in the <code>Dog</code> class did not have the <code>static</code> keyword. We call such methods instance methods or non-static methods.</li> <li>To call the <code>makeNoise</code> method, we had to first instantiate a <code>Dog</code> using the <code>new</code> keyword, and then make a specific <code>Dog</code> bark. In other words, we called <code>d.makeNoise()</code> instead of <code>Dog.makeNoise()</code>.</li> <li>Once an object has been instantiated, it can be assigned to a declared variable of the appropriate type, e.g. <code>d = new Dog();</code></li> <li>Variables and methods of a class are also called members of a class.</li> <li>Members of a class are accessed using dot notation.</li> </ul> <p>\u6784\u9020\u51fd\u6570\u5176\u5b9e\u5c31\u662f\u7528\u6765\u521b\u5efa\u5bf9\u8c61\u7684\u51fd\u6570\uff0c\u53c8\u53eb\u6784\u9020\u5668\u3002\u6784\u9020\u51fd\u6570\u662f\u4e00\u4e2a\u7c7b\u521b\u5efa\u5bf9\u8c61\u7684\u6839\u672c\u9014\u5f84\uff0c\u5982\u679c\u4e00\u4e2a\u7c7b\u6ca1\u6709\u6784\u9020\u5668\uff0c\u5219\u5b83\u65e0\u6cd5\u521b\u5efa\u5b9e\u4f8b\uff08\u5bf9\u8c61\uff09\u3002\u5982\u679c\u4f60\u6ca1\u6709\u7ed9\u4e00\u4e2a\u7c7b\u663e\u5f0f\u5730\u521b\u5efa\u4e00\u4e2a\u6784\u9020\u5668\uff0c\u5219\u7cfb\u7edf\u4f1a\u81ea\u52a8\u4e3a\u5176\u521b\u5efa\u4e00\u4e2a\u9ed8\u8ba4\u7684\u6784\u9020\u5668\u3002\u5982\u679c\u4f60\u663e\u5f0f\u5730\u4e3a\u4e00\u4e2a\u7c7b\u521b\u5efa\u4e86\u6784\u9020\u5668\uff0c\u5219\u7cfb\u7edf\u4e0d\u4f1a\u518d\u4e3a\u5176\u63d0\u4f9b\u9ed8\u8ba4\u6784\u9020\u5668\u3002</p> <p>\u65e0\u53c2\u6784\u9020\u51fd\u6570\uff08\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\uff09\uff1a</p> <pre><code>public \u7c7b\u540d\u79f0(){\n    \u2026\u2026\n}\n</code></pre> <p>\u5e26\u53c2\u6784\u9020\u51fd\u6570\uff1a</p> <pre><code>public \u7c7b\u540d\u79f0(\u53c2\u65701\uff0c\u53c2\u65702) {\n}\n</code></pre> <p>\u4e3a\u4e86\u5b9e\u73b0\u5728\u9762\u5411\u5bf9\u8c61\u7684\u8bed\u8a00\u91cc\u521b\u5efa\u5bf9\u8c61<code>Dog d = new Dog(20)</code>\uff1a</p> <pre><code>public class DogLauncher {\n    public static void main(String[] args) {\n        Dog d = new Dog(20);\n        d.makeNoise();\n    }\n}\n</code></pre> <p>\u6211\u4eec\u9700\u8981\u5f80\u88ab\u8c03\u7528\u7684class\u91cc\u9762\u52a0\u5165\u4e00\u4e2a\u6784\u9020\u5668constructor:</p> <pre><code>public class Dog {\n    public int weightInPounds;\n\n    // constructor\n    // The constructor with signature public Dog(int w) will be invoked anytime that we try to create a Dog using the new keyword and a single integer parameter.\n    public Dog(int w) {\n        weightInPounds = w;\n    }\n\n    public void makeNoise() {\n        if (weightInPounds &lt; 10) {\n            System.out.println(\"yipyipyip!\");\n        } else if (weightInPounds &lt; 30) {\n            System.out.println(\"bark. bark.\");\n        } else {\n            System.out.println(\"woof!\");\n        }    \n    }\n}\n</code></pre> <p>we can create arrays of instantiated objects in java</p> <pre><code>public class DogLauncher {\n    public static void main(String[] args) {\n        Dog d = new Dog(51);\n        d.makeNoise();\n        // create an array to hold two Dog objects\n        Dog[] dogs = new Dog[2];\n        // create each actual Dog\n        dogs[0] = new Dog(5);\n        dogs[1] = new Dog(20);\n        dogs[0].makeNoise();\n        dogs[1].makeNoise();\n    }\n}\n</code></pre>"},{"location":"Course/cs61b/week1/#static-vs-non-static-method-instance-method","title":"static vs. non static method (instance method)","text":"<p>Java allows us to define two types of methods:</p> <ul> <li>Class methods, a.k.a. static methods.</li> <li>Instance methods, a.k.a. non-static methods.</li> </ul> <p>Instance methods are actions that can be taken only by a specific instance of a class. Static methods are actions that are taken by the class itself. Both are useful in different circumstances. As an example of a static method, the <code>Math</code> class provides a <code>sqrt</code> method. Because it is static, we can call it as follows:</p> <pre><code>x = Math.sqrt(100);\n</code></pre> <p>If <code>sqrt</code> had been an instance method, we would have instead the awkward syntax below. Luckily <code>sqrt</code> is a static method so we don't have to do this in real programs.</p> <pre><code>Math m = new Math();\nx = m.sqrt(100);\n</code></pre> <pre><code>public class DogLauncher {\n    public static void main(String[] args) {\n        Dog d = new Dog(51);\n        d.makeNoise();\n        // create an array to hold two Dog objects\n        Dog[] dogs = new Dog[2];\n        // create each actual Dog\n        dogs[0] = new Dog(5);\n        dogs[1] = new Dog(20);\n        dogs[0].makeNoise();\n        dogs[1].makeNoise();\n        double x = Math.round(36);\n        System.out.println(x);\n        Dog d1 = new Dog(5);\n        Dog d2 = new Dog(40);\n        // \u6211\u4eec\u5728\u8fd9\u91cc\u4f7f\u7528Dog.maxDog\uff0c\u8fd9\u79cd\u65b9\u6cd5\u8c03\u7528\u7684Dog class\uff0c\u800c\u76f4\u63a5\u8c03\u7528Dog\u7c7b\u4e2d\u7684\u65b9\u6cd5\u662fstatic\u65b9\u6cd5\uff0c\u6240\u4ee5maxDog\u5b9a\u4e49\u7684\u65f6\u5019\u5fc5\u987b\u662fpublic static Dog maxDog\n        // Dog bigger = Dog.maxDog(d1, d2);\n\n        // \u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u7684\u662f\u5b9e\u4f8b\u5316\u4e4b\u540e\u7684d1.maxDog\uff0c\u6240\u4ee5\u662fnon-static\u7684\n        Dog bigger = d1.maxDog(d2);\n        bigger.makeNoise();\n\n        //\u8fd9\u79cd\u662f\u975e\u5e38\u4e0d\u597d\u7684\uff0cbad style\uff0c\u56e0\u4e3astatic\u7684\u53d8\u91cf\u6700\u597d\u662f\u901a\u8fc7Dog.bionome\u6765\u8fdb\u884c\u8c03\u7528\n        System.out.println(d.bionome);\n        // \u8fd9\u79cd\u5c31\u6bd4\u8f83\u597d\n        System.out.println(Dog.bionome);\n    }\n}\n</code></pre> <pre><code>public class Dog {\n\n    // instance variable\n    public int weightInPounds;\n    public static String bionome = \"canis familiaris\";\n    /** one integer constructor for dogs. */\n    public Dog(int w) {\n        weightInPounds = w;\n    }\n    // non-static method a.k.a Instance Method\n    public void makeNoise() {\n        if (weightInPounds &lt; 10) {\n            System.out.println(\"yip!\");\n        } else if (weightInPounds &lt; 30) {\n            System.out.println(\"bark.\");\n        } else {\n            System.out.println(\"wooof!\");\n        }\n    }\n    // in this case, we are invoking the method using the class name.\n    public static Dog maxDog(Dog d1, Dog d2) {\n        if (d1.weightInPounds &gt; d2.weightInPounds) {\n            return d1;\n        } \n        return d2;\n    }\n    public Dog maxDog(Dog d2) {\n        if (this.weightInPounds &gt; d2.weightInPounds) {\n            return this;\n        }\n        return d2;\n    }\n}\n</code></pre> <ul> <li>a variable or method defined in a class is also called a member of that class</li> <li>static members are accessed using class name, e.g. Dog.bionome</li> <li>Non-static members cannot be invoked using class name</li> <li>static methods must access instance variables via a specific instance, e.g. d1.</li> </ul>"},{"location":"Course/cs61b/week1/#public-static-void-main-string-args","title":"public static void main (String[] args)","text":"<ul> <li><code>public</code>: So far, all of our methods start with this keyword.</li> <li><code>static</code>: It is a static method, not associated with any particular instance.</li> <li><code>void</code>: It has no return type.</li> <li><code>main</code>: This is the name of the method.</li> <li><code>String[] args</code>: This is a parameter that is passed to the main method.</li> </ul>"},{"location":"Course/cs61b/week1/#args-summing-command-line-arguments","title":"args[]\u7684\u4f7f\u7528-summing command line arguments","text":"<pre><code>public class DemoSum {\n    public static void main (String[] args) {\n        int sum = 0;\n        int i = 0;\n        while (i &lt; args.length) {\n            sum = sum + Integer.parseInt(args[i]);\n            i += 1;\n        }\n        System.out.println(sum);\n    }\n}\n</code></pre>"},{"location":"Course/cs61b/week1/#exercise","title":"Exercise","text":"<pre><code>public class HelloNumbers {\n    public static void main (String[] args) {\n        int x = 0;\n        int sum = 0;\n        while (x &lt; 10) {\n            System.out.println(sum);\n            x = x + 1;\n            sum = sum + x;\n        }\n    }\n}\n</code></pre>"},{"location":"Course/cs61b/week1/#homework-exercise-2","title":"Homework exercise 2","text":"<pre><code>public class Max {\n    public static int max (int[] array) {\n        int x = 0;\n        int m = array[0];\n        int length = array.length;\n        while (x &lt; length) {\n            if (array[x]&gt; m ) {\n                m = array[x];\n            }\n            x = x + 1;\n        }\n        return m;\n    }\n    public static void main (String[] args) {\n        int[] numbers = new int[]{9, 2, 15, 2, 22, 10, 6};\n        System.out.println(max(numbers));\n    }\n}\n</code></pre>"},{"location":"Course/cs61b/week1/#homework-exercise-4","title":"Homework exercise 4","text":"<pre><code>public class WindowPosSum {\n    public static void windowPosSum(int[] a, int n) {\n        /**\n         * replace each element a[i] with the sum of a[i] through a[i + n]\n         */\n        // copy the a array to a new array b\n        int[] b = new int[a.length];\n        for (int i = 0; i &lt; a.length; i += 1) {\n            b[i] = a[i];\n        }\n        // \u904d\u5386\u6bcf\u4e2a\u5143\u7d20\n        for (int i = 0; i &lt; a.length; i += 1) {\n            if (a[i] &lt;= 0) {\n                continue;\n            }\n            else {\n                if ((i + n) &lt; a.length) {\n                    int temp = 0;\n                    for (int j = i; j &lt;= i + n; j += 1) {\n                        temp += b[j];\n                    }\n                    a[i] = temp;\n                }\n                else {\n                    int temp = 0;\n                    for (int j = i; j &lt; a.length; j += 1) {\n                        temp += b[j];\n                    }\n                    a[i] = temp;\n                }\n            }\n        }\n    }\n    public static void main(String[] args) {\n        int[] a = {1, 2, -3, 4, 5, 4};\n        int n = 3;\n        windowPosSum(a, n);\n        System.out.println(java.util.Arrays.toString(a));\n    }\n\n}\n</code></pre>"},{"location":"Course/cs61b/week1/#break","title":"\u4f7f\u7528break:","text":"<pre><code>public class WindowPosSum {\n    public static void windowPosSum(int[] a, int n) {\n        /**\n         * replace each element a[i] with the sum of a[i] through a[i + n]\n         */\n        // copy the a array to a new array b\n        int[] b = new int[a.length];\n        for (int i = 0; i &lt; a.length; i += 1) {\n            b[i] = a[i];\n        }\n        // \u904d\u5386\u6bcf\u4e2a\u5143\u7d20\n        for (int i = 0; i &lt; a.length; i += 1) {\n            if (a[i] &lt;= 0) {\n                continue;\n            }\n            else {\n                int temp = 0;\n                for (int j = i; j &lt;= i + n; j++) {\n                    if (j &gt;= a.length) {\n                        break;\n                    }\n                    temp += b[j];\n                }\n                a[i] = temp;\n            }\n        }\n    }\n    public static void main(String[] args) {\n        int[] a = {1, 2, -3, 4, 5, 4};\n        int n = 3;\n        windowPosSum(a, n);\n        System.out.println(java.util.Arrays.toString(a));\n    }\n\n}\n</code></pre>"},{"location":"Course/cs61b/week1/#exercise-121","title":"Exercise 1.2.1","text":"<pre><code>public static Dog maxDog(Dog d1, Dog d2) {\n    if (weightInPounds &gt; d2.weightInPounds) {\n        return this;\n    }\n    return d2;\n}\n</code></pre>"},{"location":"Course/cs61b/week2/","title":"CS61B Week 2","text":""},{"location":"Course/cs61b/week2/#lecture-31","title":"Lecture 3.1","text":""},{"location":"Course/cs61b/week2/#1-testing-and-selection-sort","title":"1. testing and selection sort","text":"<p>programmar believe their code works because of tests they write themselves </p> <p>\u5148\u5199test\u7a0b\u5e8f</p>"},{"location":"Course/cs61b/week2/#ad-hoc-testing","title":"Ad Hoc Testing","text":"<p>\u5728java\u91cc\u9762\uff0c==\u6bd4\u8f83\u7684\u662f\u5b58\u50a8\u7684address</p> <pre><code>public class TestSort {\n    public static void testSort() {\n        String[] input = {\"i\", \"have\", \"an\", \"egg\"};\n        String[] expected = {\"an\", \"egg\", \"have\", \"i\"};\n        Sort.sort();\n        if (!java.util.Arrays.equals(input, expected)) {\n            System.out.println(\"Error! There seems to be a problem with Sort.sort.\");\n        }\n        for (int i = 0; i &lt; input.length; i++) {\n            if (!input[i].equals(expected[i])) {\n                System.out.println(\"Mismach in position \" + i + \", expected: \" + expected[i] + \", but got: \" + input[i]);\n            }\n        }\n    }\n    public static void main(String[] args) {\n        testSort();\n    }\n}\n</code></pre>"},{"location":"Course/cs61b/week2/#junit-testing","title":"JUnit Testing","text":"<pre><code>public class TestSort {\n    public static void testSort() {\n        String[] input = {\"i\", \"have\", \"an\", \"egg\"};\n        String[] expected = {\"an\", \"egg\", \"have\", \"i\"};\n        Sort.sort();\n        org.junit.Assert.assertArrayEquals(expected, input);\n\n    }\n    public static void main(String[] args) {\n        testSort();\n    }\n}\n</code></pre> <p>And the information we would get is:</p> <pre><code>Exception in thread \"main\" arrays first differed at element [0]; expected:&lt;[an]&gt; but was:&lt;[i]&gt;\n    at org.junit.internal.ComparisonCriteria.arrayEquals(ComparisonCriteria.java:78)\n    at org.junit.internal.ComparisonCriteria.arrayEquals(ComparisonCriteria.java:28)\n    at org.junit.Assert.internalArrayEquals(Assert.java:534)\n    at org.junit.Assert.assertArrayEquals(Assert.java:285)\n    at org.junit.Assert.assertArrayEquals(Assert.java:300)\n    at TestSort.testSort(TestSort.java:6)\n    at TestSort.main(TestSort.java:10)\nCaused by: org.junit.ComparisonFailure: expected:&lt;[an]&gt; but was:&lt;[i]&gt;\n    at org.junit.Assert.assertEquals(Assert.java:117)\n    at org.junit.Assert.assertEquals(Assert.java:146)\n    at org.junit.internal.ExactComparisonCriteria.assertElementsEqual(ExactComparisonCriteria.java:8)\n    at org.junit.internal.ComparisonCriteria.arrayEquals(ComparisonCriteria.java:76)\n    ... 6 more\n</code></pre>"},{"location":"Course/cs61b/week2/#selection-sort","title":"Selection Sort \uff08\u9009\u62e9\u6392\u5e8f\uff09","text":""},{"location":"Course/cs61b/week2/#lecture-21","title":"Lecture 2.1","text":""},{"location":"Course/cs61b/week2/#lecture-22","title":"Lecture 2.2","text":""},{"location":"Course/ddca/ddca/","title":"ETH Zurich\uff1aDigital Design and Computer Architecture","text":""},{"location":"Course/ddca/ddca/#information","title":"Information","text":"<p>\u8fd9\u95e8\u8ba1\u7b97\u5373\u4f53\u7cfb\u7ed3\u6784\u8bfe\u7528\u7684\u4e5f\u662fVerilog\u548cMIPS\uff0c\u548c\u675c\u514b\u7684ECE550\u975e\u5e38\u76f8\u4f3c\uff0c\u6240\u4ee5\u62ff\u6765\u5f53\u9884\u4e60\u548c\u590d\u4e60\u6750\u6599\u76f8\u5f53\u5408\u9002</p>"},{"location":"Course/dukeC/1_information/","title":"1. Information","text":"<p>\u6839\u636eCS\u81ea\u5b66\u6307\u5357:</p> <ul> <li>\u8bfe\u7a0b\u6bd4\u8f83\u6ce8\u91cd\u57fa\u7840\u548c\u57fa\u672c\u6982\u5ff5\uff0c\u6bd4\u5982frame\uff0ctack memory\uff0cheap memory\u7b49\uff0c\u8bb2\u5f97\u5f88\u900f</li> <li>\u9488\u5bf9C\u6700\u96be\u638c\u63e1\u7684\u6307\u9488\uff0c\u6709\u597d\u7684\u7ec3\u4e60\u548c\u7f16\u7a0b\u6765\u52a0\u6df1\u548c\u5f3a\u5316\u7406\u89e3</li> <li>\u6709\u5f88\u597d\u7684GDB\uff0cValgrind\u4e0a\u624b\u7ec3\u4e60\uff0c\u4f5c\u4e1a\u4e5f\u4f1a\u6d89\u53ca\u4e00\u4e9b\u57fa\u672c\u7684git\u7ec3\u4e60</li> <li>\u8001\u5e08\u5efa\u8bae\u4f5c\u4e1a\u4f7f\u7528Emacs\uff0c\u6240\u4ee5\u5bf9Emacs\u5c0f\u767d\u6765\u8bf4\uff0c\u662f\u4e2a\u4e0d\u9519\u7684\u5165\u95e8</li> <li>\u867d\u7136\u8bfe\u7a0b\u540d\u79f0\u662f\u5165\u95e8\uff0c\u4f46\u662f\u517c\u5177\u5e7f\u5ea6\u548c\u6df1\u5ea6</li> </ul> <p>\u5b66\u4e60\u7406\u7531\uff1a</p> <ol> <li> <p>\u675c\u514bECE\u7684\u8bfe\u7a0b<code>ECE551 Programming, Data Structures, and Algorithms in C++</code>\u4f1a\u4ece\u4eceC\u8bed\u8a00\u5feb\u901f\u5165\u95e8\uff0c\u7136\u540e\u8f6c\u5411C++\u3002\u5176\u4e2d\uff0cC\u8bed\u8a00\u90e8\u5206\u7684\u8bfe\u7a0b\u9075\u5faa\u7684\u5c31\u662fcoursera\u4e0a\u7684\u8fd9\u95e8<code>Duke Introductory C Programming Speciallization</code>\u3002</p> </li> <li> <p>\u5b66\u4e60C\u7684\u8bfe\u7a0b\u662f\u4e0acomputer organization \u7684\u57fa\u7840\uff0c\u5728intro\u91cc\u8001\u5e08\u4e5f\u4ecb\u7ecd\u4e86\u8fd9\u4e00\u70b9</p> </li> </ol>"},{"location":"Course/dukeC/2/","title":"2. Programming Fundamentals","text":""},{"location":"Course/dukeC/2/#module-1-introduction","title":"Module 1 Introduction","text":""},{"location":"Course/dukeC/2/#1","title":"1. \u4e3b\u8981\u5185\u5bb9","text":"<p>\u8fd9\u4e2amodule\u4e3b\u8981\u8bb2\u7684\u75287\u4e2a\u6b65\u9aa4\uff08the Seven Steps\uff09\u6765\u7cfb\u7edf\u7684\u89e3\u51b3\u7f16\u7a0b\u95ee\u9898\uff0c\u5e76\u4e14\u89c4\u5212\u51fa\u6709\u9488\u5bf9\u6027\u4e14\u6b63\u786e\u7684\u7b97\u6cd5\u3002</p>"},{"location":"Course/dukeC/2/#2-seven-steps","title":"2. Seven Steps","text":""},{"location":"Course/dukeC/2/#i","title":"I \u8bfe\u7a0b\u7684\u67b6\u6784","text":"<p>\u5b66\u4e60\u600e\u4e48program\uff0c\u5b66\u4e60\u5982\u4f55\u9605\u8bfb\u4ee3\u7801</p> <p>Course 1: seven steps -- \u9605\u8bfb\u4ee3\u7801\u4e2d\u7684syntax(\u53e5\u6cd5\uff0c\u53e5\u6cd5\u89c4\u5219) and semantics(\u8bed\u4e49\u5b66\uff1b\u8bed\u4e49\u8bba)</p> <p>Course 2: editing, compiling and running code; testing and debugging</p> <p>Course 3: Pointers, arrays, and strings; recursion</p> <p>Course 4: \u548c\u7528\u6237\u4ee5\u53ca\u7cfb\u7edf\u4ea4\u4e92\uff08IO\u7cfb\u7edf\uff09\uff1b\u52a8\u6001\u5185\u5b58\u89c4\u5212\uff08dynamic memory allocation\uff09</p>"},{"location":"Course/dukeC/2/#ii-programming-plan-first-then-code","title":"II Programming: Plan First, Then Code","text":"<p>\u53ef\u4ee5\u5c06 a large programming task \u5206\u89e3\u6210several small tasks\uff1b30\u5206\u949f\u7684planning \u53ef\u4ee5\u76f8\u5f53\u4e8e\u51e0\u4e2a\u5c0f\u65f6\u7684try to make the code work properly</p> <p>\u5c06\u5199\u4ee3\u7801\u6bd4\u505a\u9020\u6a21\u5929\u5927\u697c\uff0c\u9700\u8981\u73b0\u6709\u5b8c\u6574\u7684approved\u84dd\u56fe\u624d\u80fd\u5f00\u59cb\u9020\uff1acome up with a complete plan (algorithm) first and build (implement in code) second</p> <p>\u7f16\u7a0b\u7684\u6838\u5fc3\u662f\u89e3\u51b3\u4e00\u7c7b\u95ee\u9898\u800c\u4e0d\u662f\u89e3\u51b3\u4e00\u4e2a\u95ee\u9898\uff1a\u5f53\u6211\u4eec\u60f3\u77e5\u90537\u662f\u4e0d\u662fprime\u7684\u65f6\u5019\uff0c\u6211\u4eec\u4f1a\u5199\u4e00\u4e2a\u7a0b\u5e8f\u53bb\u5224\u65ad\u4efb\u610f\u4e00\u4e2aN\u662f\u4e0d\u662fprime</p> <p>\u6211\u4eec\u9700\u8981\u786e\u5b9a\u7279\u5b9a\u7684\u8f93\u5165\u503c\uff0c\u89c4\u5b9a\u8f93\u5165\u503c\u7684\u7c7b\u578b</p> <p>\u5728coding\u524d\uff0c\u6211\u4eec\u9700\u8981\u786e\u5b9a\u786e\u5207\u7684algorithm</p>"},{"location":"Course/dukeC/2/#iii-overview-of-the-seven-steps","title":"III Overview of the Seven Steps","text":""},{"location":"Course/dukeC/2/#3-the-first-four-steps","title":"3. The First Four Steps","text":""},{"location":"Course/dukeC/2/#step-1-work-an-example-yourself","title":"Step 1: work an example yourself","text":"<p>\u5c31\u662f\u81ea\u5df1\u60f3\u51fa\u4e00\u4e2a\u7279\u5b9a\u7684\u4f8b\u5b50\uff0c\u6bd4\u5982\u5728\u5199\u4e00\u4e2a\u5224\u65adN\u662f\u4e0d\u662f\u8d28\u6570\u7684\u4f8b\u5b50\u91cc\uff0c\u5148\u5047\u5b9aN\u662f7\uff0c\u7136\u540e\u628a\u5224\u65ad7\u662f\u8d28\u6570\u7684\u8fc7\u7a0b\u60f3\u51fa\u6765\u5e76\u4e14\u6700\u597d\u753b\u4e00\u4e2a\u56fe\uff08draw a diagram\uff09</p> <p></p> <p>Domain knowledge: \u9886\u57df\u77e5\u8bc6</p>"},{"location":"Course/dukeC/2/#step-2-write-down-what-you-just-did","title":"Step 2 write down what you just did","text":"<p>\u5c31\u662f\u5199\u4e0b\u4e00\u7ec4\u6e05\u6670\u7684\u8bf4\u660e\uff0c\u5176\u4ed6\u4eba\u90fd\u53ef\u4ee5\u9075\u5faa\uff0c\u4ee5\u91cd\u73b0\u4f60\u521a\u521a\u89e3\u51b3\u7684\u7279\u5b9a\u95ee\u9898\u5b9e\u4f8b\u7684\u7b54\u6848</p> <p>\u96be\u70b9\u5728\u4e8e\u4f1a\u5ffd\u7565\u4e00\u4e9b\u5c0f\u7684\u7ec6\u8282</p>"},{"location":"Course/dukeC/2/#step-3-generalize-your-steps","title":"Step 3 generalize your steps","text":"<p>\u9996\u5148\uff0c\u6211\u4eec\u5fc5\u987b\u53d6\u6211\u4eec\u4f7f\u7528\u7684\u7279\u5b9a\u503c\u5e76\u7528\u53c2\u6570\u7684\u6570\u5b66\u8868\u8fbe\u5f0f\u4ee3\u66ff\u5b83\u4eec</p> <p>\u6982\u62ec\u6b65\u9aa4\u7684\u7b2c\u4e8c\u79cd\u5e38\u89c1\u65b9\u6cd5\u662f\u5bfb\u627e\u91cd\u590d\u2014\u2014\u76f8\u540c\u7684\u6b65\u9aa4\u53cd\u590d\u91cd\u590d</p> <p>If you find it difficult to see a pattern, it is recommended to repeat steps 1 and 2 on different examples.</p>"},{"location":"Course/dukeC/2/#step-4-test-your-algorithms","title":"Step 4 test your algorithms","text":""},{"location":"Course/dukeC/2/#4-examples","title":"4. Examples","text":"<p>\u7ed9\u4e86\u4e00\u4e2a\u5173\u4e8e\u683c\u5b50\u7684example\uff0c\u53ef\u4ee5\u8fdb\u884c\u76f4\u89c2\u5730\u627e\u89c4\u5f8b</p> <p></p>"},{"location":"Course/dukeC/2/#module-2-reading-code","title":"Module 2 Reading Code","text":""},{"location":"Course/dukeC/2/#1_1","title":"1. \u4e3b\u8981\u5185\u5bb9","text":"<p>\u4e3b\u8981\u5b66\u4f1a\u9605\u8bfb\u3001\u7406\u89e3\u3001\u4f7f\u7528\u51fd\u6570\u3001\u6761\u4ef6\u8bed\u53e5\u3001\u5faa\u73af\u548c\u5176\u4ed6\u57fa\u7840\u7684\u6280\u5de7</p>"},{"location":"Course/dukeC/2/#2-variables-and-expressions","title":"2. variables and expressions","text":"<p>\u5148\u8bfb\u4e00\u4e9b\u597d\u7684\u4ee3\u7801\uff0c\u624d\u80fd\u81ea\u5df1\u5199\u597d\u4ee3\u7801</p> <p><code>programs track most of their state in variables</code></p>"},{"location":"Course/dukeC/2/#i-decalaration","title":"I decalaration","text":"<p>The name of a variable may be any <code>identifier</code>.</p> <p>Identifier: the formal programming term for a word that can be used to name something in any programming language.</p> <p>\u5728C\u91cc\u9762\uff0cidentifier\u53ef\u4ee5\u5305\u542b\u4efb\u4f55\u5b57\u6bcd\u3001\u6570\u5b57\u548c\u4e0b\u5212\u7ebf_;\u53ea\u80fd\u7528\u5b57\u6bcd\u548c\u4e0b\u5212\u7ebf\u8fdb\u884c\u5f00\u5934\uff0c\u4e0d\u80fd\u4f7f\u7528\u6570\u5b57\u5f00\u5934\uff01</p> <p>\u4e00\u53e5declaration\u662f\u4ee5\u5206\u53f7\uff08semicolon\uff09\u8fdb\u884c\u7ed3\u5c3e\u7684\uff1a</p> <pre><code>int myVariable;\n</code></pre>"},{"location":"Course/dukeC/2/#ii-assigning-a-variable-assignment-statement","title":"II assigning a variable (assignment statement)","text":"<p>\u4e00\u4e2astatement\u7684\u5de6\u8fb9\u662flvalue</p> <p>\u4e2d\u95f4\u662f\u4e00\u4e2aequals sign (\u53ebassignment operator)</p> <p>\u53f3\u8fb9\u662frvalue</p> <p>Declaration \u548c Assignment \u53ef\u4ee5\u5408\u5e76\u6210\u4e00\u4e2astatement</p>"},{"location":"Course/dukeC/2/#iii-expression","title":"III expression","text":"<p>expression\u7684\u5b9a\u4e49\uff1aan expression is a combination of values and operations which evaluates to a value</p> <p>% modular\uff1a\u53d6\u4f59\u6570\uff0cthe modulus operator evaluates to the remainder when dividing the first operand by the second; 19%15 = 4 (\u8bfb\u4f5c19 modulus \u6216\u8005mod 15 = 4)</p> <p>\u6574\u6570\u9664\u6cd5\u5f97\u5230\u7684\u662f\u6574\u6570\uff0c\u800c\u4e14\u662f\u5411\u4e0b\u53d6\u6574\u7684\u6574\u6570\uff0c\u56e0\u4e3aint\u7c7b\u578b\u53ea\u80fd\u5b58\u50a8\u6574\u6570\uff1afloor division\uff0cround down the result\uff0c5 / 2 = 2</p>"},{"location":"Course/dukeC/2/#3-functions","title":"3. functions","text":"<p>\u5982\u679c\u6211\u4eec\u91cd\u590d\u5199\u4e86\u4e24\u6bb5\u7c7b\u4f3c\u7684\u4ee3\u7801\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u9700\u8981\u5c06\u4ee3\u7801\u6982\u62ec\u6210function\u4e86</p> <p>\u4f18\u70b9\uff1a</p> <ol> <li>can re-use</li> <li>abstraction</li> </ol> <p>declaring a function and call a function</p> <p></p>"},{"location":"Course/dukeC/2/#i-frame","title":"I Frame","text":"<p>A frame (\u6216\u8005\u53ebstack frame\uff0c\u56e0\u4e3a\u4ed6\u4eec\u4f4d\u4e8ecall stack):</p> <p></p> <p>the expression involves a function call</p>"},{"location":"Course/dukeC/2/#ii-scope","title":"II Scope","text":"<p>Scope \u662f\u7528\u6765\u89e3\u51b3\u4e00\u4e2a\u5927\u9879\u76ee\u91cc\u6709\u76f8\u540c\u540d\u79f0\u7684\u53d8\u91cf\u95ee\u9898\u7684</p> <p>In C, the scope of a local variable begins with its declaration and ends at the closing curly-brace (})</p> <p>C\u91cc\u9762\u4e00\u4e2a\u5c40\u90e8\u53d8\u91cf\u7684\u4f5c\u7528\u57df\u662f\u4ecedeclartion\u5f00\u59cb\u5230}\u7ed3\u675f</p> <p></p>"},{"location":"Course/dukeC/2/#4-printing","title":"4. printing","text":"<pre><code>int x = 3;\nint y = 4;\nprintf(\"x + y = %d\", x + y);\n</code></pre> <p>escape sequences: \u5373\u8f6c\u4e49\u7b26</p> <p>The most common escape sequence you will encounter is \\n, which means \u201cnewline\u201d.</p> <p>\\ is the escape sequence for a literal backslash</p> <p>\\t\uff1atab</p> <p>Format specifier: \u7c7b\u4f3c%d\u8fd9\u79cd\u7b26\u53f7</p>"},{"location":"Course/dukeC/2/#5-conditional-statements","title":"5. conditional statements","text":"<p>clause\uff1a\u4ece\u53e5</p>"},{"location":"Course/dukeC/2/#i-ifelse","title":"I if/else","text":"<p>\"then\" clause</p> <p>\"if\" clause</p>"},{"location":"Course/dukeC/2/#ii-switchcase","title":"II switch/case","text":"<p>\u6ce8\u610f\u53ea\u6709\u5728case\u91cc\u9762\u9047\u5230<code>break;</code>\u4e4b\u540e\uff0c\u7a0b\u5e8f\u7684\u8fd0\u884c\u624d\u4f1a\u8df3\u5230\u4e0b\u4e00\u4e2a\u82b1\u62ec\u53f7\uff01\u6ca1\u6709break\u7684\u8bdd\uff0c\u4f1a\u7ee7\u7eed\u8fd0\u884c\u4e0b\u4e00\u4e2acase\uff01</p> <p>\u6216\u8005\u78b0\u5230return \u7684\u8bdd\u4e5f\u53ef\u4ee5\u76f4\u63a5\u8df3\u51fa\u5224\u65ad\u8bed\u53e5</p> <p>\u4e3e\u4f8b\uff1a</p> <pre><code># include &lt;iostream&gt;\n\nusing namespace std;\n\nint main () {\n    int x;\n    cin &gt;&gt; x;\n    switch (x) {\n        case 1:\n            printf(\"1\\n\");\n            break;\n        case 2:\n            printf(\"2\\n\");\n        case 3:\n            printf(\"3\\n\");\n            break;\n        case 4:\n            printf(\"4\\n\");\n    }\n    return 0;\n}\n</code></pre> <p>\u8fd0\u884c\u7ed3\u679c\uff1a</p> <pre><code>\u8f93\u51651 \n  1\n\u8f93\u51652\n  2\n  3\n</code></pre> <p></p>"},{"location":"Course/dukeC/2/#iii-shorthand","title":"III shorthand","text":"<p>Shorthand \u53c8\u53ebsyntactic sugar</p> <p>\u6700\u5e38\u89c1\u7684\u7b80\u7565\u8868\u8fbe\u65b9\u5f0f\uff1a</p> <pre><code>x += y;\nx -= y;\nx *= y;\nx /= y;\nx ++;\n++x;\nx--;\n--x;\n</code></pre>"},{"location":"Course/dukeC/2/#6-loops","title":"6. loops","text":"<p>for repitition</p> <p></p>"},{"location":"Course/peking/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E4%B8%8E%E7%AE%97%E6%B3%95/","title":"\u7a0b\u5e8f\u8bbe\u8ba1\u4e0e\u7b97\u6cd5","text":""},{"location":"Course/peking/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E4%B8%8E%E7%AE%97%E6%B3%95/#fundamentals-of-programming-and-algorithms","title":"Fundamentals of Programming and Algorithms","text":"<p>\u7b97\u6cd5+\u6570\u636e\u7ed3\u6784=\u7a0b\u5e8f</p> <p>\u8fd9\u95e8\u8bfe\u7684\u5f88\u591a\u8bfe\u4ef6\u5f55\u5236\u4e0e2009\u5e74\u9644\u8fd1\uff0c\u5df2\u7ecf\u5341\u591a\u5e74\u8fc7\u53bb\uff0c\u4f7f\u7528\u7684C\u7684\u7248\u672c\u4e5f\u662f\u7565\u5fae\u843d\u4f0d\u7684</p> <p>\u4f46\u662f\u4e0d\u5931\u4e3a\u4e00\u95e8\u4e2d\u6587\u7684\u5b9e\u7528\u7684\u8ba1\u7b97\u673a\u5165\u95e8\u8bfe\u7a0b\uff0c\u80fd\u591f\u4e00\u6b21\u6027\u6253\u901aC\u3001C++\u3001\u7b97\u6cd5\u4e0e\u6570\u636e\u7ed3\u6784\u4ee5\u53ca\u8f6f\u4ef6\u5de5\u7a0b</p>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/","title":"\u8ba1\u7b97\u5bfc\u8bba\u4e0eC\u8bed\u8a00\u57fa\u7840","text":""},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#information","title":"information","text":"<p>\u8ba1\u7b97\u5bfc\u8bba\uff1a\u8ba1\u7b97\u673a\u7684\u57fa\u672c\u539f\u7406\u3001\u8ba1\u7b97\u673a\u7684\u53d1\u5c55\u8d8b\u52bf\u3001\u7a0b\u5e8f\u8fd0\u884c\u7684\u57fa\u672c\u539f\u7406</p> <p>C\u7a0b\u5e8f\u8bbe\u8ba1\uff1a\u611f\u6027\u8ba4\u8bc6C\u7a0b\u5e8f\u3001\u7406\u6027\u8ba4\u8bc6C\u7a0b\u5e8f</p>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#module-1","title":"Module 1 \u8ba1\u7b97\u673a\u7684\u57fa\u672c\u539f\u7406","text":""},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#_1","title":"\u8ba1\u7b97\u673a\u7684\u57fa\u672c\u539f\u7406\uff08\u4ece\u6570\u5b66\u5371\u673a\u5230\u56fe\u7075\u673a\uff09","text":"<p>\u56fe\u7075\u5956 turing award</p>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#_2","title":"\u4e09\u6b21\u6570\u5b66\u5371\u673a","text":"<p>\u7b2c\u4e00\u6b21\u6570\u5b66\u5371\u673a</p> <p>\u6bd5\u8fbe\u54e5\u62c9\u65af\u5b66\u6d3e\u2014\u2014\u6570\u662f\u4e07\u7269\u7684\u672c\u6e90</p> <p>\u6df1\u4fe1\u4e00\u5207\u6570\u5747\u53ef\u8868\u793a\u79f0\u6574\u6570\u6216\u8005\u6574\u6570\u53ea\u6bd4</p> <p>\u5728\u8bc1\u660e\u52fe\u80a1\u5b9a\u7406\u65f6\u53d1\u73b0\u5462\u67d0\u4e9b\u76f4\u89d2\u4e09\u89d2\u5f62\u7684\u4e09\u8fb9\u4e4b\u6bd4\u4e0d\u80fd\u7528\u6574\u6570\u6765\u8868\u8fbe\uff08\u5e0c\u5e15\u7d22\u65af\u6096\u8bba\uff09</p> <p>\u7b2c\u4e8c\u6b21\u6570\u5b66\u5371\u673a</p> <p>\u5fae\u79ef\u5206\u5efa\u7acb\u5728\u65e0\u7a77\u5c0f\u7684\u5206\u6790\u4e4b\u4e0a\uff08\u725b\u987f\u548c\u83b1\u5e03\u5c3c\u8328\u5206\u522b\u72ec\u7acb\u53d1\u660e\u4e86\u5fae\u79ef\u5206\uff09</p> <p>\u8d1d\u514b\u83b1\u6096\u8bba\uff08\u6c42x^2\u7684\u5bfc\u6570\u7684\u65f6\u5019\u65e0\u7a77\u5c0f\u4e00\u4f1a\u662f0\uff0c\u4e00\u4f1a\u4f5c\u4e3a\u5206\u6bcd\u53c8\u4e0d\u80fd\u4e3a0\uff09</p> <p>\u5b9e\u6570\u7406\u8bba\u5efa\u7acb\u8d77\u4e86\u6781\u9650\u8bba\u7684\u57fa\u672c\u5b9a\u7406</p> <p>\u5bfc\u81f4\u4e86\u96c6\u5408\u8bba\u7684\u8bde\u751f</p> <p>\u7b2c\u4e09\u6b21\u6570\u5b66\u5371\u673a</p> <p>\u5341\u4e5d\u4e16\u7eaa\u4e0b\u534a\u53f6\uff0c\u5eb7\u6258\u5c14\u521b\u7acb\u4e86\u96c6\u5408\u8bba</p> <p>\u201c\u4ece\u81ea\u7136\u6570\u4e0e\u5eb7\u6258\u5c14\u96c6\u5408\u8bba\u51fa\u53d1\u53ef\u4ee5\u5efa\u7acb\u8d77\u6574\u4e2a\u6570\u5b66\u5927\u53a6\u201d</p> <p>\u201c\u4e00\u5207\u6570\u5b66\u6210\u679c\u53ef\u4ee5\u5efa\u7acb\u5728\u96c6\u5408\u8bba\u4e0a\u201d</p> <p>\u7f57\u7d20\u6096\u8bba\uff1aS\u7531\u4e00\u5207\u4e0d\u662f\u81ea\u8eab\u5143\u7d20\u7684\u96c6\u5408\u6240\u7ec4\u6210\uff0cS\u662f\u5426\u5c5e\u4e8eS\u5417</p> <p>\u54e5\u5fb7\u5c14\uff08Kurt Godel\uff09\u4e0d\u5b8c\u5907\u6027\u5b9a\u7406\uff1a\u4efb\u4f55\u4e00\u4e2a\u6570\u5b66\u7cfb\u7edf\uff0c\u53ea\u8981\u5b83\u662f\u4ece\u6709\u9650\u7684\u516c\u7406\u548c\u57fa\u672c\u6982\u5ff5\u4e2d\u63a8\u5230\u51fa\u6765\u7684\uff0c\u5e76\u4e14\u53ef\u4ee5\u4ece\u4e2d\u63a8\u8bc1\u51fa\u81ea\u7136\u6570\u7cfb\u7edf\uff0c\u5c31\u53ef\u4ee5\u5728\u5176\u4e2d\u627e\u5230\u4e00\u4e2a\u547d\u9898\uff0c\u5bf9\u4e8e\u6211\u4eec\u65e2\u6ca1\u6709\u529e\u6cd5\u8bc1\u660e\uff0c\u4e5f\u6ca1\u6709\u529e\u6cd5\u8bc1\u4f2a</p> <p>\u628a\u6570\u5b66\u5f7b\u5e95\u5f62\u5f0f\u5316\u7684\u613f\u671b\u672c\u8eab\u5c31\u662f\u4e0d\u53ef\u5b9e\u73b0\u7684</p> <p>\u5224\u5b9a\u4e00\u4e2a\u672a\u89e3\u7684\u95ee\u9898\u662f\u5426\u771f\u7684\u6709\u89e3</p> <p>\u5728\u8ba1\u7b97\u673a\u4e2d\uff0c\u53eb\u505a\u53ef\u8ba1\u7b97\u95ee\u9898</p> <p>\u89e3\u51b3\u95ee\u9898\u7684\u8fb9\u754c</p> <p>\u4e3a\u8ba1\u7b97\u5efa\u7acb\u4e00\u4e2a\u6570\u5b66\u6a21\u578b\uff0c\u51e1\u662f\u8ba1\u7b97\u6a21\u578b\u80fd\u591f\u5b8c\u6210\u7684\u4efb\u52a1\u5c31\u662f\u53ef\u8ba1\u7b97\u7684\u4efb\u52a1</p>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#_3","title":"\u56fe\u7075\u7684\u8d21\u732e","text":"<p>Alan Turing</p> <p>1936\uff0c24\u5c81\u300a\u8bba\u53ef\u8ba1\u7b97\u6570\u8f7d\u5224\u5b9a\u95ee\u9898\u4e2d\u7684\u5e94\u7528\u300b\u2014\u2014\u7406\u60f3\u7684\u8ba1\u7b97\u5c31\u8d77\u7684\u6570\u5b66\u6a21\u578b\uff0c\u56fe\u7075\u673a </p> <p>1950 \u56fe\u7075\u6d4b\u8bd5</p>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#_4","title":"\u56fe\u7075\u673a\u7684\u6784\u6210","text":"<p>\u4e00\u6761\u5b58\u50a8\u5e26\u3001\u4e00\u4e2a\u63a7\u5236\u5668</p>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#_5","title":"\u8fd0\u4f5c\u673a\u7406","text":"<p>\u5b58\u50a8\u5e26\u7b26\u53f7\u521d\u59cb\u5316\u3001\u8bbe\u7f6e\u597d\u81ea\u8eab\u7684\u5f53\u524d\u72b6\u6001\u3001\u63a7\u5236\u5668\u7f6e\u4e8e\u8d77\u59cb\u4f4d\u7f6e\u3001\u51c6\u5907\u597d\u5de5\u4f5c\u7a0b\u5e8f</p> <p>\u6761\u4ef6\u3001\u52a8\u4f5c</p>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#_6","title":"\u793a\u4f8b","text":""},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#_7","title":"\u56fe\u7075\u673a\u7684\u610f\u4e49","text":"<p>\u7b80\u5355\u3001\u5f3a\u5927\u3001\u53ef\u5b9e\u73b0</p> <p>\u53ef\u8ba1\u7b97\u6027\u7684\u5224\u5b9a</p> <p>\u7ed9\u51fa\u4e86\u4e00\u4e2a\u53ef\u5b9e\u73b0\u7684\u901a\u7528\u8ba1\u7b97\u7684\u6a21\u578b</p>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#_8","title":"\u6570\u7684\u4e8c\u8fdb\u5236\u8868\u793a","text":"<p>\u8ba1\u7b97\u673a\u4e3a\u4ec0\u4e48\u80fd\u8ba1\u7b97\uff1f</p>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#_9","title":"\u201c\u6570\u201d\u5728\u8ba1\u7b97\u673a\u4e2d\u662f\u5982\u4f55\u8868\u793a\u7684","text":"<p>\u5b57\u6bcd\u8868\u4e2d\u7684\u7b26\u53f7\u8d8a\u591a\uff0c\u8bfb\u5165\u7684\u79fb\u52a8\u6b21\u6570\u51cf\u5c11\uff0c\u7a0b\u5e8f\u7684\u6570\u91cf\u5c31\u4f1a\u589e\u52a0</p> <p>\u5b57\u6bcd\u8868\u4e2d\u7684\u7b26\u53f7\u8d8a\u5c11\uff0c\u7a0b\u5e8f\u91cf\u4f1a\u51cf\u5c11\uff0c\u4f46\u8bfb\u5165\u79fb\u52a8\u6b21\u6570\u5c31\u8d8a\u591a</p> <p>\u5b57\u6bcd\u8868\u4e2d\u7684\u6700\u4f18\u6570\u91cf\uff0c\u53ef\u80fd\u662f\u6b27\u62c9\u5e38\u6570e\uff082.7182818284590\uff09\u53d6\u6574\u4e4b\u540e\u4e3a3</p> <p>\u4e0e\u4e24\u4e2a\u72b6\u6001\u7684\u7535\u5b50\u5143\u4ef6\u76f8\u6bd4\uff0c\u5177\u6709\u4e09\u4e2a\u72b6\u6001\u7684\u7535\u5b50\u5143\u4ef6\u5728\u5236\u9020\u4e0a\u66f4\u56f0\u96be\uff0c\u53ef\u9760\u6027\u66f4\u4f4e</p> <p>\u4ece\u4e8c\u8fdb\u5236\u5230\u516b\u8fdb\u5236\uff0c\u53ea\u8981\u6bcf\u4e09\u4f4d\u8fdb\u884c\u4e00\u6b21\u8f6c\u6362\u5c31\u884c</p> <p>\u5341\u516d\u8fdb\u5236\uff0c\u5c31\u662f\u6bcf\u56db\u4f4d\u8fdb\u884c\u4e00\u6b21\u8f6c\u6362</p>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#_10","title":"\u903b\u8f91\u4e0a\u201c\u6570\u201d\u662f\u5982\u4f55\u8ba1\u7b97\u7684","text":"<p>\u6570\u7684\u8868\u793a\uff1a\u4e8c\u8fdb\u5236</p> <p>\u82f1\u56fd\u6570\u5b66\u5bb6Boole \u5e03\u5c14\u4ee3\u6570\uff0c\u4e3a\u8ba1\u7b97\u673a\u7684\u7535\u8def\u8bbe\u8ba1\u5960\u5b9a\u4e86\u7406\u8bba\u57fa\u7840</p>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#_11","title":"\u4e8c\u8fdb\u5236\u7684\u5e03\u5c14\u8fd0\u7b97","text":"<p>\u57fa\u672c\u7684\u903b\u8f91\u8fd0\u7b97\uff1a\u4e0e\u3001\u6216\u3001\u975e</p> <p>\u590d\u5408\u903b\u8f91\u8fd0\u7b97\uff1a\u540c\u6216/\u5f02\u6216\u3001\u4e0e\u975e\u3001\u6216\u975e\u3001\u4e0e\u6216\u975e</p> <p>\u4e0e\u8fd0\u7b97\uff1a\u4e32\u8054</p> <p>\u6216\u8fd0\u7b97\uff1a\u5e76\u8054</p> <p>\u975e\u8fd0\u7b97\uff1a\u77ed\u8def\u4ed6</p> <p>\u5f02\u6216\uff1a\u4e24\u4e2a\u53d8\u91cf\u76f8\u540c\u7ed3\u679c\u4e3a0\uff0c\u76f8\u5f02\u7ed3\u679c\u4e3a1</p> <p>\u540c\u6216\uff1a\u4e0e\u5f02\u6216\u76f8\u53cd</p> <p>\u4e8c\u8fdb\u5236\u4e0b\uff1a</p> <p>1 + 1 = 10</p> <p>1 + 0 = 01</p> <p>0 + 1 = 01</p> <p>0 + 0 = 00</p> <p>\u53d1\u73b0\u672b\u5c3e\u7684\u6570\u76f8\u5f02\u7684\u65f6\u5019\u7ed3\u679c\u4e3a1\uff0c\u76f8\u540c\u7684\u65f6\u5019\u7ed3\u679c\u4e3a0\uff0c\u8bf4\u660e\u4e8c\u8fdb\u5236\u7684\u52a0\u6cd5\u8fd0\u7b97\u662f\u5f02\u6216\u8fd0\u7b97</p> <p>\u800c\u89c2\u5bdf\u8fdb\u4f4d\uff0c\u53ef\u4ee5\u53d1\u73b0\u53ea\u6709\u672b\u5c3e\u4e24\u4e2a\u6570\u5b57\u90fd\u662f1\u7684\u60c5\u51b5\u4e0b\u624d\u4f1a\u6709\u8fdb\u4f4d\uff0c\u6240\u4ee5\u8fd9\u662f\u4e00\u4e2a\u4e0e\u8fd0\u7b97</p> <p>\u7b80\u800c\u8a00\u4e4b\uff0c\u4e8c\u8fdb\u5236\u7684\u52a0\u6cd5\uff0c\u672c\u4f4d\u662f\u5f02\u6216\u8fd0\u7b97\u7684\u7ed3\u679c\uff0c\u8fdb\u4f4d\u662f\u4e0e\u8fd0\u7b97\u7684\u7ed3\u679c</p> <p>\u4ee5\u4e0a\u7684\u673a\u5668\u5c31\u662f\u534a\u52a0\u5668</p> <p>\u591a\u4e2a\u534a\u52a0\u5668\u4e32\u8054\uff0c\u5f97\u5230\u5168\u52a0\u5668\u5c31\u80fd\u7528\u6765\u8ba1\u7b97\u5e26\u8fdb\u4f4d\u7684\u60c5\u51b5</p>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#_12","title":"\u7269\u7406\u4e0a\u5982\u4f55\u5b9e\u73b0\u6570\u7684\u8ba1\u7b97","text":"<p>\u5f02\u6216\u95e8\u3001\u4e0e\u95e8\u3001\u6216\u95e8</p> <p>\u57fa\u672c\u7684\u5e03\u5c14\u8fd0\u7b97\u90fd\u53ef\u4ee5\u7531\u7535\u8def\u5b9e\u73b0</p>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#module-2","title":"Module 2 \u8ba1\u7b97\u673a\u7684\u5386\u53f2\u4e0e\u672a\u6765","text":""},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#_13","title":"\u8ba1\u7b97\u673a\u7684\u53d1\u5c55\u5386\u7a0b","text":"<p>\u73b0\u4ee3\u8ba1\u7b97\u673a</p> <p>\u7535\u5b50\u7ba1\u8ba1\u7b97\u673a\u3001\u6676\u4f53\u7ba1\u8ba1\u7b97\u3001\u96c6\u6210\u7535\u8def\u8ba1\u7b97\u673a\u3001\u8d85\u5927\u89c4\u6a21\u7ee7\u627f\u7535\u8def</p> <p>\u5e15\u65af\u536112\u5c81\u72ec\u7acb\u53d1\u73b0\u4e09\u89d2\u5f62\u5185\u89d2\u548c\u7b49\u4e8e180\u5ea6</p> <p>\u5e15\u65af\u5361\u4e0e\u8d39\u9a6c\u7684\u901a\u4fe1\u5f62\u6210\u4e86\u6982\u7387\u8bba\u7684\u57fa\u7840</p> <p>\u5e15\u65af\u5361\u52a0\u6cd5\u56681642\u5e74</p> <p>\u9f7f\u8f6e\u88c5\u7f6e\uff0c\u80fd\u591f\u5b8c\u62106\u4f4d\u7684\u52a0\u6cd5\u548c\u51cf\u6cd5\uff0c\u662f\u4e00\u79cd\u7cfb\u5217\u9f7f\u8f6e\u7ec4\u6210\u7684\u88c5\u7f6e\uff0c\u4f9d\u9760\u53d1\u6761\u8f6c\u52a8</p> <p>1673\u5e74\uff0c\u83b1\u5e03\u5c3c\u8328\u5728\u5e15\u65af\u5361\u52a0\u6cd5\u5668\u7684\u57fa\u7840\u4e0a\uff0c\u5efa\u9020\u4e86\u4e00\u53f0\u80fd\u591f\u8fdb\u884c\u56db\u5219\u8fd0\u7b97\u7684\u673a\u68b0\u8ba1\u7b97\u673a\u5668\uff0c\u4ecd\u7136\u7528\u9f7f\u8f6e\u53ca\u523b\u5ea6\u76d8\u64cd\u4f5c\uff0c\u80fd\u591f\u8fbe\u523016\u4f4d\u91cc</p> <p>1822\u5e74\uff0c\u5df4\u8d1d\u5947\uff0c\u5236\u9020\u51fa\u7b2c\u4e00\u53f0\u5dee\u5206\u673a\uff0c\u53ef\u4ee5\u5904\u74063\u4e2a\u4e0d\u540c\u76845\u4f4d\u6570\u3001\u8ba1\u7b97\u7cbe\u5ea6\u53ef\u4ee5\u8fbe\u52306\u4f4d\u5c0f\u6570</p> <p>1834\u5e74\uff0c\u5df4\u8d1d\u5947\u63d0\u51fa\u4e86\u5206\u6790\u673a\u7684\u6982\u5ff5</p> <p>\u5206\u6790\u673a\u4e00\u5171\u5206\u4e3a\u4e09\u4e2a\u90e8\u5206\uff1a\u5806\u6808\u3001\u8fd0\u7b97\u5668\u3001\u63a7\u5236\u5668</p> <p>\u5c1d\u8bd5\u4f7f\u7528\u673a\u68b0\u65b9\u5f0f\uff08\u84b8\u6c7d\u52a8\u529b\uff09\u5b9e\u73b0\u8ba1\u7b97\u8fc7\u7a0b</p> <p>\u8ba1\u7b97\u7528\u7684\u7a0b\u5e8f\u548c\u6570\u636e\u5b58\u50a8\u5728\u7a7f\u5b54\u5361\u7247\u4e0a </p> <p>\u963f\u8fbe\u5965\u53e4\u65af\u5854\uff08augusta\uff09\u4e3a\u5206\u6790\u673a\u7f16\u5236\u4e86\u4eba\u7c7b\u5386\u53f2\u4e0a\u7b2c\u4e00\u6279\u8ba1\u7b97\u673a\u7a0b\u5e8f</p> <p>\u624b\u5de5\u7684\u65b9\u5f0f\u5de5\u827a\u662f\u6709\u6781\u9650\u7684</p> <p>\u970d\u5217\u745e\u65af\uff08Hollerith\uff09\uff0cIBM\u521b\u59cb\u4eba</p> <p>\u53d1\u660e\u4e86\u5236\u8868\u673a\uff0c\u7535\u5b50\u7a7f\u5b54\u5361\u7247\u6c47\u603b</p> <p>1935\u5e74\uff0cIBM\u5236\u9020\u4e86IBM601\uff0c\u80fd\u591f\u5728\u4e00\u79d2\u949f\u4e4b\u5185\u8ba1\u7b97\u51fa\u4e58\u6cd5\u8fd0\u7b97</p> <p>1941\u5e74\uff0c\u5fb7\u56fdZuse\u5b8c\u6210\u4e86Z3\u7684\u7814\u5236\u5de5\u4f5c</p> <p>\u7b2c\u4e00\u53f0\u53ef\u7f16\u7a0b\u7684\u7535\u5b50\u8ba1\u7b97\u673a</p> <p>\u53ef\u5904\u74067\u4f4d\u6307\u6570\u300114\u4f4d\u5c0f\u6570</p> <p>\u5927\u91cf\u771f\u7a7a\u7ba1\u7684\u5e94\u7528</p> <p>\u6bcf\u79d2\u949f\u80fd\u505a3\u52304\u6b21\u52a0\u6cd5\uff0c\u4e00\u6b21\u4e58\u6cd5\u57283\u52305\u79d2</p>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#eniac","title":"\u666e\u904d\u8ba4\u4e3a\u7684\u7b2c\u4e00\u53f0\u8ba1\u7b97\u673aENIAC","text":"<p>\u5bbe\u5915\u6cd5\u5c3c\u4e9a\u5927\u5b66\u83ab\u5c14\u5b66\u96621945\u5e74\u5b8c\u6210\uff0c1946\u5e742\u670814\u65e5\u6b63\u5f0f\u542f\u52a8</p> <p>ENIAC\u4e0d\u662f\u5b58\u50a8\u7a0b\u5e8f\u5f0f\u7684\u8ba1\u7b97\u673a</p> <p>\u7f16\u7a0b\u662f\u901a\u8fc7\u624b\u5de5\u63d2\u63a5\u7ebf\u7684\u65b9\u5f0f\u8fdb\u884c\u7684</p>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#eniacedvac","title":"ENIAC\u5230EDVAC","text":"<p>\u51af\u8bfa\u4f9d\u66fc 1952\u5e74EDVAC\u5236\u9020\u5b8c\u6210\uff0c\u4e16\u754c\u4e0a\u7b2c\u4e00\u53f0\u5b58\u50a8\u7a0b\u5e8f\u8ba1\u7b97\u673a</p>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#_14","title":"\u7b2c\u4e8c\u4ee3\u8ba1\u7b97\u673a","text":"<p>1947\u5e74\uff0c\u8d1d\u5c14\u5b9e\u9a8c\u5ba4\u53d1\u660e\u4e86\u6676\u4f53\u7ba1\uff0c\u66f4\u5c0f\u3001\u66f4\u4fbf\u5b9c\u3001\u529f\u8017\u66f4\u5c11\u3001\u66f4\u53ef\u9760</p> <p>\u4ea7\u751f\u4e86\u64cd\u4f5c\u7cfb\u7edf</p> <p>\u4ea7\u751f\u4e86\u9ad8\u7ea7\u7f16\u7a0b\u8bed\u8a00Fotran, Cobol</p>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#_15","title":"\u7b2c\u4e09\u4ee3\u8ba1\u7b97\u673a","text":"<p>1958\u5e74\uff0c\u5fb7\u5dde\u4eea\u5668 \u57fa\u5c14\u6bd4\u53d1\u660e\u4e86\u96c6\u6210\u7535\u8def\uff0c\u76f4\u63a5\u7528\u7845\u7247\u5236\u9020\u82af\u7247</p> <p>\u64cd\u4f5c\u7cfb\u7edf\u53ef\u79fb\u690d</p> <p>C\u8bed\u8a00\u5f00\u59cb\u4ea7\u751f</p>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#_16","title":"\u7b2c\u56db\u4ee3\u8ba1\u7b97\u673a","text":"<p>\u59cb\u4e8e20\u4e16\u7eaa70\u5e74\u4ee3</p> <p>\u4f7f\u7528\u8d85\u5927\u89c4\u6a21\u7684\u96c6\u6210\u7535\u8def</p> <p>\u7b2c\u4e00\u5757\u5fae\u5904\u7406\u5668\u662f1971\u5e74\u5236\u9020\u7684intel4004</p> <p>2400\u4e2a\u6676\u4f53\u7ba1\uff0c\u8ba1\u7b97\u80fd\u529b\u4e0eENIAC\u76f8\u5f53</p> <p>\u5c3a\u5bf8\u53ea\u67093mm * 2mm</p> <p>\u8ba1\u7b97\u673a\u7684\u53d1\u5c55\u5728\u786c\u4ef6\u3001\u8f6f\u4ef6\u5168\u65b9\u4f4d\u51fa\u73b0\u74f6\u9888</p> <p>\u6469\u5c14\u5b9a\u5f8b\uff1aCPU\u7684\u6027\u80fd\u4ef7\u683c\u6bd4\u6bcf18\u4e2a\u6708\u7ffb\u4e00\u756a</p> <p>Moore\u2018s LAW</p>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#_17","title":"\u7b2c\u4e94\u4ee3\u8ba1\u7b97\u673a","text":"<p>\u8d85\u7b97</p> <p>\u201c\u7eff\u8272\u8ba1\u7b97\u201d\uff1a2009\u5e74\u65f6\uff0c\u6bcf\u6b21google\u6240\u6d88\u8017\u7684\u80fd\u6e90\u80fd\u591f\u716e\u719f\u4e00\u676f\u5496\u5561</p> <p>\u65b0\u578b\u7684\u8ba1\u7b97\u6a21\u5f0f\u2014\u2014\u4e91\u8ba1\u7b97</p>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#_18","title":"\u6469\u5c14\u5b9a\u5f8b\u4e0b\u7684\u8ba1\u7b97\u5371\u673a","text":"<p>\u5355\u4f4d\u9762\u79ef\u4e2d\u80fd\u591f\u5236\u9020\u7684\u6676\u4f53\u7ba1\u7684\u6570\u76ee\u6bcf18\u4e2a\u6708\u7ffb\u4e00\u756a</p> <p>1970\u5e74intel 4004</p> <p>1990\u5e74intel 80486</p> <p>\u6469\u5c14\u5b9a\u5f8b\u8fd8\u80fd\u575a\u6301\u591a\u4e45\uff1f</p> <p>\u7b2c\u4e00\u70b9\uff1a\u6563\u70ed\uff0c\u6676\u4f53\u7ba1\u5bc6\u5ea6\u548c\u901f\u5ea6\u7684\u589e\u52a0\uff0c\u4f1a\u6d88\u8017\u66f4\u591a\u7684\u7535\u529b\uff0c\u4ea7\u751f\u66f4\u591a\u7684\u70ed\u80fd</p> <p>\u6269\u5927\u4f53\u79ef\uff0c\u867d\u7136\u80fd\u6269\u5927\u8868\u9762\u79ef\uff0c\u4f46\u662f\u610f\u5473\u7740\u9700\u8981\u66f4\u9ad8\u7684\u7535\u538b\uff0c\u4f1a\u4f7f\u70ed\u91cf\u4ea7\u751f\u7684\u66f4\u591a</p> <p>\u7b2c\u4e8c\u70b9\uff1a\u6676\u4f53\u7ba1\u5927\u5c0f\u7684\u9650\u5236\uff0c\u6676\u4f53\u7ba1\u5f88\u5feb\u5c31\u4f1a\u53d8\u6210\u4e00\u4e2a\u539f\u5b50\u5927\u5c0f\uff0c\u4efb\u4f55\u7eb3\u7c73\u548c\u4f20\u7edf\u5de5\u827a\u5bf9\u8fd9\u79cd\u60c5\u51b5\u90fd\u6ca1\u6709\u529e\u6cd5</p> <p>\u7b2c\u4e09\u70b9\uff1a\u7535\u6cc4\u6f0f\uff0c\u968f\u7740\u6676\u4f53\u7ba1\u63d0\u53ca\u7684\u7f29\u5c0f\uff0c\u7535\u6cc4\u6f0f\u7684\u6e05\u9192\u4e5f\u4e0d\u65ad\u589e\u52a0\uff0c\u8d8a\u6765\u8d8a\u5f71\u54cd\u82af\u7247\u7684\u8ba1\u7b97\u80fd\u529b</p> <p>\u91cf\u5b50\u8ba1\u7b97\u673a\u3001\u751f\u7269\u8ba1\u7b97\u673a\u3001DNA\u8ba1\u7b97\u673a\u3001\u5149\u5b50\u8ba1\u7b97\u673a\u3001\u5206\u5b50\u8ba1\u7b97\u673a</p>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#_19","title":"\u91cf\u5b50\u8ba1\u7b97\u673a\u7684\u57fa\u672c\u539f\u7406","text":"<p>\u7406\u67e5\u5fb7\u8d39\u66fc\uff0c1982\u5e74\u63d0\u51fa\u5229\u7528\u91cf\u5b50\u4f53\u7cfb\u5b9e\u73b0\u901a\u7528\u8ba1\u7b97</p> <p>\u5206\u6790\u6a21\u62df\u91cf\u5b50\u7269\u7406\u4e16\u754c\u6240\u9700\u8981\u7684\u8ba1\u7b97\u80fd\u529b\u8fdc\u8fdc\u8d85\u8fc7\u4e86\u7ecf\u5178\u8ba1\u7b97\u673a\u6240\u80fd\u8fbe\u5230\u7684\u80fd\u529b</p> <p>\u7528\u5b9e\u9a8c\u5ba4\u4e2d\u4e00\u4e2a\u53ef\u63a7\u7684\u91cf\u5b50\u7cfb\u7edf</p> <p>\u4e00\u4e2a\u91cf\u5b50\u6bd4\u7279\u80fd\u591f\u540c\u65f6\u4fdd\u6301\u591a\u79cd\u72b6\u6001</p> <p>\u4e3e\u4f8b\uff1a\u7ecf\u5178\u8ba1\u7b97\u673a2\u4e2a\u6bd4\u7279\u67d0\u4e00\u7279\u5b9a\u65f6\u523b\u53ea\u80fd\u5b58\u50a8\u4e00\u5bf90\u6216\u80051\uff0c\u4f46\u662f\u91cf\u5b50\u8ba1\u7b97\u673a\u53ef\u4ee5\u540c\u65f6\u5b58\u50a84\u5bf90\u6216\u80051</p> <p>\u7406\u8bba\u4e0a300\u4e2a\u91cf\u5b50\u6bd4\u7279\u80fd\u627f\u8f7d\u7684\u6570\u636e\u65f62\u7684300\u6b21\u65b9\uff0c\u8fd9\u5c06\u8d85\u8fc7\u6574\u4e2a\u5b87\u5b99\u7684\u539f\u5b50\u6570\u91cf\u603b\u548c</p> <p>\u9700\u8981\u5bf9\u8ba1\u7b97\u8fc7\u7a0b\u8fdb\u884c\u7ea0\u9519\uff0c\u5373\u7528\u5927\u91cf\u7684\u8ba1\u7b97\u6765\u5197\u4f59\u8ba1\u7b97\uff0c\u786e\u5b9a\u51fa\u6b63\u786e\u7684\u7b54\u6848</p> <p>\u96be\u70b9\uff1a\u4e0e\u5916\u754c\u73af\u5883\u9694\u79bb\u624d\u80fd\u4fdd\u6301\u826f\u597d\u7684\u76f8\u5e72\u6027\uff0c\u4e0e\u5916\u754c\u73af\u5883\u826f\u597d\u8026\u5408\u624d\u80fd\u63a7\u5236\u6f14\u5316\u5e76\u8bfb\u51fa\u7ed3\u679c</p>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#module-3","title":"Module 3 \u7a0b\u5e8f\u8fd0\u884c\u7684\u57fa\u672c\u539f\u7406","text":"<p>\u51af\u8bfa\u4f9d\u66fc\uff1a</p> <p>\u7535\u8def\u80fd\u591f\u5b8c\u6210\u8ba1\u7b97</p> <p>\u4f46\u662f\u4e0d\u80fd\u901a\u8fc7\u91cd\u65b0\u201c\u7ec4\u5408\u4e0d\u540c\u7535\u8def\u201d\u7684\u65b9\u5f0f\uff0c\u53bb\u5b8c\u6210\u65b0\u7684\u8ba1\u7b97\u4efb\u52a1</p> <p>\u901a\u8fc7\u67d0\u79cd\u547d\u4ee4\u6765\u63a7\u5236\u8ba1\u7b97\u673a\uff0c\u8ba9\u8ba1\u7b97\u673a\u6309\u7167\u8fd9\u79cd\u547d\u4ee4\u6765\u8fd0\u884c\uff0c\u8fd9\u79cd\u547d\u4ee4\u53ef\u4ee5\u7528\u7535\u4fe1\u53f7\u8868\u793a</p> <p>\u8fd9\u79cd\u547d\u4ee4\u4e0d\u662f\u201c\u4e34\u65f6\u8f93\u5165\u201d\u8ba1\u7b97\u673a\uff0c\u800c\u662f\u5b58\u653e\u5728\u67d0\u4e2a\u5730\u65b9\uff0c\u968f\u65f6\u53ef\u4ee5\u66f4\u6539</p> <p>\u5b58\u50a8\u7a0b\u5e8f\u5f0f\u8ba1\u7b97\u673a\uff1aEDVAC</p> <p>\u51af\u8bfa\u4f9d\u66fc\u7ed3\u6784\uff1a\u63a7\u5236\u5668\u3001\u8fd0\u7b97\u5668\u3001\u5b58\u50a8\u5668\u3001\u8f93\u5165\u8bbe\u5907\u3001\u8f93\u51fa\u8bbe\u5907</p> <p>\u63a7\u5236\u5668\uff1a\u7edf\u4e00\u6307\u6325\u5e76\u63a7\u5236\u8ba1\u7b97\u673a\u4e2a\u90e8\u4ef6\u534f\u8c03\u5de5\u4f5c (\u547d\u4ee4\u8bb0\u5f55\u5458\u3001\u63a7\u5236\u4fe1\u53f7\u4ea7\u751f\u5668\u3001\u547d\u4ee4\u89e3\u91ca\u5668)</p> <p>\u8fd0\u7b97\u5668\uff1a\u5bf9\u6570\u636e\u8fdb\u884c\u7b97\u6570\u8fd0\u7b97\u548c\u903b\u8f91\u8fd0\u7b97\uff08\u8ba1\u7b97\u7ed3\u679c\u3001\u8ba1\u7b97\u7535\u8def\u3001\u6570\u636e\u6682\u5b58\uff09</p> <p>\u5b58\u50a8\u5668\uff1a\u5b58\u50a8\u5f85\u64cd\u4f5c\u7684\u4fe1\u606f\u4e0e\u4e2d\u95f4\u7ed3\u679c\uff0c\u5305\u62ec\u673a\u5668\u6307\u4ee4\u548c\u6570\u636e\uff08\u9ad8\u901f\u7f13\u5b58\u3001\u5185\u5b58\u3001\u5916\u5b58\uff09</p> <p>\u8fd0\u7b97\u5668\u3001\u5b58\u50a8\u5668\u7684\u4e00\u90e8\u5206\u548c\u63a7\u5236\u5668\u96c6\u5408\u5728CPU\u91cc</p>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#_20","title":"\u5b58\u50a8\u5668","text":"<p>\u4e00\u4e2a\u5b580\u62161\u7684\u5355\u4f4d\u53ebbit \uff0c\u4f4d</p> <p>8\u4e2abit\u53ebbyte\uff0c\u5b57\u8282\uff0c\u662f\u7a0b\u5e8f\u91cc\u80fd\u63a7\u5236\u7684\u6700\u5c0f\u5355\u4f4d</p> <p>1kb 1024\u5b57\u8282</p> <p>1MB</p> <p>1GB</p> <p>1TB</p> <p>1PB</p> <p>\u8ba1\u7b97\u673a\u4e2d\u5b58\u50a8\u5668\u7684\u5206\u7c7b\uff1a\u5bc4\u5b58\u5668\u3001\u9ad8\u901f\u7f13\u5b58\u3001\u5185\u5b58\u3001\u5916\u5b58</p> <p>\u5bc4\u5b58\u5668\uff1aCPU\u5185\u90e8\uff0c\u7528\u4e8e\u5b58\u653e\u5f85\u64cd\u4f5c\u6570\u548c\u7ed3\u679c</p> <p>\u9ad8\u901f\u7f13\u5b58\uff08cache\uff09\uff1a\u901a\u5e38\u5728CPU\u5185\u90e8\uff0c\u7528\u505a\u6570\u636e\u7f13\u5b58\u533a</p> <p>\u5185\u5b58\uff1a\u5b58\u653eCPU\u4e2d\u7684\u8fd0\u7b97\u6570\u636e</p>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#_21","title":"\u5b58\u50a8\u5668\u7684\u539f\u7406","text":"<p>\u9759\u6001RAM\u7684\u516d\u7ba1\u57fa\u672c\u5b58\u50a8\u5355\u5143</p> <p>\u9ad8\u7535\u4f4d\u548c\u4f4e\u7535\u4f4d\u4e92\u76f8\u4fdd\u6301\u4fc3\u8fdb\uff0c\u5c31\u80fd\u66f4\u597d\u5730\u5b58\u50a8\u6570\u5b57</p> <p>\u5730\u5740\u89e3\u6790\u5668\u7531\u884c\u5730\u5740\u8bd1\u7801\u5668\u548c\u5217\u5730\u5740\u8bd1\u7801\u5668\uff0c\u540c\u65f6\u5728\u884c\u548c\u5217\u5bfc\u901a\u53ef\u4ee5\u8bfb\u51fa\u6570\u5b57</p> <p>RAM (random access memory)</p> <p>\u5feb\u901f\u53ef\u64e6\u9664\u5b58\u50a8\u5668-u\u76d8</p> <p>DDR double data rate SDRAM \u53cc\u6570\u636e\u8f93\u51fa\u540c\u6b65\u52a8\u6001\u5b58\u50a8\u5668</p> <p>\u5730\u5740\u4e0e\u6570\u636e\u5355\u5143</p> <p>32\u4f4d\u7684\u5b58\u50a8\u5668\uff0c\u6700\u5927\u7684\u5bfb\u5740\u7a7a\u95f4\u662f2\u768432\u6b21\u65b9\uff0c\u4e5f\u5c31\u662f4\u4e2aG </p>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#_22","title":"\u7a0b\u5e8f\u8fd0\u884c\u7684\u57fa\u672c\u539f\u7406","text":"<p>\u51af\u8bfa\u4f9d\u66fc\u5f0f\u8ba1\u7b97\u673a\u6267\u884c\u5b58\u50a8\u597d\u7684\u7a0b\u5e8f</p> <p>\u6307\u4ee4\u96c6\u662f\u7528\u6765\u8ba1\u7b97\u548c\u63a7\u5236\u8ba1\u7b97\u673a\u7cfb\u7edf\u7684\u4e00\u5957\u6307\u4ee4\u7684\u96c6\u5408</p> <p>\u4e3b\u8981\u6709\u4e24\u79cd\uff1aIntel X86\u6307\u4ee4\u96c6\u548c ARM\u6307\u4ee4\u96c6</p> <p>\u6307\u4ee4\u7801 + \u64cd\u4f5c\u6570 = \u6307\u4ee4</p>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#cpu","title":"CPU\u6307\u4ee4\u7684\u6267\u884c\u8fc7\u7a0b","text":"<ol> <li>PC \u7a0b\u5e8f\u8ba1\u6570\u5668 \u4e2d\u5305\u542b\u7a0b\u5e8f\u7684\u5730\u5740\uff0c\u4f1a\u5c06\u7a0b\u5e8f\u7684\u5730\u5740\u53d1\u7ed9\u5730\u5740\u5bc4\u5b58\u5668</li> <li>AR \u5730\u5740\u5bc4\u5b58\u5668 \u4f1a\u53bb\u76f8\u5e94\u7684\u5730\u5740\u4e2d\u5c06\u6307\u4ee4\u53d6\u51fa\u6765\u653e\u5165\u6307\u4ee4\u5bc4\u5b58\u5668</li> <li>OP | ADDR \u6307\u4ee4\u5bc4\u5b58\u5668IR \uff0c\u5c06\u6307\u4ee4\u4ea4\u7ed9\u6307\u4ee4\u8bd1\u7801\u5668\uff0c\u770b\u770b\u6307\u4ee4\u8981\u5b8c\u6210\u4ec0\u4e48</li> <li>\u6307\u4ee4\u5bc4\u5b58\u5668\u53d1\u73b0\u547d\u4ee4\u4e2d\u5305\u542b\u5730\u5740\uff0c\u53c8\u8981\u8fd4\u56de\u5730\u5740\u5bc4\u5b58\u5668\u4e2d\u5230\u76f8\u5e94\u7684\u5b58\u50a8\u5668\u5730\u5740\uff0c\u5e76\u5c06\u53d6\u51fa\u7684\u6570\u5b57\u5b58\u5165\u7f13\u51b2\u5bc4\u5b58\u5668DR\u4e2d</li> <li>ID \u6307\u4ee4\u8bd1\u7801\u5668</li> <li>\u7136\u540e\u7531OC\u64cd\u4f5c\u63a7\u5236\u5668\u548cTG\u65f6\u5e8f\u4ea7\u751f\u5668\u53d1\u9001\u4e00\u4e2a\u547d\u4ee4\u7ed9ALU \u7b97\u6570\u903b\u8f91\u5355\u5143</li> <li>\u7531ALU\u5b8c\u6210\u8fd0\u7b97\uff0c\u5e76\u5c06\u7ed3\u679c\u653e\u5165AC\u7d2f\u52a0\u5668\u5f53\u4e2d</li> </ol>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#_23","title":"\u7a0b\u5e8f\u7684\u6267\u884c","text":"<p>\u7f16\u8bd1\uff0c\u5c06\u7a0b\u5e8f\u5148\u7f16\u8bd1\u6210\u6c47\u7f16\u4ee3\u7801 \u518d\u5c06\u6c47\u7f16\u4ee3\u7801\u6c47\u7f16\u6210\u673a\u5668\u7801 \u8ba9\u673a\u5668\u7801\u7531CPU\u8fd0\u884c</p>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#module-4","title":"Module 4 \u611f\u6027\u8ba4\u8bc6\u8ba1\u7b97\u673a\u7a0b\u5e8f","text":""},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#ide","title":"\u4f7f\u7528IDE\u8fdb\u884c\u8c03\u8bd5","text":"<ol> <li>log\u6cd5\uff0c\u5373\u5728\u9700\u8981\u8c03\u8bd5\u7684\u5730\u65b9\u8fdb\u884c\u8f93\u51fa\u503cprint</li> <li>\u65ad\u70b9\u6cd5\uff0c\u5728\u53ef\u4ee5\u7684\u5730\u65b9\u6253\u4e0a\u65ad\u70b9</li> </ol> <p>step over\u662f\u8df3\u5230\u4e0b\u4e00\u53e5</p> <p>Step into \u662f\u5982\u679c\u8fd9\u4e00\u884c\u7531\u8c03\u7528\u51fd\u6570\u7684\u8bdd\uff0c\u5c31\u4f1a\u8fdb\u5165\u90a3\u4e2a\u51fd\u6570</p> <p>step out\u5c31\u662f\u8df3\u51fa\u51fd\u6570</p>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#_24","title":"\u7a0b\u5e8f\u8bbe\u8ba1\u8bed\u8a00\u7684\u5b66\u4e60","text":"<p>knowledge\u548cskill</p> <p>\u5b58\u50a8\u7a0b\u5e8f\u5f0f\u8ba1\u7b97\u673a</p> <p>\u7f16\u7a0b\u8bed\u8a00\u7684\u5355\u8bcd</p> <p>\u7f16\u7a0b\u8bed\u8a00\u91cc\u7684\u6570\u548c\u8ba1\u7b97\u7b26\u53f7</p> <p>\u7f16\u7a0b\u8bed\u8a00\u4e2d\u7684\u53e5\u5f0f</p>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#_25","title":"\u7f16\u7a0b\u4f5c\u4e1a","text":""},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#1","title":"\u7f16\u7a0b\u98981 \u5192\u6ce1\u7b97\u6cd5","text":"<pre><code>/*\n * \u6839\u636e\u81ea\u5df1\u7684\u7406\u89e3\u5199\u5192\u6ce1\u6392\u5e8f\u7b97\u6cd5\uff0c\u6570\u7ec4\u5927\u5c0f\u57281000\u4ee5\u5185\n * \u7b2c\u4e00\u884c\u662fn\uff0c\u8868\u793a\u6570\u7ec4\u7684\u5927\u5c0f\uff0c\u63a5\u7740n\u884c\u662f\u6570\u7ec4\u7684n\u4e2a\u5143\u7d20\n * \u6309\u7167\u4ece\u5c0f\u5230\u5927\u8fdb\u884c\u6392\u5217\n */\n\n#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main () {\n    int n, a[1000];\n    cin &gt;&gt; n;\n\n    for (int i = 0; i &lt; n; i++) {\n        cin &gt;&gt; a[i];\n    }\n\n    // \u5192\u6ce1\u7b97\u6cd5\u6838\u5fc3\uff1a\u4ece\u5c0f\u5230\u5927\uff0c\u53d1\u73b0\u76f8\u90bb\u7684\u6570\u6709\u4e0d\u7b26\u5408\u89c4\u5219\u7684\u5c31\u4e92\u76f8\u4ea4\u6362\n    // \u6bcf\u4e00\u904d\u4f1a\u5c06\u4e00\u4e2a\u6700\u5927\u7684\u6570\u5b57\u8f6c\u79fb\u5230\u6807\u53f7\u6700\u5927\u5904\n\n    for (int i = 0; i &lt; n; i++) {\n        for (int j = 0; j &lt; n - i - 1; j++) {\n            if (a[j] &gt; a[j + 1]) {\n                int temp = a[j];\n                a[j] = a[j + 1];\n                a[j + 1] = temp;\n            }\n        }\n    }\n\n    for (int i = 0; i &lt; n; i++) {\n        cout &lt;&lt; a[i] &lt;&lt; endl;\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#2","title":"\u7f16\u7a0b\u98982 \u5947\u5076\u6392\u5e8f","text":"<pre><code>/*\n* \u5947\u5076\u6392\u5e8f\n* \u8f93\u5165\u5341\u4e2a\u6574\u6570\uff0c\u5c06\u5341\u4e2a\u6574\u6570\u6309\u5347\u5e8f\u6392\u5217\u8f93\u51fa\uff0c\u5e76\u4e14\u5947\u6570\u5728\u524d\uff0c\u5076\u6570\u5728\u540e\u3002\n*/ \n\n#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main () {\n  int a[10];\n  // \u9996\u5148\u662f\u8f93\u516510\u4e2a\u6574\u6570\n  for (int i = 0; i &lt; 10; i++) {\n    cin &gt;&gt; a[i];\n  }\n\n  // \u7b2c\u4e8c\u6b65\u662f\u4f7f\u7528\u53cc\u6307\u9488\u6cd5\u5c06\u5947\u6570\u548c\u5076\u6570\u5206\u522b\u653e\u5728\u524d\u540e\u4e24\u4fa7\n  // \u6ce8\u610f\uff1a\u53ea\u8981\u51fa\u73b0\u4e00\u4e2a\u4e0d\u7b26\u5408\u6392\u5e8f\u7684\u6570\u5b57\uff0c\u90a3\u4e48\u5fc5\u7136\u6709\u4e2a\u6570\u5b57\u548c\u5b83\u8fdb\u884c\u5bf9\u5e94\uff0c\u8fdb\u884c\u53cc\u6307\u9488\u4ea4\u6362\n  int l = 0, r = 9;\n  while (l &lt; r) {\n    bool leftIsOdd = a[l] % 2 == 1;\n    bool rightIsEven = a[r] % 2 == 0;\n    if (leftIsOdd) {\n      l++;\n    } else if (rightIsEven) {\n      r--;\n    } else if (!leftIsOdd &amp;&amp; !rig htIsEven) {\n      int temp = a[l];\n      a[l] = a[r];\n      a[r] = temp;\n    }\n  }\n\n  // \u5bf9\u5947\u6570\u90e8\u5206\u8fdb\u884c\u5192\u6ce1\n  int start = 0, end = l;\n  for (int i = start; i &lt; end -1; i++) {\n    for (int j = start + 1; j &lt; end + start - i; j++ ) {\n      if (a[j - 1] &gt; a[j]) {\n        int temp = a[j];\n        a[j] = a[j - 1];\n        a[j - 1] = temp;\n      }\n    }\n  }\n  // \u5bf9\u5076\u6570\u90e8\u5206\u8fdb\u884c\u5192\u6ce1\n  start = l, end = 10;\n  for (int i = start; i &lt; end - 1; i++) {\n    for (int j = start + 1; j &lt; end + start - i; j++ ) {\n      if (a[j - 1] &gt; a[j]) {\n        int temp = a[j];\n        a[j] = a[j - 1];\n        a[j - 1] = temp;\n      }\n    }\n  }\n\n  for (int i = 0; i &lt; 10; i++) {\n    cout &lt;&lt; a[i] &lt;&lt; \" \";\n  }\n\n  cout &lt;&lt; endl;\n\n  return 0;\n}\n</code></pre>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#module-5","title":"Module 5 \u4ece\u73b0\u5b9e\u95ee\u9898\u5230\u8ba1\u7b97\u673a\u7a0b\u5e8f","text":"<p>\u89e3\u51b3\u95ee\u9898\u7684\u65b9\u6848</p> <p>\u63cf\u8ff0\u7ed9\u7535\u8111\u542c\uff1a\u7ed3\u6784\u5316\u7a0b\u5e8f\u8bbe\u8ba1\u7684\u601d\u60f3\uff0c\u5148\u62bd\u8c61\u540e\u5177\u4f53\uff0c\u76f4\u5230\u80fd\u591f\u4f7f\u7528\u987a\u5e8f\u3001\u5206\u652f\u3001\u5faa\u73af\u641e\u5b9a</p> <p>\u53ef\u4ee5\u5148\u5199\u51fa\u7a0b\u5e8f\u7684\u8f6e\u5ed3\uff0c\u7136\u540e\u518d\u8865\u53d8\u91cf\u7684\u5b9a\u4e49</p> <p>\u6574\u6570\u6392\u5e8f</p> <p>\u5faa\u73af\u7ed3\u6784</p>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#_26","title":"\u7ed3\u6784\u5316\u7a0b\u5e8f\u8bbe\u8ba1","text":"<p>\u7531\u82e5\u5e72\u4e2a\u6a21\u5757\u7ec4\u6210</p> <p>\u6a21\u5757\u4e4b\u95f4\u9ad8\u5185\u805a\uff0c\u6a21\u5757\u529f\u80fd\u5355\u4e00</p> <p>\u6a21\u5757\u4e4b\u95f4\u4f4e\u8026\u5408\uff0c\u4e00\u4e2a\u6a21\u5757\u88ab\u6539\u52a8\u7684\u65f6\u5019\uff0c\u6307\u6325\u5f71\u54cd\u81ea\u5df1</p>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#module-6-c","title":"Module 6 \u7406\u6027\u8ba4\u8bc6C\u7a0b\u5e8f \u5bfc\u8bba","text":"<p>\u7a0b\u5e8f\u8bbe\u8ba1\u8bed\u8a00\u7684\u5206\u7c7b\uff1a</p> <p>\u673a\u5668\u8bed\u8a00 0101010\u8fd9\u79cd\u4f4e\u7ea7\u8bed\u8a00</p> <p>\u6c47\u7f16\u8bed\u8a00 load 0 a\u8fd9\u79cd\u4f4e\u7ea7\u8bed\u8a00</p> <p>\u9ad8\u7ea7\u8bed\u8a00 C</p> <p>FORTRAN \u7b2c\u4e00\u95e8\u9ad8\u7ea7\u7a0b\u5e8f\u8bbe\u8ba1\u8bed\u8a00</p> <p>19060 algo 60 A\u8bed\u8a00</p> <p>1970 \u8d1d\u5c14\u5b9e\u9a8c\u5ba4ken Thompson  PDP-7 B\u8bed\u8a00  UNIX</p> <p>1972\u5728B\u8bed\u8a00\u7684\u57fa\u7840\u4e0a\u53d1\u5c55\u548c\u5b8c\u5584\u51fa\u4e86C\u8bed\u8a00\uff0c\u5e76\u91cd\u5199\u4e86UNIX</p> <p>1978 The C programing language</p> <p>C\u8bed\u8a00\u7684\u89c4\u8303\u5b9a\u4e49\u5f97\u76f8\u5f53\u5bbd\u6cdb</p> <p>long\u6570\u636e\u957f\u5ea6\u4e0d\u65ad\u4e0eint\u5373\u53ef</p> <p>short\u4e0d\u5e38\u4e8eint\u5373\u53ef</p> <p>\u76f8\u540c\u7a0b\u5e8f\u5728\u4e0d\u540c\u7f16\u8bd1\u5668\u4e0a\u5177\u6709\u4e0d\u540c\u89e3\u91ca</p> <p>\u76f8\u540c\u7a0b\u5e8f\u5728\u4e0d\u540c\u5e73\u53f0\u4e0a\u8fd0\u884c\u7ed3\u679c\u4e0d\u540c</p> <p>1979 \u8d1d\u5c14\u5b9e\u9a8c\u5ba4 C with classes \u5373c++\uff0c\u6269\u5c55\u4e86\u9762\u5411\u5bf9\u8c61\u90e8\u5206</p> <pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main () {\n    // \u8f93\u5165\u57f9\u517b\u76bf\u6570\u91cf\u3001\u7f16\u53f7\u4ee5\u53ca\u7ec6\u83cc\u7e41\u6b96\u7387\uff1b\n    int n;\n    int id[100];\n    double rate[100];\n\n    cin &gt;&gt; n;\n    for (int i = 0; i &lt; n; i++) {\n        int initial, final;\n        cin &gt;&gt; id[i] &gt;&gt; initial &gt;&gt; final;\n        rate[i] = (double) final / initial;\n    }\n    // \u5c06\u6240\u6709\u7684\u8f93\u5165\u6309\u7167\u4ece\u5927\u5230\u5c0f\u6392\u5217\n    for (int i = 0; i &lt; n; i++) {\n        for (int j = 0; j &lt; n - i -1; j++) {\n            if (rate[j + 1] &gt; rate[j]) {\n                int tmpId = id[j];\n                id[j] = id[j + 1];\n                id[j + 1] = tmpId;\n                double tmpRate = rate[j];\n                rate[j] = rate[j + 1];\n                rate[j + 1] = tmpRate;\n            }\n        }\n    }\n    // \u8ba1\u7b97\u76f8\u90bb\u4e4b\u95f4\u7684\u5dee\u503c\uff0c\u76f8\u5dee\u6700\u5927\u7684\u4e00\u7ec4\u5c31\u662f\u4e24\u7ec4\u7ec6\u83cc\u7684\u5206\u754c\u7ebf\n    double maxDiff = 0;\n    int maxDiffIndex = 0;\n    for (int i = 0; i &lt; n - 1; i++) {\n        double diff = rate[i] - rate[i + 1];\n        if (diff &gt; maxDiff) {\n            maxDiff = diff;\n            maxDiffIndex = i;\n        }\n    }\n    cout &lt;&lt; maxDiffIndex + 1 &lt;&lt; endl;\n    for (int i = maxDiffIndex; i &gt;= 0; i--) {\n        cout &lt;&lt; id[i] &lt;&lt; endl;\n    }\n    cout &lt;&lt; n - maxDiffIndex - 1 &lt;&lt; endl;\n    for (int i = n - 1; i &gt;= maxDiffIndex + 1; i--) {\n        cout &lt;&lt; id[i] &lt;&lt; endl;\n    }\n    return 0;\n}\n</code></pre>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#programming-assignment-c","title":"Programming Assignment: \u7406\u6027\u8ba4\u8bc6C\u7a0b\u5e8f \u5bfc\u8bba \u7f16\u7a0b\u9898","text":"<pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main () {\n    int n, grade[100];\n    cin &gt;&gt; n;\n    for (int i = 0; i &lt; n; i++) cin &gt;&gt; grade[i];\n    for (int i = 0; i &lt; n; i++) {\n        for (int j = 1; j &lt; n - i; j++) {\n            if (grade[j - 1] &lt; grade[j]) {\n                int tmp = grade[j];\n                grade[j] = grade[j - 1];\n                grade[j - 1] = tmp;\n            }\n        }\n    }\n    cout &lt;&lt; grade[0] &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#3","title":"\u7f16\u7a0b\u9898\uff033\uff1a\u6700\u9ad8\u7684\u5206\u6570","text":"<pre><code>    #include &lt;iostream&gt;\n    using namespace std;\n\n    int main() {\n      int a[10];\n      for (int i = 0; i &lt; 10; i++) {\n        cin &gt;&gt; a[i];\n      }  \n      // \u5192\u6ce1\uff0c\u4e0d\u65ad\u6bd4\u8f83\u76f8\u90bb\u7684\u4e24\u4e2a\u6570\uff0c\u5982\u679c\u987a\u5e8f\u9519\u4e86\uff0c\u90a3\u4e48\u5c31\u4ea4\u6362\n      for (int i = 0; i &lt; 9; i++) {\n        for (int j = 1; j &lt; 10 - i; j++) {      \n      // \u4e0e\u521a\u624d\u7684\u5192\u6ce1\u6392\u5e8f\u4e0d\u540c\uff0c\u6211\u4eec\u4e0d\u53ea\u662f\u901a\u8fc7\u8f83\u6570\u5b57\u7684\u5927\u5c0f\u51b3\u5b9a\u987a\u5e8f\n      // \u5982\u679c\u5de6\u8fb9\u7684\u4e3a\u5076\u6570\uff0c\u53f3\u8fb9\u7684\u4e3a\u5947\u6570\uff0c\u90a3\u4e48\u987a\u5e8f\u4e5f\u9700\u8981\u98a0\u5012\n      bool leftIsEven = a[j - 1] % 2 == 0;\n      bool rightIsEven = a[j] % 2 == 0;\n      if ((leftIsEven &amp;&amp; !rightIsEven) ||\n          (leftIsEven == rightIsEven &amp;&amp; a[j - 1] &gt; a[j])) {        \n        int temp = a[j];        \n        a[j] = a[j - 1];\n        a[j - 1] = temp;\n      }\n    }\n  }  \n  for (int i = 0; i &lt; 10; i++) {\n    cout &lt;&lt; a[i] &lt;&lt; ' ';\n  }  \n  return 0;\n}\n</code></pre>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#4","title":"\u7f16\u7a0b\u9898\uff034\uff1a\u6700\u5927\u5947\u6570\u4e0e\u6700\u5c0f\u5076\u6570\u4e4b\u5dee\u7684\u7edd\u5bf9\u503c","text":""},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#_27","title":"\u63cf\u8ff0","text":"<p>\u8f93\u51656\u4e2a\u6b63\u6574\u6570\uff0c\u4e14\u8fd96\u4e2a\u6b63\u6574\u6570\u4e2d\u81f3\u5c11\u5b58\u5728\u4e00\u4e2a\u5947\u6570\u548c\u4e00\u4e2a\u5076\u6570\u3002 </p> <p>\u8bbe\u8fd96\u4e2a\u6b63\u6574\u6570\u4e2d\u6700\u5927\u7684\u5947\u6570\u4e3aa\uff0c\u6700\u5c0f\u7684\u5076\u6570\u4e3ab\uff0c\u6c42\u51fa|a-b|\u7684\u503c</p>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#_28","title":"\u8ba1\u7b97\u5bfc\u8bba\u4e0eC\u8bed\u8a00\u57fa\u7840","text":""},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#_29","title":"\u8f93\u5165","text":"<p>\u8f93\u5165\u4e3a\u4e00\u884c\uff0c6\u4e2a\u6b63\u6574\u6570,\u4e146\u4e2a\u6b63\u6574\u6570\u90fd\u5c0f\u4e8e100</p> <p>\u8f93\u5165\u4fdd\u8bc1\u8fd96\u4e2a\u6570\u4e2d\u81f3\u5c11\u5b58\u5728\u4e00\u4e2a\u5947\u6570\u548c\u4e00\u4e2a\u5076\u6570</p>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#_30","title":"\u8ba1\u7b97\u5bfc\u8bba\u4e0eC\u8bed\u8a00\u57fa\u7840","text":""},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#_31","title":"\u8f93\u51fa","text":"<p>\u8f93\u51fa\u4e3a\u4e00\u884c\uff0c\u8f93\u51fa\u6700\u5927\u7684\u5947\u6570\u4e0e\u6700\u5c0f\u7684\u5076\u6570\u4e4b\u5dee\u7684\u7edd\u5bf9\u503c</p> <p>\u505a\u6cd5\u4e00\uff1a\uff08\u592a\u590d\u6742\uff09</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cmath&gt;\nusing namespace std;\n\nint main () {\n    int num[6];\n    for (int i = 0; i &lt; 6; i++) {\n        cin &gt;&gt; num[i];\n    }\n\n\n\n    // \u53cc\u6307\u9488\u6cd5\u5c06\u6240\u6709\u6570\u8fdb\u884c\u5947\u5076\u6392\u5e8f\uff0c\u5947\u6570\u5728\u5de6\u8fb9\uff0c\u5076\u6570\u5728\u53f3\u8fb9\n    int l = 0, r = 5;\n    while (l &lt; r) {\n        bool leftIsOdd = num[l] % 2 == 1;\n        bool rightIsEven = num[r] % 2 == 0;\n        if (leftIsOdd) {\n            l++;\n        } else if (rightIsEven) {\n            r--;\n        } else if (!leftIsOdd &amp; !rightIsEven) {\n            int tmp = num[l];\n            num[l] = num[r];\n            num[r] = tmp;\n        }\n    }\n    // \u5bf9\u5947\u6570\u548c\u5076\u6570\u90e8\u5206\u5206\u522b\u8fdb\u884c\u6392\u5e8f\n\n    for (int i = 0; i &lt; l; i++) {\n        for (int j = 0; j &lt; l - i -1; j++) {\n            if (num[j] &lt; num[j + 1]) {\n                int tmp = num[j];\n                num[j] = num[j + 1];\n                num[j + 1] = tmp;\n            }\n        }\n    }\n    for (int i = l; i &lt; 6; i++) {\n        for (int j = l; j &lt; 5 + l - i; j++) {\n            if (num[j] &lt; num[j + 1]) {\n                int tmp = num[j];\n                num[j] = num[j + 1];\n                num[j + 1] = tmp;\n            }\n        }\n    }\n\n\n    // \u8ba1\u7b97\u5e76\u4e14\u8f93\u51fa\u6700\u5927\u7684\u5947\u6570\u548c\u6700\u5c0f\u5076\u6570\u7684\u5dee\u503c\n    cout &lt;&lt; abs(num[0] - num[5]) &lt;&lt; endl;\n    return 0;\n}\n</code></pre> <p>\u505a\u6cd5\u4e8c\uff1a\uff08\u6ce8\u610f\u9898\u610f\uff09</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cmath&gt;\nusing namespace std;\n\nint main () {\n    int maxOdd = 0, minEven = 100;\n    for (int i = 0; i &lt; 6; i++) {\n        int a;\n        scanf(\"%d\", &amp;a);\n        if (a % 2 == 1) {\n            if (a &gt; maxOdd) maxOdd = a;\n        } else {\n            if (a &lt; minEven) minEven = a;\n        }\n    }\n    cout &lt;&lt; abs(maxOdd - minEven) &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#5","title":"\u7f16\u7a0b\u9898\uff035\uff1a\u5206\u79bb\u6574\u6570\u7684\u5404\u4e2a\u6570\u4f4d","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main () {\n    char str[4];\n    cin &gt;&gt; str;\n    for (int i = 0; i &lt; 3; i++) cout &lt;&lt; str[i] &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#module-7-c","title":"Module 7 C\u8bed\u8a00\u4e2d\u7684\u6570\u636e\u6210\u5206","text":""},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#module-8-c","title":"Module 8 C\u8bed\u8a00\u4e2d\u7684\u8fd0\u7b97\u6210\u5206","text":""},{"location":"Course/peking/%E8%AE%A1%E7%AE%97%E5%AF%BC%E8%AE%BA%E4%B8%8EC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/#module-9-c","title":"Module 9 C\u8bed\u8a00\u4e2d\u7684\u63a7\u5236\u6210\u5206","text":""},{"location":"Problem/","title":"Programming Problem","text":"<p>Abstract</p> <p>\u8fd9\u91cc\u662f\u6570\u636e\u7ed3\u6784&amp;\u7b97\u6cd5\u3001\u5237\u9898\u76f8\u5173\u7684\u7b14\u8bb0</p> <p>\u5305\u62ec\u4e86\u4eceC++\u8bed\u6cd5\u57fa\u7840\u5230\u6570\u636e\u7ed3\u6784&amp;\u7b97\u6cd5\u5165\u95e8\u518d\u5230\u5237\u9898\u7684\u5168\u8fc7\u7a0b</p> <p>\u6b63\u5728\u4e0d\u65ad\u603b\u7ed3\u66f4\u65b0\u7b14\u8bb0\u4e2d...</p>"},{"location":"Problem/#_1","title":"\u7b97\u6cd5\u5b66\u4e60\u8def\u5f84","text":"<ul> <li> acwing\u7b97\u6cd5\u57fa\u7840\u8bfe+\u7b97\u6cd5\u63d0\u9ad8\u8bfe</li> <li> \u4ee3\u7801\u968f\u60f3\u5f55</li> <li> LeetCode 101</li> <li> hot 100</li> </ul> <p>\u6309\u7167\u4e13\u9898\u5237\uff1a</p> <ul> <li> \u5bab\u6c34\u4e09\u53f6\u7684\u5237\u9898\u7b14\u8bb0</li> </ul>"},{"location":"Problem/#table-of-contents","title":"Table of Contents","text":"<ul> <li> <p>AcWing\u8bed\u6cd5\u57fa\u7840\u8bfe</p> <ul> <li>\u7b2c\u4e94\u8bb2 \u5b57\u7b26\u4e32</li> <li>\u7b2c\u516d\u8bb2 \u51fd\u6570</li> <li>\u7b2c\u4e03\u8bb2 \u7c7b\u3001\u7ed3\u6784\u4f53\u3001\u6307\u9488\u4e0e\u5f15\u7528</li> <li>\u7b2c\u516b\u8bb2 STL\u3001\u4f4d\u8fd0\u7b97\u4e0e\u5e93\u51fd\u6570</li> </ul> </li> <li> <p>AcWing\u7b97\u6cd5\u57fa\u7840\u8bfe</p> <ul> <li>\u7b2c\u4e00\u8bb2 \u57fa\u7840\u7b97\u6cd5</li> </ul> </li> </ul>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/","title":"\u7b2c\u4e94\u8bb2 \u52a8\u6001\u89c4\u5212","text":"<p>\u52a8\u6001\u89c4\u5212\u95ee\u9898\u6ca1\u6709\u7b97\u6cd5\u6a21\u677f</p> <p>\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b</p> <p>\u52a8\u6001\u89c4\u5212\u7b97\u6cd5\u662f\u4e00\u79cd\u7528\u4e8e\u89e3\u51b3\u4f18\u5316\u95ee\u9898\u7684\u7b97\u6cd5\u601d\u60f3\u3002\u5b83\u901a\u8fc7\u5c06\u95ee\u9898\u5206\u89e3\u4e3a\u5b50\u95ee\u9898\uff0c\u5e76\u4ee5\u9012\u63a8\u7684\u65b9\u5f0f\u6c42\u89e3\u5b50\u95ee\u9898\u7684\u6700\u4f18\u89e3\uff0c\u4ece\u800c\u5f97\u5230\u539f\u95ee\u9898\u7684\u6700\u4f18\u89e3\u3002</p> <p>\u52a8\u6001\u89c4\u5212\u7b97\u6cd5\u901a\u5e38\u9002\u7528\u4e8e\u6ee1\u8db3\u6700\u4f18\u5b50\u7ed3\u6784\u548c\u91cd\u53e0\u5b50\u95ee\u9898\u6027\u8d28\u7684\u95ee\u9898\u3002\u6700\u4f18\u5b50\u7ed3\u6784\u610f\u5473\u7740\u95ee\u9898\u7684\u6700\u4f18\u89e3\u53ef\u4ee5\u7531\u5176\u5b50\u95ee\u9898\u7684\u6700\u4f18\u89e3\u6784\u6210\uff0c\u800c\u91cd\u53e0\u5b50\u95ee\u9898\u5219\u6307\u5728\u6c42\u89e3\u8fc7\u7a0b\u4e2d\u4f1a\u53cd\u590d\u9047\u5230\u76f8\u540c\u7684\u5b50\u95ee\u9898\u3002</p> <p>\u52a8\u6001\u89c4\u5212\u7b97\u6cd5\u7684\u57fa\u672c\u6b65\u9aa4\u5982\u4e0b\uff1a</p> <ol> <li>\u5b9a\u4e49\u72b6\u6001\uff1a\u786e\u5b9a\u95ee\u9898\u7684\u72b6\u6001\u8868\u793a\uff0c\u5373\u627e\u51fa\u9700\u8981\u5b58\u50a8\u7684\u4fe1\u606f\uff0c\u4ee5\u4fbf\u8fdb\u884c\u540e\u7eed\u7684\u8ba1\u7b97\u3002</li> <li>\u786e\u5b9a\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a\u5efa\u7acb\u95ee\u9898\u7684\u72b6\u6001\u4e4b\u95f4\u7684\u8f6c\u79fb\u5173\u7cfb\uff0c\u5373\u6839\u636e\u5b50\u95ee\u9898\u7684\u6700\u4f18\u89e3\u63a8\u5bfc\u51fa\u539f\u95ee\u9898\u7684\u6700\u4f18\u89e3\u3002</li> <li>\u521d\u59cb\u6761\u4ef6\uff1a\u786e\u5b9a\u95ee\u9898\u7684\u8fb9\u754c\u6761\u4ef6\uff0c\u5373\u6700\u7b80\u5355\u7684\u60c5\u51b5\u4e0b\u7684\u89e3\u3002</li> <li>\u81ea\u5e95\u5411\u4e0a\u6c42\u89e3\uff1a\u6309\u7167\u81ea\u5e95\u5411\u4e0a\u7684\u987a\u5e8f\uff0c\u901a\u8fc7\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u548c\u5df2\u77e5\u7684\u521d\u59cb\u6761\u4ef6\u6765\u8ba1\u7b97\u5e76\u586b\u5145\u72b6\u6001\u8868\u683c\uff08\u6216\u8005\u76f4\u63a5\u66f4\u65b0\u72b6\u6001\u6570\u7ec4\uff09\u3002</li> <li>\u63d0\u53d6\u7ed3\u679c\uff1a\u6839\u636e\u95ee\u9898\u7684\u8981\u6c42\uff0c\u4ece\u6700\u7ec8\u7684\u72b6\u6001\u8868\u683c\uff08\u6216\u8005\u72b6\u6001\u6570\u7ec4\uff09\u4e2d\u63d0\u53d6\u51fa\u6240\u9700\u7684\u7ed3\u679c\u3002</li> </ol> <p>\u52a8\u6001\u89c4\u5212\u7b97\u6cd5\u5728\u6c42\u89e3\u95ee\u9898\u65f6\uff0c\u5229\u7528\u4e86\u5b50\u95ee\u9898\u7684\u91cd\u53e0\u6027\u8d28\uff0c\u907f\u514d\u4e86\u91cd\u590d\u8ba1\u7b97\uff0c\u4ece\u800c\u663e\u8457\u63d0\u9ad8\u4e86\u6548\u7387\u3002\u5b83\u5e38\u5e38\u7528\u4e8e\u89e3\u51b3\u8bf8\u5982\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217\u3001\u80cc\u5305\u95ee\u9898\u3001\u6700\u77ed\u8def\u5f84\u95ee\u9898\u7b49\u4f18\u5316\u95ee\u9898\u3002</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#1","title":"1. \u80cc\u5305\u95ee\u9898","text":"<p>\u5e76\u4e0d\u4e00\u5b9a\u8981\u5c06\u80cc\u5305\u5b8c\u5168\u88c5\u6ee1</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#01","title":"01\u80cc\u5305\u95ee\u9898\uff08\u6bcf\u4ef6\u7269\u54c1\u6700\u591a\u53ea\u7528\u4e00\u6b21\uff09","text":"<p>N\u4e2a\u7269\u54c1\uff0c\u548c\u4e00\u4e2a\u5bb9\u91cf\u662fV\u7684\u80cc\u5305</p> <p>\u6bcf\u4e2a\u7269\u54c1\u90fd\u6709vi\u548c\u4ef7\u503cwi\uff0c\u6bcf\u4e2a\u7269\u54c1\u53ea\u80fd\u7528\u4e00\u6b21</p> <p>\u4f7f\u80cc\u5305\u4e2d\u7684\u7269\u54c1\u4ef7\u503c\u6700\u5927</p> <p>DP\u95ee\u9898\u4ece\u4e24\u4e2a\u89d2\u5ea6\u6765\u8003\u8651</p> <p>\u4ece\u96c6\u5408\u7684\u89d2\u5ea6\uff1a</p> <p>f(i, j) \u8868\u793a\u7684\u662f\u96c6\u5408\u4e2d\u6240\u6709\u9009\u6cd5\u7684\u6700\u5927\u503c</p> <ol> <li> <p>\u72b6\u6001\u8868\u793a\uff1a\u9700\u8981\u51e0\u7ef4\u6570\u7ec4\u6765\u8868\u793af(i,j)\uff1b\u96c6\u5408\uff08\u6240\u6709\u9009\u6cd5\uff0c\u6761\u4ef6\uff08\u53ea\u8003\u8651\u524di\u4e2a\u7269\u54c1\u3001\u9009\u51fa\u6765\u603b\u4f53\u79ef\u5c0f\u4e8e\u7b49\u4e8ej\uff09\uff09\u548c\u5c5e\u6027\uff08\u6700\u5927\u503c\u3001\u6700\u5c0f\u503c\u3001\u6570\u91cf\uff09</p> </li> <li> <p>\u72b6\u6001\u8ba1\u7b97\uff1a\u5982\u4f55\u4e00\u6b65\u6b65\u7b97f(i, j) --\u96c6\u5408\u7684\u5212\u5206   f(i, j)\u5982\u4f55\u7528\u66f4\u5c0f\u7684\u96c6\u5408\u5212\u5206\uff1a\u628af(i, j)\u5206\u6210\u4e24\u5927\u7c7b\uff1a\u4e0d\u542b\u7b2ci\u4e2a\u653e\u5230\u5de6\u8fb9 \uff08f(i -1, j\uff09)\u3001\u5305\u542b\u7b2ci\u4e2a\u653e\u5230\u53f3\u8fb9\u53bb(f(i - 1, j - vi) + wi)</p> </li> <li>f(i, j) = max(f(i -1, j), f(i - 1, j - vi) + wi);</li> </ol> <p>f(i - 1, j - vi) + wi \u662f\u6709\u53ef\u80fd\u4e0d\u5b58\u5728\u7684\uff0cwi\u53ef\u80fd\u5927\u4e8e\u6700\u5927\u9650\u5236\uff0c\u90a3\u4e48\u5c31\u662f\u7a7a\u96c6\u4e86</p> <p>\u52a8\u6001\u89c4\u5212\u7684\u7f51\u4e0a\u601d\u7ef4\u65b9\u5f0f\u7ed3\u6784\u3001\u72b6\u6001\u3001\u6700\u540e\u5b50\u7ed3\u6784\u592a\u62bd\u8c61\u4e86</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#01_1","title":"01\u80cc\u5305\u95ee\u9898","text":""},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_2","title":"\u4e8c\u7ef4\u5199\u6cd5","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\nconst int N = 1010;\nint n, m;\nint v[N], w[N];\nint f[N][N]; // f[a][b]\u8868\u793a\u7684\u662f\u5bf9\u4e8ea\u4e2a\u7269\u54c1\uff0cb\u7684\u6700\u5927\u5bb9\u91cf\uff0c\u6240\u80fd\u88c5\u7684\u6700\u5927\u4ef7\u503c\n\n\nint main () {\n    cin &gt;&gt; n &gt;&gt; m;\n    for (int i = 1; i &lt;= n; i++) cin &gt;&gt; v[i] &gt;&gt; w[i];\n    // \u56e0\u4e3af[0][0~m]\u5168\u5c40\u53d8\u91cf\u672c\u8eab\u5c31\u662f0\uff0c\u5c31\u4e0d\u5bf9\u4ed6\u8d4b\u503c\u4e86\n    for (int i = 1; i &lt;= n; i++) {\n        for (int j = 0; j &lt;= m; j++) {\n            f[i][j] = f[i - 1][j];\n            if (j &gt;= v[i]) f[i][j] = max(f[i][j], f[i - 1][j - v[i]] + w[i]);\n        }\n    }\n    cout &lt;&lt; f[n][m] &lt;&lt; endl;\n    return 0;\n}\n</code></pre> <p>f[i]\u8fd9\u4e00\u5c42\u5728\u66f4\u65b0\u7684\u65f6\u5019\u53ea\u7528\u5230\u4e86f[i - 1]\u5c42\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528\u6eda\u52a8\u6570\u7ec4\u6765\u505a</p> <p>\u6ce8\u610f\u5230\u5728\u66f4\u65b0f[x] [j]\u7684\u65f6\u5019\u7684\u4f53\u79ef\u53ea\u548cj\u6216\u8005j - v[i]\u76f8\u5173</p> <p>\u6ce8\u610f\u5728\u4fee\u6539f[j - v[i]]\u7684\u65f6\u5019\u5982\u679cj\u662f\u4ece\u524d\u5f80\u540e\u6392\u7684\u8bdd\uff0c\u90a3\u4e48\u540e\u9762\u7684f[j]\u7528\u5230\u7684\u5c31\u4e0d\u662f\u539f\u6765\u7684f[j - v[i]]\u4e86\uff0c\u6240\u4ee5\u9700\u8981\u4ece\u540e\u5f80\u524d\u904d\u5386</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_3","title":"\u6eda\u52a8\u6570\u7ec4\u7684\u6982\u5ff5","text":"<p>\u5982\u679c\u4e00\u4e2a\u6570\u7ec4\u4e2d\u4ecef[0]\u5230f[n]\u6bcf\u4e00\u4e2a\u6570\u503c\u90fd\u53ea\u548c\u524d\u4e00\u4e2a\u6570\u6709\u5173\uff0c\u6bd4\u5982f[5]\u53ea\u548cf[4]\u6709\u5173</p> <p>\u8003\u8651\u4e00\u4e0b\u8fd9\u4e2a\u7b49\u5f0f<code>f[n] = f[n - 1] + 2</code></p> <p>\u90a3\u4e48\u5b9e\u9645\u4e0a\u6211\u4eec\u5f00\u6570\u7ec4\u7684\u7a7a\u95f4\u5e76\u4e0d\u9700\u8981\u5f00f[0~n]</p> <p>\u800c\u53ea\u8981\u5f00f[0]\u548cf[1]\u5c31\u884c\uff0c\u7136\u540e\u4e24\u4e2a\u4e4b\u95f4\u4e92\u76f8\u66f4\u65b0</p> <p>\u8fdb\u884c\u6734\u7d20\u7684\u601d\u8003\u8fc7\u7a0b\u6765\u6392\u9664\u4ece\u524d\u5f80\u540e\u8fdb\u884c\u904d\u5386\uff1a</p> <p>v[1] = 2, w[1] = 3</p> <p>v[2]  = 2, w[2] = 6</p> <p>\u6700\u5927\u7684\u5bb9\u91cf\u662f4</p> <p>\u6240\u4ee5\u5982\u679c\u4ece\u524d\u5f80\u540e\u904d\u5386\uff0c\u90a3\u4e48\u7b2c\u4e00\u6b21\u7684\u7ed3\u679c\u662f</p> <p>f[2] = 3, f[4] = 3</p> <p>\u7b2c\u4e8c\u6b21\u7684\u7ed3\u679c\u662f</p> <p>f[2] = 6, f[4] = 12</p> <p>\u800c12\u662f\u660e\u663e\u4e0d\u6b63\u786e\u7684\uff0c\u56e0\u4e3a\u7528\u4e86\u66f4\u65b0\u4e4b\u540e\u7684f[2]\uff08\u5373\u4e8c\u7ef4\u5199\u6cd5\u4e4b\u4e2d\u7684<code>f[i][j - v[i]]</code>\u800c\u4e0d\u662f\u9700\u8981\u7684<code>f[i - 1][j - v[i]]</code>\uff09</p> <p>\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4ece\u540e\u5f80\u524d\u8fdb\u884c\u66f4\u65b0</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_4","title":"\u4e00\u7ef4\u5199\u6cd5","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\n\nconst int N = 1010;\nint n, m;\nint v[N], w[N];\nint f[N]; \n\nint main () {\n    cin &gt;&gt; n &gt;&gt; m;\n    for (int i = 1; i &lt;= n; i ++) cin &gt;&gt; v[i] &gt;&gt; w[i];\n    for (int i = 1; i &lt;= n; i++) {\n        for (int j = m; j &gt;= v[i]; j--) {\n            f[j] = max(f[j], f[j - v[i]] + w[i]);\n        }\n    }\n    cout &lt;&lt; f[m] &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_5","title":"\u5b8c\u5168\u80cc\u5305\u95ee\u9898\uff08\u6bcf\u4ef6\u7269\u54c1\u53ef\u7528\u65e0\u9650\u6b21\uff09","text":"<p>\u5b8c\u5168\u80cc\u5305\u95ee\u9898\u7684\u601d\u8003\u65b9\u5f0f</p> <p>\u72b6\u6001\u8868\u793a\u548c\u72b6\u6001\u8ba1\u7b97\u4e24\u4e2a\u89d2\u5ea6\u8fdb\u884c\u601d\u8003</p> <p>\u72b6\u6001\u8868\u793a\uff1a<code>f[i][j]</code> </p> <p>\u96c6\u5408\uff1a\u6240\u6709\u53ea\u8003\u8651\u524di\u4e2a\u7269\u54c1\uff0c\u4e14\u603b\u4f53\u79ef\u4e0d\u5927\u4e8ej\u7684\u6240\u6709\u9009\u6cd5</p> <p>\u5c5e\u6027\uff1a\u6240\u6709\u9009\u6cd5\u7684\u603b\u4ef7\u503c\u7684\u6700\u5927\u503c</p> <p>\u72b6\u6001\u8ba1\u7b97\uff1a</p> <p>\u96c6\u5408\u7684\u5212\u5206\uff1a</p> <p>\u6309\u7269\u54c1\u6709\u591a\u5c11\u4e2a\u6765\u5206\uff08\u7b2ci\u4e2a\u7269\u54c1\u9009k\u4e2a\u77e5\u9053v[i] * k &lt;= m\uff09</p> <p>\u66f2\u7ebf\u6551\u56fd\uff0c\u4e09\u6b65\u6765\u8d70</p> <ol> <li>\u53bb\u6389k\u4e2a\u7269\u54c1i</li> <li>\u6c42Max(f[i - 1, j - k * v[i]])</li> <li>\u518d\u52a0\u56de\u6765k\u4e2a\u7269\u54c1i</li> </ol>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_6","title":"\u6734\u7d20\u505a\u6cd5\uff08\u4e0d\u63a8\u8350\uff0c\u592a\u6162\u4e86\uff09","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\nconst int N = 1010;\nint n, m;\nint v[N], w[N];\nint f[N][N];\n\nint main () {\n    cin &gt;&gt; n &gt;&gt;m;\n    for (int i = 1; i &lt;= n; i++) cin &gt;&gt; v[i] &gt;&gt; w[i];\n    for (int i = 1; i &lt;= n; i++) {\n        for (int j = 0; j &lt;= m; j++) {\n            for (int k = 0; k * v[i] &lt;= j; k++) {\n                f[i][j] = max(f[i][j], f[i - 1][j - v[i] * k] + w[i] * k);\n            }\n        }\n    }\n    cout &lt;&lt; f[n][m] &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_7","title":"\u4f18\u5316\u6210\u4e24\u7ef4","text":"<p>\u8003\u8651<code>f[i, j] = f[i - 1, j - v[i] * k] + w[i] * k</code></p> <p><code>f[i, j]  = Max(f[i - 1, j], f[i - 1][j - v] + w, f[i - 1][j - 2v] + 2w, ...)</code></p> <p><code>f[i, j - v] = Max(        f[i - 1][j-v], f[i - 1][j - 2v] + w)</code></p> <p>\u6ce8\u610ff[i, j]\u6bd4f[i, j - v]\u591a\u51fa\u4e86w</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\nconst int N = 1010;\nint n, m;\nint v[N], w[N];\nint f[N][N];\n\nint main () {\n    cin &gt;&gt; n &gt;&gt;m;\n    for (int i = 1; i &lt;= n; i++) cin &gt;&gt; v[i] &gt;&gt; w[i];\n    for (int i = 1; i &lt;= n; i++) {\n        for (int j = 0; j &lt;= m; j++) {\n            f[i][j] = f[i - 1][j];\n            if (j &gt;= v[i]) f[i][j] = max(f[i][j], f[i][j - v[i]] + w[i]);\n        }\n    }\n    cout &lt;&lt; f[n][m] &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_8","title":"\u8f6c\u5316\u4e3a\u4e00\u7ef4","text":"<p>\u56e0\u4e3a\u8fd9\u91cc\u5b9e\u9645\u4e0a\u9700\u8981\u5bf9k\u4e2a\u7269\u54c1\u8fdb\u884c\u7d2f\u52a0\u7684</p> <p>\u6240\u4ee5\u8fd9\u91cc\u66f4\u65b0\u7684\u65f6\u5019\u662f\u4ece\u524d\u5f80\u540e\u8fdb\u884c\u66f4\u65b0\u7684</p> <p>\u533a\u522b\u5728\u4e8e01\u80cc\u5305\u95ee\u9898\u662f\u901a\u8fc7f[i - 1]\u8fdb\u884c\u66f4\u65b0\u7684\uff0c\u6240\u4ee5\u4e0d\u80fd\u5148\u66f4\u65b0\u524d\u9762</p> <p>\u800c\u5b8c\u5168\u80cc\u5305\u95ee\u9898\u662f\u901a\u8fc7f[i]\u8fdb\u884c\u66f4\u65b0\u7684\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u4ece\u540e\u5f80\u524d\u8fdb\u884c\u66f4\u65b0</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\nconst int N = 1010;\nint n, m;\nint v[N], w[N];\nint f[N];\n\nint main () {\n    cin &gt;&gt; n &gt;&gt;m;\n    for (int i = 1; i &lt;= n; i++) cin &gt;&gt; v[i] &gt;&gt; w[i];\n    for (int i = 1; i &lt;= n; i++) {\n        for (int j = v[i]; j &lt;= m; j++) {\n            // f[j] = f[j];\n            f[j] = max(f[j], f[j - v[i]] + w[i]);\n        }\n    }\n    cout &lt;&lt; f[m] &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_9","title":"\u591a\u91cd\u80cc\u5305\u95ee\u9898\uff08\u6bcf\u4e2a\u7269\u54c1\u4e2a\u6570\u4e0d\u4e00\u6837\uff09","text":"<p>\u8003\u8651\u4e24\u4e2a\u65b9\u9762</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#fi-j","title":"\u72b6\u6001\u8868\u793a\uff1af[i, j]","text":"<p>\u96c6\u5408\uff1a\u6240\u6709\u53ea\u4ece\u524di\u4e2a\u7269\u54c1\u4e2d\u9009\uff0c\u5e76\u4e14\u603b\u4f53\u79ef\u4e0d\u8d85\u8fc7j\u7684\u9009\u6cd5</p> <p>\u5c5e\u6027\uff1a\u96c6\u5408\u5f53\u4e2d\u6bcf\u4e00\u4e2a\u9009\u6cd5\u5bf9\u5e94\u7684\u603b\u4ef7\u503c\u7684\u6700\u5927\u503c</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_10","title":"\u72b6\u6001\u8ba1\u7b97","text":"<p>\u679a\u4e3e\u4e00\u4e0b\u7b2ci\u4e2a\u7269\u54c1\u9009\u591a\u5c11\u4e2a</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_11","title":"\u6734\u7d20\u505a\u6cd5","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n\nusing namespace std;\nconst int N = 1010;\nint n, m;\nint v[N], w[N], s[N];\nint f[N][N];\n\nint main () {\n    cin &gt;&gt; n &gt;&gt; m;\n    for (int i = 1; i &lt;= n; i++) cin &gt;&gt; v[i] &gt;&gt; w[i] &gt;&gt; s[i];\n    for (int i = 1; i &lt;= n; i++) {\n        for (int j = 0; j &lt;= m; j ++) {\n            for (int k = 0; k &lt;= s[i] &amp;&amp; k * v[i] &lt;= j; k++) {\n                f[i][j] = max(f[i][j], f[i - 1][j - k * v[i]] + w[i] * k);\n            }\n        }\n    }\n    cout &lt;&lt; f[n][m] &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#2","title":"\u591a\u91cd\u80cc\u5305\u95ee\u98982\uff08\u4e8c\u8fdb\u5236\u7ecf\u5178\u4f18\u5316\u7248\uff09","text":"<p>C++\u4e00\u79d2\u949f\u6700\u591a\u7b97\u4e00\u4ebf\u6b21</p> <p>\u6240\u4ee5\u5bf9\u591a\u91cd\u80cc\u5305\u95ee\u9898\u7684\u4f18\u5316\u662f\u5c06\u591a\u79cd\u7269\u54c1\u7684n\u4e2a\u7684\u4e2a\u6570\u62c6\u6210\u591a\u4e2a\u79cd\u7c7b\u7684\u7269\u54c1</p> <p>\u6bd4\u5982\u8f93\u5165\u4e86\u4e00\u4e2a\u4f53\u79ef\u662f2\uff0c\u4ef7\u503c\u662f3\uff0c\u6570\u91cf\u662f9\u7684\u79cd\u7c7b\u7684\u4e1c\u897f\u3001</p> <p>\u90a3\u4e48\u6211\u4eec\u5b9e\u9645\u4e0a\u53ef\u4ee5\u5c06\u4ed6\u4eec\u62c6\u6210\u4f53\u79ef\u3001\u4ef7\u503c\u3001\u6570\u91cf\u5206\u522b\u662f\uff1a</p> <p>2, 3\uff081\uff09</p> <p>4, 6\uff082\uff09</p> <p>8,12\uff084\uff09</p> <p>4, 6\uff082\uff09</p> <p>\u8fd9\u56db\u4e2a\u7ec4\u7684\u7269\u54c1</p> <p>\u7136\u540e\u5bf9\u4ed6\u4eec\u8fdb\u884c01\u80cc\u5305\u95ee\u9898\u7684\u8ba8\u8bba\u5c31\u884c\u4e86</p> <p>\u4f7f\u7528\u7684\u662f\u4e8c\u8fdb\u5236\u5f97\u4f18\u5316\u65b9\u5f0f</p> <p>\u4f7f\u75281, 2, 4, 8, ... , 512\u62fc\u51d1\u51fa\u7269\u54c1\u7684\u6240\u6709\u7684\u65b9\u6848logn\u7684\u505a\u6cd5</p> <p>\u6bd4\u5982200 = 1 + 2 + 4 + 8 + 16 + 32 + 64 + 73</p> <p>\u4e00\u822c\u7684s\uff0c\u5b9e\u73b0\u62c6\u6210logs\u4e2a\u7ec4\uff0c\u7136\u540e\u5bf9\u62c6\u597d\u540e\u7684\u7ec4\u8fdb\u884c01\u80cc\u5305\u95ee\u9898\u7684\u8ba8\u8bba\u5373\u53ef\uff1a</p> <p>1, 2, 4, 8, ...2^k, c</p> <p>\u539f\u6765\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fnvs</p> <p>\u73b0\u5728\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fnvlogs</p> <p>\u4ee3\u7801\uff1a</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\nconst int N = 14000; // \u7ec4\u6570\u7b49\u4e8e1000 * log2000 = 12000\n\nint n, m;\nint v[N], w[N];\nint f[N];\nint main () {\n    cin &gt;&gt; n &gt;&gt; m;\n    int cnt = 0;\n    for (int i = 1; i &lt;= n; i++) {\n        int a, b, s;\n        cin &gt;&gt; a &gt;&gt; b &gt;&gt; s;\n        int k = 1;\n        while(k &lt;= s) {\n            cnt ++;\n            v[cnt] = a * k;\n            w[cnt] = b * k;\n            s -= k;\n            k *= 2;\n        }\n        if (s &gt; 0) {\n            cnt ++;\n            v[cnt] = a * s;\n            w[cnt] = b * s;\n        }\n    }\n    n = cnt;\n    for (int i = 1; i &lt;= n; i++) {\n        for (int j = m; j &gt;= v[i]; j--) {\n            f[j] = max(f[j], f[j - v[i]] + w[i]);\n        }\n    }\n    cout &lt;&lt; f[m] &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#n","title":"\u5206\u7ec4\u80cc\u5305\u95ee\u9898\uff08\u7269\u54c1\u6709n\u7ec4\uff0c\u6bcf\u7ec4\u91cc\u9762\u82e5\u5e72\u4e2a\uff0c\u6bcf\u7ec4\u53ea\u80fd\u9009\u4e00\u4e2a\uff09","text":"<p>\u5206\u7ec4\u80cc\u5305\u95ee\u9898</p> <p>\u72b6\u6001\u8868\u793a<code>f[i][j]</code></p> <p>\u96c6\u5408\uff1a\u53ea\u4ece\u524di\u7ec4\u7269\u54c1\u4e2d\u9009\u4e14\u603b\u4f53\u79ef\u4e0d\u5927\u4e8ej\u7684\u6240\u6709\u9009\u6cd5</p> <p>\u5c5e\u6027\uff1a\u96c6\u5408\u5f53\u4e2d\u6240\u6709\u9009\u6cd5\u4ef7\u503c\u7684\u6700\u5927\u503c</p> <p>\u72b6\u6001\u8ba1\u7b97</p> <p>\u96c6\u5408\u5212\u5206</p> <p>\u679a\u4e3e\u7b2ci\u7ec4\u7269\u54c1\u9009\u54ea\u4e00\u4e2a\u6216\u8005\u4e0d\u9009\uff0c\u5212\u5206\u6210\u4e0d\u9009\u7b2ci\u7ec4\u7684\u7269\u54c1\u3001\u9009\u7b2ci\u7ec4\u7684\u7b2c\u4e00\u4e2a\u7269\u54c1\u3001\u9009\u7b2ci\u7ec4\u7684\u7b2c\u4e8c\u4e2a\u7269\u54c1</p> <p>\u5bf9\u4e8e\u4e0d\u4ece\u91cc\u9762\u9009\u7684\u60c5\u51b5\u6765\u8bf4\uff0c<code>f[i][j] = f[i - 1][j]</code></p> <p>\u5bf9\u4e8e\u9700\u8981\u4ece\u91cc\u9762\u9009\u7684\u60c5\u51b5\u6765\u8bf4\uff0c<code>f[i - 1, j - v[i][k]] + w[i, k]</code></p> <pre><code>#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n\nusing namespace std;\n\nconst int N = 110;\nint n, m;\nint v[N][N], w[N][N], s[N];\nint f[N];\n\nint main () {\n    cin &gt;&gt; n &gt;&gt; m;\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; s[i];\n        for (int j = 0; j &lt; s[i]; j++) {\n            cin &gt;&gt; v[i][j] &gt;&gt; w[i][j];\n        }\n    }\n    for (int i = 1; i &lt;= n; i++) { // i\u8868\u793a\u7b2ci\u7ec4\u7269\u54c1\n        for (int j = m; j &gt;= 0; j--) { // j\u8868\u793a\u5bb9\u91cf\u4e3aj\n            for (int k = 0; k &lt; s[i]; k++) { // k\u8868\u793a\u7b2ck\u4e2a\u7269\u54c1\n                if (v[i][k] &lt;= j) {\n                    f[j] = max(f[j], f[j - v[i][k]] + w[i][k]);\n                }\n            }\n        }\n    }\n\n    cout &lt;&lt; f[m] &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#2-dp","title":"2. \u7ebf\u6027dp","text":"<p>\u4ec0\u4e48\u662f\u7ebf\u6027dp\uff1a\u9012\u63a8\u65b9\u7a0b\u6709\u4e00\u4e2a\u660e\u663e\u7684\u7ebf\u6027\u5173\u7cfb\uff0c\u6709\u53ef\u80fd\u4e00\u7ef4\u7ebf\u6027\u4e5f\u6709\u53ef\u80fd\u4e8c\u7ef4\u7ebf\u6027</p> <p>dp\u6ca1\u6709\u6a21\u677f\uff0c\u6838\u5fc3\u662f\u72b6\u6001\u8868\u793a\u548c\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u4e0a</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_12","title":"\u6570\u5b57\u4e09\u89d2\u5f62","text":"<p>\u4e0b\u6807\u4ece1\u5f00\u59cb\u548c\u4ece0\u5f00\u59cb\u53d6\u51b3\u4e8e\u4f1a\u4e0d\u4f1a\u8c03\u7528\u5230f[i - 1]\uff0c\u5982\u679c\u6709f[i - 1]\u90a3\u4e48\u4e0b\u6807\u4ece1\u5f00\u59cb\u6bd4\u8f83\u597d</p> <p>\u4e09\u89d2\u5f62\u7684\u884c\u6570\u5c31\u662f\u4e00\u5c42\u4e00\u5c42\u5730\u770b\uff0c\u4e09\u89d2\u5f62\u7684\u5217\u6570\u8981\u659c\u7740\u770b</p> <p>\u72b6\u6001\u8868\u793a\uff1a</p> <p>\u96c6\u5408\uff1a\u6240\u6709\u4ece\u8d77\u70b9\u8d70\u5230(i, j) \u7684\u8def\u5f84</p> <p>\u5c5e\u6027\uff1a\u6240\u6709\u8def\u5f84\u4e0a\u6570\u5b57\u4e4b\u548c\u7684\u6700\u5927\u503cMax</p> <p>\u72b6\u6001\u8ba1\u7b97\uff1a\uff08\u6ca1\u6709\u56fa\u5b9a\u65b9\u5f0f\uff0c\u53ea\u6709\u7ecf\u9a8c\uff09</p> <p>f[i, j]\u5206\u6210\u4e24\u7c7b\uff1a\u4ece\u5de6\u4e0a\u6765\u7684\uff0c\u548c\u4ece\u53f3\u4e0a\u65b9\u6765\u7684</p> <p>\u4ece\u5de6\u4e0a\u6765\uff1af[i - 1, j -1] + a[i, j]</p> <p>\u4ece\u53f3\u4e0a\u65b9\u6765\uff1af[i - 1, j] + a[i, j]</p> <p></p> <p>\u52a8\u6001\u89c4\u5212\u95ee\u9898\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e00\u822c\u662f\u72b6\u6001\u6570\u91cf*\u8f6c\u79fb\u7684\u8ba1\u7b97\u91cf</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\nconst int INF = 1e9, N = 510;\nint n;\nint a[N][N];\nint f[N][N];\n\nint main () {\n    scanf(\"%d\", &amp;n);\n    for (int i = 1; i &lt;= n; i++) {\n        for (int j = 1; j &lt;= i; j++) {\n            scanf(\"%d\", &amp;a[i][j]);\n        }\n    }\n\n    for (int i = 0; i &lt;= n; i++) {\n        for (int j = 0; j &lt;= n; j++) {\n            f[i][j] = -INF;\n        }\n    }\n    f[1][1] = a[1][1];\n    for (int i = 2; i &lt;= n; i++) {\n        for (int j = 1; j &lt;= i; j++) {\n            f[i][j] = max(f[i - 1][j -1] + a[i][j], f[i - 1][j] + a[i][j]);\n        }\n    }\n    int res = -INF;\n    for (int i = 1; i &lt;= n; i++) res = max(res, f[n][i]);\n    printf(\"%d\\n\", res);\n    return 0;\n\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_13","title":"\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217","text":"<p>\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n^2)</p> <p>\u601d\u8003\u95ee\u9898\u7ef4\u5ea6\u7684\u65f6\u5019\u8981\u4ece\u5c0f\u5f80\u5927\u8003\u8651</p> <p>\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e2a\u9898\u76ee\u4e00\u7ef4\u6570\u7ec4\u5c31\u53ef\u8868\u793a\u51fa\u6765</p> <p>\u72b6\u6001\u8868\u793a</p> <p>\u96c6\u5408\uff1a\u6240\u6709\u4ee5\u7b2ci\u4e2a\u6570\u7ed3\u5c3e\u7684\u6570\u503c\u4e0a\u5347\u7684\u5b50\u5e8f\u5217\u7684\u96c6\u5408</p> <p>\u6bd4\u5982\uff1a3121856\u8fd9\u4e2a\u5e8f\u5217\u4e2d\uff0cf[5]\u5c31\u662f\u6240\u6709\u4ee58\u7ed3\u5c3e\u7684\u4e0a\u5347\u5b50\u5e8f\u5217\uff1a18  28  38  128</p> <p>\u5c5e\u6027\uff1a\u96c6\u5408\u91cc\u6bcf\u4e00\u4e0a\u5347\u5b50\u5e8f\u5217\u957f\u5ea6\u7684\u6700\u5927\u503c</p> <p>\u72b6\u6001\u8ba1\u7b97\uff1a</p> <p>\u96c6\u5408\u5212\u5206\uff1a\u4ee5\u4e0a\u5347\u5e8f\u5217\u4e2di\u524d\u9762\u90a3\u4e2a\u6570\u6765\u5206\u7c7b\uff0c\u6240\u4ee5\u5c31\u67091-i-1\u79cd\u5206\u7c7b</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n\nusing namespace std;\nconst int N = 1000;\nint n;\nint a[N], f[N];\n\nint main () {\n    scanf(\"%d\", &amp;n);\n    for (int i = 1; i &lt;= n; i++) scanf(\"%d\", &amp;a[i]);\n\n    for (int i = 1; i &lt;= n; i++) {\n        f[i] = 1;\n        for (int j = 1; j &lt; i; j++) {\n            if (a[i] &gt; a[j]) {\n                f[i] = max(f[i], f[j] + 1);\n            }\n        }\n    }\n    int res = 1;\n    for (int i = 1; i &lt;= n; i++) {\n        res = max(res, f[i]);\n    }\n    cout &lt;&lt; res &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#2_1","title":"\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u52172","text":""},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_14","title":"\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217","text":"<p>\u6ce8\u610f\u662f\u5b57\u7b26\u4e32\u7684\u516c\u5171\u5b50\u5e8f\u5217\uff0c\u4e0d\u662f\u5355\u8c03\u9012\u589e\u7684\u6570\u5b57</p> <p>\u72b6\u6001\u8868\u793a\uff1a\u4e24\u7ef4\u6570\u7ec4</p> <p>\u96c6\u5408\uff1af[i, j]\u6240\u6709\u5728\u7b2c\u4e00\u4e2a\u5e8f\u5217\u7684\u524di\u4e2a\u5b57\u6bcd\u51fa\u73b0\uff0c\u4e14\u5728\u7b2c\u4e8c\u4e2a\u5e8f\u5217\u7684\u524dj\u4e2a\u5b57\u6bcd\u4e2d\u51fa\u73b0\u7684\u516c\u5171\u5b50\u5e8f\u5217</p> <p>\u5c5e\u6027\uff1a\u6240\u6709\u8fd9\u4e9b\u5b50\u5e8f\u5217\u7684max</p> <p>\u72b6\u6001\u8ba1\u7b97\uff1a\u662f\u4ee5a[i] b[j]\u662f\u5426\u5305\u542b\u5728\u5b50\u5e8f\u5217\u5f53\u4e2d\u6765\u4f5c\u4e3a\u5212\u5206\u7684\u4f9d\u636e\uff0c\u4e00\u5171\u662f4\u79cd\u60c5\u51b5</p> <p>\u90fd\u4e0d\u5305\u542b\uff1af[i -1, j -1] \u4f46\u662f\u5b9e\u9645\u4e0a\u8fd9\u79cd\u60c5\u51b5\u4ee3\u7801\u4e2d\u4e0d\u7528\u5199\uff0c\u56e0\u4e3a\u88ab\u5305\u542b\u5728\u4e86\u4e2d\u95f4\u4e24\u79cd\u7684\u60c5\u51b5\u91cc\u4e86</p> <p>f[i -1, j]</p> <p>f[i, j -1]</p> <p>\u90fd\u5305\u542bf[i - 1, j - 1] + 1</p> <p>\u6ce8\u610f\u4ee5\u4e0a\u56db\u4e2a\u96c6\u5408\u662f\u6709\u91cd\u5408\u7684\uff0c\u4e3b\u8981\u662f\u4e2d\u95f4\u4e24\u4e2a\u96c6\u5408\u662f\u6709\u91cd\u5408\u7684\uff0c\u4f46\u662f\u6c42max\u7684\u65f6\u5019\u662f\u53ef\u4ee5\u91cd\u5408\u7684\uff0c\u4f46\u4e0d\u80fd\u6f0f</p> <p><code>f[n][m]</code>\u8868\u793a\u540c\u65f6\u5728a\u4e2d\u524dn\u4e2a\u5b57\u6bcd\u548cb\u4e2d\u524dm\u4e2a\u5b57\u6bcd\u4e2d\u51fa\u73b0\u7684\u6700\u957f\u7684\u5b50\u5e8f\u5217</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\nconst int N = 1010;\nint n, m;\nchar a[N], b[N];\nint f[N][N];\n\nint main () {\n    cin &gt;&gt; n &gt;&gt; m;\n    scanf(\"%s%s\", a + 1, b + 1);\n    for (int i = 1; i &lt;= n; i++) {\n        for (int j = 1; j &lt;= m; j++) {\n            f[i][j] = max(f[i - 1][j], f[i][j - 1]);\n            if (a[i] == b[j]) f[i][j] = max(f[i][j], f[i - 1][j - 1] + 1);\n            printf(\"%c %c %d\\n\", a[i], b[j], f[i][j]); // \u53ef\u4ee5\u901a\u8fc7\u8fd9\u79cd\u65b9\u6cd5\u6765\u770b\u8fc7\u7a0b\n        }\n    }\n    printf(\"%d\\n\", f[n][m]); \n    return 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_15","title":"\u6700\u77ed\u7f16\u8f91\u8ddd\u79bb","text":"<p>\u52a8\u6001\u89c4\u5212\u65f6\u95f4\u590d\u6742\u5ea6\u4f4e\u7684\u539f\u56e0\u662f\u53ef\u4ee5\u7528\u4e00\u4e2a\u6570\u53bb\u8868\u793a\u4e00\u5806\u72b6\u6001\uff0c\u6240\u4ee5\u6bd4\u8f83\u5feb</p> <p>\u72b6\u6001\u8868\u793a\uff1a</p> <p>\u96c6\u5408\uff1a\u6240\u6709\u5c06a[1-i]\u7684\u53d8\u6210b[1-j]\u7684\u6240\u6709\u64cd\u4f5c\u65b9\u6cd5</p> <p>\u5c5e\u6027\uff1a\u64cd\u4f5c\u6b21\u6570\u6700\u5c0f\u503c</p> <p>\u72b6\u6001\u8ba1\u7b97\uff1af[i, j]</p> <p>\u5206\u7c7b\uff1a</p> <p>\u64cd\u4f5c\u4e00\uff1a\u5220\u9664a[i]</p> <p>\u628aa[i] \u5220\u6389\u624d\u80fd\u5339\u914d</p> <p><code>f[i - 1, j] + 1</code></p> <p>\u64cd\u4f5c\u4e8c\uff1a\u589e\u52a0\u4e00\u4e2a\u5b57\u7b26</p> <p><code>f[i][j - 1] + 1</code></p> <p>\u64cd\u4f5c\u4e09\uff1a\u6539\u4e00\u4e2a\u5b57\u7b26\uff08\u8fd9\u4e2a\u60c5\u51b5\u4e2d\u4e5f\u5305\u542b\u4e86\u4e0d\u6539\u5b57\u7b26\uff09</p> <p>\u5982\u679c\u662f\u6539\u4e00\u4e2a\u5b57\u7b26\uff0c\u5c31\u76f8\u5f53\u4e8e\u4e24\u4e2a\u5b57\u7b26\u4e32\u5404\u81ea\u524d\u9762\u7684\u76f8\u4e92\u5339\u914d</p> <p>f[i - 1, j - 1] + 1\uff08\u9700\u8981\u6539\u5b57\u7b26\uff09\u6216\u8005+0\uff08\u4e0d\u8bb8\u8981\u6539\u5b57\u7b26\uff09</p> <p>\u6240\u4ee5<code>f[i, j] = min(f[i - 1, j] + 1, f[i, j - 1] + 1, f[i - 1, j - 1] + 1 / 0)</code></p> <p>\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u8ba1\u7b97\uff1a\u72b6\u6001\u6570\u91cf\u662fn^2 \u6bcf\u6b21\u8ba1\u7b973\u4e2a\u6570\u5373\u53ef\uff0c\u6240\u4ee5O(n ^ 2)</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_16","title":"\u7f16\u8f91\u8ddd\u79bb","text":""},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/","title":"\u7b2c\u4e00\u8bb2 \u57fa\u7840\u7b97\u6cd5","text":"<p>\u4e00\u9053\u9898\u91cd\u590d\u4e09\u5230\u4e94\u6b21\u5c31\u80fd\u6709\u5f88\u597d\u7684\u8bb0\u5fc6\u4e86\uff0c\u8bfe\u4e0a\u4e3b\u8981\u7406\u89e3\u601d\u60f3</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#_2","title":"\u6392\u5e8f","text":""},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#_3","title":"\u5feb\u901f\u6392\u5e8f","text":"<p>\u5feb\u901f\u6392\u5e8f\u7684\u53ea\u8981\u5b9e\u73b0\u65b9\u6cd5\u662f\u540c\u4e00\u4e2a\u6570\u7ec4\u4e4b\u5185\u5927\u5c0f\u6570\u7684\u76f4\u63a5\u4e92\u76f8\u4ea4\u6362</p> <p>\u4e3b\u8981\u601d\u60f3\uff1a<code>\u5206\u6cbb</code></p> <ol> <li>\u786e\u5b9a\u5206\u754c\u70b9\uff1aq[l], q[(l+r)/ 2], q[r]</li> <li>\u8c03\u6574\u533a\u95f4\uff0c\u4f7f\u5f97\u7b2c\u4e00\u4e2a\u533a\u95f4\u91cc\u7684\u6570\u90fd\u5c0f\u4e8e\u7b49\u4e8ex\uff0c\u4f7f\u5f97\u53f3\u8fb9\u533a\u95f4\u7684\u6570\u90fd\u5927\u4e8e\u7b49\u4e8ex</li> <li>\u9012\u5f52\uff1a\u9012\u5f52\u5904\u7406\u5de6\u53f3\u4e24\u6bb5</li> </ol> <p>\u4f18\u7f8e\u7684\u505a\u6cd5\uff1a\u4e0d\u9700\u8981\u5f00\u8f9f\u989d\u5916\u7a7a\u95f4</p> <p>\u4f7f\u7528\u53cc\u6307\u9488\uff1aswap\u4e24\u8fb9\u540c\u65f6\u5411\u4e2d\u95f4\u8bfb\u53d6\u7684\u90a3\u4e2a\u4e0d\u7b26\u5408\u7684\u6570\u5b57</p> <p>\u60f3\u6cd5\uff1a\u4efb\u610f\u65f6\u523b\uff0ci\u6307\u9488\u5de6\u8fb9\u7684\u503c\u90fd\u662f<code>\u5c0f\u4e8e</code>i\u7684\uff08\u5fc5\u987b\u662f\u5c0f\u4e8e\uff09\uff0cj\u6307\u9488\u540e\u8fb9\u7684\u503c\u90fd\u662f<code>\u5927\u4e8e</code>j\u7684\uff1b\u5206\u522b\u79fb\u52a8\uff0c\u7b49\u5230\u4ed6\u4eec\u4e24\u4e2a\u4e92\u76f8\u8d8a\u8fc7\uff0c\u5c31\u80fd\u4f7f\u6574\u4e2a\u6570\u7ec4\u6392\u5217\u5b8c\u6574</p> <p>\u51e1\u662f\u8981\u5904\u7406\u8fb9\u754c\u95ee\u9898\u7684\u7b97\u6cd5\uff0c\u6700\u597d\u90fd\u80cc\u8fc7\u4e00\u4e2a\u6a21\u677f\u5373\u53ef\uff0c\u8fd9\u6837\u53ef\u4ee5\u4fdd\u8bc1\u6ca1\u6709\u95ee\u9898</p> <p>\u8003\u8bd5\u7684\u65f6\u5019\u6ca1\u6709\u5145\u8db3\u7684\u65f6\u95f4\u53bb\u8003\u8651\u8fb9\u754c\u95ee\u9898\u7684 </p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#785","title":"785. \u5feb\u901f\u6392\u5e8f\u4ee3\u7801\u6a21\u677f","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nconst int N = 1e6 + 10;\nint n;\nint q[N];\n\nvoid quick_sort(int q[], int l, int r) {\n    if (l &gt;= r) return;\n    int x = q[l + r &gt;&gt; 1], i = l - 1, j = r + 1;\n    while (i &lt; j) {\n        do i++; while (q[i] &lt; x);\n        do j--; while (q[j] &gt; x);\n        if (i &lt; j) swap(q[i], q[j]);\n    }\n    quick_sort(q, l, j);\n    quick_sort(q, j + 1, r); \n} \n\nint main () {\n    scanf(\"%d\", &amp;n);\n    for (int i = 0; i &lt; n; i ++) scanf(\"%d\", &amp;q[i]);\n    quick_sort(q, 0, n - 1);\n    for (int i = 0; i &lt; n; i ++) printf(\"%d \", q[i]);\n    return 0;\n}\n</code></pre> <p>\u9762\u8bd5\u7684\u65f6\u5019\u4f1a\u624b\u5199\u5feb\u6392\uff0c\u5305\u62ec\u5b66\u957f\u4e5f\u63d0\u5230\u4e86\u9762\u8bd5\u7684\u65f6\u5019\u4f1a\u5199\u5feb\u901f\u6392\u5e8f</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#_4","title":"\u5feb\u901f\u9009\u62e9\u7b97\u6cd5","text":""},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#acwing-786-k","title":"AcWing 786. \u7b2ck\u4e2a\u6570","text":"<p>\u4f7f\u7528\u5feb\u901f\u9009\u62e9\u7b97\u6cd5\uff0c\u5feb\u901f\u9009\u62e9\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fOn</p> <p>\u8fb9\u754c\u6cd5\u5219\uff1a</p> <p>\u7531\u4e8e\u9664\u6cd5\u7684\u4f4d\u8fd0\u7b97\u662f\u5411\u4e0b\u53d6\u6574\uff0c\u6240\u4ee5\u5728\u9012\u5f52\u7684\u65f6\u5019\uff0c(l, j)\u5bf9\u5e94\u4e24\u79cdint x\u5199\u6cd5\u5373<code>int x = q[l + r &gt;&gt; 1]</code>\u548c<code>int x = q[l]</code></p> <p>\u800c(l, i - 1)\u53ea\u80fd\u5bf9\u5e94<code>int x = q[r]</code></p> <pre><code>// \u5feb\u901f\u9009\u62e9\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fOn\n// \u5feb\u901f\u9009\u62e9\u662f\u5728\u5feb\u901f\u6392\u5e8f\u7684\u57fa\u7840\u4e0a\u6539\u8fdb\u7684\n#include &lt;iostream&gt;\nusing namespace std;\nconst int N = 100010;\nint n, k;\nint q[N];\n\nint quick_sort(int l, int r, int k) {\n    if (l == r) return q[l];\n    int x = q[l], i = l - 1, j = r + 1;\n    while (i &lt; j) {\n        while (q[++i] &lt; x);\n        while (q[--j] &gt; x);\n        if (i &lt; j) swap(q[i], q[j]);\n    }\n\n    int sl = j - l + 1;\n    if (k &lt;= sl) return quick_sort(l, j, k);\n    return quick_sort(j+1, r, k - sl);\n}\n\nint main () {\n    cin &gt;&gt; n &gt;&gt; k;\n    for (int i = 0; i &lt; n; i++) cin &gt;&gt; q[i];\n    cout &lt;&lt; quick_sort(0, n-1, k) &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#_5","title":"\u5f52\u5e76\u6392\u5e8f","text":"<p>\u5f52\u5e76\u6392\u5e8f\u7684\u4e3b\u8981\u5b9e\u73b0\u65b9\u6cd5\u662f\u5c06\u4e24\u4e2a\u6570\u7ec4\u4e2d\u7684\u6570\u6309\u5927\u5c0f\u4f9d\u6b21\u653e\u5230\u7b2c\u4e09\u4e2a\u6570\u7ec4\u5f53\u4e2d\u53bb\uff0c\u5408\u5e76\u94fe\u8868\u4e5f\u662f\u8fd9\u4e2a\u601d\u60f3</p> <p>\u5f52\u5e76\u6392\u5e8f\u7684\u7b97\u6cd5\u662f\u7a33\u5b9a\u7684\uff1a\u6307\u539f\u5e8f\u5217\u4e2d\u4e24\u4e2a\u76f8\u540c\u7684\u503c\u5728\u6392\u5e8f\u540e\u987a\u5e8f\u4e0d\u4f1a\u53d1\u751f\u53d8\u5316\uff0c\u5feb\u6392\u662f\u4e0d\u7a33\u5b9a\u7684</p> <p>\u5f52\u5e76\u6392\u5e8f\u7684\u4e3b\u8981\u601d\u60f3\u4e5f\u662f\u5206\u6cbb</p> <p>\u5feb\u6392\u662f\u4ee5\u4e00\u4e2a\u6570\u6765\u5206\u7684\uff0c\u800c\u5f52\u5e76\u662f\u6309\u7167\u6574\u4e2a\u6570\u7ec4\u7684\u6700\u4e2d\u95f4\u6765\u5206\u7684\uff08\u5f52\u5e76\u662f\u4e0b\u6807\u7684\u4e2d\u95f4\u503c\uff0c\u800c\u5feb\u6392\u662f\u6570\u7ec4\u91cc\u968f\u673a\u4e00\u4e2a\u503c\u90fd\u884c\uff09</p> <p>\u5feb\u6392\u662f\u5148\u6392\u5e8f\u518d\u9012\u5f52\uff0c\u5f52\u5e76\u662f\u5148\u9012\u5f52\uff0c\u56e0\u4e3a\u9700\u8981\u4fdd\u8bc1\u4e0a\u5c42\u5f52\u5e76\u7684\u65f6\u5019\u4e24\u4e2a\u6570\u7ec4\u5fc5\u987b\u8981\u4ece\u5c0f\u5230\u5927\u6392\u5217</p> <p>\u5feb\u6392\u548c\u5f52\u5e76\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662fn longn</p> <p>\u6bcf\u5c42\u90fd\u662fn\uff0c\u7136\u540e\u4e00\u5171log2n\u5c42</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#787","title":"787. \u5f52\u5e76\u6392\u5e8f\u4ee3\u7801\u6a21\u677f","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nconst int N = 1e6 + 10;\nint n;\nint q[N], tmp[N];\n\nvoid merge_sort(int q[], int l, int r) {\n    if (l &gt;= r) return;\n    int mid = (l + r) &gt;&gt; 1;\n    merge_sort(q, l, mid), merge_sort(q, mid + 1, r);\n    int k = 0, i = l, j = mid + 1;\n    while (i &lt;= mid &amp;&amp; j &lt;= r) {\n        if (q[i] &lt;= q[j]) tmp[k++] = q[i++];\n        else tmp[k++] = q[j++];\n    }\n    while (i &lt;= mid) tmp[k++] = q[i++];\n    while (j &lt;= r) tmp[k++] = q[j++];\n    for (int i = l, j = 0; i &lt;= r; i++, j++) q[i] = tmp[j];\n}\n\nint main () {\n    scanf(\"%d\", &amp;n);\n    for (int i = 0; i &lt; n; i++) scanf(\"%d\", &amp;q[i]);\n    merge_sort(q, 0, n -1);\n    for (int i = 0; i &lt; n; i++) printf(\"%d \", q[i]);\n\n    return 0;\n}\n</code></pre> <p>\u5f52\u5e76\u6392\u5e8f\u3001\u5feb\u901f\u6392\u5e8f\u548csort\u5e93\u51fd\u6570\u5dee\u4e0d\u591a\u5feb</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#788","title":"788. \u9006\u5e8f\u5bf9\u7684\u6570\u91cf","text":"<pre><code>//\u4e3b\u8981\u601d\u60f3\u662f\u53f3\u8fb9\u7684\u6570\u4e00\u65e6\u6bd4\u5de6\u8fb9\u7684\u67d0\u4e2a\u6570\u5c0f\uff0c\u90a3\u4e48\u5de6\u8fb9\u540e\u9762\u7684\u6570\u4e00\u5b9a\u4f1a\u5927\u4e8e\u53f3\u8fb9\u7684\u90a3\u4e2a\u6570\n#include &lt;iostream&gt;\nusing namespace std;\nconst int N = 1e5 + 10;\nint n;\nint q[N], temp[N];\n\nlong long merge_count (int q[], int l, int r) {\n    if (l == r) return 0;\n    int mid = (l + r) &gt;&gt; 1;\n    long long ans = merge_count(q, l, mid) + merge_count(q, mid + 1, r);\n    int i = l, j = mid + 1, k = 0;\n    while (i &lt;= mid &amp;&amp; j &lt;= r) {\n        if (q[i] &lt;= q[j]) temp[k++] = q[i++];\n        else { \n            ans += mid - i + 1;\n            temp[k++] = q[j++];\n        }\n    }\n    while (i &lt;= mid) temp[k++] = q[i++];\n    while (j &lt;= r) temp[k++] = q[j++];\n    for (int i = l, j = 0; i &lt;= r; i++, j++) q[i] = temp[j];\n    return ans;\n}\n\nint main () {\n    cin &gt;&gt; n;\n    for (int i = 0; i &lt; n; i++) scanf(\"%d\", &amp;q[i]);\n\n    cout &lt;&lt; merge_count(q, 0, n- 1) &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#_6","title":"\u4e8c\u5206","text":""},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#_7","title":"\u6574\u6570\u4e8c\u5206","text":"<p>\u6709\u5f88\u591a\u8fb9\u754c\u95ee\u9898\uff0c\u5199\u5f97\u4e0d\u597d\u4f1a\u53d1\u751f\u6b7b\u5faa\u73af</p> <p>\u4e8c\u5206\u7684\u672c\u8d28\u5e76\u4e0d\u662f\u5355\u8c03\u6027\uff0c\u800c\u662f\u8fb9\u754c</p> <p>\u5b9a\u4e00\u4e2a\u5206\u754c\u7ebf\uff08\u65e0\u91cd\u5408\u70b9\uff09\uff0c\u4e24\u8fb9\u7684\u6027\u8d28\u4e0d\u4e00\u6837\u5373\u53ef</p> <p>\u4e8c\u5206\u53ef\u4ee5\u5bfb\u627e\u6027\u8d28\u7684\u8fb9\u754c</p> <p>\u5982\u679c\u6709\u5355\u8c03\u6027\u7684\u8bdd\uff0c\u4e00\u5b9a\u53ef\u4ee5\u4e8c\u5206\uff1b\u4f46\u662f\u53ef\u4ee5\u4e8c\u5206\u7684\u9898\u76ee\uff0c\u4e0d\u4e00\u5b9a\u9700\u8981\u5355\u8c03\u6027</p> <p>\u627e\u5230\u4e00\u4e2a\u6027\u8d28\u5c06\u533a\u95f4\u4e00\u5206\u4e3a\u4e8c\uff0c\u5de6\u534a\u8fb9\u4e0d\u7b26\u5408\uff0c\u6709\u534a\u8fb9\u7b26\u5408\uff0c\u800c\u4e8c\u5206\u53ef\u4ee5\u5bfb\u627e\u8fd9\u4e2a\u6027\u8d28\u7684\u8fb9\u754c </p> <p>\u505a\u4e8c\u5206\u95ee\u9898\uff0c\u5148\u5199\u4e00\u4e2acheck\uff0c(l = mid\u65f6\u524d\u9762mid+1\u5373\u53ef)</p> <p>\u4e8c\u5206\u6a21\u677f\u4e00\u5171\u6709\u4e24\u4e2a\uff0c\u5206\u522b\u9002\u7528\u4e8e\u4e0d\u540c\u60c5\u51b5\u3002 \u7b97\u6cd5\u601d\u8def\uff1a\u5047\u8bbe\u76ee\u6807\u503c\u5728\u95ed\u533a\u95f4[l, r]\u4e2d\uff0c \u6bcf\u6b21\u5c06\u533a\u95f4\u957f\u5ea6\u7f29\u5c0f\u4e00\u534a\uff0c\u5f53l = r\u65f6\uff0c\u6211\u4eec\u5c31\u627e\u5230\u4e86\u76ee\u6807\u503c\u3002</p> <p>\u4e8c\u5206\u95ee\u9898\u6a21\u677f\u7684\u9009\u62e9\u662f\u901a\u8fc7\u5148\u5199check\u51fd\u6570\u6765\u51b3\u5b9a\u7684</p> <p>\u5bf9\u4e8e\u662f\u5426\u8981\u52a01\u7684\u601d\u8003\u662f\u901a\u8fc7\u770br\u53ea\u6bd4l\u59271\u7684\u60c5\u51b5\u4e0b\uff0c\u662f\u5426\u4f1a\u53d1\u751f\u6b7b\u5faa\u73af</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#1","title":"\u7248\u672c1","text":"<p>\u5f53\u6211\u4eec\u5c06\u533a\u95f4[l, r]\u5212\u5206\u6210[l, mid]\u548c[mid + 1, r]\u65f6\uff0c\u5176\u66f4\u65b0\u64cd\u4f5c\u662fr = mid\u6216\u8005l = mid + 1;\uff0c\u8ba1\u7b97mid\u65f6\u4e0d\u9700\u8981\u52a01\u3002</p> <pre><code>int bsearch_1(int l, int r)\n{\n    while (l &lt; r)\n    {\n        int mid = l + r &gt;&gt; 1;\n        if (check(mid)) r = mid;\n        else l = mid + 1;\n    }\n    return l;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#2","title":"\u7248\u672c2","text":"<p>\u5f53\u6211\u4eec\u5c06\u533a\u95f4[l, r]\u5212\u5206\u6210[l, mid - 1]\u548c[mid, r]\u65f6\uff0c\u5176\u66f4\u65b0\u64cd\u4f5c\u662fr = mid - 1\u6216\u8005l = mid;\uff0c\u6b64\u65f6\u4e3a\u4e86\u9632\u6b62\u6b7b\u5faa\u73af\uff0c\u8ba1\u7b97mid\u65f6\u9700\u8981\u52a01\u3002</p> <pre><code>int bsearch_2(int l, int r)\n{\n    while (l &lt; r)\n    {\n        int mid = l + r + 1 &gt;&gt; 1;\n        if (check(mid)) l = mid;\n        else r = mid - 1;\n    }\n    return l;\n}\n</code></pre> <p>\u5373\uff1a(l = mid\u65f6\u524d\u9762mid+1\u5373\u53ef)</p> <pre><code>bool check(int x) {/* ... */} // \u68c0\u67e5x\u662f\u5426\u6ee1\u8db3\u67d0\u79cd\u6027\u8d28\n\n// \u533a\u95f4[l, r]\u88ab\u5212\u5206\u6210[l, mid]\u548c[mid + 1, r]\u65f6\u4f7f\u7528\uff1a\nint bsearch_1(int l, int r)\n{\n    while (l &lt; r)\n    {\n        int mid = l + r &gt;&gt; 1;\n        if (check(mid)) r = mid;    // check()\u5224\u65admid\u662f\u5426\u6ee1\u8db3\u6027\u8d28\n        else l = mid + 1; // \u8fd9\u4e2a+1\u662f\u56e0\u4e3a\u5224\u65ad\u65f6\u662f\u5355\u7eaf\u7684\u5c0f\u4e8e\uff0c\u6ca1\u53d6\u5230\u7b49\u53f7\n    }\n    return l;\n}\n// \u533a\u95f4[l, r]\u88ab\u5212\u5206\u6210[l, mid - 1]\u548c[mid, r]\u65f6\u4f7f\u7528\uff1a\nint bsearch_2(int l, int r)\n{\n    while (l &lt; r)\n    {\n        int mid = l + r + 1 &gt;&gt; 1;\n        if (check(mid)) l = mid;\n        else r = mid - 1;\n    }\n    return l;\n}\n</code></pre> <p>\u4e3a\u4ec0\u4e48\u8981\u8865\u4e0a+1\uff1f\uff1a</p> <ol> <li>c++\u6574\u6570\u9664\u6cd5\u662f\u4e0b\u53d6\u6574</li> <li>\u5047\u8bbel\u53ea\u6bd4r\u5c0f1\uff0c l = r - 1\uff0c\u90a3\u4e48\u770b(l+r) / 2 = l</li> <li>\u5982\u679ccheck\u6210\u529f\u90a3\u4e48l = mid = l\uff0c\u7b49\u4e8e\u6ca1\u53d8\uff0c\u4f1a\u9677\u5165\u6b7b\u5faa\u73af</li> </ol> <p>\u4e8c\u5206\u662f\u7528\u6765\u6c42\u8fb9\u754c\u7684\uff0c\u8fd9\u9053\u9898\u7684\u7279\u5f81\u662f\u5bfb\u627e\u5de6\u53f3\u4e24\u4e2a\u8fb9\u754c</p> <p>\u4e8c\u5206\u4e00\u5b9a\u4f1a\u51fa\u4e00\u4e2a\u7ed3\u679c\uff0c\u4f46\u662f\u7ed3\u679c\u5e76\u4e0d\u4e00\u5b9a\u8c01\u9898\u76ee\u8981\u6c42\u7684</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#789","title":"789. \u6570\u7684\u8303\u56f4","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nconst int N = 100010;\nint n, m;\nint q[N];\n\nint main () {\n    scanf(\"%d%d\", &amp;n, &amp;m);\n    for (int i = 0; i &lt; n; i++) scanf(\"%d\", &amp;q[i]);\n    while (m--) {\n        int x;\n        scanf(\"%d\", &amp;x);\n        int l = 0, r = n - 1;\n        while (l &lt; r) {\n            int mid = (r + l) &gt;&gt; 1;\n            if (q[mid] &gt;= x) r = mid;\n            else l = mid + 1; // \u8fd9\u4e2a+1\u662f\u56e0\u4e3a\u5224\u65ad\u65f6\u662f\u5355\u7eaf\u7684\u5c0f\u4e8e\uff0c\u6ca1\u53d6\u5230\u7b49\u53f7\n        }\n        // \u5faa\u73af\u5230\u6700\u540el \u4e00\u5b9a\u7b49\u4e8e r\uff0c\u800c\u5982\u679c\u6ca1\u6709\u4e8c\u5206\u51fa\u6765\uff0c\u53d6\u51fa\u7684\u503c\u4e5f\u80af\u5b9a\u4e0d\u662fx\n        if (q[l] != x) cout &lt;&lt; \"-1 -1\" &lt;&lt; endl;\n        else {\n            cout &lt;&lt; l &lt;&lt; ' ';\n            int l = 0, r = n -1;\n            while (l &lt; r) {\n                int mid = (r + l + 1) &gt;&gt; 1;\n                if (q[mid] &lt;= x) l = mid;\n                else r = mid - 1;\n            }\n            cout &lt;&lt; l &lt;&lt; endl;\n        }\n    }\n    return 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#_8","title":"\u6d6e\u70b9\u6570\u4e8c\u5206","text":"<p>\u6d6e\u70b9\u6570\u4e8c\u5206\u56e0\u4e3a\u6ca1\u6709\u6574\u9664\u8fd9\u4e2a\u4e1c\u897f\uff0c\u6240\u4ee5\u76f4\u63a5\u5c31\u80fd\u505a</p> <p>\u5f53r - l &lt; 1e-6\u7684\u65f6\u5019\u5c31\u53ef\u4ee5r\u548cl\u662f\u4e00\u4e2a\u6570\u4e86</p> <p>\u8fd9\u4e2a\u7cbe\u5ea6\u503c\u81f3\u5c11\u8981\u6bd4\u7ed3\u679c\u7684\u6709\u6548\u4f4d\u6570\u591a2\uff0c\u6bd4\u5982\u4fdd\u75595\u4f4d\u5c0f\u6570\uff0c\u5c31\u9700\u8981r - l &lt; 1e-7</p> <pre><code>bool check(double x) {/* ... */} // \u68c0\u67e5x\u662f\u5426\u6ee1\u8db3\u67d0\u79cd\u6027\u8d28\n\ndouble bsearch_3(double l, double r)\n{\n    const double eps = 1e-6;   // eps \u8868\u793a\u7cbe\u5ea6\uff0c\u53d6\u51b3\u4e8e\u9898\u76ee\u5bf9\u7cbe\u5ea6\u7684\u8981\u6c42\n    while (r - l &gt; eps)\n    {\n        double mid = (l + r) / 2;\n        if (check(mid)) r = mid;\n        else l = mid;\n    }\n    return l;\n}\n</code></pre> <p>\u6c42\u5e73\u65b9\u6839\uff1a</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main () {\n    double x;\n    cin &gt;&gt; x;\n    double l = 0, r = x;\n    while (r - l &gt; 1e-8) { // \u76f4\u63a5\u5faa\u73af100\u6b21\u4e5f\u662f\u76f8\u540c\u7684\u6548\u679c\n        double mid = (l + r) / 2;\n        if (mid * mid &gt;= x) r = mid;\n        else l = mid;\n    }\n    printf(\"%lf\\n\", l);\n    return 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#790","title":"790. \u6570\u7684\u4e09\u6b21\u65b9\u6839","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main () {\n    double n;\n    cin &gt;&gt; n;\n    double l = -10000, r = 10000;\n    while (r - l &gt;= 1e-7) {\n        double mid = (l + r) / 2;\n        if (mid * mid * mid &gt; n) r = mid;\n        else l = mid;\n    }\n    printf(\"%.6lf\\n\", l);\n    return 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#_9","title":"\u9ad8\u7cbe\u5ea6","text":"<p>\u53ea\u6709c++\u9700\u8981\u9ad8\u7cbe\u5ea6\uff0cjava\u548cpython\u7528\u4e0d\u5230</p> <p>java\u6709\u5927\u6574\u6570\u7c7b\uff0cpython\u662f\u81ea\u5e26\u7684</p> <p>\u7b14\u8bd5\u5076\u5c14\u51fa\u73b0\u7684</p> <p>\u9ad8\u7cbe\u5ea6</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#_10","title":"\u9ad8\u7cbe\u5ea6\u52a0\u6cd5","text":"<p>\u5b58\u6570\u5b57\u65b9\u6cd5\uff1a\u7b2c0\u4f4d\u5b58\u4e2a\u4f4d</p> <p>123456789 \u5b58\u6210\u6570\u7ec4\u53d8\u6210987654321\uff0c\u56e0\u4e3a\u4f1a\u6709\u8fdb\u4f4d</p> <p>\u9ad8\u7cbe\u5ea6\u52a0\u6cd5\u8fd0\u7b97\u662f\u4e2a\u6a21\u62df\u4eba\u5de5\u52a0\u6cd5\u7684\u8fc7\u7a0b</p> <p>\u4e00\u822c\u4e60\u60ef\u7528vector\u6765\u8868\u793a\u5927\u6574\u6570\uff0c\u56e0\u4e3a\u81ea\u5e26size\u8fd9\u4e2a\u51fd\u6570\u8868\u793a\u6570\u7ec4\u7684\u957f\u5ea6</p> <p>\u4e0d\u7528\u539f\u751f\u6570\u7ec4\u7684\u539f\u56e0\u662f\u6709\u53ef\u80fd\u4f1a\u6709\u8fdb\u4f4d\uff0c\u8fdb\u4f4d\u4e4b\u540e\u7684\u6570\u7ec4\u957f\u5ea6\u5c31\u4e0d\u80fd\u786e\u5b9a\u4e86</p> <p>\u52a0\u4e0a\u5f15\u7528\u662f\u4e3a\u4e86\u63d0\u9ad8\u6548\u7387\uff0c\u5982\u679c\u4e0d\u52a0\u5f15\u7528\u7684\u8bdd\uff0c\u8fd9\u4e2a\u51fd\u6570\u5c31\u4f1a\u628a\u6574\u4e2a\u6570\u7ec4\u62f7\u8d1d\u4e00\u904d</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nvector&lt;int&gt; add(vector&lt;int&gt; &amp;A, vector&lt;int&gt; &amp;B) { //\u52a0\u4e0a\u5f15\u7528\u662f\u4e3a\u4e86\u63d0\u9ad8\u6548\u7387\uff0c\u5982\u679c\u4e0d\u52a0\u5f15\u7528\u7684\u8bdd\uff0c\u8fd9\u4e2a\u51fd\u6570\u5c31\u4f1a\u628a\u6574\u4e2a\u6570\u7ec4\u62f7\u8d1d\u4e00\u904d\n    vector&lt;int&gt; C;\n    int carry = 0;\n    for (int i = 0; i &lt; A.size() || i &lt; B.size(); i++) {\n        if (i &lt; A.size()) carry += A[i];\n        if (i &lt; B.size()) carry += B[i];\n        C.push_back(carry % 10);\n        carry /= 10;\n    }\n    if (carry) C.push_back(1);\n    return C;\n}\n\nint main () {\n    string a, b; // (\"123456\")\n    cin &gt;&gt; a &gt;&gt; b;\n    vector&lt;int&gt; A, B;\n    for (int i = a.size() - 1; i &gt;= 0; i--) A.push_back(a[i] - '0'); // \u8fd9\u91cc\u662fchar\u7c7b\u578b\u7684\u6570\u5b57\uff0c-'0'\u8ba9\u4ed6\u53d8\u6210\u771f\u6b63\u7684int\n    for (int i = b.size() - 1; i &gt;= 0; i--) B.push_back(b[i] - '0'); //\u4ece\u540e\u5411\u524d\uff0c\u53d8\u6210'123456'\n    vector&lt;int&gt; C = add(A, B);\n    for (int i = C.size() - 1; i &gt;= 0; i--) printf(\"%d\", C[i]);\n    return 0;\n}\n</code></pre> <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\nvector&lt;int&gt; add (vector&lt;int&gt; &amp;A, vector&lt;int&gt; &amp;B) {\n    int carry = 0;\n    vector&lt;int&gt; C;\n    for (int i = 0; i &lt; A.size() || i &lt; B.size(); i++) {\n        if (i &lt; A.size()) carry += A[i];\n        if (i &lt; B.size()) carry += B[i];\n        C.push_back(carry % 10);\n        carry /= 10;\n    }\n    if (carry) C.push_back(1);\n    return C;\n}\n\nint mian () {\n    string a, b;\n    cin &gt;&gt; a &gt;&gt; b;\n    vector&lt;int&gt; A, B;\n    for (int i = a.size() - 1; i &gt;= 0; i--) A.push_back(a[i] - \"0\");\n    for (int i = b.size() - 1; i &gt;= 0; i--) B.push_back(b[i] - \"0\");\n    vector&lt;int&gt; C = add(A, B);\n    for (int i = 0; i &lt; C.size(); i++) printf(\"%d\", C[i]);\n    return 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#_11","title":"\u9ad8\u7cbe\u5ea6\u51cf\u6cd5\uff08\u6709\u5f88\u591a\u7ec6\u8282\uff09","text":"<p>\u5927\u6574\u6570\u7684\u5b58\u50a8\u683c\u5f0f\u662f\u4e00\u81f4\u7684</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nbool cmp (vector&lt;int&gt; &amp;a, vector&lt;int&gt; &amp;b) {\n    if (a.size() != b.size()) return a.size() &gt; b.size();\n    for (int i = a.size() - 1; i &gt;= 0; i--) {\n        if (a[i] != b[i]) return a[i] &gt; b[i];\n    }\n    return true;\n}\n\nvector&lt;int&gt; sub(vector&lt;int&gt; &amp;a, vector&lt;int&gt; &amp;b) {\n    vector&lt;int&gt; c;\n\n    for (int i = 0, carry = 0; i &lt; a.size(); i++) {\n        carry = a[i] - carry;\n        // cout &lt;&lt; carry &lt;&lt; endl;\n        if (i &lt; b.size()) carry -= b[i];\n        // cout &lt;&lt; carry &lt;&lt; endl;\n        c.push_back((carry + 10) % 10);\n        if (carry &lt; 0) carry = 1;\n        else carry = 0;\n        // cout &lt;&lt; carry &lt;&lt; endl;\n    }\n    while(c.size() &gt; 1 &amp;&amp; c.back() == 0) c.pop_back();\n    return c;\n}\n\nint main () {\n    string num1, num2; // 12, 123\n    cin &gt;&gt; num1 &gt;&gt; num2;\n    vector&lt;int&gt; a, b;\n    for (int i = num1.size() - 1; i &gt;= 0; i--) a.push_back(num1[i] - '0'); // 21\n    for (int i = num2.size() - 1; i &gt;= 0; i--) b.push_back(num2[i] - '0'); // 321\n\n    if (cmp(a, b)) {\n        vector&lt;int&gt; c = sub(a, b);\n        for (int i = c.size() - 1; i &gt;= 0; i--) printf(\"%d\", c[i]);\n    } else {\n        vector&lt;int&gt; c = sub(b, a);\n        printf(\"-\");\n        for (int i = c.size() - 1; i &gt;= 0; i--) printf(\"%d\", c[i]);\n    }\n    return 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#_12","title":"\u9ad8\u7cbe\u5ea6\u4e58\u6cd5","text":"<p>\u6ce8\u610f\u8fd9\u9053\u9898\u91cc\u9762A\u5f88\u5927\uff0cB\u5f88\u5c0f</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nvector&lt;int&gt; mul(vector&lt;int&gt; &amp;a, int b) {\n    vector&lt;int&gt; c;\n    for (int i = 0, carry = 0; i &lt; a.size() || carry; i++) {\n        if (i &lt; a.size()) carry = a[i] * b + carry;\n        c.push_back(carry % 10);\n        carry /= 10;\n    }\n    while(c.size() &gt; 1 &amp;&amp; c.back() == 0) c.pop_back();\n    return c;\n}\n\nint main () {\n    string num1;\n    int b;\n    cin &gt;&gt; num1 &gt;&gt; b;\n    vector&lt;int&gt; a;\n    for (int i = num1.size() - 1; i &gt;= 0; i--) a.push_back(num1[i] - '0');\n    vector&lt;int&gt; c = mul(a, b);\n    for (int i = c.size() - 1; i &gt;= 0; i--) printf(\"%d\", c[i]);\n    return 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#_13","title":"\u9ad8\u7cbe\u5ea6\u9664\u6cd5","text":"<p>reverse\u51fd\u6570\u9700\u8981# <p>\u4f59\u6570\u662f\u901a\u8fc7\u5728\u5b9a\u4e49function\u7684\u65f6\u5019\u4f20\u56de\u53bb\u7684</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\n\nvector&lt;int&gt; div(vector&lt;int&gt; &amp;A, int b, int &amp;r) { \n    vector&lt;int&gt; C;\n    r = 0;\n    for (int i = A.size() - 1; i &gt;= 0; i--) {\n        r = r * 10 + A[i];\n        C.push_back(r/b);\n        r %= b;\n    }\n    reverse(C.begin(), C.end());\n    while(C.size() &gt; 1 &amp;&amp; C.back() == 0) C.pop_back();\n    return C;\n}\n\nint main () {\n    string a;\n    int b;\n    cin &gt;&gt; a &gt;&gt; b;\n    vector&lt;int&gt; A;\n    for (int i = a.size() - 1; i &gt;= 0; i--) A.push_back(a[i] - '0');\n    int r;\n    auto C = div(A, b, r);\n    for (int i = C.size() - 1; i &gt;= 0; i --) printf(\"%d\", C[i]);\n    cout &lt;&lt; endl &lt;&lt; r &lt;&lt; endl;\n    return 0;\n}\n</code></pre> <p>A1 = 123 r = 4</p> <p>1234 = a1 * 10 + r</p> <p>\u81ea\u5df1\u7684\u65b9\u6cd5\uff1a</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\n\nvector&lt;int&gt; div(vector&lt;int&gt; &amp;a, int &amp;b, int &amp;r) {\n    vector&lt;int&gt; c;\n    r = 0;\n    for (int i = 0; i &lt; a.size(); i++) {\n        r = r * 10 + a[i];\n        // cout &lt;&lt; r &lt;&lt; endl;\n        if (r &gt;= b) c.push_back(r / b);\n        else c.push_back(0);\n        // cout &lt;&lt; r &lt;&lt; endl;\n        r %= b;\n    }\n    while(c.size() &gt; 1 &amp;&amp; c.front() == 0) c.erase(c.begin());\n    return c;\n}\n\nint main () {\n    string a; // 123\n    int b, r; // b = 11 \n    cin &gt;&gt; a &gt;&gt; b;\n    vector&lt;int&gt; A;\n    for (int i = 0; i &lt; a.size(); i++) A.push_back(a[i] - '0'); // 123\n    vector&lt;int&gt; c = div(A, b, r);\n    for (int i = 0; i &lt; c.size(); i++) printf(\"%d\", c[i]);\n    cout &lt;&lt; endl &lt;&lt; r &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#_14","title":"\u524d\u7f00\u548c\u4e0e\u5dee\u5206","text":"<p>\u524d\u7f00\u548c\u5c31\u662f\u6570\u5217\u7684\u524dn\u9879\u4e4b\u548c</p> <p>\u524d\u7f00\u548c\uff0c\u6709\u4e2a\u957f\u5ea6\u4e3an\u7684\u6570\u7ec4</p> <p>\u524d\u7f00\u548c\u6570\u7ec4si\u5b9a\u4e49\u6210\u539f\u6570\u7ec4\u91cc\u7684\u524di\u4e2a\u6570\u7ec4\u800c\u4e14\u6570\u7ec4\u662f\u4ece1\u5f00\u59cb\u7684</p> <p>\u4e0b\u6807\u4ece1\u5f00\u59cb\u662f\u4e3a\u4e86\u80fd\u5b9a\u4e49s0</p> <p>[1, 10] s10 - s0</p> <p>s0\u5b9a\u4e49\u62100</p> <p>\u6574\u4e2a\u65f6\u95f4\u590d\u6742\u5ea6\u662fO1</p> <ol> <li>\u5982\u4f55\u6c42si</li> </ol> <pre><code>for (int i = 1; i &lt; n; i++)\n  s[i] = s[i - 1] + ai\n</code></pre> <ol> <li>\u524d\u7f00\u548csi\u7684\u4f5c\u7528</li> </ol> <p>\u80fd\u5feb\u901f\u6c42\u51fa\u539f\u6570\u7ec4\u4e2d\u4e00\u6bb5\u6570\u7684\u548c</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#795","title":"795. \u524d\u7f00\u548c","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n#include &lt;vector&gt;\nusing namespace std;\nconst int N = 100010;\nint n, m; // \u53ef\u4ee5\u5c06s0\u76f4\u63a5\u521d\u59cb\u5316\u4e3a1\nint a[N], s[N];\n\n\nint main () {\n    scanf(\"%d%d\", &amp;n, &amp;m);\n    for (int i = 1; i &lt;= n; i++) scanf(\"%d\", &amp;a[i]);\n    for (int i = 1; i &lt;= n; i++) s[i] = s[i - 1] + a[i];\n    while (m -- ) {\n        int l, r;\n        scanf(\"%d%d\", &amp;l, &amp;r);\n        printf(\"%d\\n\", s[r] - s[l - 1]);\n    }\n    return 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#_15","title":"\u4e8c\u7ef4\u524d\u7f00\u548c","text":"<p>\u5feb\u901f\u6c42\u67d0\u4e2a\u5b50\u77e9\u9635\u7684\u548c</p> <p>sij \u8868\u793aaij\u53ca\u5176\u5de6\u4e0a\u89d2\u6240\u6709\u5143\u7d20\u7684\u548c</p> <p>\u6c42\u548c\uff1a(X1, y1) (x2, y2)    sx2y2 - sx2y1-1 - Sx1-1y2 + sx1-1y1-1</p> <p>x\u662f\u884c\uff0cy\u662f\u5217</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#acwing-796","title":"AcWing 796. \u5b50\u77e9\u9635\u7684\u548c","text":"<pre><code>for (int i : 1-n) \n  for(int j :1-n)\n    sij = si-1j + sij-1 - si-1j-1+aij\n</code></pre> <pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nconst int N= 1010;\nint n, m, q;\nint a[N][N], s[N][N];\nint main () {\n    scanf(\"%d%d%d\", &amp;n, &amp;m, &amp;q);\n    for (int i = 1; i &lt;= n; i++) {\n        for (int j = 1; j &lt;= m; j++) {\n            scanf(\"%d\", &amp;a[i][j]);\n        }\n    }\n\n    for (int i = 1; i &lt;= n; i++) {\n        for (int j = 1; j &lt;= m; j ++) {\n            s[i][j] = s[i - 1][j] + s[i][j - 1] - s[i - 1][j - 1] + a[i][j];\n        }\n    }\n    while (q--) {\n        int x1, x2, y1, y2;\n        scanf(\"%d%d%d%d\", &amp;x1, &amp;y1, &amp;x2, &amp;y2);\n        printf(\"%d\\n\", s[x2][y2]- s[x1-1][y2]- s[x2][y1-1] + s[x1-1][y1-1]);\n    }\n    return 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#_16","title":"\u5dee\u5206","text":"<p>\u5dee\u5206\u662f\u524d\u7f00\u548c\u7684\u9006\u8fd0\u7b97</p> <p>\u6784\u9020b\u6570\u7ec4b1\\b2\uff0c\u4f7f\u5f97ai = b1 + ... bi\uff0ca\u662fb\u7684\u524d\u7f00\u548c</p> <p>\u65b9\u6cd5\uff1ab1=a1</p> <p>B2 = a2 - a1</p> <p>b3 = a3 - a2</p> <p>b\u662fa\u7684\u5dee\u5206\uff0ca\u662fb\u7684\u524d\u7f00\u548c</p> <p>\u53ef\u4ee5\u5047\u5b9aan\u5168\u662f0\uff0c\u7136\u540e\u8fdb\u884c\u63d2\u5165</p> <p>\u5982\u679c\u6570\u7ec4A\u662fB\u7684\u524d\u7f00\u548c\uff0c\u5219B\u662fA\u7684\u5dee\u5206\u3002 \u6211\u4eec\u6784\u9020\u4e00\u4e2a\u6570\u7ec4\u7684\u5dee\u5206\u77e9\u9635\uff0c\u662f\u4e3a\u4e86\u9488\u5bf9\u9891\u7e41\u7684\u5bf9\u6570\u7ec4\u4e2d\u67d0\u4e2a\u533a\u95f4\u8fdb\u884c\u540c\u4e00\u64cd\u4f5c\u3002\u4f8b\u5982\u5c06\u5e8f\u5217\u4e2d[l, r]\u4e4b\u95f4\u7684\u6bcf\u4e2a\u6570\u52a0\u4e0ac\u8fd9\u4e00\u64cd\u4f5c\uff0c\u53ef\u80fd\u6267\u884cn\u6b21\uff0c\u6bcf\u6b21\u7684c\u4e0d\u540c\uff0c\u5982\u679c\u5bf9\u539f\u6570\u7ec4\u8fdb\u884c\u64cd\u4f5c\uff0c\u6bcf\u6b21\u64cd\u4f5c\u90fd\u4f1a\u82b1\u8d39O(n)\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002\u5982\u679c\u4f7f\u7528\u8be5\u6570\u7ec4\u7684\u5dee\u5206\u6570\u7ec4\u8fdb\u884c\u64cd\u4f5c\uff0c\u6bcf\u6b21\u64cd\u4f5c\u4e3aO(1)\u3002\u7136\u540e\u6c42\u5dee\u5206\u6570\u7ec4\u7684\u524d\u7f00\u548c\u5373\u4e3a\u6240\u6c42\u7ed3\u679c\u3002</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#acwing-797","title":"AcWing 797. \u5dee\u5206","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nconst int N = 100010;\nint n, m;\nint a[N], b[N];\nvoid insert(int l, int r, int c) {\n    b[l] += c;\n    b[r + 1] -= c;\n}\n\nint main () {\n    scanf(\"%d%d\", &amp;n, &amp;m);\n    for (int i = 1; i &lt;= n; i++) scanf(\"%d\", &amp;a[i]);\n    for (int i = 1; i &lt;= n; i++) insert(i, i, a[i]);\n    while (m--) {\n        int l, r, c;\n        scanf(\"%d%d%d\", &amp;l, &amp;r, &amp;c);\n        insert(l, r, c);\n    }\n    for (int i = 1; i &lt;= n; i++) b[i] += b[i-1];\n    for (int i = 1; i &lt;= n; i++) printf(\"%d \", b[i]);\n\n    return 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#_17","title":"\u4e8c\u7ef4\u5dee\u5206","text":"<p>x\u662f\u884c\uff0cy\u662f\u5217</p> <p>\u7ed9\u5b9a\u4e00\u4e2aa\u6570\u7ec4\uff0c\u73b0\u5728\u5047\u60f3\u4e00\u4e2ab\u6570\u7ec4\u662fa\u6570\u7ec4\u7684\u524d\u7f00\u548c</p> <p>\u7ed9\u4e00\u4e2a\u77e9\u9635\u52a0c</p> <p>Bx1y1 += c</p> <p>bx2+1y1 -=c</p> <p>bx1y2+1 -= c</p> <p>bx2+1y2+1 += c</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#acwing-798","title":"AcWing 798. \u5dee\u5206\u77e9\u9635","text":"<p>\u5bf9\u4e8e\u5dee\u5206\u662f\u4e0d\u9700\u8981\u8003\u8651\u5982\u4f55\u6784\u9020\u5dee\u5206\u6570\u7ec4\u7684</p> <p>\u53ea\u8981\u5c06\u6bcf\u4e00\u4e2aa[i]\u770b\u6210\u662f\u5bf9(i, i)\u4f4d\u7f6e\u7684a[i]\u6570\u503c\u7684\u63d2\u5165\u5373\u53ef</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\nconst int N = 1010;\nint n, m, q;\nint a[N][N], b[N][N];\n\nvoid insert (int x1, int y1, int x2, int y2, int c) {\n    b[x1][y1] += c;\n    b[x2 + 1][y1] -= c;\n    b[x1][y2 + 1] -= c;\n    b[x2 + 1][y2 + 1] += c;\n}\n\nint main () {\n    scanf(\"%d%d%d\", &amp;n, &amp;m, &amp;q);\n    for (int i = 1; i &lt;= n; i++)\n        for (int j = 1; j &lt;= m; j++)\n            scanf(\"%d\", &amp;a[i][j]);\n    for (int i = 1; i &lt;= n; i++)\n        for (int j = 1; j &lt;= m; j++)\n            insert(i, j, i, j, a[i][j]);\n\n    while(q--) {\n        int x1, y1, x2, y2, c;\n        cin &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2 &gt;&gt; c;\n        insert(x1, y1, x2, y2, c);\n    }\n    for (int i = 1; i &lt;= n; i++ ) {\n        for (int j = 1; j &lt;= m; j++) {\n            b[i][j] += b[i - 1][j] + b[i][j - 1] - b[i - 1][j - 1];\n        }\n    }\n    for (int i = 1; i &lt;= n; i++) {\n        for (int j = 1; j &lt;= m; j++) printf(\"%d \", b[i][j]);\n        puts(\"\");\n    }\n    return 0;\n}\n</code></pre> <pre><code>void insert (int x1, int y1, int x2, int y2, int c) {\n    b[x1][y1] += c;\n    b[x1][y2 + 1] -= c;\n    b[x2 + 1][y1] -= c;\n    b[x2 + 1][y2 + 1] += c;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#_18","title":"\u53cc\u6307\u9488\u7b97\u6cd5","text":"<p>\u5f52\u5e76\u6392\u5e8f\u4e2d\u5408\u5e76\u5e8f\u5217\u7528\u7684\u5c31\u662f\u53cc\u6307\u9488\u7b97\u6cd5</p> <p>\u7b2c\u4e00\u7c7b\uff1a\u4e24\u4e2a\u6307\u9488\u6307\u5411\u4e24\u4e2a\u5e8f\u5217</p> <p>\u7b2c\u4e8c\u5927\u7c7b\uff1a\u4e24\u4e2a\u6307\u9488\u6307\u5411\u4e00\u4e2a\u5e8f\u5217\uff0c\u6bd4\u5982\u5feb\u6392\u7684\u8fc7\u7a0b</p> <p>\u4ee3\u7801\u7ed3\u6784\u4e00\u822c\u662f:</p> <pre><code>for (int i = 0, j = 0; i &lt; n; i++) {\n  while(j &lt; i &amp;&amp; check(i,j)) j++;\n}\n</code></pre> <p>\u6700\u6838\u5fc3\u7684\u6027\u8d28\u662f\u53ef\u4ee5\u4f18\u5316\u66b4\u529b\u505a\u6cd5\uff08\u4e24\u4e2a\u5d4c\u5957\u5faa\u73afO(n ^ 2)\uff09\u7684\u590d\u6742\u5ea6</p> <p>\u7528\u4e24\u4e2a\u6307\u9488\u626b\u63cf\u4e00\u4e2a\u5e8f\u5217\u7684\u590d\u6742\u5ea6\u662fO(n)</p> <p>KMP\u4e5f\u662f\u53cc\u6307\u9488\u7b97\u6cd5</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#_19","title":"\u4f8b\u9898\uff1a\u8f93\u51fa\u5b57\u7b26\u4e32\u4e2d\u6bcf\u4e2a\u7528\u7a7a\u683c\u9694\u5f00\u7684\u5355\u8bcd","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;string.h&gt;\nusing namespace std;\nconst int N = 10000;\nint main () {\n    char str[N];\n    fgets(str, N, stdin);\n//    printf(\"%s\", str);\n    int n = strlen(str);\n    for (int i = 0; i &lt; n; i++) {\n        int j = i;\n        while (j &lt; n &amp;&amp; str[j] != ' ') j++;\n        for (int k = i; k &lt; j; k++) printf(\"%c\", str[k]);\n        cout &lt;&lt; endl;\n        i = j; // \u56e0\u4e3a\u6bcf\u4e2a\u5faa\u73af\u7ed3\u675f\u4e4b\u540e\u90fd\u6709i++\uff0c\u6240\u4ee5\u53ea\u8981i = j\u5373\u53ef\n    }\n    return 0;\n}\n</code></pre> <p>\u53ea\u8981\u80fd\u5c06\u66b4\u529b\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u4e3an^2\u7684\u60c5\u51b5\u964d\u5230n\uff0c\u5c31\u53ef\u4ee5\u88ab\u770b\u6210\u53cc\u6307\u9488\u7b97\u6cd5</p> <p>### \u6700\u957f\u8fde\u7eed\u4e0d\u91cd</p> <p>\u53cc\u6307\u9488\u7684\u7b97\u6cd5\u53ef\u4ee5\u4ece\u66b4\u529b\u7684\u601d\u8def\u5f00\u59cb\u601d\u8003</p> <p>j\u7684\u542b\u4e49\uff1a\u5f80\u5de6\u6700\u8fdc\u80fd\u5230\u4ec0\u4e48\u5730\u65b9</p> <p>\u53cc\u6307\u9488\u7b97\u6cd5\uff1aO(n)</p> <pre><code>for (int i = 0, j = 0; i &lt; n; i ++) {\n  while (j &lt;= i &amp;&amp; check(i, j)) j++;\n  res = max(res, i - j + 1);\n}\n</code></pre> <p>\u8fd9\u9053\u9898\u7684check\u5f00\u4e2a\u6570\u7ec4\u52a8\u6001\u8bb0\u5f55\u5f53\u524d\u6570\u7ec4\u4e2d\u6bcf\u4e2a\u6570\u51fa\u73b0\u4e86\u591a\u5c11\u6b21</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\nconst int N = 100010;\nint a[N], s[N];\nint main () {\n    int n;\n    scanf(\"%d\", &amp;n);\n    for (int i = 0; i &lt; n; i++) cin &gt;&gt; a[i];\n    int res = 0;\n    for (int i = 0, j = 0; i &lt; n; i++) {\n        s[a[i]]++; // \u6ce8\u610f\u8fd9\u91cc\u65b0\u7684\u6570\u7ec4\u6765\u8bb0\u5f55\u91cd\u590d\u7684\u4e2a\u6570\uff0c\u975e\u5e38\u7cbe\u5999\n        while(s[a[i]] &gt; 1) {\n            s[a[j]]--;\n            j++;\n        }\n        res = max(res, i - j + 1);\n    }\n    cout &lt;&lt; res;\n    return 0;\n}\n</code></pre> <p>\u53e6\u5916\u5f00\u4e00\u4e2a\u6570\u7ec4\u6765\u8bb0\u5f55\u4e00\u6bb5\u6570\u4e2d\u91cd\u590d\u7684\u4e2a\u6570\uff0c\u975e\u5e38\u7cbe\u9ad3</p> <p>\u53cc\u6307\u9488\u7684\u601d\u8def\u90fd\u662f\u5148\u66b4\u529b\u505a\uff0c\u7136\u540e\u518d\u628a\u65f6\u95f4\u590d\u6742\u5ea6\u964d\u4e0b\u6765</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#800","title":"800.\u6570\u7ec4\u5143\u7d20\u7684\u76ee\u6807\u548c","text":"<pre><code>// \u548c\u7eaf\u66b4\u529b\u7b97\u6cd5\u7684\u533a\u522b\u5728\u4e8e\uff0c\u5176\u4e2d\u4e00\u4e2a\u6307\u9488\u4e0d\u4f1a\u56de\u9000\n#include &lt;iostream&gt;\nusing namespace std;\nconst int N = 100010;\nint a[N], b[N];\n\nint main () {\n    int n, m, x;\n    scanf(\"%d%d%d\", &amp;n, &amp;m, &amp;x);\n    for (int i = 0; i &lt; n; i++) scanf(\"%d\", &amp;a[i]);\n    for (int i = 0; i &lt; m; i++) scanf(\"%d\", &amp;b[i]);\n    for (int i = 0, j = m - 1; i &lt; n; i++) {\n        while(a[i] + b[j] &gt; x) j--;\n        if (a[i] + b[j] == x) printf(\"%d %d\\n\", i, j);\n    }\n    return 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#2816","title":"2816.\u5224\u65ad\u5b50\u5e8f\u5217","text":"<p>\u6211\u81ea\u5df1\u7684\u505a\u6cd5\uff1a\u5f88\u590d\u6742\u5f88\u7e41\u6742</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\nconst int N = 100010;\nint a[N], b[N];\n\nint main () {\n    int n, m;\n    cin &gt;&gt; n &gt;&gt; m;\n    for (int i = 0; i &lt; n; i++) cin &gt;&gt; a[i];\n    for (int i = 0; i &lt; m; i++) cin &gt;&gt; b[i];\n    for (int i = 0, j = 0; i &lt; n &amp;&amp; j &lt; m; i++, j++) {\n        // cout &lt;&lt; \"dd1\" &lt;&lt; endl;\n        while(b[j] != a[i] &amp;&amp; j &lt; m - 1) {\n            j ++;\n            // cout &lt;&lt; \"oops\";\n            // cout &lt;&lt; \"dd2\" &lt;&lt; endl;\n        }\n        // cout &lt;&lt; \"dd3\" &lt;&lt; endl;\n        if (i == n - 1) {\n            if (a[i] == b[j]) {\n                cout &lt;&lt; \"Yes\";\n                break;\n            } else {\n                cout &lt;&lt;  \"No\";\n                break;\n            }\n        } \n        if (j == m - 1) {\n            if (i == n - 1) {\n                cout &lt;&lt; \"Yes\";\n                break;\n            } else {\n                cout &lt;&lt; \"No\";\n                break;\n            }\n        } \n        // cout &lt;&lt; i &lt;&lt; j &lt;&lt; endl;\n        // cout &lt;&lt; a[i] &lt;&lt; b[j]&lt;&lt; endl;\n    }\n\n    return 0;\n}\n</code></pre> <p>\u7b80\u6d01\u505a\u6cd5</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\nconst int N = 100010;\nint a[N], b[N];\nint main () {\n    int n, m;\n    cin &gt;&gt; n &gt;&gt;m;\n    for (int i = 0; i &lt; n; i++) cin &gt;&gt; a[i];\n    for (int i = 0; i &lt; m; i++) cin &gt;&gt; b[i];\n    int i = 0;\n    for (int j = 0; j &lt; m; j ++) {\n        if (i &lt; n &amp;&amp; a[i] == b[j]) i++;\n    }\n    if (i == n) {\n        puts(\"Yes\");\n    } else {\n        puts(\"No\");\n    }\n    return 0;\n}\n</code></pre> <p>\u7b80\u4ecb\u505a\u6cd52</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\nconst int N = 100010;\nint a[N], b[N];\n\nint main () {\n    int n, m;\n    cin &gt;&gt; n &gt;&gt; m;\n    for (int i = 0; i &lt; n; i++) cin &gt;&gt; a[i];\n    for (int i = 0; i &lt; m; i++) cin &gt;&gt; b[i];\n    int i = 0, j = 0;\n    while(i &lt; n &amp;&amp; j &lt; m) {\n        if (a[i] == b[j]) i++;\n        j++;\n    }\n    if (i == n) puts(\"Yes\");\n    else puts(\"No\");\n\n    return 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#_20","title":"\u4f4d\u8fd0\u7b97","text":"<p>\u6700\u5e38\u7528\u7684\u4f4d\u8fd0\u7b97\u7684\u64cd\u4f5c\uff1a</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#nk0-15-1111","title":"n\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d\u4ece\u53f3\u5f80\u5de6\u7b2ck\u4f4d\uff08\u4ece0\u4f4d\u5f00\u59cb\u7b97\uff09\u662f\u51e0 15 (1111)","text":"<p>\u5148\u628a\u7b2ck\u4f4d\u6570\u5b57\u79fb\u5230\u6700\u540e\u4e00\u4f4d\uff0c\u4f7f\u7528\u4f4d\u79fb\u8fd0\u7b97\uff0cn &gt;&gt; k</p> <p>\u770b\u4e0b\u4e2a\u4f4d\u662f\u51e0\uff0cx &amp; 1</p> <p>\u548c\u5728\u4e00\u8d77\uff0c\u5373<code>n &gt;&gt; k &amp; 1</code></p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#101010","title":"\u4f8b\uff1a\u5c0610\u7684\u4e8c\u8fdb\u5236\u6570\u5b57\u8f93\u51fa\u51fa\u6765\uff081010\uff09\u4f7f\u7528\u4f4d\u8fd0\u7b97","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main () {\n    int x = 10;\n    for (int k = 3; k &gt;= 0; k--) cout &lt;&lt; (x &gt;&gt; k &amp; 1) &lt;&lt; \" \";\n    return 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#low-bit","title":"low bit\u64cd\u4f5c","text":"<p>\u4ed6\u662f\u6811\u72b6\u6570\u7ec4\u7684\u57fa\u672c\u64cd\u4f5c</p> <p>Lowbit(x)\u4f5c\u7528\u662f\u8fd4\u56dex\u7684\u6700\u540e\u4e00\u4f4d1</p> <p>x = 1010 lowbot(x) \u8fd4\u56de10</p> <p>x = 101000 \u8fd4\u56de1000</p> <p>\u5b9e\u73b0\u7684\u65b9\u6cd5\u662fx &amp; -x = x &amp; (~x + 1)</p> <p>\u4e00\u4e2a\u6574\u6570\u7684\u8d1f\u6570\u5c31\u662f\u539f\u6570\u7684\u8865\u7801\uff0c\u800c\u8865\u7801\u662f\u53d6\u53cd+1</p> <p>\u8d1f\u7684x\u5c31\u662fx\u53d6\u53cd+1</p> <p>-x = ~x + 1</p> <p>lowbit\u7684\u4f5c\u7528\u662f\u5f97\u5230x\u7684\u4e8c\u8fdb\u5236\u4e2d\u6709\u591a\u5c11\u4e2a1</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#1_1","title":"\u4e8c\u8fdb\u5236\u4e2d1\u7684\u4e2a\u6570","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nconst int N = 100010;\nint a[N];\n\nint lowbit(int x) {\n    return x &amp; -x;\n} \n\nint main () {\n    int n;\n    cin &gt;&gt; n;\n    for (int i = 0; i &lt; n; i++) {\n        int x;\n        int res = 0;\n        cin &gt;&gt; x;\n        while (x) x -= lowbit(x), res++; \n        cout &lt;&lt; res &lt;&lt; \" \";\n    }\n\n\n    return 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#_21","title":"\u539f\u7801\u3001\u53cd\u7801\u3001\u8865\u7801","text":"<p>\u539f\u7801x = 1010</p> <p>\u53cd\u7801x = 0101</p> <p>\u8865\u7801 0110\u8865\u7801\u7b49\u4e8e\u53cd\u7801+ 1</p> <p>\u8ba1\u7b97\u673a\u5e95\u5c42\u5b9e\u73b0\u4e2d\u662f\u6ca1\u6709\u51cf\u6cd5\u7684</p> <pre><code>int n = 10;\nunsigned int x = -n;\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#_22","title":"\u79bb\u6563\u5316","text":"<p>\u7279\u6307\u6574\u6570\u7684\u79bb\u6563\u5316</p> <p>\u6709\u5e8f\u7684\u3001\u4fdd\u5e8f\u7684\u79bb\u6563\u5316</p> <p>a[]: 1, 3, 100, 2000, 5000000</p> <p>\u53ef\u4ee5\u5c06a[]\u6620\u5c04\u52300, 1, 2, 3, 4</p> <ol> <li>a[]\u4e2d\u53ef\u80fd\u91cd\u590d\u7684\u5143\u7d20\uff0c\u53ef\u4ee5\u53bb\u91cd</li> <li>\u5982\u4f55\u7b97\u51fax\u79bb\u6563\u5316\u540e\u7684\u503c\uff0c\u4e8c\u5206</li> </ol> <p>Unique() \u4f5c\u7528\u662f\u5c06\u4e0d\u91cd\u590d\u7684\u6570\u5b57\u653e\u5230\u524d\u9762\uff0c\u5c06\u91cd\u590d\u7684\u6570\u5b57\u653e\u5728\u540e\u9762\uff0c\u7136\u540e\u8fd4\u56de\u7b2c\u4e00\u4e2a\u91cd\u590d\u6570\u5b57\u7684\u4f4d\u7f6e</p> <pre><code>vector&lt;int&gt; alls; // \u5b58\u50a8\u6240\u6709\u5f85\u79bb\u6563\u5316\u7684\u503c\nsort(alls.begin(), alls.end()); // \u5c06\u6240\u6709\u503c\u6392\u5e8f\nalls.erase(unique(alls.begin(), alls.end()), alls.end()); // \u53bb\u6389\u91cd\u590d\u5143\u7d20\n</code></pre> <pre><code>int find(int x) { // \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ex\u7684\u4f4d\u7f6e\n    int l = 0, r = alls.size() - 1;\n    while(l &lt; r) {\n        int mid = l + r &gt;&gt; 1;\n        if (alls[mid] &gt;= x) r = mid;\n        else l = mid + 1;\n    }\n    return r + 1; //\u52a0\u4e0d\u52a01\u90fd\u884c\uff0c+1\u7684\u8bdd\u5c31\u662f\u6620\u5c04\u52301\uff0c 2\uff0c 3\n}\n</code></pre> <p>\u6574\u4e2a\u7684\u503c\u57df\u8de8\u5ea6\u5f88\u5927\uff0c\u4f46\u662f\u503c\u7684\u5b58\u5728\u5f88\u7a00\u758f</p> <p>\u76f8\u5f53\u4e8e\u538b\u7f29\u7a00\u758f\u77e9\u9635</p> <p>\u6620\u5c04\u5230\u4ece1\u5f00\u59cb\u7684\u81ea\u7136\u6570</p> <p>\u7279\u6307\u6574\u6570\u7684\u79bb\u6563\u5316</p> <p>\u503c\u57df\u7684\u8303\u56f4\u6bd4\u8f83\u5927\uff0c\u4f46\u662f\u4e2a\u6570\u6bd4\u8f83\u5c11</p> <p>\u6bd4\u5982\u503c\u57df0-10<sup>9,\u4f46\u662f\u4e2a\u6570\u53ea\u670910</sup>5</p> <p>\u79bb\u6563\u5316\u7684\u8fc7\u7a0b\uff1a</p> <p>a[]: 1, 3, 100, 1000, 50000000</p> <p>i: 0  1 2 3 4</p> <p>\u5173\u952e\u70b9\uff1a</p> <ol> <li> <p>a\u4e2d\u53ef\u80fd\u6709\u91cd\u590d\u5143\u7d20\uff0c\u9700\u8981\u53bb\u91cd</p> </li> <li> <p>\u5982\u4f55\u7b97\u51faa\u4e2d\u6bcf\u4e00\u4e2a\u503c\u79bb\u6563\u540e\u7684\u7ed3\u679c\uff0ca\u662f\u6709\u5e8f\u7684\u6240\u4ee5\u4f7f\u7528\u4e8c\u5206\u6765\u627e</p> </li> </ol> <p>unique\u5c06\u6570\u7ec4\u4e2d\u6240\u6709\u7684\u5143\u7d20\u53bb\u91cd\uff0c\u7136\u540e\u8fd4\u56de\u91cd\u590d\u7b2c\u4e00\u4f4d\u7684\u4e0b\u6807</p> <pre><code>vector&lt;int&gt; alls; // \u5b58\u50a8\u6240\u6709\u5f85\u79bb\u6563\u5316\u7684\u503c\nsort(alls.begin(), alls.end()); // \u5c06\u6240\u6709\u503c\u6392\u5e8f\nalls.erase(unique(alls.begin(), alls.end()), alls.end());   // \u53bb\u6389\u91cd\u590d\u5143\u7d20\n\n// \u4e8c\u5206\u6c42\u51fax\u5bf9\u5e94\u7684\u79bb\u6563\u5316\u7684\u503c\nint find(int x) // \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ex\u7684\u4f4d\u7f6e\n{\n    int l = 0, r = alls.size() - 1;\n    while (l &lt; r)\n    {\n        int mid = l + r &gt;&gt; 1;\n        if (alls[mid] &gt;= x) r = mid;\n        else l = mid + 1; // +1\u4ece1\u5f00\u59cb\u6620\u5c04\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u52a0\uff0c\u5c31\u662f\u4ece0\u5f00\u59cb\u6620\u5c04\n    }\n    return r + 1; // \u6620\u5c04\u52301, 2, ...n\n</code></pre> <p>\u5c31\u662f\u5c06\u6240\u6709\u7684\u6570\u6620\u5c04\u6210\u4e0b\u6807</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#802","title":"802. \u533a\u95f4\u548c","text":"<p>\u503c\u57df\u8de8\u5ea6\u5f88\u5927\uff0c\u4f46\u662f\u5f88\u7a00\u758f</p> <p>\u628a\u7528\u5230\u8fc7\u7684\u4e0b\u6807\u62ff\u8fc7\u6765\u8fdb\u884c\u6392\u5e8f</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt; // C++\u4e2d\u7528vector\u6765\u505a\u79bb\u6563\u5316\n#include &lt;algorithm&gt;\n\nusing namespace std;\n\ntypedef pair&lt;int, int&gt; PII;\n\nconst int N = 300010;\n\nint n, m;\nint a[N], s[N];\n\nvector&lt;int&gt; alls;\nvector&lt;PII&gt; add, query;\n\nint find (int x) {\n    int l = 0, r = alls.size() - 1;\n    while (l &lt; r) {\n        int mid = (l + r) &gt;&gt; 1;\n        if (alls[mid] &gt;= x) r = mid;\n        else l = mid + 1;\n    }\n    return r + 1; // \u56e0\u4e3a\u8981\u4f7f\u7528\u5230\u524d\u7f00\u548c\u6240\u4ee5\u9700\u8981\u4ece1\u5f00\u59cb\n}\n\nint main () {\n    cin &gt;&gt; n &gt;&gt; m;\n    for (int i = 0; i &lt; n; i++) {\n        int x, c;\n        cin &gt;&gt; x &gt;&gt; c;\n        add.push_back({x, c});\n        alls.push_back(x);\n    } \n\n    for (int i = 0; i &lt; m; i++) {\n        int l, r;\n        cin &gt;&gt; l &gt;&gt; r;\n        query.push_back({l, r});\n        alls.push_back(l);\n        alls.push_back(r);\n\n    }\n    // alls\u91cc\u9762\u5b58\u4e86\u6240\u6709\u53ef\u80fd\u6d89\u53ca\u5230\u7684\u4e0b\u6807\uff0c\u66f4\u6539\u8fc7\u7684\u6570\u5b57\u4e0b\u6807\u3001\u4ee5\u53ca\u533a\u95f4\u7684\u6570\u5b57\u4e0b\u6807\n    sort(alls.begin(), alls.end());\n    alls.erase(unique(alls.begin(), alls.end()), alls.end());\n\n    // \u5904\u7406\u63d2\u5165\n    for (auto item : add) {\n        int x = find(item.first);\n        a[x] += item.second;\n    }\n\n    // \u9884\u5904\u7406\u524d\u7f00\u548c\n    for (int i = 0; i &lt;= alls.size(); i++) s[i] = s[i - 1] + a[i];\n\n    // \u5904\u7406\u8be2\u95ee\n    for (auto item : query) {\n        int l = find(item.first), r = find(item.second);\n        cout &lt;&lt; s[r] - s[l - 1] &lt;&lt; endl;\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#unique","title":"\u5b9e\u73b0unique\u7b97\u6cd5","text":"<ol> <li>\u4ed6\u662f\u7b2c\u4e00\u4e2a</li> <li>a[i] != a[i - 1]</li> </ol> <pre><code>vector&lt;int&gt;::iterator unique(vector&lt;int&gt; &amp;a) {\n    int j = 0;\n    for (int i = 0; i &lt; a.size(); ++i) {\n        if (!i || a[i] != a[i - 1])//\u5982\u679c\u662f\u7b2c\u4e00\u4e2a\u5143\u7d20\u6216\u8005\u8be5\u5143\u7d20\u4e0d\u7b49\u4e8e\u524d\u4e00\u4e2a\u5143\u7d20\uff0c\u5373\u4e0d\u91cd\u590d\u5143\u7d20\uff0c\u6211\u4eec\u5c31\u628a\u5b83\u5b58\u5230\u6570\u7ec4\u524dj\u4e2a\u5143\u7d20\u4e2d\n            a[j++] = a[i];//\u6bcf\u5b58\u5728\u4e00\u4e2a\u4e0d\u540c\u5143\u7d20\uff0cj++\n    }\n    return a.begin() + j;//\u8fd4\u56de\u7684\u662f\u524dj\u4e2a\u4e0d\u91cd\u590d\u5143\u7d20\u7684\u4e0b\u6807\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#_23","title":"\u533a\u95f4\u5408\u5e76","text":"<p>\u5c06\u6240\u6709\u5b58\u5728\u4ea4\u96c6\u7684\u533a\u95f4\u5408\u5e76</p> <p>python\u5728\u5f88\u591a\u60c5\u51b5\u4e0b\u5e76\u4e0d\u6bd4C++\u6162\uff0c\u56e0\u4e3a\u52a0\u4e86O2\u4f18\u5316\uff0c\u8fd0\u884c\u65f6\u95f4\u5728\u5f88\u591a\u60c5\u51b5\u4e0b\u548cC++\u5dee\u4e0d\u591a\u7684</p> <p>\u7ed9\u6211\u4eec\u5f88\u591a\u5f88\u591a\u7684\u533a\u95f4\uff0c\u5982\u679c\u4e24\u4e2a\u533a\u95f4\u6709\u4ea4\u96c6\u7684\u8bdd\uff0c\u5c31\u628a\u8fd9\u4e24\u4e2a\u533a\u95f4\u5408\u5e76</p> <p>\u5feb\u901f\u5730\u5c06n\u4e2a\u4ea4\u96c6\u6709\u533a\u95f4\u7684\u5408\u5e76</p> <p>\u89c4\u5b9a\uff1a\u4e24\u4e2a\u533a\u95f4\u53ea\u6709\u7aef\u70b9\u76f8\u4ea4\u7684\u8bdd\uff0c\u4e5f\u7b97\u6709\u4ea4\u96c6</p> <pre><code>// \u5c06\u6240\u6709\u5b58\u5728\u4ea4\u96c6\u7684\u533a\u95f4\u5408\u5e76\nvoid merge(vector&lt;PII&gt; &amp;segs)\n{\n    vector&lt;PII&gt; res;\n\n    sort(segs.begin(), segs.end());\n\n    int st = -2e9, ed = -2e9;\n    for (auto seg : segs)\n        if (ed &lt; seg.first)\n        {\n            if (st != -2e9) res.push_back({st, ed});\n            st = seg.first, ed = seg.second;\n        }\n        else ed = max(ed, seg.second);\n\n    if (st != -2e9) res.push_back({st, ed});\n\n    segs = res;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#803","title":"803. \u533a\u95f4\u5408\u5e76","text":"<p>\u8fd9\u9053\u9898\u5b9e\u9645\u4e0a\u662f\u8d2a\u5fc3\u7b97\u6cd5</p> <ol> <li> <p>\u6309\u6240\u6709\u533a\u95f4\u7684\u5de6\u7aef\u70b9\u8fdb\u884c\u6392\u5e8f</p> </li> <li> <p>\u626b\u63cf\u6574\u4e2a\u533a\u95f4\uff0c\u8fc7\u7a0b\u5f53\u4e2d\u5c06\u6240\u6709\u53ef\u80fd\u6709\u4ea4\u96c6\u7684\u533a\u95f4\u5408\u5e76</p> </li> </ol> <p>start st end ed </p> <p>\u6309\u7167\u5de6\u7aef\u70b9\u4ece\u5c0f\u5230\u5927\u7684\u60c5\u51b5\u8fdb\u884c\u626b\u63cf\uff0c\u540e\u4e00\u4e2a\u533a\u95f4\u7684\u5de6\u7aef\u70b9\u4e00\u5b9a\u5728\u5f53\u524d\u533a\u95f4\u5de6\u7aef\u70b9\u7684\u540e\u9762</p> <p>\u5728\u5185\u90e8\u3001\u6709\u4ea4\u96c6\u3001\u6ca1\u6709\u4ea4\u96c6</p> <p>\u8fd9\u662f\u4e00\u9053\u6a21\u62df+\u8d2a\u5fc3</p> <p>\u4e5f\u6bd4\u8f83\u50cf\u53cc\u6307\u9488\u7b97\u6cd5</p> <p>\u8ddf\u533a\u95f4\u76f8\u5173\u7684\u9898\u76ee\u5f88\u591a\uff0c\u5927\u90e8\u5206\u90fd\u662f\u8d2a\u5fc3  </p> <p>pair\u6392\u5e8f\u5728c++\u91cc\u9762\u4f1a\u4f18\u5148\u4ee5\u5de6\u7aef\u70b9\u8fdb\u884c\u6392\u5e8f</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n#include &lt;vector&gt;\n\nusing namespace std;\n\ntypedef pair&lt;int, int&gt; PII;\n\nvector&lt;PII&gt; segs;\n\nint n;\n\nvoid merge(vector&lt;PII&gt; &amp;segs) {\n    vector&lt;PII&gt; res;\n    sort(segs.begin(), segs.end());\n    int st = -2e9, ed = -2e9;\n    for (auto seg : segs) {\n        if (ed &lt; seg.first) {\n            if (st != -2e9) {\n                res.push_back({st, ed});\n            }\n            st = seg.first;\n            ed = seg.second;\n\n        } else {\n                ed = max(ed, seg.second);\n        }\n    }\n    if (st != -2e9) res.push_back({st, ed});\n    segs = res;\n}\n\n\n\nint main () {\n    cin &gt;&gt; n; \n\n    for (int i = 0; i &lt; n; i++) {\n        int l, r;\n        cin &gt;&gt; l &gt;&gt; r;\n        segs.push_back({l, r});\n    }\n    merge(segs);\n    cout &lt;&lt; segs.size() &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/","title":"\u7b2c\u4e09\u8bb2 \u641c\u7d22\u4e0e\u56fe\u8bba","text":"<p>\u4e00\u5b9a\u8981\u591a\u5199\uff01\u6bcf\u4e2a\u7b97\u6cd5\u5199\u4e2a\u4e94\u516d\u904d\u57fa\u672c\u5c31\u4f1a\u4e86</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/#dfs","title":"\u6df1\u5ea6\u4f18\u5148\u904d\u5386 DFS","text":"<p>dfs\u548cbfs\u641c\u7d22\u7684\u7ed3\u6784\u90fd\u50cf\u4e00\u68f5\u6811\u4e00\u6837\uff0c\u641c\u7d22\u7684\u987a\u5e8f\u4e0d\u4e00\u6837</p> <p>dfs\u5c3d\u53ef\u80fd\u5f80\u6df1\u4e86\u641c\uff0c\u78b0\u5230\u53f6\u8282\u70b9\u56de\u6eaf</p> <p>dfs\u6267\u7740\uff0c\u4e00\u6761\u8def\u5fc5\u5b9a\u4f1a\u8d70\u5230\u5934</p> <p>\u4ece\u6570\u636e\u7ed3\u6784\u6765\u770b\uff0cDFS\u4f7f\u7528stack\uff0c\u4f7f\u7528\u7a7a\u95f4O(h)\uff0c\u7a7a\u95f4\u4e0a\u6709\u7edd\u5bf9\u4f18\u52bf\uff0c\u4f46\u4e0d\u5177\u6709\u201c\u6700\u77ed\u8def\u201d\u7684\u6027\u8d28</p> <p>\u7b97\u6cd5\u601d\u8def\u6bd4\u8f83\u5947\u602a\u7684\u6216\u5bf9\u7a7a\u95f4\u8981\u6c42\u9ad8\u7684\u4e00\u822c\u662fDFS</p> <p>\u4e24\u4e2a\u91cd\u8981\u6982\u5ff5\uff1a\u56de\u6eaf\u548c\u526a\u679d</p> <p>\u5982\u679c\u89c9\u5f97\u96be\u4ee5\u601d\u8003\uff0c\u5c31\u4ece\u641c\u7d22\u6811\u7684\u89d2\u5ea6\u6765\u8003\u8651</p> <p>dfs\u5176\u5b9e\u5c31\u662f\u9012\u5f52\uff0c\u6ca1\u6709\u5fc5\u8981\u53bb\u522b\u7684\u592a\u5f00</p> <p>dfs\u7684\u641c\u7d22\u6846\u67b6\u5f88\u591a\u9700\u8981\u4ece\u9898\u76ee\u8fdb\u884c\u5206\u6790</p> <p>dfs\u4fd7\u79f0\u66b4\u529b\u641c\u7d22\uff0c\u6700\u91cd\u8981\u7684\u662f\u904d\u5386\u6240\u6709\u65b9\u6848\u7684\u987a\u5e8f</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/#842","title":"842. \u6392\u5217\u6570\u5b57","text":"<p>\u770b\u7740\u662f\u4e00\u68f5\u6811\u7684\u5f62\u5f0f\uff0c\u4f46\u662f\u5b58\u7684\u65f6\u5019\u53ea\u4f1a\u5b58\u5f53\u524d\u7684\u8def\u5f84\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u5c06\u6574\u4e2a\u6811\u5b58\u50a8\u4e0b\u6765\uff0c\u7cfb\u7edf\u4f1a\u6709\u4e00\u4e2a\u9690\u85cf\u7684\u6808\u6765\u5e2e\u6211\u4eec\u641e\u5b9a\uff0c\u4e0d\u9700\u8981\u6211\u4eec\u5f00\u989d\u5916\u7684\u7a7a\u95f4</p> <p>\u56de\u6eaf\u91cc\u9762\u975e\u5e38\u91cd\u8981\u7684\u4e00\u70b9\u5c31\u662f\u8981\u6062\u590d\u73b0\u573a\uff0c\u7528\u5b8c\u7684\u4e1c\u897f\u4e00\u5b9a\u8981\u653e\u56de\u53bb</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nconst int N = 10;\nint n;\nint path[N];\nbool st[N]; // bool\u9ed8\u8ba40\uff0cfalse\n\nvoid dfs (int u) {\n    if (u == n) {\n        for (int i = 0; i &lt; n; i ++) printf(\"%d \", path[i]);\n        puts(\"\");\n        return;\n    }\n    for (int i = 1; i &lt;= n; i++) {\n        if (!st[i]) {\n            path[u] = i;\n            st[i] = true;\n            dfs(u + 1);\n\n            // \u6062\u590d\u73b0\u573a\n            path[u] = 0; //\u8fd9\u4e00\u6b65\u5b9e\u9645\u4e0a\u53ef\u4ee5\u4e0d\u5199\uff0c\u56e0\u4e3a\u540e\u9762\u6bcf\u6b21\u7528\u7684\u65f6\u5019path[u]\u90fd\u88ab\u91cd\u65b0\u8d4b\u503c\u4e86\n            st[i] = false;\n        }\n    }\n}\n\nint main () {\n    cin &gt;&gt; n;\n    dfs(0);\n    return 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/#843-n-","title":"843. n-\u7687\u540e\u95ee\u9898","text":"<p>\u601d\u8003\u4e00\uff1a</p> <ol> <li>\u5b8c\u5168\u6309\u7167\u5168\u6392\u5217\u7684\u601d\u8def\uff0c\u679a\u4e3e\u6bcf\u4e00\u884c\u7684\u7687\u540e\u5e94\u8be5\u653e\u5728\u54ea\u4e00\u5217\u4e0a\u53bb</li> </ol> <p>\u4e5f\u53ef\u4ee5\u8fb9\u505a\u4fbf\u5224\u65ad</p> <p>\u526a\u679d\u5c31\u662f\u5224\u65ad\u5f53\u524d\u8fd9\u4e2a\u9009\u62e9\u4e00\u5b9a\u662f\u4e0d\u5408\u6cd5\u7684</p> <p>\u601d\u8003\u4e8c\uff1a\u6734\u7d20\u7684\u601d\u8003\u65b9\u5f0f\u5bf9\u4e8e\u6bcf\u4e2a\u683c\u5b50\u6765\u8bf4\uff0c\u6709\u653e\u7687\u540e\u548c\u4e0d\u653e\u7687\u540e\u7684\u4e24\u79cd\u60c5\u51b5\uff0c\u5bf9\u4e24\u79cd\u60c5\u51b5\u5206\u522b\u8fdb\u884cdfs\u5373\u53ef</p> <p>diagonal \u5bf9\u89d2\u7ebf</p> <p>\u601d\u8003\u5bf9\u89d2\u7ebf\u7684\u65f6\u5019\uff0c\u601d\u8003y = x + b\u6216\u8005y = -x + b</p> <p>\u5bf9\u4e8e\u4e00\u6761\u7ebf\u4e0a\u7684\u70b9\u6765\u8bf4\u4ed6\u4eec\u7684\u622a\u8ddd\u5e94\u8be5\u76f8\u7b49</p> <p>\u5373 b = y - x \u6216\u8005b = y + x</p> <p>\u56e0\u4e3a\u6211\u4eec\u5b9a\u4e49\u7684dg[N] \u548cudg[N]\u90fd\u662f0~N\uff0c\u6240\u4ee5\u5bf9\u53ef\u80fd\u53d8\u6210\u8d1f\u6570\u7684y - x + N/2\u5373\u53ef</p> <p>dfs\u662f\u601d\u8def\uff0c\u6ca1\u6709\u6a21\u677f\uff0c\u91cd\u8981\u7684\u662f\u987a\u5e8f</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/#1","title":"1. \u5168\u6392\u5217\u7684\u601d\u8def\uff0c\u5bf9\u6bcf\u884c\u8fdb\u884c\u8ba8\u8bba","text":"<pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\nconst int N = 20;\nint n;\nchar g[N][N];\nbool col[N], dg[N], udg[N];\nvoid dfs(int u) {\n    if (u == n) {\n        for (int i = 0; i &lt; n; i++) puts(g[i]);\n        puts(\"\");\n        return;\n    }\n    for (int i = 0; i &lt; n; i++) {\n        if(!col[i] &amp;&amp; !dg[u + i] &amp;&amp; !udg[n - u + i]) {\n            g[u][i] = 'Q';\n            col[i] = dg[u + i] = udg[n - u + i] = true;\n            dfs(u + 1);\n            col[i] = dg[u + i] = udg[n - u + i] = false;\n            g[u][i] = '.';\n        }\n    }\n}\n\n\nint main () {\n    cin &gt;&gt; n;\n    for (int i = 0; i &lt; n; i++) {\n        for (int j = 0; j &lt; n; j++) {\n            g[i][j] = '.';\n        }\n    }\n    dfs(0);\n    return 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/#2","title":"2. \u5bf9\u6bcf\u4e2a\u70b9\u90fd\u8fdb\u884c\u653e\u548c\u4e0d\u653e\u7684\u8ba8\u8bba","text":"<p>\u65f6\u95f4\u6548\u7387\u5dee</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\nconst int N = 20;\nint n;\nchar g[N][N];\nint row[N], col[N], dg[N], udg[N];\n\nvoid dfs(int x, int y, int s) {\n    if (y == n) y = 0, x++;\n    if (x == n) {\n        if (s == n) {\n            for (int i = 0; i &lt; n; i++) {\n                puts(g[i]);\n            }\n            puts(\"\");\n        } \n        // \u65e0\u8bba\u4ec0\u4e48\u60c5\u51b5\u90fd\u8981return\u7684\u6ce8\u610f\n        return;\n    }\n    // \u7b2c\u4e00\u79cd\u60c5\u51b5\u662f\u76f4\u63a5\u4e0d\u653e\u7687\u540e\n    dfs(x, y + 1, s);\n    // \u7b2c\u4e8c\u79cd\u60c5\u51b5\u662f\u5728\u7b26\u5408\u60c5\u51b5\u7684\u6761\u4ef6\u4e0b\u653e\u7687\u540e\n    if (!row[x] &amp;&amp; !col[y] &amp;&amp; !dg[x + y] &amp;&amp; !udg[x - y + n]) {\n        g[x][y] = 'Q';\n        row[x] = col[y] = dg[x + y] = udg[x - y + n] = true;\n        // \u6ce8\u610fs + 1\n        dfs(x, y + 1, s + 1);\n        // \u56de\u6eaf\n        g[x][y] = '.';\n        row[x] = col[y] = dg[x + y] = udg[x - y + n] = false;\n    }\n\n}\n\nint main () {\n    cin &gt;&gt; n;\n    for (int i = 0; i &lt; n; i++) {\n        for (int j = 0; j &lt; n; j ++) {\n            g[i][j] = '.';\n        }\n    }\n    dfs(0, 0, 0);\n    return 0; \n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/#bfs","title":"\u5bbd\u5ea6\u4f18\u5148\u904d\u5386 BFS","text":"<p>\u773c\u89c2\u516d\u8def\u8033\u542c\u516b\u65b9\uff0c\u641c\u7d22\u7684\u65f6\u5019\u4f7f\u4e00\u5c42\u4e00\u5c42\u7684\u641c</p> <p>BFS\u4f7f\u7528queue\uff0c\u4f7f\u7528\u7a7a\u95f4O(2^h)\uff0c\u7b2c\u4e00\u6b21\u6269\u5c55\u5230\u7684\u70b9\uff0c\u5fc5\u5b9a\u5177\u6709\u201c\u6700\u77ed\u8def\u201d\u7684\u6027\u8d28\uff08\u9700\u8981\u6bcf\u4e2a\u8fb9\u7684\u6743\u91cd\u90fd\u662f1\uff09</p> <p>\u6d89\u53ca\u5230\u6700\u5c0f\u6b65\u6570\u3001\u6700\u77ed\u8ddd\u79bb\u3001\u6700\u5c11\u64cd\u4f5c\u51e0\u6b21\uff0c\u57fa\u672c\u4e0a\u90fd\u662fBFS</p> <p>dp\u95ee\u9898\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u6700\u77ed\u8def\u95ee\u9898\uff0c\u6ca1\u6709\u73af\u5b58\u5728\u7684\u6700\u77ed\u8def\u95ee\u9898</p> <p>bfs\u4e00\u822c\u662f\u6709\u4e00\u4e2a\u5e38\u7528\u7684\u6846\u67b6\u7684\uff01</p> <p>\u6846\u67b6\uff1a</p> <pre><code>\u5c06\u521d\u59cb\u72b6\u6001\u653e\u5230\u961f\u5217\u91cc\u9762 queue\n\u5f53\u961f\u5217\u4e0d\u7a7a while(queue){\n\u6bcf\u4e00\u6b21\u628a\u961f\u5934\u62ff\u51fa\u6765\uff0c\u6269\u5c55\u961f\u5934\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/#844","title":"844.\u8d70\u8ff7\u5bab","text":"<p>\u4e3a\u4ec0\u4e48\u9700\u8981\u961f\u5217\u6765\u7ef4\u62a4\uff1a\u90a3\u4e9b\u8d70\u4e0d\u901a\u7684\u70b9\uff0c\u5728\u4e0b\u4e00\u5c42\u904d\u5386\u7684\u65f6\u5019\u5c31\u4e0d\u9700\u8981\u4efb\u4f55\u8003\u8651\u4e86</p> <pre><code>#include&lt;iostream&gt;\n#include&lt;cstring&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\nconst int N = 110; \ntypedef pair&lt;int, int&gt; PII;\nint n, m;\nint g[N][N];//\u5b58\u653e\u5730\u56fe\nint d[N][N];//\u5b58 \u6bcf\u4e00\u4e2a\u70b9\u5230\u8d77\u70b9\u7684\u8ddd\u79bb\nPII q[N * N];//\u624b\u5199\u961f\u5217\n\nint bfs() {\n    int hh = 0, tt = 0;\n    q[0] = {0, 0};\n\n    memset(d, -1, sizeof d);//\u8ddd\u79bb\u521d\u59cb\u5316\u4e3a- 1\u8868\u793a\u6ca1\u6709\u8d70\u8fc7\n    d[0][0] = 0;//\u8868\u793a\u8d77\u70b9\u8d70\u8fc7\u4e86\n\n    int dx[4] = {-1, 0, 1, 0}, dy[4] = {0, 1, 0, -1};\n    while (hh &lt;= tt) {\n        auto t = q[hh++]; // \u6bcf\u4e00\u6b21\u53d6\u51fa\u961f\u5934\uff0c\u5c1d\u8bd5\u5f80\u4e0a\u4e0b\u5de6\u53f3\n        for (int i = 0; i &lt; 4 ; i++) { // \u56db\u4e2a\u65b9\u5411\n            int x = t.first + dx[i], y = t.second + dy[i];\n            if (x &gt;= 0 &amp;&amp; x &lt; n &amp;&amp; y &gt;= 0 &amp;&amp; y &lt; m &amp;&amp; g[x][y] == 0 &amp;&amp; d[x][y] == -1) {\n                d[x][y] = d[t.first][t.second] + 1;\n                q[++tt] = {x, y}; // \u65b0\u7684\u961f\u5934\n            }\n        }\n    }\n    return d[n - 1] [m - 1];\n}\n\nint main() \n{\n    cin &gt;&gt; n &gt;&gt; m;\n    for(int i = 0; i &lt; n; i ++ )\n        for(int j = 0; j &lt; m; j ++ )\n            cin &gt;&gt; g[i][j];\n\n    cout &lt;&lt; bfs() &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/#_2","title":"\u5982\u4f55\u53bb\u5b58\u50a8\u8def\u5f84","text":"<p>\u53ea\u8981\u8bb0\u5f55\u4e00\u4e0b\u6bcf\u4e2a\u70b9\u662f\u4ece\u54ea\u4e2a\u70b9\u6269\u6563\u51fa\u6765\u7684\u5c31\u884c</p> <pre><code>#include&lt;iostream&gt;\n#include&lt;cstring&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\nconst int N = 110; \ntypedef pair&lt;int, int&gt; PII;\nint n, m;\nint g[N][N];//\u5b58\u653e\u5730\u56fe\nint d[N][N];//\u5b58 \u6bcf\u4e00\u4e2a\u70b9\u5230\u8d77\u70b9\u7684\u8ddd\u79bb\nPII q[N * N], Prev[N][N];\n\nint bfs() {\n    int hh = 0, tt = 0;\n    q[0] = {0, 0};\n\n    memset(d, -1, sizeof d);//\u8ddd\u79bb\u521d\u59cb\u5316\u4e3a- 1\u8868\u793a\u6ca1\u6709\u8d70\u8fc7\n    d[0][0] = 0;//\u8868\u793a\u8d77\u70b9\u8d70\u8fc7\u4e86\n\n    int dx[4] = {-1, 0, 1, 0}, dy[4] = {0, 1, 0, -1};\n    while (hh &lt;= tt) {\n        auto t = q[hh++]; // \u6bcf\u4e00\u6b21\u53d6\u51fa\u961f\u5934\uff0c\u5c1d\u8bd5\u5f80\u4e0a\u4e0b\u5de6\u53f3\uff0c\u6bcf\u4e00\u6b21\u90fd\u53ea\u4f1a\u6269\u6563\u4e00\u4e2a\u6570\u7684\u5916\u9762\u4e00\u683c\uff0c\u7136\u540e\u5c31\u662f\u4e0b\u4e00\u4e2a\u6570\u7684\u5916\u9762\u4e00\u683c\uff0c\u6240\u4ee5\u4e0d\u7528\u62c5\u5fc3\u67d0\u4e00\u4e2a\u6570\u76f4\u63a5\u6269\u6563\u53bb\u7ec8\u70b9\u4e86\n        for (int i = 0; i &lt; 4 ; i++) { // \u56db\u4e2a\u65b9\u5411\n            int x = t.first + dx[i], y = t.second + dy[i];\n            if (x &gt;= 0 &amp;&amp; x &lt; n &amp;&amp; y &gt;= 0 &amp;&amp; y &lt; m &amp;&amp; g[x][y] == 0 &amp;&amp; d[x][y] == -1) {\n                d[x][y] = d[t.first][t.second] + 1;\n                Prev[x][y] = t;\n                q[++tt] = {x, y}; // \u65b0\u7684\u961f\u5c3e\n            }\n        }\n    }\n    int x = n - 1, y  = m - 1;\n    while (x || y) {\n        cout &lt;&lt; x &lt;&lt; ' ' &lt;&lt; y &lt;&lt; endl;\n        auto t = Prev[x][y];\n        x = t.first, y = t.second;\n    }\n    return d[n - 1] [m - 1];\n}\n\nint main() \n{\n    cin &gt;&gt; n &gt;&gt; m;\n    for(int i = 0; i &lt; n; i ++ )\n        for(int j = 0; j &lt; m; j ++ )\n            cin &gt;&gt; g[i][j];\n\n    cout &lt;&lt; bfs() &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/#_3","title":"\u6811\u4e0e\u56fe\u7684\u5b58\u50a8","text":"<p>\u6811\u4e0e\u56fe\u7684\u5b58\u50a8</p> <p>\u6811\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u56fe\uff0c\u4e0e\u56fe\u7684\u5b58\u50a8\u65b9\u5f0f\u76f8\u540c\u3002\u6811\u662f\u65e0\u73af\u8fde\u901a\u56fe\u3002</p> <p>\u56fe\u5206\u6210\u6709\u5411\u56fe\u548c\u65e0\u5411\u56fe\uff0c\u65e0\u5411\u56fe\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u6709\u5411\u56fe</p> <p>\u5bf9\u4e8e\u65e0\u5411\u56fe\u4e2d\u7684\u8fb9ab\uff0c\u5b58\u50a8\u4e24\u6761\u6709\u5411\u8fb9a-&gt;b, b-&gt;a\u3002 \u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u53ea\u8003\u8651\u6709\u5411\u56fe\u7684\u5b58\u50a8\u3002</p> <p>(1) \u90bb\u63a5\u77e9\u9635\uff1ag[a][b][a, b] \u5b58\u50a8\u8fb9a-&gt;b\uff0c\u7528\u91cd\u590d\u8fb9\u7684\u8bdd\u53ea\u80fd\u4fdd\u7559\u4e00\u6761\u76f8\u540c\u7684\u8fb9</p> <p>(2) \u90bb\u63a5\u8868\uff1a\u7528\u7684\u6bd4\u8f83\u591a</p> <pre><code>// \u5bf9\u4e8e\u6bcf\u4e2a\u70b9k\uff0c\u5f00\u4e00\u4e2a\u5355\u94fe\u8868\uff0c\u5b58\u50a8k\u6240\u6709\u53ef\u4ee5\u8d70\u5230\u7684\u70b9\u3002h[k]\u5b58\u50a8\u8fd9\u4e2a\u5355\u94fe\u8868\u7684\u5934\u7ed3\u70b9\n// h[N]\u5b58\u7684\u662fn\u4e2a\u94fe\u8868\u7684\u94fe\u8868\u5934\uff0ce\u5b58\u7684\u662f\u6bcf\u4e2a\u8282\u70b9\u7684\u503c\uff0cne\u662f\u6bcf\u4e2a\u8282\u70b9\u7684next\u6307\u9488\n// \u56fe\u4e2d\u7684\u6bcf\u4e2a\u70b9\u90fd\u662f\u94fe\u8868\u5934\nint h[N], e[N], ne[N], idx;\n\n// \u6dfb\u52a0\u4e00\u6761\u8fb9a-&gt;b\nvoid add(int a, int b)\n{\n    e[idx] = b, ne[idx] = h[a], h[a ] = idx ++ ;\n}\n\n// \u521d\u59cb\u5316\nidx = 0;\nmemset(h, -1, sizeof h);\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/#_4","title":"\u6811\u4e0e\u56fe\u7684\u6df1\u5ea6\u4f18\u5148\u904d\u5386","text":"<p>\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u548c\u5bbd\u5ea6\u4f18\u5148\u904d\u5386\u6bcf\u4e2a\u70b9\u53ea\u4f1a\u904d\u5386\u4e00\u6b21</p> <p>bool\u6570\u7ec4\u7528\u6765\u5b58\u54ea\u4e9b\u70b9\u5df2\u7ecf\u88ab\u904d\u5386\u8fc7\u4e86</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6 O(n+m)\uff0cn \u8868\u793a\u70b9\u6570\uff0cm\u8868\u793a\u8fb9\u6570</p> <p>(1) \u6df1\u5ea6\u4f18\u5148\u904d\u5386 \u2014\u2014 \u6a21\u677f\u9898 AcWing 846. \u6811\u7684\u91cd\u5fc3</p> <p>\u5220\u9664\u4e2d\u5fc3 = \u5c06\u4e00\u68f5\u6811\u5c3d\u53ef\u80fd\u788e\u5730\u62c6\u5f00\u6765</p> <p>\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u90fd\u6c42\u51fa\u6700\u5927\u503c\uff0c\u7136\u540e\u6c42\u6240\u6709\u6700\u5927\u503c\u5730\u6700\u5c0f\u503c</p> <p>\u5982\u4f55\u6c42\u6bcf\u4e2a\u70b9\u5220\u6389\u4e4b\u540e\u5730\u6700\u5927\u503c\uff0c\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u6309\u7684\u7279\u70b9\uff1a\u7b97\u51fa\u6bcf\u4e2a\u5b50\u6811\u7684\u5927\u5c0f</p> <pre><code>int dfs(int u)\n{\n    st[u] = true; // st[u] \u8868\u793a\u70b9u\u5df2\u7ecf\u88ab\u904d\u5386\u8fc7\n\n    for (int i = h[u]; i != -1; i = ne[i])\n    {\n        int j = e[i];\n        if (!st[j]) dfs(j);\n    }\n}\n</code></pre> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\nconst int N = 100010, M = N * 2;\nint n, m;\nint h[N], e[M], ne[M], idx;\nbool st[N];\nint ans = N;\n\nvoid add(int a, int b) {\n    e[idx] = b, ne[idx] = h[a], h[a] = idx++;\n}\n\n// \u8fd4\u56de\u4ee5u\u4e3a\u6839\u7684\u5b50\u6811\u7684\u5927\u5c0f\nint dfs (int u) {\n    st[u] = true; // \u6807\u8bb0\u4e00\u4e0b\uff0c\u5df2\u7ecf\u88ab\u641c\u8fc7\u4e86\n\n    int sum = 1, res=0;\n    for (int i = h[u]; i != -1; i = ne[i]) {\n        int j = e[i];\n        if (!st[j]){\n            int s = dfs(j);\n            res = max(res, s);\n            sum += s;\n        }\n    }\n    res = max(res, n -sum); // \u9664\u53bb\u6240\u6709\u5355\u5411\u53d1\u51fa\u53bb\u7684\uff0c\u5176\u4ed6\u5e94\u8be5\u8fde\u6210\u4e00\u4e2a\u8fde\u901a\u5757\u4e86\n    ans = min(ans, res);\n    return sum;\n}\nint main () {\n    cin &gt;&gt; n;\n    memset(h, -1, sizeof h);\n    for (int i = 0; i &lt; n - 1; i++) {\n        int a, b;\n        cin &gt;&gt; a &gt;&gt; b;\n        add(a, b), add(b, a);\n    }\n    dfs(1);\n    cout &lt;&lt; ans &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/#_5","title":"\u6811\u4e0e\u56fe\u7684\u5bbd\u5ea6\u4f18\u5148\u904d\u5386","text":"<p>(2) \u5bbd\u5ea6\u4f18\u5148\u904d\u5386 \u2014\u2014 \u6a21\u677f\u9898 AcWing 847. \u56fe\u4e2d\u70b9\u7684\u5c42\u6b21</p> <pre><code>queue&lt;int&gt; q;\nst[1] = true; // \u8868\u793a1\u53f7\u70b9\u5df2\u7ecf\u88ab\u904d\u5386\u8fc7\nq.push(1);\n\nwhile (q.size())\n{\n    int t = q.front();\n    q.pop();\n\n    for (int i = h[t]; i != -1; i = ne[i])\n    {\n        int j = e[i];\n        if (!st[j])\n        {\n            st[j] = true; // \u8868\u793a\u70b9j\u5df2\u7ecf\u88ab\u904d\u5386\u8fc7\n            q.push(j);\n        }\n    }\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/#847","title":"847. \u56fe\u4e2d\u70b9\u7684\u5c42\u6b21","text":"<p>\u5bbd\u641c\u4e2d\u7b2c\u4e00\u6b21\u4e2d\u627e\u5230\u8fd9\u4e2a\u70b9\u7684\u65f6\u5019\u5c31\u662f\u6700\u77ed\u8def\u5f84</p> <p>\u6ce8\u610f\u539f\u6765\u7684h[N]\u6307\u5411\u7684\u662f-1\u5c31\u662f\u7a7a\uff0c\u8fd9\u91cc\u7684<code>void add(int a, int b)</code>\u548c\u5355\u94fe\u8868\u7684\u5b58\u50a8\u4e00\u6a21\u4e00\u6837</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\nconst int N = 100010;\nint n, m;\nint h[N], e[N], ne[N], idx;\nint d[N], q[N]; // d\u662f\u8ddd\u79bb\uff0cq\u662f\u961f\u5217\n\nvoid add (int a, int b) {\n    e[idx] = b, ne[idx] = h[a], h[a] = idx++;\n}\nint bfs() {\n    int hh = 0, tt = 0;\n    q[0] = 1;\n    memset(d, -1, sizeof d);\n    d[1] = 0;\n    while(hh &lt;= tt) {\n        int t = q[hh++];\n        for (int i = h[t]; i != -1; i = ne[i]) {\n            int j = e[i];\n            if (d[j] == -1) {\n                d[j] = d[t] + 1;\n                q[++tt] = j;\n            }\n        }\n    }\n    return d[n];\n}\n\nint main () {\n    cin &gt;&gt; n &gt;&gt; m;\n    memset(h, -1, sizeof h);\n    for (int i = 0; i &lt; m; i++) {\n        int a, b;\n        cin &gt;&gt; a &gt;&gt; b;\n        add(a, b);\n    }\n    cout &lt;&lt; bfs() &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/#_6","title":"\u62d3\u6251\u6392\u5e8f","text":"<p>\u65f6\u95f4\u590d\u6742\u5ea6 O(n+m)\uff0cn\u8868\u793a\u70b9\u6570\uff0cm \u8868\u793a\u8fb9\u6570</p> <p>\u6709\u5411\u56fe\u624d\u6709\u62d3\u6251\u5e8f\u5217</p> <p>\u56fe\u7684\u62d3\u6251\u5e8f\u5217\uff1a\u9488\u5bf9\u6709\u5411\u56fe\uff0c\u82e5\u4e00\u4e2a\u7531\u56fe\u4e2d\u6240\u6709\u70b9\u6784\u6210\u7684\u5e8f\u5217 A \u6ee1\u8db3\uff1a\u5bf9\u4e8e\u56fe\u4e2d\u7684\u6bcf\u6761\u8fb9 (x,y)\uff0cx\u5728 A \u4e2d\u90fd\u51fa\u73b0\u5728 y\u4e4b\u524d\uff0c\u5219\u79f0 A\u662f\u8be5\u56fe\u7684\u4e00\u4e2a\u62d3\u6251\u5e8f\u5217\u3002</p> <p>123\u8fd9\u4e2a\u5e8f\u5217\uff0c\u9700\u8981\u6bd4\u8f8312\uff0c13\uff0c23\uff0c\u9700\u8981\u90fd\u662f\u524d\u9762\u90a3\u4e2a\u6570\u6307\u5411\u540e\u9762\u90a3\u4e2a\u6570</p> <p>\u6709\u73af\u4e0d\u53ef\u80fd\u6709\u62d3\u6251\u5e8f</p> <p>\u6709\u5411\u65e0\u73af\u56fe\u4e00\u5b9a\u5b58\u5728\u4e00\u4e2a\u62d3\u6251\u5e8f\u5217\uff0c\u6240\u4ee5\u6709\u5411\u65e0\u73af\u56fe\u4e5f\u88ab\u79f0\u4e3a\u62d3\u6251\u56fe</p> <p>\u6709\u5411\u56fe\u6bcf\u4e2a\u70b9\u90fd\u6709\u4e24\u4e2a\u5ea6\u6570\uff1a\u5165\u5ea6\u548c\u51fa\u5ea6</p> <p>\u5165\u5ea6\u6307\u4e00\u4e2a\u70b9\u88ab\u51e0\u4e2a\u70b9\u6307</p> <p>\u51fa\u5ea6\u6307\u6307\u5411\u51e0\u4e2a\u70b9</p> <p>\u6240\u4ee5\u62d3\u6251\u56fe\u4e2d\uff0c\u6240\u6709\u5165\u5ea6\u4e3a0\u7684\u70b9\u90fd\u53ef\u4ee5\u4f5c\u4e3a\u8d77\u70b9\uff08\u56e0\u4e3a\u4e0d\u4f1a\u6709\u4efb\u4f55\u4e00\u4e2a\u70b9\u5728\u6211\u524d\u9762\uff09</p> <p>\u7136\u540e\u5bf9\u6bcf\u4e2a\u70b9\u8fdb\u884cbfs</p> <p>\u4e00\u4e2a\u6709\u5411\u65e0\u73af\u56fe\uff0c\u4e00\u5b9a\u81f3\u5c11\u5b58\u5728\u4e00\u4e2a\u5165\u5ea6\u4e3a0\u7684\u70b9</p> <pre><code>bool topsort()\n{\n    int hh = 0, tt = -1;\n\n    // d[i] \u5b58\u50a8\u70b9i\u7684\u5165\u5ea6\n    for (int i = 1; i &lt;= n; i ++ )\n        if (!d[i])\n            q[ ++ tt] = i;\n\n    while (hh &lt;= tt)\n    {\n        int t = q[hh ++ ];\n\n        for (int i = h[t]; i != -1; i = ne[i])\n        {\n            int j = e[i];\n            if (-- d[j] == 0)\n                q[ ++ tt] = j;\n        }\n    }\n\n    // \u5982\u679c\u6240\u6709\u70b9\u90fd\u5165\u961f\u4e86\uff0c\u8bf4\u660e\u5b58\u5728\u62d3\u6251\u5e8f\u5217\uff1b\u5426\u5219\u4e0d\u5b58\u5728\u62d3\u6251\u5e8f\u5217\u3002\n    return tt == n - 1;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/#848","title":"848.\u6709\u5411\u56fe\u7684\u62d3\u6251\u5e8f\u5217","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;algorithm&gt;\n\nusing namespace std;\nconst int N = 100010;\nint n, m;\nint h[N], e[N], ne[N], idx;\nint q[N], d[N]; //q\u5b58\u7684\u662f\u961f\u5217\uff0cd\u5b58\u7684\u662f\u5165\u5ea6\n\nvoid add(int a, int b) {\n    e[idx] = b, ne[idx] = h[a], h[a] = idx++;\n}\n\nbool topsort() {\n    int hh = 0, tt = -1;\n    for (int i =1; i &lt;= n; i++) {\n        if (!d[i]) { // \u628a\u6240\u6709\u5165\u5ea6\u4e3a0\u7684\u70b9\u63d2\u5230\u961f\u5217\u91cc\u9762\u53bb\n            q[++tt] = i;\n        }\n    }\n    while(hh &lt;= tt) {\n        int t = q[hh++]; // \u51fa\u961f\u7684\u987a\u5e8f\u662f\u62d3\u6251\u5e8f\u5373q\u91cc\u9762\u7684\u987a\u5e8f\n        for (int i = h[t]; i != -1; i = ne[i]) {\n            int j = e[i];\n            d[j] --; // \u51cf\u5165\u5ea6\n            if (d[j] == 0) q[++tt] = j;\n        }\n    }\n    return tt == n -1; // \u8bf4\u660e\u4e00\u5171\u8fdb\u4e86n\u4e2a\u70b9\uff0c\u6240\u6709\u70b9\u90fd\u8fdb\u5165\u961f\u5217\u4e86\n}\n\nint main() {\n    cin &gt;&gt; n &gt;&gt; m;\n    memset(h, -1, sizeof h);\n    for (int i = 0; i &lt; m; i++) {\n        int a, b;\n        cin &gt;&gt; a &gt;&gt; b;\n        add(a, b);\n        d[b] ++;// \u4e0d\u8981\u5fd8\u8bb0\u66f4\u65b0\u5165\u5ea6\n    }\n    if (topsort()){\n        for(int i = 0; i &lt; n; i++) printf(\"%d \", q[i]);\n    }\n    else puts(\"-1\");\n    return 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/#_7","title":"\u6700\u77ed\u8def\u7b97\u6cd5","text":"<p>\u6700\u77ed\u8def\u7b97\u6cd5\u4e0d\u4f1a\u8ba9\u4f60\u8bc1\u660e\u5b83\u7b97\u6cd5\u7684\u6b63\u786e\u6027\uff0c\u8003\u5bdf\u7684\u662f\u5982\u4f55\u5c06\u9898\u76ee\u8f6c\u5316\u4e3a\u6700\u77ed\u8def\u95ee\u9898\uff0c\u4fa7\u91cd\u4e8e\u5b9e\u8df5\uff0c\u4e0d\u4fa7\u91cd\u4e8e\u539f\u7406</p> <p>\u6709\u5411\u56fe\u548c\u65e0\u5411\u56fe\u7684\u6700\u77ed\u8def\u7b97\u6cd5\u6ca1\u6709\u533a\u522b\uff0c\u6700\u77ed\u8def\u95ee\u9898\u91cc\u9762\u53ea\u7528\u53bb\u8003\u8651\u6709\u5411\u56fe\u5c31\u884c\u4e86\uff0c\u65e0\u5411\u56fe\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u6709\u5411\u56fe</p> <p>\u5e38\u89c1\u7684\u6700\u77ed\u8def\u7b97\u6cd5\u5206\u4e3a\u4e24\u5927\u7c7b\uff1a</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/#_8","title":"\u5355\u6e90\u6700\u77ed\u8def\u95ee\u9898","text":"<p>\u4ece1\u53f7\u70b9\u5230n\u53f7\u70b9\u7684\u6700\u77ed\u8def\uff0c\u4ece1\u53f7\u70b9\u4ece\u5176\u4ed6\u6240\u6709\u70b9\u7684\u6700\u77ed\u8def</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/#1_1","title":"1. \u6240\u6709\u8fb9\u7684\u6743\u91cd\u90fd\u662f\u6b63\u503c","text":"<ol> <li>\u4f7f\u7528\u6734\u7d20Dijkstra\u7b97\u6cd5 O(n^2 + m) (\u7ea6\u5b9an\u8868\u793a\u70b9\u6570\uff0cm\u8868\u793a\u8fb9\u6570)</li> <li>\u5806\u4f18\u5316\u7684Dijkstra\u7b97\u6cd5 O(mlogn)</li> </ol> <p>\u53ef\u4ee5\u53d1\u73b0\u6734\u7d20\u7684\u505a\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u548c\u8fb9\u6570\u65e0\u5173\uff0c\u6240\u4ee5\u5f53\u70b9\u975e\u5e38\u591a\u7684\u7a20\u5bc6\u56fe\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u6734\u7d20\u7b97\u6cd5</p> <p>\u53cd\u4e4b\uff0c\u7a00\u758f\u56fe\u65f6\uff0cm\u548cn\u65f6\u4e00\u4e2a\u7ea7\u522b\u7684\uff0cn^2\u975e\u5e38\u5927</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/#2_1","title":"2. \u5b58\u5728\u8d1f\u6743\u8fb9","text":"<ol> <li>Bellman-Ford \u7b97\u6cd5 O(nm)</li> <li>SPFA\u7b97\u6cd5\u5bf9\u4e0a\u9762\u7684\u7b97\u6cd5\u8fdb\u884c\u4e86\u4f18\u5316\uff0c\u4e00\u822c\u662fO(m)\u590d\u6742\u5ea6\uff0c\u6700\u5316\u662fO(nm)\uff0c\u6548\u7387\u4e00\u822c\u6bd4\u4e0a\u9762\u90a3\u4e2a\u9ad8</li> </ol> <p>\u5e76\u4e0d\u662f\u6240\u6709\u9898\u76ee\u90fd\u53ef\u4ee5\u7528SPFA\u7b97\u6cd5\u53ef\u4ee5\u505a\uff0c\u5982\u679c\u9650\u5236\u7ecf\u8fc7\u7684\u8fb9\u6570&lt;k\uff0c\u5c31\u4e0d\u80fd\u7528SPFA</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/#_9","title":"\u591a\u6e90\u6c47\u6700\u77ed\u8def\u95ee\u9898","text":"<p>\u6e90\u70b9--\u8d77\u70b9    \u6c47\u70b9-- \u7ec8\u70b9</p> <p>\u4efb\u9009\u4e00\u4e2a\u8d77\u70b9\u6216\u8005\u7ec8\u70b9\uff0c\u6c42\u4ed6\u4eec\u7684\u6700\u77ed\u8def</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/#floyd-on3","title":"Floyd \u7b97\u6cd5 \u65f6\u95f4\u590d\u6742\u5ea6O(n^3)","text":""},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/#dijkstra","title":"\u6734\u7d20dijkstra\u7b97\u6cd5","text":"<p>Dijkstra\u7b97\u6cd5\u662f\u4e00\u79cd\u7528\u4e8e\u89e3\u51b3\u5355\u6e90\u6700\u77ed\u8def\u5f84\u95ee\u9898\u7684\u56fe\u7b97\u6cd5\u3002\u5b83\u7531\u8377\u5170\u8ba1\u7b97\u673a\u79d1\u5b66\u5bb6Edsger Dijkstra\u4e8e1956\u5e74\u63d0\u51fa\u3002</p> <p>\u8be5\u7b97\u6cd5\u901a\u8fc7\u4ece\u8d77\u59cb\u8282\u70b9\u5f00\u59cb\uff0c\u9010\u6b65\u9009\u62e9\u8ddd\u79bb\u8d77\u59cb\u8282\u70b9\u6700\u8fd1\u7684\u8282\u70b9\uff0c\u5e76\u66f4\u65b0\u5176\u4ed6\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\u8ddd\u79bb\uff0c\u76f4\u5230\u627e\u5230\u5230\u8fbe\u76ee\u6807\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\u6216\u8005\u904d\u5386\u5b8c\u6240\u6709\u8282\u70b9\u3002</p> <p>Dijkstra\u7b97\u6cd5\u7684\u57fa\u672c\u601d\u60f3\u662f\u7ef4\u62a4\u4e00\u4e2a\u8ddd\u79bb\u8868\uff0c\u8bb0\u5f55\u4ece\u8d77\u59cb\u8282\u70b9\u5230\u5176\u4ed6\u8282\u70b9\u7684\u5f53\u524d\u6700\u77ed\u8ddd\u79bb\u3002\u5728\u6bcf\u4e00\u6b21\u8fed\u4ee3\u4e2d\uff0c\u9009\u62e9\u8ddd\u79bb\u8d77\u59cb\u8282\u70b9\u6700\u8fd1\u7684\u672a\u8bbf\u95ee\u8282\u70b9\u4f5c\u4e3a\u5f53\u524d\u8282\u70b9\uff0c\u5e76\u901a\u8fc7\u8ba1\u7b97\u4ece\u5f53\u524d\u8282\u70b9\u5230\u5176\u90bb\u5c45\u8282\u70b9\u7684\u8ddd\u79bb\uff0c\u66f4\u65b0\u90bb\u5c45\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\u8ddd\u79bb\u3002\u91cd\u590d\u6b64\u8fc7\u7a0b\u76f4\u5230\u5230\u8fbe\u76ee\u6807\u8282\u70b9\u6216\u8005\u6240\u6709\u8282\u70b9\u90fd\u88ab\u8bbf\u95ee\u3002</p> <p>Dijkstra\u7b97\u6cd5\u7684\u5173\u952e\u64cd\u4f5c\u662f\u5728\u6bcf\u6b21\u8fed\u4ee3\u4e2d\u9009\u62e9\u8ddd\u79bb\u8d77\u59cb\u8282\u70b9\u6700\u8fd1\u7684\u8282\u70b9\uff0c\u4ee5\u53ca\u66f4\u65b0\u90bb\u5c45\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\u8ddd\u79bb\u3002\u4e3a\u4e86\u5b9e\u73b0\u8fd9\u4e9b\u64cd\u4f5c\uff0c\u901a\u5e38\u4f7f\u7528\u4f18\u5148\u961f\u5217\uff08\u4f8b\u5982\u6700\u5c0f\u5806\uff09\u6765\u5b58\u50a8\u5f85\u8bbf\u95ee\u8282\u70b9\u548c\u5bf9\u5e94\u7684\u8ddd\u79bb\u3002</p> <p>Dijkstra\u7b97\u6cd5\u9002\u7528\u4e8e\u6ca1\u6709\u8d1f\u6743\u8fb9\u7684\u52a0\u6743\u6709\u5411\u56fe\u6216\u65e0\u5411\u56fe\u3002\u5b83\u53ef\u4ee5\u7528\u4e8e\u6c42\u89e3\u4ece\u4e00\u4e2a\u8282\u70b9\u5230\u5176\u4ed6\u6240\u6709\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\uff0c\u6216\u8005\u4ec5\u8ba1\u7b97\u4ece\u4e00\u4e2a\u8282\u70b9\u5230\u6307\u5b9a\u76ee\u6807\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\u3002</p> <p>\u5c3d\u7ba1Dijkstra\u7b97\u6cd5\u5728\u65f6\u95f4\u590d\u6742\u5ea6\u4e0a\u8f83\u9ad8\uff08O(V^2)\uff0c\u5176\u4e2dV\u662f\u8282\u70b9\u6570\uff09\uff0c\u4f46\u5b83\u5728\u5b9e\u8df5\u4e2d\u901a\u5e38\u8868\u73b0\u826f\u597d\uff0c\u5e76\u4e14\u88ab\u5e7f\u6cdb\u5e94\u7528\u4e8e\u8def\u7531\u8ba1\u7b97\u3001\u5730\u7406\u4fe1\u606f\u7cfb\u7edf\u548c\u7f51\u7edc\u4f18\u5316\u7b49\u9886\u57df\u3002</p> <p>\u6a21\u677f\uff1a</p> <pre><code>int g[N][N];  // \u5b58\u50a8\u6bcf\u6761\u8fb9\nint dist[N];  // \u5b58\u50a81\u53f7\u70b9\u5230\u6bcf\u4e2a\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\nbool st[N];   // \u5b58\u50a8\u6bcf\u4e2a\u70b9\u7684\u6700\u77ed\u8def\u662f\u5426\u5df2\u7ecf\u786e\u5b9a\n\n// \u6c421\u53f7\u70b9\u5230n\u53f7\u70b9\u7684\u6700\u77ed\u8def\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5219\u8fd4\u56de-1\nint dijkstra()\n{\n    memset(dist, 0x3f, sizeof dist);\n    dist[1] = 0;\n\n    for (int i = 0; i &lt; n - 1; i ++ )\n    {\n        int t = -1;     // \u5728\u8fd8\u672a\u786e\u5b9a\u6700\u77ed\u8def\u7684\u70b9\u4e2d\uff0c\u5bfb\u627e\u8ddd\u79bb\u6700\u5c0f\u7684\u70b9\n        for (int j = 1; j &lt;= n; j ++ )\n            if (!st[j] &amp;&amp; (t == -1 || dist[t] &gt; dist[j]))\n                t = j;\n\n        // \u7528t\u66f4\u65b0\u5176\u4ed6\u70b9\u7684\u8ddd\u79bb\n        for (int j = 1; j &lt;= n; j ++ )\n            dist[j] = min(dist[j], dist[t] + g[t][j]);\n\n        st[t] = true;\n    }\n\n    if (dist[n] == 0x3f3f3f3f) return -1;\n    return dist[n];\n}\n</code></pre> <p>\u57fa\u4e8e\u8d2a\u5fc3\u7684\u601d\u8def  </p> <p>\u57fa\u672c\u7b97\u6cd5\u601d\u8def\uff1a\u6c42\u7684\u662f1\u53f7\u70b9\u5230\u5176\u4ed6\u6240\u6709\u70b9\u7684\u6700\u77ed\u8def\u8ddd\u79bb</p> <ol> <li>\u5148\u521d\u59cb\u5316\u6211\u4eec\u7684\u4e3e\u4f8b\uff0cdist[1] = 0, dist[i] = \u6b63\u65e0\u7a77</li> <li>for (i : 0 ~ n ) \u8fed\u4ee3\u8fc7\u7a0b\uff0c\u6bcf\u4e00\u6b21\u786e\u5b9a\u4e00\u4e2a\u6700\u77ed\u8def</li> </ol> <p>\u627e\u5230\u5f53\u524d\u5df2\u7ecf\u786e\u5b9a\u6700\u77ed\u8ddd\u79bb\u7684\u70b9\u5b58\u5230S</p> <p>t\u4e0d\u5728s\u4e2d\u4e3e\u4f8b\u6700\u8fd1\u7684\u70b9</p> <p>\u628at\u52a0\u5230s\u4e2d\u53bb</p> <p>\u7528t\u66f4\u65b0\u5176\u4ed6\u70b9\u7684\u8ddd\u79bb</p> <p>\u4ecet\u51fa\u53bb\u7684\u6240\u6709\u8fb9\u80fd\u4e0d\u80fd\u66f4\u65b0\u5176\u4ed6\u70b9\u7684\u8ddd\u79bb</p> <p>dist[x] &gt; dist[tx] \u66f4\u65b0</p> <p>\u7b80\u800c\u8a00\u4e4b\uff0c\u5c31\u662f\u6bcf\u6b21\u66f4\u65b0\u6311\u6700\u77ed\u8def\u7684\u90a3\u4e2a\u6765\u66f4\u65b0\u5176\u4ed6\u5269\u4e0b\u70b9\u7684\u8ddd\u79bb</p> <p>\u7a20\u5bc6\u56fe\u90bb\u63a5\u77e9\u9635\u6765\u5b58</p> <p>\u7a00\u758f\u56fe\u7528\u90bb\u63a5\u8868\u6765\u5b58</p> <p>Leetcode\u91cc\u9762\u56fe\u8bba\u7684\u9898\u76ee\u975e\u5e38\u5c11\uff0c\u7b14\u8bd5\u5168\u662f\u56fe\u8bba\u548cdp</p> <p>\u5982\u679c\u6240\u6709\u8fb9\u662f\u6b63\u7684\uff0c\u4e24\u70b9\u4e4b\u95f4\u53ea\u8981\u5b58\u50a8\u6700\u77ed\u7684\u4e00\u6761\u8fb9\u5c31\u884c</p> <pre><code>#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\n#include&lt;cstring&gt;\nusing namespace std;\n\nconst int N=510;\n\nint g[N][N];    //\u4e3a\u7a20\u5bc6\u9635\u6240\u4ee5\u7528\u90bb\u63a5\u77e9\u9635\u5b58\u50a8\nint dist[N];    //\u7528\u4e8e\u8bb0\u5f55\u5f53\u524d\u72b6\u6001\u4e0b\u6bcf\u4e00\u4e2a\u70b9\u8ddd\u79bb\u7b2c\u4e00\u4e2a\u70b9\u7684\u8ddd\u79bb\nbool st[N];     //\u7528\u4e8e\u8bb0\u5f55\u8be5\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\u662f\u5426\u5df2\u7ecf\u786e\u5b9a\n\nint n,m;\n\nint Dijkstra()\n{\n    memset(dist, 0x3f,sizeof dist);     //\u521d\u59cb\u5316\u8ddd\u79bb  0x3f\u4ee3\u8868\u65e0\u9650\u5927\n\n    dist[1]=0;  //\u7b2c\u4e00\u4e2a\u70b9\u5230\u81ea\u8eab\u7684\u8ddd\u79bb\u4e3a0\n\n    for(int i=0;i&lt;n;i++)      //\u6709n\u4e2a\u70b9\u6240\u4ee5\u8981\u8fdb\u884cn\u6b21 \u8fed\u4ee3\n    {\n        int t=-1;       //t\u5b58\u50a8\u5f53\u524d\u8bbf\u95ee\u7684\u70b9\n\n        for(int j=1;j&lt;=n;j++)   //\u8fd9\u91cc\u7684j\u4ee3\u8868\u7684\u662f\u4ece1\u53f7\u70b9\u5f00\u59cb\n            if(!st[j]&amp;&amp;(t==-1||dist[t]&gt;dist[j]))     // \u4e3a\u4e86\u5b58\u50a8\u6240\u6709\u70b9\u4e2d\u7684\u6700\u5c0f\u503c\uff0c\u5728\u6240\u6709false\u7684\u70b9\u4e2d\u627edist\u6700\u5c0f\u7684\u4e00\u4e2a\u70b9\n                t=j;\n\n        st[t]=true;   \n\n        for(int j=1;j&lt;=n;j++)           //\u4f9d\u6b21\u66f4\u65b0\u6bcf\u4e2a\u70b9\u6240\u5230\u76f8\u90bb\u7684\u70b9\u8def\u5f84\u503c\n            dist[j]=min(dist[j],dist[t]+g[t][j]);\n    }\n\n    if(dist[n]==0x3f3f3f3f) return -1;  //\u5982\u679c\u7b2cn\u4e2a\u70b9\u8def\u5f84\u4e3a\u65e0\u7a77\u5927\u5373\u4e0d\u5b58\u5728\u6700\u4f4e\u8def\u5f84\n    return dist[n];\n}\nint main()\n{\n    cin&gt;&gt;n&gt;&gt;m;\n\n    memset(g,0x3f,sizeof g);    //\u521d\u59cb\u5316\u56fe \u56e0\u4e3a\u662f\u6c42\u6700\u77ed\u8def\u5f84\n                                //\u6240\u4ee5\u6bcf\u4e2a\u70b9\u521d\u59cb\u4e3a\u65e0\u9650\u5927\n\n    while(m--)\n    {\n        int x,y,z;\n        cin&gt;&gt;x&gt;&gt;y&gt;&gt;z;\n        g[x][y]=min(g[x][y],z);     //\u5982\u679c\u53d1\u751f\u91cd\u8fb9\u7684\u60c5\u51b5\u5219\u4fdd\u7559\u6700\u77ed\u7684\u4e00\u6761\u8fb9\n    }\n\n    cout&lt;&lt;Dijkstra()&lt;&lt;endl;\n    return 0;\n}\n</code></pre> <p>\u5de5\u7a0b\u5316\u7684\u4ee3\u7801\u548c\u7b97\u6cd5\u4ee3\u7801\u4e0d\u4e00\u6837</p> <p>\u5de5\u7a0b\u5316\u8ffd\u6c42\u7684\u662f\u8ba9\u522b\u4eba\u770b\u61c2\uff0c\u65e5\u540e\u597d\u4fee\u6539\u597d\u7ef4\u62a4</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/#dijkstra_1","title":"\u5806\u4f18\u5316\u7248dijkstra","text":"<p>m\u548cn^2\u662f\u4e00\u4e2a\u7ea7\u522b\u7684\u65f6\u5019\u5c31\u662f\u7a20\u5bc6\u56fe</p> <p>\u7528\u5806\u6765\u505a\uff0c\u6bcf\u6b21\u90fd\u80fd\u627e\u5230\u8ddd\u79bb\u6700\u8fd1\u7684\u70b9</p> <p>\u5806\u4e24\u79cd\u5b9e\u73b0\u65b9\u5f0f\uff1a</p> <ol> <li>\u624b\u5199\u5806 \u53ef\u4ee5\u7ef4\u62a4n\u4e2a\u6570</li> <li>\u7528\u4f18\u5148\u961f\u5217\u6765\u7ef4\u62a4\uff0c\u4e0d\u652f\u6301\u4fee\u6539\u4efb\u610f\u4e00\u4e2a\u5143\u7d20\uff0c\u5b9e\u73b0\u65b9\u5f0f\u662f\u5197\u4f59\uff0c\u6bcf\u6b21\u90fd\u662f\u5411\u91cc\u9762\u63d2\u5165\u6570\uff0c\u5806\u91cc\u7684\u5143\u7d20\u5c31\u53ef\u80fd\u56de\u53d8\u6210m\u4e2a\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u548c\u624b\u5199\u5806\u662f\u4e00\u4e2a\u6570\u91cf\u7ea7 </li> </ol> <p>\u4e0d\u7528\u624b\u5199\u5806</p> <p>\u4f18\u5148\u961f\u5217\u91cc\u9762\u6709\u5f88\u591a\u5197\u4f59</p> <p>\u6a21\u677f\uff1a</p> <pre><code>typedef pair&lt;int, int&gt; PII;\n\nint n;      // \u70b9\u7684\u6570\u91cf\nint h[N], w[N], e[N], ne[N], idx;       // \u90bb\u63a5\u8868\u5b58\u50a8\u6240\u6709\u8fb9\nint dist[N];        // \u5b58\u50a8\u6240\u6709\u70b9\u52301\u53f7\u70b9\u7684\u8ddd\u79bb\nbool st[N];     // \u5b58\u50a8\u6bcf\u4e2a\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\u662f\u5426\u5df2\u786e\u5b9a\n\n// \u6c421\u53f7\u70b9\u5230n\u53f7\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\uff0c\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de-1\nint dijkstra()\n{\n    memset(dist, 0x3f, sizeof dist);\n    dist[1] = 0;\n    priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;PII&gt;&gt; heap;\n    heap.push({0, 1});      // first\u5b58\u50a8\u8ddd\u79bb\uff0csecond\u5b58\u50a8\u8282\u70b9\u7f16\u53f7\n\n    while (heap.size())\n    {\n        auto t = heap.top();\n        heap.pop();\n\n        int ver = t.second, distance = t.first;\n\n        if (st[ver]) continue;\n        st[ver] = true;\n\n        for (int i = h[ver]; i != -1; i = ne[i])\n        {\n            int j = e[i];\n            if (dist[j] &gt; distance + w[i])\n            {\n                dist[j] = distance + w[i];\n                heap.push({dist[j], j});\n            }\n        }\n    }\n\n    if (dist[n] == 0x3f3f3f3f) return -1;\n    return dist[n];\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/#850dijkstra2","title":"850.Dijkstra\u6c42\u6700\u77ed\u8def2","text":"<pre><code>#include &lt;cstring&gt;\n#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n#include &lt;queue&gt;\n\nusing namespace std;\n\ntypedef pair&lt;int, int&gt; PII;\n\nconst int N = 1e6 + 10;\n\nint n, m;\nint h[N], w[N], e[N], ne[N], idx;// w\u8868\u793a\u6743\u91cd\nint dist[N];\nbool st[N];\n\nvoid add(int a, int b, int c)\n{\n    e[idx] = b, w[idx] = c, ne[idx] = h[a], h[a] = idx ++ ;\n}\n\nint dijkstra()\n{\n    memset(dist, 0x3f, sizeof dist);\n    dist[1] = 0;\n    priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;PII&gt;&gt; heap; // \u8fd9\u4e2a\u5c31\u662f\u5c0f\u6839\u5806\u7684\u5b9a\u4e49\u65b9\u5f0f\uff0c\u4e0d\u7528\u7ea0\u7ed3\u4e3a\u4ec0\u4e48\u8981\u8fd9\u4e48\u5199\uff0c\u80cc\u8fc7\u5c31\u884c\u4e86vector\u8868\u793a\u5806\u7531\u4ec0\u4e48\u6765\u5b9e\u73b0\uff0cgreater\u662f\u53e6\u5916\u4e00\u4e2a\u53c2\u6570\n    heap.push({0, 1});\n\n    while (heap.size())\n    {\n        auto t = heap.top(); // \u6bcf\u6b21\u627e\u5230\u5f53\u524d\u8ddd\u79bb\u6700\u8fd1\u7684\u70b9\n        heap.pop();\n\n        int ver = t.second, distance = t.first;\n\n        if (st[ver]) continue;\n        st[ver] = true;\n\n        for (int i = h[ver]; i != -1; i = ne[i])\n        {\n            int j = e[i];\n            if (dist[j] &gt; dist[ver] + w[i])\n            {\n                dist[j] = dist[ver] + w[i];\n                heap.push({dist[j], j});\n            }\n        }\n    }\n\n    if (dist[n] == 0x3f3f3f3f) return -1;\n    return dist[n];\n}\n\nint main()\n{\n    scanf(\"%d%d\", &amp;n, &amp;m);\n\n    memset(h, -1, sizeof h);\n    while (m -- )\n    {\n        int a, b, c;\n        scanf(\"%d%d%d\", &amp;a, &amp;b, &amp;c);\n        add(a, b, c);\n    }\n\n    printf(\"%d\\n\", dijkstra());\n\n    return 0;\n}\n</code></pre> <p>\u53e6\u4e00\u79cd\u505a\u6cd5\u548c\u6ce8\u91ca</p> <pre><code>#include&lt;iostream&gt;\n#include&lt;cstring&gt;\n#include&lt;queue&gt;\n\nusing namespace std;\n\ntypedef pair&lt;int, int&gt; PII;\n\nconst int N = 100010; // \u628aN\u6539\u4e3a150010\u5c31\u80fdac\n\n// \u7a00\u758f\u56fe\u7528\u90bb\u63a5\u8868\u6765\u5b58\nint h[N], e[N], ne[N], idx;\nint w[N]; // \u7528\u6765\u5b58\u6743\u91cd\nint dist[N];\nbool st[N]; // \u5982\u679c\u4e3atrue\u8bf4\u660e\u8fd9\u4e2a\u70b9\u7684\u6700\u77ed\u8def\u5f84\u5df2\u7ecf\u786e\u5b9a\n\nint n, m;\n\nvoid add(int x, int y, int c)\n{\n    // \u6709\u91cd\u8fb9\u4e5f\u4e0d\u8981\u7d27\uff0c\u5047\u8bbe1-&gt;2\u6709\u6743\u91cd\u4e3a2\u548c3\u7684\u8fb9\uff0c\u518d\u904d\u5386\u5230\u70b91\u7684\u65f6\u50192\u53f7\u70b9\u7684\u8ddd\u79bb\u4f1a\u66f4\u65b0\u4e24\u6b21\u653e\u5165\u5806\u4e2d\n    // \u8fd9\u6837\u5806\u4e2d\u4f1a\u6709\u5f88\u591a\u5197\u4f59\u7684\u70b9\uff0c\u4f46\u662f\u5728\u5f39\u51fa\u7684\u65f6\u5019\u8fd8\u662f\u4f1a\u5f39\u51fa\u6700\u5c0f\u503c2+x\uff08x\u4e3a\u4e4b\u524d\u786e\u5b9a\u7684\u6700\u77ed\u8def\u5f84\uff09\uff0c\n    // \u5e76\u6807\u8bb0st\u4e3atrue\uff0c\u6240\u4ee5\u4e0b\u4e00\u6b21\u5f39\u51fa3+x\u4f1acontinue\u4e0d\u4f1a\u5411\u4e0b\u6267\u884c\u3002\n    w[idx] = c;\n    e[idx] = y;\n    ne[idx] = h[x]; \n    h[x] = idx++;\n}\n\nint dijkstra()\n{\n    memset(dist, 0x3f, sizeof(dist));\n    dist[1] = 0;\n    priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;PII&gt;&gt; heap; // \u5b9a\u4e49\u4e00\u4e2a\u5c0f\u6839\u5806\n    // \u8fd9\u91ccheap\u4e2d\u4e3a\u4ec0\u4e48\u8981\u5b58pair\u5462\uff0c\u9996\u5148\u5c0f\u6839\u5806\u662f\u6839\u636e\u8ddd\u79bb\u6765\u6392\u7684\uff0c\u6240\u4ee5\u6709\u4e00\u4e2a\u53d8\u91cf\u8981\u662f\u8ddd\u79bb\uff0c\n    // \u5176\u6b21\u5728\u4ece\u5806\u4e2d\u62ff\u51fa\u6765\u7684\u65f6\u5019\u8981\u77e5\u9053\u77e5\u9053\u8fd9\u4e2a\u70b9\u662f\u54ea\u4e2a\u70b9\uff0c\u4e0d\u7136\u600e\u4e48\u66f4\u65b0\u90bb\u63a5\u70b9\u5462\uff1f\u6240\u4ee5\u7b2c\u4e8c\u4e2a\u53d8\u91cf\u8981\u5b58\u70b9\u3002\n    heap.push({ 0, 1 }); // \u8fd9\u4e2a\u987a\u5e8f\u4e0d\u80fd\u5012\uff0cpair\u6392\u5e8f\u65f6\u662f\u5148\u6839\u636efirst\uff0c\u518d\u6839\u636esecond\uff0c\n                         // \u8fd9\u91cc\u663e\u7136\u8981\u6839\u636e\u8ddd\u79bb\u6392\u5e8f\n    while(heap.size())\n    {\n        PII k = heap.top(); // \u53d6\u4e0d\u5728\u96c6\u5408S\u4e2d\u8ddd\u79bb\u6700\u77ed\u7684\u70b9\n        heap.pop();\n        int ver = k.second, distance = k.first;\n\n        if(st[ver]) continue;\n        st[ver] = true;\n\n        for(int i = h[ver]; i != -1; i = ne[i])\n        {\n            int j = e[i]; // i\u53ea\u662f\u4e2a\u4e0b\u6807\uff0ce\u4e2d\u5728\u5b58\u7684\u662fi\u8fd9\u4e2a\u4e0b\u6807\u5bf9\u5e94\u7684\u70b9\u3002\n            if(dist[j] &gt; distance + w[i])\n            {\n                dist[j] = distance + w[i];\n                heap.push({ dist[j], j });\n            }\n        }\n    }\n    if(dist[n] == 0x3f3f3f3f) return -1;\n    else return dist[n];\n}\n\nint main()\n{\n    memset(h, -1, sizeof(h));\n    scanf(\"%d%d\", &amp;n, &amp;m);\n\n    while (m--)\n    {\n        int x, y, c;\n        scanf(\"%d%d%d\", &amp;x, &amp;y, &amp;c);\n        add(x, y, c);\n    }\n\n    cout &lt;&lt; dijkstra() &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/#bellman-ford","title":"Bellman-Ford\u7b97\u6cd5","text":"<p>Bellman-Ford\u7b97\u6cd5\u662f\u4e00\u79cd\u7528\u4e8e\u89e3\u51b3\u5355\u6e90\u6700\u77ed\u8def\u5f84\u95ee\u9898\u7684\u56fe\u7b97\u6cd5\u3002\u5b83\u7531\u7f8e\u56fd\u6570\u5b66\u5bb6Richard Bellman\u548cLeslie Ford\u57281958\u5e74\u63d0\u51fa\u3002</p> <p>\u8be5\u7b97\u6cd5\u9002\u7528\u4e8e\u5e26\u6709\u8d1f\u6743\u8fb9\u7684\u52a0\u6743\u6709\u5411\u56fe\u6216\u65e0\u5411\u56fe\uff0c\u5305\u62ec\u68c0\u6d4b\u8d1f\u73af\u7684\u60c5\u51b5\u3002\u4e0eDijkstra\u7b97\u6cd5\u4e0d\u540c\uff0cBellman-Ford\u7b97\u6cd5\u53ef\u4ee5\u5904\u7406\u5305\u542b\u8d1f\u6743\u8fb9\u7684\u56fe\uff0c\u5e76\u4e14\u80fd\u591f\u68c0\u6d4b\u5230\u8d1f\u6743\u73af\u3002\u7136\u800c\uff0c\u7531\u4e8e\u9700\u8981\u5bf9\u6240\u6709\u8fb9\u8fdb\u884c\u677e\u5f1b\u64cd\u4f5c\u7684\u8fed\u4ee3\uff0cBellman-Ford\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u6bd4Dijkstra\u7b97\u6cd5\u9ad8\u3002</p> <p>Bellman-Ford\u7b97\u6cd5\u7684\u57fa\u672c\u601d\u60f3\u662f\u901a\u8fc7\u5bf9\u6bcf\u6761\u8fb9\u8fdb\u884c\u677e\u5f1b\u64cd\u4f5c\u6765\u9010\u6b65\u66f4\u65b0\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\u8ddd\u79bb\u3002\u7b97\u6cd5\u4ece\u8d77\u59cb\u8282\u70b9\u5f00\u59cb\uff0c\u5c06\u8d77\u59cb\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\u8ddd\u79bb\u521d\u59cb\u5316\u4e3a0\uff0c\u5c06\u5176\u4ed6\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\u8ddd\u79bb\u521d\u59cb\u5316\u4e3a\u6b63\u65e0\u7a77\u5927\u3002\u7136\u540e\uff0c\u5728\u6bcf\u4e00\u8f6e\u8fed\u4ee3\u4e2d\uff0c\u904d\u5386\u56fe\u4e2d\u7684\u6240\u6709\u8fb9\uff0c\u5e76\u5c1d\u8bd5\u901a\u8fc7\u5f53\u524d\u8fb9\u8fdb\u884c\u677e\u5f1b\u64cd\u4f5c\u4ee5\u66f4\u65b0\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\u8ddd\u79bb\u3002\u91cd\u590d\u6267\u884c\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u76f4\u5230\u6ca1\u6709\u66f4\u591a\u7684\u8fb9\u53ef\u4ee5\u4f7f\u5f97\u8def\u5f84\u8ddd\u79bb\u53d8\u77ed\u4e3a\u6b62\u3002</p> <p>Bellman-Ford\u7b97\u6cd5\u8fd8\u5305\u542b\u4e00\u4e2a\u989d\u5916\u7684\u6b65\u9aa4\uff0c\u5373\u68c0\u6d4b\u8d1f\u6743\u73af\u3002\u5728\u6bcf\u6b21\u8fed\u4ee3\u4e4b\u540e\uff0c\u518d\u8fdb\u884c\u4e00\u8f6e\u904d\u5386\uff0c\u5e76\u68c0\u67e5\u662f\u5426\u5b58\u5728\u53ef\u4ee5\u8fdb\u4e00\u6b65\u7f29\u77ed\u8def\u5f84\u8ddd\u79bb\u7684\u8fb9\u3002\u5982\u679c\u5728\u6700\u540e\u4e00\u8f6e\u8fed\u4ee3\u4e2d\u4ecd\u7136\u53ef\u4ee5\u66f4\u65b0\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\u8ddd\u79bb\uff0c\u5219\u8bf4\u660e\u56fe\u4e2d\u5b58\u5728\u8d1f\u6743\u73af\u3002</p> <p>\u5c3d\u7ba1Bellman-Ford\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(V * E)\uff0c\u5176\u4e2dV\u662f\u8282\u70b9\u6570\uff0cE\u662f\u8fb9\u6570\uff0c\u76f8\u5bf9\u4e8eDijkstra\u7b97\u6cd5\u7684O(V<sup>2)\u548cFloyd-Warshall\u7b97\u6cd5\u7684O(V</sup>3)\uff0cBellman-Ford\u7b97\u6cd5\u5728\u5904\u7406\u5e26\u6709\u8d1f\u6743\u8fb9\u7684\u56fe\u65f6\u662f\u4e00\u79cd\u6709\u6548\u7684\u9009\u62e9\u3002</p> <p>\u7136\u800c\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cBellman-Ford\u7b97\u6cd5\u5728\u56fe\u4e2d\u5b58\u5728\u8d1f\u6743\u73af\u7684\u60c5\u51b5\u4e0b\u5e76\u4e0d\u4f1a\u7ed9\u51fa\u6b63\u786e\u7684\u6700\u77ed\u8def\u5f84\u8ddd\u79bb\uff0c\u56e0\u4e3a\u8d1f\u6743\u73af\u53ef\u4ee5\u4f7f\u8def\u5f84\u8ddd\u79bb\u65e0\u9650\u51cf\u5c0f\u3002\u56e0\u6b64\uff0c\u5728\u4f7f\u7528Bellman-Ford\u7b97\u6cd5\u65f6\uff0c\u901a\u5e38\u9700\u8981\u8fdb\u884c\u989d\u5916\u7684\u5224\u65ad\u6765\u68c0\u6d4b\u8d1f\u6743\u73af\u7684\u5b58\u5728\u3002</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6 O(nm)\uff0cn\u793a\u70b9\u6570\uff0cm\u8868\u793a\u8fb9\u6570 \u6ce8\u610f\u5728\u6a21\u677f\u9898\u4e2d\u9700\u8981\u5bf9\u4e0b\u9762\u7684\u6a21\u677f\u7a0d\u4f5c\u4fee\u6539\uff0c\u52a0\u4e0a\u5907\u4efd\u6570\u7ec4\uff0c\u8be6\u60c5\u89c1\u6a21\u677f\u9898\u3002</p> <p>\u57fa\u4e8e\u52a8\u6001\u89c4\u5212</p> <p>\u8fed\u4ee3n\u6b21 for n \u6b21</p> <p>for \u6240\u6709\u8fb9a,b,w \u5b58\u5728\u4e00\u6761a\u5230b\u7684\u8fb9\uff0c\u6743\u91cd\u662fw</p> <pre><code>int n, m;       // n\u8868\u793a\u70b9\u6570\uff0cm\u8868\u793a\u8fb9\u6570\nint dist[N];        // dist[x]\u5b58\u50a81\u5230x\u7684\u6700\u77ed\u8def\u8ddd\u79bb\n\nstruct Edge     // \u8fb9\uff0ca\u8868\u793a\u51fa\u70b9\uff0cb\u8868\u793a\u5165\u70b9\uff0cw\u8868\u793a\u8fb9\u7684\u6743\u91cd\n{\n    int a, b, w;\n}edges[M];\n\n// \u6c421\u5230n\u7684\u6700\u77ed\u8def\u8ddd\u79bb\uff0c\u5982\u679c\u65e0\u6cd5\u4ece1\u8d70\u5230n\uff0c\u5219\u8fd4\u56de-1\u3002\nint bellman_ford()\n{\n    memset(dist, 0x3f, sizeof dist);\n    dist[1] = 0;\n\n    // \u5982\u679c\u7b2cn\u6b21\u8fed\u4ee3\u4ecd\u7136\u4f1a\u677e\u5f1b\u4e09\u89d2\u4e0d\u7b49\u5f0f\uff0c\u5c31\u8bf4\u660e\u5b58\u5728\u4e00\u6761\u957f\u5ea6\u662fn+1\u7684\u6700\u77ed\u8def\u5f84\uff0c\u7531\u62bd\u5c49\u539f\u7406\uff0c\u8def\u5f84\u4e2d\u81f3\u5c11\u5b58\u5728\u4e24\u4e2a\u76f8\u540c\u7684\u70b9\uff0c\u8bf4\u660e\u56fe\u4e2d\u5b58\u5728\u8d1f\u6743\u56de\u8def\u3002\n    for (int i = 0; i &lt; n; i ++ )\n    {\n        for (int j = 0; j &lt; m; j ++ )\n        {\n            int a = edges[j].a, b = edges[j].b, w = edges[j].w;\n            if (dist[b] &gt; dist[a] + w)\n                dist[b] = dist[a] + w;\n        }\n    }\n\n    if (dist[n] &gt; 0x3f3f3f3f / 2) return -1;\n    return dist[n];\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/#spfa-bellman-ford","title":"spfa \u7b97\u6cd5\uff08\u961f\u5217\u4f18\u5316\u7684Bellman-Ford\u7b97\u6cd5\uff09","text":""},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/#spfa","title":"spfa\u5224\u65ad\u56fe\u4e2d\u662f\u5426\u5b58\u5728\u8d1f\u73af","text":""},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/#floyd","title":"floyd\u7b97\u6cd5 \u2014\u2014 \u6a21\u677f\u9898","text":""},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/#prim","title":"\u6734\u7d20\u7248prim\u7b97\u6cd5","text":""},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/#kruskal","title":"Kruskal\u7b97\u6cd5","text":""},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/#_10","title":"\u67d3\u8272\u6cd5\u5224\u522b\u4e8c\u5206\u56fe","text":""},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/#_11","title":"\u5308\u7259\u5229\u7b97\u6cd5","text":""},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/","title":"\u7b2c\u4e8c\u8bb2 \u6570\u636e\u7ed3\u6784","text":"<p>\u5982\u4f55\u7528\u6570\u7ec4\u6765\u6a21\u62df\u8fd9\u4e9b\u6570\u636e\u7ed3\u6784\uff0c\u800c\u4e0d\u7528\u7ed3\u6784\u4f53\uff0c\u4e3b\u8981\u662f\u6548\u7387\u95ee\u9898</p> <pre><code>struct Node {\n    int val;\n    Node *nest;\n};\n// \u5728\u9762\u8bd5\u9898\u91cc\u591a\uff0c\u4f46\u662f\u5728\u7b14\u8bd5\u9898\u91cc\u9762\u6bd4\u8f83\u5c11\nnew Node(); // \u975e\u5e38\u6162\uff0cnew\u51e0\u767e\u4e07\u4e2a\u8282\u70b9\u5c31\u80fd\u76f4\u63a5\u8d85\u65f6\u4e86\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_2","title":"\u94fe\u8868\u4e0e\u90bb\u63a5\u8868","text":"<p>\u4ec0\u4e48\u662f\u94fe\u8868\uff0c\u6bcf\u4e2a\u70b9\u5b58\u4e24\u4e2a\u503c\uff0c\u4e00\u4e2a\u662f\u81ea\u5df1\u7684\u503c\uff0c\u4e00\u4e2a\u6307\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9</p> <p>\u4e24\u79cd\u94fe\u8868\uff1a\u5355\u94fe\u8868\u3001\u53cc\u94fe\u8868</p> <p>\u5355\u94fe\u8868\u4e2d\u7528\u7684\u6700\u591a\u7684\u662f\u90bb\u63a5\u8868\uff0c\u90bb\u63a5\u8868\u5176\u5b9e\u662fn\u4e2a\u94fe\u8868\uff0c\u6700\u4e3b\u8981\u7684\u5e94\u7528\uff1a\u5b58\u50a8\u56fe\u548c\u6811</p> <p>\u53cc\u94fe\u8868\u7684\u4f5c\u7528\u662f\u4f18\u5316\u67d0\u4e9b\u95ee\u9898</p> <p>\u6bcf\u4e2a\u70b9\u90fd\u4f1a\u5b58\u4e00\u4e2a\u503c\u548c\u4e00\u4e2anext\u6307\u9488</p> <p>\u7528\u6570\u7ec4\u6765\u6a21\u62df\u9700\u8981\u5148\u5b9a\u4e49 e[N], ne[N]</p> <p>\u7528\u4e0b\u6807\u5173\u8054\u8d77\u6765</p> <p>\u7a7a\u8282\u70b9\u7528-1\u8868\u793a</p> <p>0\u53f7\u70b9\u7684\u6307\u9488\u662fe[0] = val, ne[0] = 1</p> <p>\u94fe\u5b50\u4e00\u6837\uff0c\u53ef\u4ee5\u6cbf\u7740\u94fe\u5b50\u904d\u5386\u6574\u4e2a\u6570\u7ec4</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_3","title":"\u5355\u94fe\u8868","text":"<p>\u5355\u94fe\u8868\u6a21\u677f\uff1a</p> <pre><code>// head\u5b58\u50a8\u94fe\u8868\u5934\uff08\u5934\u8282\u70b9\u7684\u4e0b\u6807\uff09\uff0ce[]\u5b58\u50a8\u8282\u70b9\u7684\u503c\uff0cne[]\u5b58\u50a8\u8282\u70b9\u7684next\u6307\u9488\uff0cidx\u8868\u793a\u5f53\u524d\u7528\u5230\u4e86\u54ea\u4e2a\u8282\u70b9\uff08\u5b58\u50a8\u5f53\u524d\u5df2\u7ecf\u7528\u5230\u4e86\u4ec0\u4e48\u5730\u5740\uff09\nint head, e[N], ne[N], idx;\n\n// \u521d\u59cb\u5316\nvoid init()\n{\n    head = -1; // \u6307\u5411\u961f\u5c3e\n    idx = 0; // \u6bcf\u4e2a\u70b9\u90fd\u6ca1\u6709\u88ab\u5206\u914d\n}\n\n// \u5728\u94fe\u8868\u5934\u63d2\u5165\u4e00\u4e2a\u6570a \nvoid insert(int a)\n{\n    e[idx] = a;\n    ne[idx] = head;\n    head = idx;\n    idx++;\n}\n// \u5c06\u4e00\u4e2a\u70b9\u63d2\u5230\u4e0b\u6807\u662fk\u7684\u70b9\u7684\u540e\u9762\nvoid insert(int k, int a) {\n    e[idx] = a;\n    ne[idx] = ne[k]; // \u6307\u5411k\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n    ne[k] = idx;\n    idx++;\n}\n// \u5c06\u5934\u7ed3\u70b9\u5220\u9664\uff0c\u9700\u8981\u4fdd\u8bc1\u5934\u7ed3\u70b9\u5b58\u5728\nvoid remove()\n{\n    head = ne[head];\n}\n\n// \u5c06\u4e0b\u6807\u662fk\u7684\u70b9\u7684\u540e\u9762\u7684\u70b9\u5220\u6389\n// \u53ea\u9700\u8981\u5c06\u6307\u9488\u6307\u5411\u4e0b\u4e0b\u4e2a\u70b9\u5373\u53ef\uff0c\u5176\u4ed6\u4e0d\u7528\u53d8\nvoid remove(int k) {\n    ne[k] = ne[ne[k]];\n}\n</code></pre> <p>\u6570\u7ec4\u7684\u597d\u5904\u5c31\u662f\u5feb\uff0c\u6bd4\u52a8\u6001\u94fe\u8868\u5feb\u5f88\u591a\uff0cC++\u7528new\u5de8\u6162\uff0c\u7b97\u6cd5\u9898\u7684\u65f6\u5019\u4f1a\u8d85\u65f6</p> <p>\u6570\u7ec4\u6a21\u62df\u94fe\u8868\u88ab\u53eb\u505a\u9759\u6001\u94fe\u8868</p> <p>\u5355\u94fe\u8868\u53ea\u80fd\u77e5\u9053\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u4e1c\u897f\uff0c\u4e0d\u80fd\u77e5\u9053\u524d\u4e00\u4e2a\u8282\u70b9\uff0c\u8981\u77e5\u9053\u7684\u8bdd\u53ea\u80fd\u4ecehead\u5f00\u59cb\u904d\u5386</p> <p>\u7b97\u6cd5\u9898\u4e0d\u7528\u8003\u8651\u5185\u5b58\u6cc4\u6f0f\u7684\u95ee\u9898\uff0c\u5220\u9664\u5b9e\u9645\u4e0a\u4f1a\u6d6a\u8d39\u4e00\u4e2a\u6570\u7ec4\u7a7a\u95f4\uff0c\u4f46\u662f\u4e0d\u7528\u8003\u8651</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#826","title":"826. \u5355\u94fe\u8868","text":"<p>\u5220\u9664\u7b2ck\u4e2a\u63d2\u5165\u7684\u6570\u540e\u9762\u7684\u6570\uff0c\u5c31\u662f\u5220\u9664\u4e0b\u6807\u662fk-1\u7684\u70b9</p> <p>\u5728\u7b2ck\u4e2a\u63d2\u5165\u7684\u6570\u540e\u63d2\u5165\u4e00\u4e2a\u6570\u5c31\u662f\uff0c\u5728\u4e0b\u6807\u662fk-1\u7684\u70b9\u540e\u9762\u63d2\u5165\u4e00\u4e2a\u6570</p> <p>\u6bd4\u5982<code>I 1 1</code> \u5176\u5b9e\u5c31\u662f\u5728\u5c0f\u8868\u793a0\u7684\u70b9\u540e\u9762\u63d2\u5165\u4e00\u4e2a\u6570\u503c1</p> <p>\u5220\u9664\u5934\u8282\u70b9\uff0c\u5c31\u662f\u628a\u6574\u6761\u94fe\u8868\u5220\u9664\u4e86</p> <pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nconst int N = 100010;\n\n// head \u8868\u793a\u5934\u7ed3\u70b9\u7684\u4e0b\u6807\n// e[i] \u8868\u793a\u8282\u70b9i\u7684\u503c\n// ne[i] \u8868\u793a\u8282\u70b9i\u7684next\u6307\u9488\u662f\u591a\u5c11\n// idx\u5b58\u50a8\u5f53\u524d\u5df2\u7ecf\u7528\u5230\u4e86\u54ea\u4e2a\u5730\u5740\uff0c\u76f8\u5f53\u4e8e\u6307\u9488\nint head, e[N], ne[N], idx;\n\n// \u521d\u59cb\u5316\nvoid init () {\n    head = -1;\n    idx = 0;\n}\n\n// \u5c06x\u63d2\u5230\u5934\u8282\u70b9\nvoid add_to_head (int x) {\n    e[idx] = x;\n    ne[idx] = head;\n    head = idx;\n    idx++;\n}\n\n// \u5c06\u4e00\u4e2a\u70b9\u63d2\u5230\u4e0b\u6807\u662fk\u7684\u70b9\u7684\u540e\u9762\nvoid add (int k, int x) {\n    e[idx] = x;\n    ne[idx] = ne[k];\n    ne[k] = idx;\n    idx++;\n}\n\n// \u5220\u6389\u4e0b\u6807\u662fk\u7684\u70b9\u540e\u9762\u7684\u70b9\nvoid remove (int k) {\n    ne[k] = ne[ne[k]];\n}\n\nint main () {\n    int m;\n    cin &gt;&gt; m;\n\n    init();\n\n    while(m--) {\n        int k, x;\n        char op;\n\n        cin &gt;&gt; op;\n        if (op == 'H') {\n            cin &gt;&gt; x;\n            add_to_head(x);\n        } else if (op == 'D') {\n            cin &gt;&gt; k;\n            if (!k) head = ne[head];\n            remove(k - 1);\n        } else {\n            cin &gt;&gt; k &gt;&gt; x;\n            add(k - 1, x);\n        }\n    }\n\n    for (int i = head; i != -1; i = ne[i]) {\n        cout &lt;&lt; e[i] &lt;&lt; ' ';\n    }\n\n    cout &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_4","title":"\u53cc\u94fe\u8868","text":"<p>\u53cc\u94fe\u8868\u5c31\u662f\u6bcf\u4e2a\u8282\u70b9\u6709\u4e24\u4e2a\u6307\u9488\uff0c\u4e00\u4e2a\u6307\u5411\u524d\u9762\uff0c\u4e00\u4e2a\u6307\u5411\u540e\u9762</p> <p>\u5728\u8fd9\u91cc\u5c31\u4e0d\u9700\u8981head\u4e86\uff0c\u8ba90\u53f7\u70b9\u6210\u4e3ahead\uff0c\u800c1\u53f7\u70b9\u5c31\u662f\u6211\u4eec\u7684tail</p> <p>\u53cc\u94fe\u8868\u6a21\u677f\uff1a</p> <pre><code>// e[]\u8868\u793a\u8282\u70b9\u7684\u503c\uff0cl[]\u8868\u793a\u8282\u70b9\u7684\u5de6\u6307\u9488\uff0cr[]\u8868\u793a\u8282\u70b9\u7684\u53f3\u6307\u9488\uff0cidx\u8868\u793a\u5f53\u524d\u7528\u5230\u4e86\u54ea\u4e2a\u8282\u70b9\nint e[N], l[N], r[N], idx;\n\n// \u521d\u59cb\u5316\nvoid init()\n{\n    //0\u662f\u5de6\u7aef\u70b9\uff0c1\u662f\u53f3\u7aef\u70b9\n    r[0] = 1, l[1] = 0;\n    idx = 2;\n}\n\n// \u5728\u8282\u70b9a\u7684\u53f3\u8fb9\u63d2\u5165\u4e00\u4e2a\u6570x\nvoid insert(int a, int x)\n{\n    e[idx] = x;\n    l[idx] = a, r[idx] = r[a];\n    l[r[a]] = idx, r[a] = idx ++ ;\n}\n\n// \u5220\u9664\u8282\u70b9a\nvoid remove(int a)\n{\n    l[r[a]] = l[a];\n    r[l[a]] = r[a];\n}\n</code></pre> <p>\u5982\u679c\u60f3\u8981\u4f7f\u7528\u7ed3\u6784\u4f53\uff0c\u4e5f\u5f88\u7b80\u5355\uff1a</p> <pre><code>struct Node {\n    int e, l, r;\n} nodes[N];\n</code></pre> <p>\u90bb\u63a5\u8868\u5c31\u662f\u4e00\u5806\u5355\u94fe\u8868</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#827","title":"827.\u53cc\u94fe\u8868","text":"<p>\u53cc\u94fe\u8868head\u662f0\uff0c tail\u662f1</p> <p>\u53cc\u94fe\u8868\u5f80\u5f80\u4e0d\u9700\u8981\u5de6\u7aef\u70b9\u548c\u53f3\u7aef\u70b9\u7684\u503c</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_5","title":"\u5faa\u73af\u53cc\u94fe\u8868","text":"<p>\u5c31\u662f\u5934\u548c\u5c3e\u4e92\u76f8\u6307\u4e00\u4e0b\uff0c\u8fd9\u6837\u94fe\u8868\u5c31\u53d8\u6210\u4e00\u4e2a\u5708\u4e86</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_6","title":"\u6808","text":"<p>\u6808\u662f\u5148\u8fdb\u540e\u51fa\uff0c\u50cf\u4e00\u4e2a\u5355\u53e3\u7684\u7f50\u5b50\uff0c\u6240\u4ee5\u5148\u653e\u8fdb\u53bb\u7684\u540e\u62ff\u51fa\u6765</p> <p>\u961f\u5217\u662f\u5148\u8fdb\u5148\u51fa\uff0c\u50cf\u53cc\u53e3\u7684\u7f50\u5b50\uff0c\u4ece\u4e0b\u9762\u63a5\u7740</p> <p>\u6808\u6a21\u677f\u9898\uff1a</p> <pre><code>// tt\u8868\u793a\u6808\u9876, tail\nint stk[N], tt = 0;\n\n// \u5411\u6808\u9876\u63d2\u5165\u4e00\u4e2a\u6570\nstk[ ++ tt] = x;\n\n// \u4ece\u6808\u9876\u5f39\u51fa\u4e00\u4e2a\u6570\ntt -- ;\n\n// \u6808\u9876\u7684\u503c\nstk[tt];\n\n// \u5224\u65ad\u6808\u662f\u5426\u4e3a\u7a7a\uff0c\u5982\u679c tt &gt; 0\uff0c\u5219\u8868\u793a\u4e0d\u4e3a\u7a7a\nif (tt &gt; 0)\n{\n\n}\n\n// \u6808\u9876\u5143\u7d20\u5c31\u662f\nstk[tt];\n</code></pre> <p>\u8003\u9a8c\u7684\u662f\u8bb0\u5fc6\u529b\u548c\u6bc5\u529b\uff08\u81ea\u5236\u529b\uff09</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_7","title":"\u961f\u5217","text":"<ol> <li>\u666e\u901a\u961f\u5217\uff1a</li> </ol> <pre><code>// hh \u8868\u793a\u961f\u5934\uff0ctt\u8868\u793a\u961f\u5c3e\n// \u6808\u662f\u4ece0\u5f00\u59cb\uff0c\u961f\u5217\u662f\u4ece-1\u5f00\u59cb\n// hh\u548ctt\u4e4b\u95f4\u7684\u4e1c\u897f\u5c31\u662f\u6211\u4eec\u7684\u961f\u5217\nint q[N], hh = 0, tt = -1;\n\n// \u5411\u961f\u5c3e\u63d2\u5165\u4e00\u4e2a\u6570\nq[ ++ tt] = x;\n\n// \u4ece\u961f\u5934\u5f39\u51fa\u4e00\u4e2a\u6570\nhh ++ ;\n\n// \u961f\u5934\u7684\u503c\nq[hh];\n\n// \u5224\u65ad\u961f\u5217\u662f\u5426\u4e3a\u7a7a\uff0c\u5982\u679c hh &lt;= tt\uff0c\u5219\u8868\u793a\u4e0d\u4e3a\u7a7a\nif (hh &lt;= tt)\n{\n\n}\n</code></pre> <ol> <li>\u5faa\u73af\u961f\u5217\uff1a</li> </ol> <pre><code>// hh \u8868\u793a\u961f\u5934\uff0ctt\u8868\u793a\u961f\u5c3e\u7684\u540e\u4e00\u4e2a\u4f4d\u7f6e\nint q[N], hh = 0, tt = 0;\n\n// \u5411\u961f\u5c3e\u63d2\u5165\u4e00\u4e2a\u6570\nq[tt ++ ] = x;\nif (tt == N) tt = 0;\n\n// \u4ece\u961f\u5934\u5f39\u51fa\u4e00\u4e2a\u6570\nhh ++ ;\nif (hh == N) hh = 0;\n\n// \u961f\u5934\u7684\u503c\nq[hh];\n\n// \u5224\u65ad\u961f\u5217\u662f\u5426\u4e3a\u7a7a\uff0c\u5982\u679chh != tt\uff0c\u5219\u8868\u793a\u4e0d\u4e3a\u7a7a\nif (hh != tt)\n{\n\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_8","title":"\u5355\u8c03\u6808","text":"<p>\u975e\u5e38\u62bd\u8c61\uff0c\u4f46\u662f\u80fd\u7528\u7684\u9898\u578b\u975e\u5e38\u5c11</p> <p>\u5355\u8c03\u6808\u6a21\u677f\u9898\uff1a <pre><code>\u5e38\u89c1\u6a21\u578b\uff1a\u627e\u51fa\u6bcf\u4e2a\u6570\u5de6\u8fb9\u79bb\u5b83\u6700\u8fd1\u7684\u6bd4\u5b83\u5927/\u5c0f\u7684\u6570\nint tt = 0;\nfor (int i = 1; i &lt;= n; i ++ )\n{\n    while (tt &amp;&amp; check(stk[tt], i)) tt -- ;\n    stk[ ++ tt] = i;\n}\n</code></pre></p> <p>\u601d\u8def\u662f\uff1a\u5047\u8bbea3 &gt;= a4\uff0c\u90a3\u4e48\u5f53\u5faa\u73af\u5230a5\u4ee5\u540e\u7684\u503c\u7684\u8bdd\uff0ca3\u5305\u62eca3\u4e4b\u524d\u7684\u6570\u90fd\u662f\u6ca1\u6709\u7528\u7684\uff0c\u76f4\u63a5\u5220\u9664\u5373\u53ef</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#830","title":"830.\u5355\u8c03\u6808","text":"<p>\u601d\u80032\uff0c4\uff0c5\uff0c3\uff0c3</p> <p>tt = 1\u7684\u65f6\u5019\uff0cstk[tt]\u5b58\u50a8\u7684\u624d\u662f\u6570\u5217\u7684\u7b2c\u4e00\u4e2a\u503c\uff01</p> <p>stk[0] \u5b58\u50a8\u7684\u662f0</p> <p>\u5bf9\u4e8e3\uff0ctt\u5c31\u5f97\u4e0d\u65ad\u5f80\u524d\u627e\uff0c\u627e\u52302\u8fd9\u4e2a\u6570\uff0c\u5373tt = 1\u7684\u65f6\u5019\uff0c\u8fd9\u65f6\u5019\u8f93\u51fastk[1] \uff0c\u7136\u540e\u4f7f\u7684stk[2]\u53d8\u62103\u3002\u56e0\u4e3a\u5bf9\u4e8e4\u548c5\u6765\u8bf4\uff0c\u6709\u6bd4\u4ed6\u4eec\u5c0f\u76843\u5728\uff0c\u6bd4\u4e0d\u53ef\u80fd\u8f93\u51fa\u4ed6\u4eec\u4e24\u4e2a\u3002\u4f46\u662f2\u8fd8\u662f\u6709\u53ef\u80fd\u7684\u3002</p> <p>\u5bf9\u4e8e\u7b2c\u4e8c\u4e2a3\uff0c\u56e0\u4e3astk[2] \u4e5f\u7b49\u4e8e3\uff0c\u6240\u4ee5\u8f93\u51fa\u7684\u662fstk[tt =1] = 2</p> <p>\u8fd9\u6837\u505a\u7684\u597d\u5904\u662f\uff1a\u6808\u91cc\u9762\u5b58\u50a8\u7684\u6570\u662f\u5355\u8c03\u9012\u589e\u7684\uff0c\u800c\u4e14\u5bf9\u4e8e\u6bcf\u4e2a\u6570\u53ea\u4f1a\u8fdb\u6808\u4e00\u6b21+\u51fa\u6808\u4e00\u6b21\uff0c\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662fO(n)</p> <p>\u53e6\u5916cin\u548ccout\u6bd4printf\u548cscanf\u6162\u4e8610\u500d</p> <pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nconst int N = 100010;\n\nint n;\nint stk[N], tt;\n\nint main () {\n    cin &gt;&gt; n;\n    for (int i = 0; i &lt; n; i++) {\n        int x;\n        cin &gt;&gt; x;\n        while (tt &amp;&amp; stk[tt] &gt;= x) tt--;\n        if (tt) cout &lt;&lt; stk[tt] &lt;&lt; ' ';\n        else cout &lt;&lt; -1 &lt;&lt; ' ';\n\n        stk[++tt] = x;\n    }\n    return 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_9","title":"\u5355\u8c03\u961f\u5217","text":"<p>\u6700\u7ecf\u5178\u7684\u9898\u5c31\u662f\u6ed1\u52a8\u7a97\u53e3\u4e2d\u7684\u6700\u5927\u503c\u6216\u8005\u6700\u5c0f\u503c</p> <p>\u591a\u91cd\u80cc\u5305\u4e5f\u53ef\u4ee5\u7528\u5355\u8c03\u961f\u5217\u4f18\u5316</p> <p>\u5355\u8c03\u6808\u548c\u5355\u8c03\u961f\u5217\u90fd\u662f\u5148\u60f3\u66b4\u529b\u505a\u6cd5\uff0c\u7136\u540e\u627e\u5355\u8c03\u6027\uff0c\u8fdb\u884c\u4f18\u5316</p> <p>\u5355\u8c03\u961f\u5217\u6a21\u677f\uff1a</p> <pre><code>\u5e38\u89c1\u6a21\u578b\uff1a\u627e\u51fa\u6ed1\u52a8\u7a97\u53e3\u4e2d\u7684\u6700\u5927\u503c/\u6700\u5c0f\u503c\nint hh = 0, tt = -1;\nfor (int i = 0; i &lt; n; i ++ )\n{\n    while (hh &lt;= tt &amp;&amp; check_out(q[hh])) hh ++ ;  // \u5224\u65ad\u961f\u5934\u662f\u5426\u6ed1\u51fa\u7a97\u53e3\n    while (hh &lt;= tt &amp;&amp; check(q[tt], i)) tt -- ;\n    q[ ++ tt] = i;\n}\n</code></pre> <p>\u7528\u961f\u5217\u6765\u7ef4\u62a4\u7a97\u53e3\uff0c\u6bcf\u6b21\u5411\u524d\u79fb\u52a8\u7684\u8bdd\uff0ctt\u90fd\u4f1a++\u6765\u8f93\u5165\u4e00\u4e2a\u6570\u5230\u961f\u5c3e\uff0chh\u90fd\u4f1a++\u5410\u51fa\u4e00\u4e2a\u6570</p> <p>\u53ea\u8981\u67d0\u4e2a\u6570  \u7684\u524d\u9762   \u6709\u6bd4\u4ed6\u5927\u7684\u6570\uff0c\u90a3\u4e48\u90a3\u4e2a\u6570\u4e0d\u4ec5\u4f1a\u6bd4\u4ed6\u5148\u88ab\u5f39\u51fa\uff0c\u800c\u4e14\u4e0d\u53ef\u80fd\u4f1a\u88ab\u8f93\u51fa</p> <p>\u901a\u8fc7\u5224\u65ad\u4f7f\u961f\u5217\u4e2d\u7684\u6570\u4e25\u683c\u5355\u8c03\u4e0a\u5347</p> <p>\u4e00\u4e2a\u4e25\u683c\u5355\u8c03\u4e0a\u5347\u7684\u961f\u5217\u53ea\u8981\u8f93\u51faq[hh] \u5373\u53ef</p> <p>\u8fd9\u91cc\u7684\u7684q[]\u91cc\u9762\u5b58\u7684\u662f\u4e0b\u6807</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#154","title":"154. \u6ed1\u52a8\u7a97\u53e3","text":"<pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nconst int N = 1000010;\n\nint n, k;\nint a[N], q[N];\n\nint main () {\n    scanf(\"%d%d\", &amp;n, &amp;k);\n    // a\u4e2d\u5b58\u7684\u662f\u6570\n    for (int i = 0; i &lt; n; i++) scanf(\"%d\", &amp;a[i]);\n    //q\u4e2d\u5b58\u7684\u662f\u4e0b\u6807\n    int hh = 0, tt = -1;\n    for (int i = 0; i &lt; n; i++) {\n        // \u5148\u5224\u65ad\u961f\u5934\u662f\u5426\u5df2\u7ecf\u6ed1\u51fa\u7a97\u53e3\n        // \u6bcf\u6b21\u961f\u5217\u91cc\u9762\u6700\u591a\u53ea\u6709\u4e00\u4e2a\u6570\u4e0d\u5728\u7a97\u53e3\u5185\uff0c\u6240\u4ee5\u4f7f\u7528if\uff0c\u800c\u4e0d\u662fwhile\n        if (hh &lt;= tt &amp;&amp; i - k + 1 &gt; q[hh]) hh++;\n        while(hh &lt;= tt &amp;&amp; a[q[tt]] &gt;= a[i]) tt--;\n        // i\u6709\u53ef\u80fd\u662f\u6700\u5c0f\u503c\n        // a[i]\u8db3\u591f\u5c0f\uff0c\u53ef\u80fd\u628a\u6574\u4e2a\u6570\u7ec4\u6e05\u7a7a\u4e86\n        // \u6240\u4ee5\u8981\u5148\u6dfb\u52a0i\n        q[++tt] = i;        \n        if (i &gt;= k - 1) printf(\"%d \", a[q[hh]]);\n\n    }\n\n    puts(\"\");\n\n\n    hh = 0, tt = -1;\n    for (int i = 0; i &lt; n; i++) {\n        // \u5148\u5224\u65ad\u961f\u5934\u662f\u5426\u5df2\u7ecf\u6ed1\u51fa\u7a97\u53e3\n        // \u6bcf\u6b21\u961f\u5217\u91cc\u9762\u6700\u591a\u53ea\u6709\u4e00\u4e2a\u6570\u4e0d\u5728\u7a97\u53e3\u5185\uff0c\u6240\u4ee5\u4f7f\u7528if\uff0c\u800c\u4e0d\u662fwhile\n        if (hh &lt;= tt &amp;&amp; i - k + 1 &gt; q[hh]) hh++;\n        while(hh &lt;= tt &amp;&amp; a[q[tt]] &lt;= a[i]) tt--;\n        // i\u6709\u53ef\u80fd\u662f\u6700\u5c0f\u503c\n        q[++tt] = i;        \n        if (i &gt;= k - 1) printf(\"%d \", a[q[hh]]);\n\n    }\n\n    puts(\"\");\n    return 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#kmp","title":"KMP","text":"<p>\u6ce8\u610f\u56fd\u5185\u7b97\u6cd5\u5708\u7684KMP\u4e0d\u662f\u771f\u6b63\u7684KMP\uff0c\u66f4\u591a\u7684\u662f\u7528KMP\u53bb\u5bfb\u627eborder</p> <p>KMP\u66b4\u529b\u505a\u6cd5\uff1a</p> <pre><code>for (int i = 1; i &lt;= n; i ++ )\n{\n    bool flag = true;\n    for (int j = 1; j &lt;= m; j ++ )\n    {\n        if (s[i + j - 1] != p[j])\n        {\n            flag=false;\n            break;\n        }\n    }\n}\n</code></pre> <p>KMP\u6a21\u677f\uff1a</p> <p>KMP\u4e60\u60ef\u4e0a\u4ece1\u5f00\u59cb</p> <p>next\u6570\u7ec4\u662f\u5bf9\u4e8e\u6a21\u5f0f\u4e32\u800c\u8a00\u7684\u3002P \u7684 next \u6570\u7ec4\u5b9a\u4e49\u4e3a\uff1anext[i] \u8868\u793a P[0] ~ P[i] \u8fd9\u4e00\u4e2a\u5b50\u4e32\uff0c\u4f7f\u5f97 \u524dk\u4e2a\u5b57\u7b26\u6070\u7b49\u4e8e\u540ek\u4e2a\u5b57\u7b26 \u7684\u6700\u5927\u7684k. \u7279\u522b\u5730\uff0ck\u4e0d\u80fd\u53d6i+1\uff08\u56e0\u4e3a\u8fd9\u4e2a\u5b50\u4e32\u4e00\u5171\u624d i+1 \u4e2a\u5b57\u7b26\uff0c\u81ea\u5df1\u80af\u5b9a\u4e0e\u81ea\u5df1\u76f8\u7b49\uff0c\u5c31\u6ca1\u6709\u610f\u4e49\u4e86\uff09\u3002</p> <pre><code>// s[]\u662f\u957f\u6587\u672c\uff0cp[]\u662f\u6a21\u5f0f\u4e32\uff0cn\u662fs\u7684\u957f\u5ea6\uff0cm\u662fp\u7684\u957f\u5ea6\n\u6c42\u6a21\u5f0f\u4e32\u7684Next\u6570\u7ec4\uff1a\n    // j\u662f\u8ba1\u6570\uff0c\u8bb0\u7684\u662f\u5f53\u524d\u7f00\u5b57\u6bcd\u4e32\u548c\u540e\u7f00\u5b57\u6bcd\u4e32\u76f8\u540c\u65f6\uff0c\u6700\u5927\u7684\u5b57\u6bcd\u4e32\u957f\u5ea6\n    // ne[i]\u5b58\u50a8\u7684\u662f\u524di\u4e2a\u5b57\u7b26\u4e32\u4e2d\u6700\u5927\u7684\uff08\u524d\u7f00\u548c\u540e\u7f00\u76f8\u540c\u7684\uff09\u957f\u5ea6\n\n    // \u5bf9\u4e8e\u65b0\u7684ne[i]\u6765\u8bf4\uff0c\u5728\u6ca1\u6709\u66f4\u65b0j\u4e4b\u524d\uff0cj\u8fd8\u4ee3\u8868\u4e86ne[i - 1], \u4e0b\u9762while\u5224\u65ad\u4e2d\u7684j\u5c31\u662fne[i - 1]\u7684\u610f\u601d\n    // (\u5982\u679c\u524dj\u4f4d\u6570\u76f8\u540c\uff0c\u6ce8\u610fp\u4e2d\u5b58\u50a8\u7684\u6570\u4e0b\u6807\u662f\u4ece1\u5f00\u59cb\u7684\uff0c\u6240\u4ee5\u5373p[j]\u548c\u8001p[i]\u76f8\u540c)\uff0c\u5982\u679c\u9700\u8981\u5224\u65ad\u7684\u65b0p[i]\u548cp[j + 1]\uff0c\u5982\u679c\u76f8\u540c\u7684\u8bdd\u5c31j++\n    // \u5982\u679c\u4e0d\u76f8\u540c\u7684\u8bdd\uff0c\u5c31\u8981\u53bb\u627e\u51fap[0]\u5230p[j] \u4e2d\u7684\u6700\u5927\u524d\u7f00\u548c\u540e\u7f00\u76f8\u540c\u7684\u957f\u5ea6\uff0c\u6765\u8bd5\u8bd5\u662f\u5426\u53ef\u4ee5\u52a0\u5728\u5c0f\u5b57\u7b26\u4e32\u7684\u540e\u9762\n\n    // \u5982\u679c\u60f3\u4e0d\u6e05\u695awhile\u5224\u65ad\u8fc7\u7a0b\uff0c\u53ef\u4ee5\u7528abcabdabcabc\u6765\u8fdb\u884c\u4e3e\u4f8b\n\n\nfor (int i = 2, j = 0; i &lt;= m; i ++ )\n{\n    while (j &amp;&amp; p[i] != p[j + 1]) j = ne[j];\n    if (p[i] == p[j + 1]) j ++ ;\n    ne[i] = j;\n}\n\n// \u5339\u914d\nfor (int i = 1, j = 0; i &lt;= n; i ++ )\n{\n    while (j &amp;&amp; s[i] != p[j + 1]) j = ne[j];\n    if (s[i] == p[j + 1]) j ++ ;\n    if (j == m)\n    {\n        j = ne[j];\n        // \u5339\u914d\u6210\u529f\u540e\u7684\u903b\u8f91\n    }\n}\n</code></pre> <p>\u6ce8\u610f\u5728C++\u4e2d\u6570\u7ec4\u547d\u540d\u6210next\u6709\u53ef\u80fd\u4f1a\u62a5\u9519\uff0c\u6240\u4ee5\u4f7f\u7528ne[N] \u6bd4\u8f83\u4fdd\u9669\u4e00\u4e9b</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#trick","title":"\u5173\u4e8e\u5b57\u7b26\u6570\u7ec4\u8f93\u5165\u7684\u5c0ftrick","text":"<pre><code>char p[N];\ncin &gt;&gt; p + 1; // \u5408\u6cd5\uff0c\u56e0\u4e3a\u5728\u7ec8\u7aef\u8bfb\u5165\u7684\u5c31\u662f\u5b57\u7b26\n\nint p[N];\ncin &gt;&gt; p + 1; // \u4e0d\u5408\u6cd5\uff0c\u56e0\u4e3a\u5728\u7ec8\u7aef\u8bfb\u5165\u7684\u5c31\u662f\u5b57\u7b26\uff0cstd::basic_istream&lt;char&gt;\u548cint *\u7684\u7c7b\u578b\u4e0d\u5339\u914d\n</code></pre> <p>\u5b9e\u4f8b\uff1a</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n\nusing namespace std;\n//int n;\nchar p[3];\nchar s[4];\n\nint main () {\n    cin &gt;&gt; p + 1 &gt;&gt; s + 2;\n    for (int i = 0; i &lt; 3; i++) cout &lt;&lt; i &lt;&lt; ' ' &lt;&lt; p[i] &lt;&lt; endl;\n    cout &lt;&lt; \"---------\" &lt;&lt; endl;\n    for (int i= 0; i &lt; 4; i++) cout &lt;&lt; i &lt;&lt; ' ' &lt;&lt; s[i] &lt;&lt; endl;\n    return 0;\n}\n</code></pre> <pre><code>// \u8f93\u5165\uff1a\n12\n12\n\n// \u8f93\u51fa\uff1a\n0\n1 1\n2 2\n---------\n0\n1\n2 1\n3 2\n</code></pre> <p>next\u6570\u7ec4\u662f\u5bf9\u4e8e\u6a21\u5f0f\u4e32\u800c\u8a00\u7684</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#831-kmp","title":"831. KMP","text":"<pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nconst int N = 100010, M = 1000010;\n\nchar p[N], s[M];\n\n// n\u662fpatter\u7684\u957f\u5ea6\uff0cm\u662fs\u7684\u957f\u5ea6\nint n, m; \n\nint ne[N];\n\nint main () {\n    cin &gt;&gt; n &gt;&gt; p + 1 &gt;&gt; m &gt;&gt; s + 1; // \u6ce8\u610f\u90fd\u662f\u4ece1\u5f00\u59cb\u8fdb\u884c\u5b58\u50a8\n\n    // \u5148\u5904\u7406pattern\u7684ne[]\u6570\u7ec4\n    for (int i = 2, j = 0; i &lt;= n; i++) { // \u6ce8\u610f\u8fd9\u91cc\u4e0d\u662f\u4ecei = 0\u5f00\u59cb\uff01\n        while (j &amp;&amp; p[i] != p[j + 1]) j = ne[j];\n        if (p[i] == p[j + 1]) j ++;\n        ne[i] = j;\n    }\n\n    for (int i = 1, j = 0; i &lt;= m; i++) { // \u6ce8\u610f\u8fd9\u91cc\u4e0d\u662f\u4ecei = 0\u5f00\u59cb\uff01\n        while (j &amp;&amp; s[i] != p[j + 1]) j = ne[j];\n        if (s[i] == p[j + 1]) j++;\n        if (j == n) {\n            printf(\"%d \", i - n); // \u8fd9\u9053\u9898\u8f93\u51fa\u7684\u4e0b\u6807\u662f\u4ece0\u5f00\u59cb\u7684\uff0c\u5c31\u4e0d\u7528+1\u4e86\n            j = ne[j];\n        }\n    }\n    return 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#trie","title":"Trie\u6811/\u5b57\u5178\u6811","text":"<p>\u975e\u5e38\u7b80\u5355\u7684\u6570\u636e\u7ed3\u6784</p> <p>\u7528\u6765\u9ad8\u6548\u5730\u5feb\u901f\u5b58\u50a8\u548c\u67e5\u627e\u5b57\u7b26\u4e32\u96c6\u5408\u7684\u6570\u636e\u7ed3\u6784</p> <p>\u652f\u6301\u4e24\u4e2a\u64cd\u4f5c</p> <p>\u957f\u5f97\u662f\u4e00\u4e2a\u5b57\u5178\u5730\u5f62\u5f0f\uff0c\u5b57\u6bcd\u5730\u7c7b\u578b\u4e00\u822c\u4e0d\u662f\u5f88\u591a</p> <p>\u5982\u4f55\u9ad8\u6548\u5730\u5b58\u50a8\u8fd9\u4e9b\u5b57\u7b26\u4e32</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_10","title":"\u5b58\u50a8","text":"<p>\u6709\u4e2a\u6839\u8282\u70b9\uff0croot</p> <p>\u4ece\u524d\u5f80\u540e\u904d\u5386\u6bcf\u4e2a\u5b57\u7b26\uff0c\u6bcf\u5230\u4e00\u4e2a\u5b57\u7b26\u5982\u679c\u6ca1\u6709\u8fd9\u4e2a\u8282\u70b9\u5c31\u521b\u5efa\u5b83</p> <p>\u7ed9\u6bcf\u4e32\u5b57\u7b26\u5730\u672b\u5c3e\u8282\u70b9\u6253\u4e2a\u6807\u8bb0\uff0c\u7528\u6765\u68c0\u7d22\u8fd9\u4e2a\u5355\u8bcd</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_11","title":"\u67e5\u627e","text":"<p>\u6cbf\u7740\u5404\u4e2a\u8282\u70b9\u4f9d\u6b21\u67e5\u627e\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u8def\u5f84\u90a3\u4e48\u5c31\u662f\u4e0d\u5b58\u5728\u7684\uff0c \u5982\u679c\u6ca1\u6709\u6807\u8bb0\u90a3\u4e48\u4e5f\u662f\u4e0d\u5b58\u5728\u8fd9\u4e2a\u5b57\u7b26\u4e32\u7684</p> <pre><code>son[N][26]\u4e00\u7ef4\u662f\u7ed3\u70b9\u603b\u6570\uff0c\u800c\u7ed3\u70b9\u548c\u7ed3\u70b9\u4e4b\u95f4\u7684\u5173\u7cfb\uff08\u8c01\u662f\u8c01\u513f\u5b50\uff09\u5b58\u5728\u7b2c\u4e8c\u4e2a\u7ef4\u5ea6\uff0c\u6bd4\u5982[0][1]=2, [0]\u8868\u793a\u6839\u8282\u70b9\uff0c[1]\u8868\u793a\u5b83\u6709\u4e00\u4e2a\u513f\u5b50\u2018b\u2019,\u8fd9\u4e2a\u513f\u5b50\u7684\u4e0b\u6807\u662f2\uff1b\u63a5\u7740\u5982\u679c\u6709\u4e00\u4e2a[2][2]=8 ; \u8bf4\u660e\u6839\u8282\u70b9\u7684\u513f\u5b50\u2018b\u2019\u4e5f\u6709\u4e00\u4e2a\u513f\u5b50\u2018c\u2019\uff0c\u8fd9\u4e2a\u5b59\u5b50\u7684\u4e0b\u6807\u5c31\u662f8\uff1b\u8fd9\u6837\u4f20\u9012\u4e0b\u53bb\uff0c\u5c31\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002\u968f\u4fbf\u7ed9\u4e00\u4e2a\u7ed3\u70b9][x][y], \u5e76\u4e0d\u80fd\u770b\u51fa\u5b83\u5728\u7b2c\u51e0\u5c42\uff0c\u53ea\u80fd\u77e5\u9053\uff0c\u5b83\u7684\u513f\u5b50\u662f\u8c01\u3002\n</code></pre> <pre><code>\u5173\u4e8e\u7406\u89e3int son[N][26] \u8fd9\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u7684\u5fc3\u5f97\n\nTire\u6811\u672c\u8d28\u4e0a\u4e00\u4e2a\u591a\u53c9\u6811\uff0c\u6700\u591a\u53ef\u4ee5\u5206\u591a\u5c11\u53c9\u5462\uff1f\u56e0\u4e3a\u6b64\u9898\u5b58\u7684\u90fd\u662f\u5c0f\u5199\u5b57\u6bcd\uff0c\u6240\u4ee5\u662f26\u53c9\uff1b\n\n\u8fd9\u91cc\u5c31\u89e3\u91ca\u4e86son\u8fd9\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u7684\u7b2c\u4e8c\u7ef4\u7684\u542b\u4e49\uff0c\u5c31\u662f\u4ed6\u6700\u591a\u670926\u4e2a\u5b69\u5b50\uff0c\u90a3\u4e48\u4ed6\u662f\u8c01\u5462\uff0c\u4ed6\u5f53\u7136\u662f\u7ed3\u70b9\u4e86\uff0c\u90a3\u7ed3\u70b9\u4e4b\u95f4\u600e\u4e48\u533a\u5206\uff0c\u6216\u8005\u8fd9\u4e9b\u5b69\u5b50\u7684\u7238\u7238\u53eb\u5565\uff0c\u7238\u7238\u4eec\u7528\u4e0b\u6807\u6765\u533a\u522b\uff0c\u6240\u4ee5\u7b2c\u4e00\u7ef4\u5c31\u662f\u7238\u7238\u4eec\u7684id\uff0cson[0][1]\u542b\u4e49\u5c31\u662f0\u53f7\u7238\u7238\u6709\u4e2a\u513f\u5b50b \uff0c\u90a3son[0][1] = 2\uff0c\u5c31\u662f0\u53f7\u7238\u7238\u6709\u4e2a\u513f\u5b50b\uff0c\u513f\u5b50\u7684id\u662f2\uff1b \u8fd9\u4e9bid\u5c31\u662f\u7531idx` \u6765\u8d4b\u503c\u7684\uff1b\n\nidx\u53ef\u4ee5\u7406\u89e3\u4e3a\u8ba1\u5212\u751f\u80b2\u7684\u7ba1\u7406\u5c40\u7684\u7ed9\u4e0a\u6237\u53e3\u7684\uff0c\u751f\u4e00\u4e2a\u5b69\u5b50\uff0c\u7ed9\u5b69\u5b50\u4e0a\u8eab\u4efd\u8bc1\uff0c\u8bc1\u4ef6\u4e0aID \u4e3a++idx \uff0c\u800c\u5b69\u5b50\u53eb\u5565\uff0c\u5176\u5b9e\u5c31\u662f26\u4e2a\u5c0f\u5199\u5b57\u6bcd\u4e2d\u7684\u5176\u4e2d\u4e00\u4e2a\u4e86\uff1b\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u7ed3\u70b9\u800c\u8a00\uff0c\u53ef\u4ee5\u77e5\u9053\u4ed6\u6709\u6ca1\u6709\u8fd9\u4e2a\u5b69\u5b50\uff0c\u6709\u7684\u8bdd\u53eb\u5565\uff0c\u5728\u54ea\u91cc\uff1b\n\n\u5bf9\u4e8e\u67e5\u8be2\uff0c\u4ece\u6839\u8282\u70b9\u4e00\u8def\u67e5\u4e0b\u6765\uff0c\u5c31\u53ef\u4ee5\u627e\u5230\u67d0\u4e2a\u5b57\u7b26\u4e32\u5728\u4e0d\u5728\uff1b\n\n\u5bf9\u4e8e\u63d2\u5165\u5b57\u7b26\u4e32\uff0c\u4e5f\u662f\u4e00\u8def\u4e0b\u6765\uff0c\u770b\u6709\u6ca1\u6709\u8fd9\u4e2a\u513f\u5b50\uff0c\u6ca1\u6709\u4e86\u7ed9\u4f60\u751f\u4e2a\u513f\u5b50\uff0c\u6709\u4e86\u7ee7\u7eed\u7ed9\u4e0b\u9762\u627e\uff0c\u6240\u4ee5\u53ea\u63d2\u5165\u8be5\u5b57\u7b26\u4e32\u4e2d\u539f\u6765\u4e0d\u5b58\u5728\u7684\u5b57\u7b26\u5373\u53ef\uff1b \u4e5f\u5c31\u662f\u5229\u7528\u4e86\u516c\u5171\u524d\u7f00\u6765\u964d\u4f4e\u67e5\u8be2\u65f6\u95f4\u7684\u5f00\u9500\u4ee5\u8fbe\u5230\u63d0\u9ad8\u6548\u7387\u7684\u76ee\u7684;\n\n\u201cTrie\u8fd9\u4e2a\u540d\u5b57\u53d6\u81ea\u201cretrieval\u201d\uff0c\u68c0\u7d22\uff0c\u56e0\u4e3aTrie\u53ef\u4ee5\u53ea\u7528\u4e00\u4e2a\u524d\u7f00\u4fbf\u53ef\u4ee5\u5728\u4e00\u90e8\u5b57\u5178\u4e2d\u627e\u5230\u60f3\u8981\u7684\u5355\u8bcd\u3002\u201d\n</code></pre> <p>Trie\u6a21\u677f\uff1a</p> <pre><code>int son[N][26], cnt[N], idx;\n// 0\u53f7\u70b9\u65e2\u662f\u6839\u8282\u70b9\uff0c\u53c8\u662f\u7a7a\u8282\u70b9\n// son[][]\u5b58\u50a8\u6811\u4e2d\u6bcf\u4e2a\u8282\u70b9\u7684\u5b50\u8282\u70b9\n// cnt[]\u5b58\u50a8\u4ee5\u6bcf\u4e2a\u8282\u70b9\u7ed3\u5c3e\u7684\u5355\u8bcd\u6570\u91cf\n\n// \u63d2\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32\nvoid insert(char *str)\n{\n    int p = 0;\n    for (int i = 0; str[i]; i ++ )\n    {\n        int u = str[i] - 'a';\n        if (!son[p][u]) son[p][u] = ++ idx;\n        p = son[p][u];\n    }\n    cnt[p] ++ ;\n}\n\n// \u67e5\u8be2\u5b57\u7b26\u4e32\u51fa\u73b0\u7684\u6b21\u6570\nint query(char *str)\n{\n    int p = 0;\n    for (int i = 0; str[i]; i ++ )\n    {\n        int u = str[i] - 'a';\n        if (!son[p][u]) return 0;\n        p = son[p][u];\n    }\n    return cnt[p];\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#835-trie","title":"835. Trie\u5b57\u7b26\u4e32\u7edf\u8ba1","text":"<pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nconst int N = 100010;\nchar str[N];\n\n// \u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\u6700\u591a\u53ea\u4f1a\u5411\u5916\u8fde26\u6761\u8fb9\n// cnt\u5b58\u50a8\u7684\u662f\u4ee5\u5f53\u524d\u8fd9\u4e2a\u70b9\u7ed3\u5c3e\u7684\u4e2a\u6570\u6709\u591a\u5c11\u4e2a\n// idx\u5f53\u524d\u7528\u5230\u54ea\u4e2a\u4e0b\u6807\n//\u4e0b\u6807\u662f0\uff0c \u65e2\u662f\u6839\u8282\u70b9\uff0c\u53c8\u662f\u7a7a\u8282\u70b9\nint son[N][26], cnt[N], idx;\n\nvoid insert(char * str) {\n    int p = 0;\n    for (int i = 0; str[i]; i++) {\n        int u = str[i] - 'a';\n        if (!son[p][u]) son[p][u] = ++idx;\n        p = son[p][u];\n    }\n    cnt[p] ++;\n}\n\nint query(char str[]) {\n    int p = 0;\n    for (int i = 0; str[i]; i++) {\n        int u = str[i] - 'a';\n        if (!son[p][u]) return 0;\n        p = son[p][u];\n    }\n    return cnt[p];\n}\n\n\nint main () {\n    int n;\n    scanf(\"%d\", &amp;n);\n    while(n --) {\n        char op[2];\n        scanf(\"%s%s\", op, str);\n        if (op[0] == 'I') insert(str);\n        else printf(\"%d\\n\", query(str));\n    }\n    return 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_12","title":"\u5e76\u67e5\u96c6","text":"<p>\u5e38\u7528\u7b97\u6cd5</p> <p>\u4ee3\u7801\u5f88\u77ed\uff0c\u4f46\u662f\u601d\u8def\u7cbe\u5de7\uff0c\u9762\u8bd5\u975e\u5e38\u559c\u6b22\u51fa</p> <p>\u5e76\u67e5\u96c6\u4f5c\u7528\uff1a\uff08\u8fd1\u4e4eO(1)\uff09</p> <ol> <li>\u5feb\u901f\u5c06\u4e24\u4e2a\u96c6\u5408\u5408\u5e76</li> <li>\u5feb\u901f\u8be2\u95ee\u4e24\u4e2a\u5143\u7d20\u662f\u5426\u5728\u4e00\u4e2a\u96c6\u5408\u5f53\u4e2d</li> </ol> <p>\u66b4\u529b\u64cd\u4f5c\u975e\u5e38\u8017\u65f6</p> <p>\u57fa\u672c\u601d\u60f3\u548c\u539f\u7406\uff1a\u7528\u6811\u7684\u5f62\u5f0f\u6765\u7ef4\u62a4\u6240\u6709\u7684\u96c6\u5408\uff0c\u6bcf\u4e2a\u96c6\u5408\u7528\u4e00\u68f5\u6811\u6765\u8868\u793a</p> <p>\u6bcf\u4e2a\u96c6\u5408\u7684\u7f16\u53f7\u5c31\u662f\u6839\u8282\u70b9\u7684\u7f16\u53f7\uff0c\u6811\u6839\u7684\u7f16\u53f7\u5c31\u662f\u6574\u4e2a\u96c6\u5408\u7684\u7f16\u53f7</p> <p>\u5bf9\u6bcf\u4e2a\u70b9\u90fd\u5b58\u50a8\u5b83\u7684\u7236\u8282\u70b9\u662f\u8c01\uff0cp[x]\u6765\u8868\u793ax\u7684\u7236\u8282\u70b9</p> <p>\u95ee\u98981\uff1a\u5982\u4f55\u5224\u65ad\u6811\u6839\uff1aif(p[x] == x) \u9664\u4e86\u6839\u8282\u70b9\u4e4b\u5916\u90fd\u4e0d\u60f3\u7b49</p> <p>\u95ee\u98982\uff1a \u5982\u4f55\u6c42x\u7684\u96c6\u5408\u7f16\u53f7\uff1awhile(p[x] != x) x = p[x]; \u8fd9\u4e00\u6b65\u65f6\u95f4\u590d\u6742\u8bfb\u8fd8\u633a\u9ad8\u7684\uff0c\u9700\u8981\u4f18\u5316</p> <p>\u95ee\u98983\uff1a\u5982\u4f55\u5408\u5e76\u4e24\u4e2a\u96c6\u5408\uff1a\u5c06\u5176\u4e2d\u4e00\u4e2a\u7684\u6839\u8282\u70b9\u53d8\u6210\u53e6\u5916\u4e00\u4e2a\u96c6\u5408\u6839\u8282\u70b9\u7684\u7236\u4eb2\u5373\u53ef\u3002p[x]\u662fx\u7684\u96c6\u5408\u7f16\u53f7\uff0cp[y]\u662fy\u7684\u96c6\u5408\u7f16\u53f7\uff0cp[x] = y\u5373\u53ef</p> <p>\u5e76\u67e5\u96c6\u7684\u4f18\u5316\uff08\u5e76\u67e5\u96c6\u8def\u5f84\u538b\u7f29\u7b97\u6cd5\uff09\uff1a\u5f53\u627e\u5230\u7956\u5b97\u8282\u70b9\u7684\u65f6\u5019\uff0c\u5c06\u6240\u6709\u7684\u8def\u5f84\u70b9\u90fd\u76f4\u63a5\u6307\u5411\u7956\u5b97\u8282\u70b9\uff0c\u4f18\u5316\u4e4b\u540e\u5dee\u4e0d\u591a\u662fO(1)\u7684\u65f6\u95f4\u590d\u6742\u5ea6</p> <p>\u5e76\u67e5\u96c6\u7ecf\u5e38\u9700\u8981\u7ef4\u62a4\u989d\u5916\u4fe1\u606f</p> <p>\u5e76\u67e5\u96c6\u6a21\u677f\uff1a</p> <pre><code>(1)\u6734\u7d20\u5e76\u67e5\u96c6\uff1a\n\n    int p[N]; //\u5b58\u50a8\u6bcf\u4e2a\u70b9\u7684\u7956\u5b97\u8282\u70b9\n\n    // \u8fd4\u56dex\u7684\u7956\u5b97\u8282\u70b9\n    int find(int x)\n    {\n        if (p[x] != x) p[x] = find(p[x]); // \u9012\u5f52\u5728\u56de\u6eaf\u7684\u65f6\u5019\u4f1a\u4f7f\u8def\u5f84\u4e0a\u6240\u6709\u7684\u70b9\u90fd\u6307\u5411\u7956\u5b97\u8282\u70b9\uff0c\u4ece\u800c\u5b9e\u73b0\u8def\u5f84\u538b\u7f29\u7b97\u6cd5\n        return p[x];\n    }\n\n    // \u521d\u59cb\u5316\uff0c\u5047\u5b9a\u8282\u70b9\u7f16\u53f7\u662f1~n\n    for (int i = 1; i &lt;= n; i ++ ) p[i] = i;\n\n    // \u5408\u5e76a\u548cb\u6240\u5728\u7684\u4e24\u4e2a\u96c6\u5408\uff1a\n    p[find(a)] = find(b);\n\n\n(2)\u7ef4\u62a4size\u7684\u5e76\u67e5\u96c6\uff1a\n\n    int p[N], size[N];\n    //p[]\u5b58\u50a8\u6bcf\u4e2a\u70b9\u7684\u7956\u5b97\u8282\u70b9, size[]\u53ea\u6709\u7956\u5b97\u8282\u70b9\u7684\u6709\u610f\u4e49\uff0c\u8868\u793a\u7956\u5b97\u8282\u70b9\u6240\u5728\u96c6\u5408\u4e2d\u7684\u70b9\u7684\u6570\u91cf\n\n    // \u8fd4\u56dex\u7684\u7956\u5b97\u8282\u70b9\n    int find(int x)\n    {\n        if (p[x] != x) p[x] = find(p[x]);\n        return p[x];\n    }\n\n    // \u521d\u59cb\u5316\uff0c\u5047\u5b9a\u8282\u70b9\u7f16\u53f7\u662f1~n\n    for (int i = 1; i &lt;= n; i ++ )\n    {\n        p[i] = i;\n        size[i] = 1;\n    }\n\n    // \u5408\u5e76a\u548cb\u6240\u5728\u7684\u4e24\u4e2a\u96c6\u5408\uff1a\n    size[find(b)] += size[find(a)];\n    p[find(a)] = find(b);\n\n\n(3)\u7ef4\u62a4\u5230\u7956\u5b97\u8282\u70b9\u8ddd\u79bb\u7684\u5e76\u67e5\u96c6\uff1a\n\n    int p[N], d[N];\n    //p[]\u5b58\u50a8\u6bcf\u4e2a\u70b9\u7684\u7956\u5b97\u8282\u70b9, d[x]\u5b58\u50a8x\u5230p[x]\u7684\u8ddd\u79bb\n\n    // \u8fd4\u56dex\u7684\u7956\u5b97\u8282\u70b9\n    int find(int x)\n    {\n        if (p[x] != x)\n        {\n            int u = find(p[x]);\n            d[x] += d[p[x]];\n            p[x] = u;\n        }\n        return p[x];\n    }\n\n    // \u521d\u59cb\u5316\uff0c\u5047\u5b9a\u8282\u70b9\u7f16\u53f7\u662f1~n\n    for (int i = 1; i &lt;= n; i ++ )\n    {\n        p[i] = i;\n        d[i] = 0;\n    }\n\n    // \u5408\u5e76a\u548cb\u6240\u5728\u7684\u4e24\u4e2a\u96c6\u5408\uff1a\n    p[find(a)] = find(b);\n    d[find(a)] = distance; // \u6839\u636e\u5177\u4f53\u95ee\u9898\uff0c\u521d\u59cb\u5316find(a)\u7684\u504f\u79fb\u91cf\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#836","title":"836.\u5408\u5e76\u96c6\u5408","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nconst int N = 100010;\nint p[N];\nint n, m;\n\n//\u5e76\u67e5\u96c6\u4e2d\u6700\u6838\u5fc3\u7684\u64cd\u4f5c\nint find(int x) {\n    // \u8fd4\u56dex\u6240\u5728\u96c6\u5408\u7684\u7f16\u53f7\uff08\u7956\u5b97\u8282\u70b9\uff09 + \u52a0\u4e0a\u8def\u5f84\u538b\u7f29\u7b97\u6cd5\n    if (p[x] != x) p[x] = find(p[x]);\n    return p[x];\n}\n\nint main () {\n    // \u56e0\u4e3a\u6bcf\u4e2a\u6570\u90fd\u662f\u4e00\u4e2a\u96c6\u5408\uff0c\u6240\u4ee5\u5148\u521d\u59cb\u5316\n    scanf(\"%d%d\", &amp;n, &amp;m);\n    for (int i = 1; i &lt;= n; i ++) p[i] = i;\n\n    while(m --) {\n        char op[2];\n        int a, b;\n        scanf(\"%s%d%d\", op, &amp;a, &amp;b);\n\n        if (op[0] == 'M') p[find(a)] = find(b);\n        else {\n            if (find(a) == find(b)) puts(\"Yes\");\n            else puts(\"No\");\n        }\n    }\n    return 0;\n}\n</code></pre> <p>\u5728\u56fe\u4e2d</p> <p>\u80fd\u4ecea\u8d70\u5230b\u53c8\u80fd\u4eceb\u8d70\u5230a\uff0c\u90a3\u4ed6\u4eec\u5c31\u5728\u4e00\u4e2a\u8fde\u901a\u5757\u91cc\u9762\u7684</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#837","title":"837. \u8fde\u901a\u5757\u4e2d\u70b9\u7684\u6570\u91cf","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nconst int N = 100010;\n//\u53ea\u4fdd\u8bc1\u6839\u8282\u70b9\u7684size\u6709\u610f\u4e49\nint p[N];\nint Size[N];\nint n, m;\n\n//\u5e76\u67e5\u96c6\u4e2d\u6700\u6838\u5fc3\u7684\u64cd\u4f5c\nint find(int x) {\n    // \u8fd4\u56dex\u6240\u5728\u96c6\u5408\u7684\u7f16\u53f7\uff08\u7956\u5b97\u8282\u70b9\uff09 + \u52a0\u4e0a\u8def\u5f84\u538b\u7f29\u7b97\u6cd5\n    if (p[x] != x) p[x] = find(p[x]);\n    return p[x];\n}\n\nint main () {\n    // \u56e0\u4e3a\u6bcf\u4e2a\u6570\u90fd\u662f\u4e00\u4e2a\u96c6\u5408\uff0c\u6240\u4ee5\u5148\u521d\u59cb\u5316\n    scanf(\"%d%d\", &amp;n, &amp;m);\n    for (int i = 1; i &lt;= n; i ++) {\n        p[i] = i;\n        Size[i] = 1;\n    }\n\n    while(m --) {\n        char op[5];\n        int a, b;\n        scanf(\"%s\", op);\n\n        if (op[0] == 'C') {\n            scanf(\"%d%d\", &amp;a, &amp;b);\n\n            // \u7279\u5224\u4e00\u4e0bab\u662f\u5426\u5728\u540c\u4e00\u4e2a\u96c6\u5408\u4e2d\uff0c\u5982\u679c\u662f\u7684\u8bdd\u5c31\u4e0d\u7528\u52a0\u4e86\n            if (find(a) == find(b)) continue;\n            // \u53ea\u9700\u8981\u7ef4\u62a4\u6839\u8282\u70b9\u7684size\n            Size[find(b)] += Size[find(a)];\n            p[find(a)] = find(b);\n        }\n        else if (op[1] == '1') {\n            scanf(\"%d%d\", &amp;a, &amp;b);\n            if (find(a) == find(b)) puts(\"Yes\");\n            else puts(\"No\");\n        } else {\n            scanf(\"%d\", &amp;a);\n            printf(\"%d\\n\", Size[find(a)]);\n        }\n    }\n    return 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#stl","title":"\u5806\uff08\u624b\u5199\u5806\u4e0d\u662fSTL\uff09","text":"<p>\u5982\u4f55\u624b\u5199\u4e00\u4e2a\u5806\uff1a(\u4e0b\u6807\u662f\u4ece1\u5f00\u59cb\u7684\uff0c\u5982\u679c\u662f\u4ece0\u5f00\u59cb\u7684\u8bdd\uff0c0\u7684\u5de6\u513f\u5b50\u5c31\u662f0\u4e86\uff0c\u4e0d\u592a\u65b9\u4fbf)</p> <ol> <li>\u63d2\u5165\u4e00\u4e2a\u6570  <code>heap[++ size] = x;up(size); \u5806\u7684\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u63d2\u5165x\u7136\u540e\u4e0d\u65ad\u4e0a\u79fb</code></li> <li>\u6c42\u6574\u4e2a\u96c6\u5408\u5f53\u4e2d\u7684\u6700\u5c0f\u503c <code>heap[1];</code></li> <li>\u5220\u9664\u6700\u5c0f\u503c <code>heap[1] = heap[size]; size--; down(1);\u7528\u6574\u4e2a\u5806\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u6765\u8986\u76d6\u6389\u5806\u9876\u7684\u5143\u7d20\uff0c\u7136\u540e\u4e0b\u79fb</code>\uff08\u8fd9\u4e48\u505a\u7684\u539f\u56e0\u662f\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4\u5220\u9664\u5934\u8282\u70b9\u7684\u6570\u5f88\u56f0\u96be\uff0c\u4f46\u662f\u5220\u9664\u5c3e\u8282\u70b9\u7684\u6570\u6bd4\u8f83\u7b80\u5355\uff09</li> <li>\u5220\u9664\u4efb\u610f\u4e00\u4e2a\u5143\u7d20 \uff08STL\u4e0d\u80fd\u76f4\u63a5\u5b9e\u73b0\uff09<code>heap[k] = heap[size]; size--; down(k); up[k]</code>\uff08down\u548cup\u53ea\u4f1a\u6267\u884c\u4e00\u4e2a\uff09</li> <li>\u4fee\u6539\u4efb\u610f\u4e00\u4e2a\u5143\u7d20\uff08STL\u4e0d\u80fd\u76f4\u63a5\u5b9e\u73b0\uff09<code>heap[k] = x; down(k); up[k];</code></li> </ol>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_13","title":"\u5806\u7684\u6027\u8d28","text":"<p>\u5806\u662f\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u9664\u4e86\u6700\u540e\u4e00\u5c42\u8282\u70b9\uff0c\u4e0a\u9762\u6240\u6709\u8282\u70b9\u90fd\u662f\u6ee1\u7684\uff0c\u4e0d\u5b58\u5728\u7a7a\u7684\u60c5\u51b5\u3002\u6700\u540e\u4e00\u5c42\u662f\u4ece\u5de6\u5230\u53f3\u4f9d\u6b21\u6392\u5217\u3002</p> <p>\u4ee5\u5c0f\u6839\u5806\u4e3a\u4f8b\uff0c\u6bcf\u4e00\u4e2a\u70b9\u90fd\u662f\u5c0f\u4e8e\u7b49\u4e8e\u5de6\u53f3\u513f\u5b50\u7684\uff0c\u6839\u8282\u70b9\u5c31\u662f\u6574\u4e2a\u6570\u636e\u7ed3\u6784\u91cc\u7684\u6700\u5c0f\u503c</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_14","title":"\u5806\u7684\u5b58\u50a8","text":"<p>\u5168\u65b0\u7684\u5b58\u50a8\u65b9\u5f0f\uff1a\u7528\u4e00\u4e2a\u4e00\u7ef4\u7684\u6570\u636e\u7ed3\u6784\u6765\u5b58</p> <p>1\u53f7\u70b9\u662f\u6839\u8282\u70b9</p> <p>\u8282\u70b9x\u7684\u5de6\u513f\u5b50\u662f2x\uff0cx\u7684\u53f3\u513f\u5b50\u662f2x+1</p> <p>\u4e00\u7ef4\u6570\u7ec4\u5c31\u80fd\u5b58\u50a8\u4e00\u9897\u6811</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_15","title":"\u5806\u7684\u64cd\u4f5c","text":"<p>down(x)\u5f80\u4e0b\u8c03\u6574\uff1a\u5c31\u662f\u5982\u679c\u5806\u91cc\u9762\u5982\u679c\u67d0\u4e2a\u503c\u53d8\u5927\u4e86\uff0c\u5c31\u8981\u628a\u4ed6\u5f80\u4e0b\u79fb\uff0c\u5f80\u4e0b\u79fb\u7684\u601d\u8def\u662f\u548c\u4ed6\u7684\u4e24\u4e2a\u513f\u5b50\u6bd4\u8f83\uff0c\u548c\u5176\u4e2d\u4e00\u4e2a\u8f83\u5c0f\u7684\u513f\u5b50\u8fdb\u884c\u4ea4\u6362\uff0c\u8fd9\u6837\u80fd\u4fdd\u8bc1\u5c0f\u6839\u5806\u7684\u7ed3\u6784\uff0c\u4ea4\u6362\u5230 \u4e0d\u80fd\u4ea4\u6362\u7684\u65f6\u5019\u5c31\u7ed3\u675f</p> <p>\u6574\u4e2a\u8fc7\u7a0b\u5c31\u662f\u628a\u5927\u7684\u503c\u5f80\u4e0b\u538b\u7684\u8fc7\u7a0b\uff08down\uff09</p> <p>up(x)\u7f51\u5f80\u4e0a\u8c03\u6574\uff1a\u5c06\u4e0b\u9762\u7684\u6570\u53d8\u5927\uff0c\u53ea\u8981\u628a\u4ed6\u8ddf\u4ed6\u7684\u7236\u8282\u70b9\u6bd4\u8f83\u5373\u53ef</p> <p>\u5806\u7684\u6a21\u677f\uff1a</p> <pre><code>// h[N]\u5b58\u50a8\u5806\u4e2d\u7684\u503c, h[1]\u662f\u5806\u9876\uff0cx\u7684\u5de6\u513f\u5b50\u662f2x, \u53f3\u513f\u5b50\u662f2x + 1\n// ph[k]\u5b58\u50a8\u7b2ck\u4e2a\u63d2\u5165\u7684\u70b9\u5728\u5806\u4e2d\u7684\u4f4d\u7f6e\n// hp[k]\u5b58\u50a8\u5806\u4e2d\u4e0b\u6807\u662fk\u7684\u70b9\u662f\u7b2c\u51e0\u4e2a\u63d2\u5165\u7684\nint h[N], ph[N], hp[N], size;\n\n// \u4ea4\u6362\u4e24\u4e2a\u70b9\uff0c\u53ca\u5176\u6620\u5c04\u5173\u7cfb\nvoid heap_swap(int a, int b)\n{\n    swap(ph[hp[a]],ph[hp[b]]);\n    swap(hp[a], hp[b]);\n    swap(h[a], h[b]);\n}\n\nvoid down(int u)\n{\n    int t = u;\n    if (u * 2 &lt;= size &amp;&amp; h[u * 2] &lt; h[t]) t = u * 2;\n    if (u * 2 + 1 &lt;= size &amp;&amp; h[u * 2 + 1] &lt; h[t]) t = u * 2 + 1;\n    if (u != t)\n    {\n        heap_swap(u, t);\n        down(t);\n    }\n}\n\nvoid up(int u)\n{\n    while (u / 2 &amp;&amp; h[u] &lt; h[u / 2])\n    {\n        heap_swap(u, u / 2);\n        u &gt;&gt;= 1;\n    }\n}\n\n// O(n)\u5efa\u5806\nfor (int i = n / 2; i; i -- ) down(i);\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#838","title":"838. \u5806\u6392\u5e8f","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n\nusing namespace std;\nconst int N = 100010;\n\nint n, m;\nint h[N], Size;\n\nvoid down (int u) {\n    int t = u;\n    if (u * 2 &lt;= Size &amp;&amp; h[u * 2] &lt; h[t]) t = u * 2;\n    if (u * 2 + 1 &lt;= Size &amp;&amp; h[u * 2 + 1] &lt; h[t]) t = u * 2 + 1;\n    if (u != t) {\n        swap(h[u], h[t]);\n        down(t);\n    }\n}\n\nint main () {\n    scanf(\"%d%d\", &amp;n, &amp;m);\n    for (int i = 1; i &lt;= n; i++) {\n        scanf(\"%d\", &amp;h[i]);\n    }\n    Size = n;\n    // \u8fd9\u4e00\u6b65\u7684\u65f6\u5019\uff0c\u76f8\u5f53\u4e8e\u6700\u540e\u4e00\u5c42\u4e0d\u7528down\n    // \u6309\u7167\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u7ed3\u6784\uff0c\u6700\u540e\u4e00\u5c42\u7684\u6570\u7684\u4e2a\u6570\u662fn/2\n    // \u56e0\u4e3a\u5728down\u5012\u6570\u7b2c\u4e8c\u5c42\u7684\u65f6\u5019\uff0c\u6700\u540e\u4e00\u5c42\u4f1a\u81ea\u52a8\u88abdown\uff0c\u6240\u4ee5i\u4ecen/2\u5f00\u59cb\u5373\u53ef\n    for (int i = n/2; i; i -- ) down(i); // \u8fd9\u4e2a\u5faa\u73af\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n)\n    while(m --) {\n        printf(\"%d \", h[1]);\n        // \u8fd9\u91cc\u4e0d\u80fd\u76f4\u63a5\u63091\uff0c2\uff0c3\u8fd9\u6837\u7684\u987a\u5e8f\u8f93\u51fa\u7684\u539f\u56e0\u662f\uff1a\n        // \u867d\u7136\u80fd\u4fdd\u8bc1h[1]\u5c31\u662f\u6574\u4e2a\u5806\u6700\u5c0f\u7684\u6570\n        // \u4f46\u662fh[2]\u548ch[3]\u987a\u5e8f\u5e76\u6ca1\u6709\u5b9a\uff0c\u4ed6\u4eec\u4e24\u4e2a\u4e2d\u5fc5\u5b9a\u6709\u4e00\u4e2a\u7b2c\u4e8c\u5c0f\uff0c\u4f46\u8fd9\u4e2a\u6570\u53ef\u80fd\u662fh[3]\n        h[1] = h[Size];\n        Size--;\n        down(1);\n    }\n    return 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#839","title":"839.\u6a21\u62df\u5806","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n#include &lt;string.h&gt;\n\nusing namespace std;\n\nconst int N = 100010;\n\nint h[N], ph[N], hp[N], cnt;\n\n// ph[k]\u5b58\u7684\u662f\u7b2ck\u4e2a\u63d2\u5165\u7684\u6570\u7684\u4e0b\u6807\u662f\u4ec0\u4e48\n// ph[k] = j, hp[j] = k;\n// hp[j]\u5c31\u662f\u77e5\u9053\u4e0b\u6807\u662fj\u7684\u70b9\uff0c\u8fd4\u56de\u53bb\u627e\u4ed6\u662f\u7b2c\u51e0\u4e2a\u63d2\u5165\u7684\u6570\n\n// hp\u8868\u793a\u7b2ck\u4e2a\u63d2\u5165\u6570\u73b0\u5728\u7684\u4f4d\u7f6e\uff0chp\u8868\u793a\u5728\u8be5\u4f4d\u7f6e\u7684\u6570\u662f\u7b2ck\u4e2a\u63d2\u5165\u7684\nvoid heap_swap(int a, int b)\n{\n    swap(ph[hp[a]],ph[hp[b]]);\n    swap(hp[a], hp[b]);\n    swap(h[a], h[b]);\n}\n\nvoid down(int u)\n{\n    int t = u;\n    if (u * 2 &lt;= cnt &amp;&amp; h[u * 2] &lt; h[t]) t = u * 2;\n    if (u * 2 + 1 &lt;= cnt &amp;&amp; h[u * 2 + 1] &lt; h[t]) t = u * 2 + 1;\n    if (u != t)\n    {\n        heap_swap(u, t);\n        down(t);\n    }\n}\n\nvoid up(int u)\n{\n    while (u / 2 &amp;&amp; h[u] &lt; h[u / 2])\n    {\n        heap_swap(u, u / 2);\n        u &gt;&gt;= 1;\n    }\n}\n\nint main()\n{\n    int n, m = 0;\n    scanf(\"%d\", &amp;n);\n    while (n -- )\n    {\n        char op[5];\n        int k, x;\n        scanf(\"%s\", op);\n        if (!strcmp(op, \"I\"))\n        {\n            scanf(\"%d\", &amp;x);\n            cnt ++ ;\n            m ++ ;\n            ph[m] = cnt, hp[cnt] = m;\n            h[cnt] = x;\n            up(cnt);\n        }\n        else if (!strcmp(op, \"PM\")) printf(\"%d\\n\", h[1]);\n        else if (!strcmp(op, \"DM\"))\n        {\n            heap_swap(1, cnt);\n            cnt -- ;\n            down(1);\n        }\n        else if (!strcmp(op, \"D\"))\n        {\n            scanf(\"%d\", &amp;k);\n            k = ph[k];\n            heap_swap(k, cnt);\n            cnt -- ;\n            up(k);\n            down(k);\n        }\n        else\n        {\n            scanf(\"%d%d\", &amp;k, &amp;x);\n            k = ph[k];\n            h[k] = x;\n            up(k);\n            down(k);\n        }\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_16","title":"\u54c8\u5e0c\u8868","text":"<p>\u4e24\u5927\u5757\u5185\u5bb9\uff0c\u4e00\u4e2a\u662f\u666e\u901a\u54c8\u5e0c\u8868\u7684\u5199\u6cd5\uff0c\u53e6\u4e00\u4e2a\u662f\u5b57\u7b26\u4e32\u7684\u54c8\u5e0c\u65b9\u6cd5</p> <p>\u54c8\u5e0c\u8868\uff1a1. \u5b58\u50a8\u7ed3\u6784\uff1a\u5f00\u653e\u5bfb\u5740\u6cd5\u3001\u62c9\u94fe\u6cd5 \uff08\u4e24\u79cd\u65b9\u6cd5\u90fd\u5f88\u5e38\u7528\uff092. \u5b57\u7b26\u4e32\u5e38\u89c1\u7684\u54c8\u5e0c\u65b9\u5f0f</p> <p>\u54c8\u5e0c\u8868\u7684\u4e3b\u8981\u4f5c\u7528\uff1a\u628a\u5e9e\u5927\u7684\u7a7a\u95f4\u548c\u503c\u57df\u6620\u5c04\u5230\u6bd4\u8f83\u5c0f\u7684\u7a7a\u95f4\uff0c\u6620\u5c04\u52300-N\uff0cN\u4e00\u822c\u6bd4\u8f83\u5c0f</p> <p>\u628a\u4ece0-10^9 \u6620\u5c04\u52300-10^5\u7684\u503c\u57df</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_17","title":"\u4e00\u822c\u54c8\u5e0c","text":"<p>\u4e00\u822c\u54c8\u5e0c\u6a21\u677f\uff1a</p> <pre><code>(1) \u62c9\u94fe\u6cd5\n    int h[N], e[N], ne[N], idx;\n\n    // \u5411\u54c8\u5e0c\u8868\u4e2d\u63d2\u5165\u4e00\u4e2a\u6570\n    void insert(int x)\n    {\n        int k = (x % N + N) % N;\n        e[idx] = x;\n        ne[idx] = h[k];\n        h[k] = idx ++ ;\n    }\n\n    // \u5728\u54c8\u5e0c\u8868\u4e2d\u67e5\u8be2\u67d0\u4e2a\u6570\u662f\u5426\u5b58\u5728\n    bool find(int x)\n    {\n        int k = (x % N + N) % N;\n        for (int i = h[k]; i != -1; i = ne[i])\n            if (e[i] == x)\n                return true;\n\n        return false;\n    }\n\n(2) \u5f00\u653e\u5bfb\u5740\u6cd5\n    int h[N];\n\n    // \u5982\u679cx\u5728\u54c8\u5e0c\u8868\u4e2d\uff0c\u8fd4\u56dex\u7684\u4e0b\u6807\uff1b\u5982\u679cx\u4e0d\u5728\u54c8\u5e0c\u8868\u4e2d\uff0c\u8fd4\u56dex\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n    int find(int x)\n    {\n        int t = (x % N + N) % N;\n        while (h[t] != null &amp;&amp; h[t] != x)\n        {\n            t ++ ;\n            if (t == N) t = 0;\n        }\n        return t;\n    }\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#840","title":"840. \u6a21\u62df\u6563\u5217\u8868","text":"<p>\u901a\u8fc7\u4e00\u4e2a\u54c8\u5e0c\u51fd\u6570</p> <p>\u54c8\u5e0c\u5c31\u662f\u79bb\u6563</p> <p>\u79bb\u6563\u5316\u5c31\u662f\u53ca\u5176\u7279\u6b8a\u7684\u54c8\u5e0c\u65b9\u5f0f</p> <p>\u79bb\u6563\u5316\u662f\u9700\u8981\u4fdd\u5e8f\u7684\uff0c\u5355\u8c03\u9012\u589e</p> <p>\u4ece0~10<sup>9\u6620\u5c04\u52300~10</sup>5</p> <p>\u64cd\u4f5c\u7684\u4e2a\u6570\u662f10<sup>5\u6bcf\u4e00\u4e2a\u6570\u7684\u8303\u56f4\u662f-10</sup>9 ~10^9</p> <p>\u8f93\u5165h(x) \u6620\u5c04\u5230\u8f93\u51fa\uff080\uff0c10^5\uff09</p> <ol> <li>x mod 10^5\uff08\u54c8\u5e0c\u51fd\u6570\u600e\u4e48\u5199\uff1a\u53ea\u8981\u5c06\u5927\u6570\u53d6\u6a21\u5c31\u884c\u4e86\uff09\uff08\u6a21\u7684\u8fd9\u4e2a\u6570\u6700\u597d\u53d6\u6210\u8d28\u6570\uff0c\u5e76\u4e14\u79bb2\u7684\u6574\u6b21\u5e42\u5c3d\u53ef\u80fd\u8fdc \uff09</li> <li>\u51b2\u7a81\u4e24\u4e2a\u4e0d\u4e00\u6837\u7684\u6570\u4f1a\u88ab\u6620\u5c04\u6210\u540c\u4e00\u4e2a\u6570\uff0c\u4e24\u79cd\u5904\u7406\u65b9\u6cd5\uff1a\u5f00\u653e\u5bfb\u5740\u6cd5\u548c\u62c9\u94fe\u6cd5</li> </ol> <p>\u62c9\u94fe\u6cd5\uff1a\u5f00\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4\u6765\u5b58\u6240\u6709\u7684\u54c8\u5e0c\u503c</p> <p>\u5f53\u539f\u6570\u88ab\u6620\u5c04\u5230\u65b0\u7684\u6570\u636e\u8303\u56f4\u7684\u65f6\u5019\uff0c\u65b0\u7684\u6570\u636e\u8303\u56f4\u5c31\u4f1a\u62c9\u4e00\u6761\u69fd\u4e0b\u6765\uff0c\u4f9d\u6b21\u8fde\u63a5\u88ab\u8d4b\u6210\u65b0\u6570\u7684\u591a\u4e2a\u539f\u6570</p> <p>\u5728\u94fe\u4e0a\u589e\u52a0\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u662f\u5934\u63d2\u4e5f\u53ef\u4ee5\u5c3e\u63d2</p> <p>\u54c8\u5e0c\u8868\u662f\u4e00\u4e2a\u671f\u671b\u7b97\u6cd5</p> <p>\u5e73\u5747\u4e0b\u6765\u6bcf\u6761\u94fe\u662f\u5e38\u6570\uff0c\u53ef\u4ee5\u88ab\u770b\u6210O\uff081\uff09</p> <p>\u5728\u7b97\u6cd5\u9898\u91cc\u9762\uff0c\u4e00\u822c\u53ea\u6709\u6dfb\u52a0\u548c\u67e5\u627e\u64cd\u4f5c\uff0c\u4e0d\u4f1a\u5220\u9664</p> <p>\u6dfb\u52a0\uff1ah(x)</p> <p>\u67e5\u627e\uff1ah(x)\u5728\u54ea\u4e2a\u69fd\u4e0a\uff0c\u904d\u5386\u4e00\u904d\u6709\u6ca1\u6709\u8fd9\u4e2a\u6570</p> <p>\u5bfb\u627e\u5927\u4e8e100000\u7684\u7b2c\u4e00\u4e2a\u8d28\u6570\uff1a\u7b54\u6848\u662f100003</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nconst int N = 100010;\n\n\nint main () {\n    for (int i = 100000;;i++) {\n        bool flag = true;\n        for (int j = 2; j * j &lt;= i; j++) {\n            if (i % j == 0) {\n                flag = false;\n                break;\n            }\n        }\n        if (flag) {\n            cout &lt;&lt; i &lt;&lt; endl;\n            break;\n        }\n    }\n    return 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#840_1","title":"840. \u6a21\u62df\u6563\u5217\u8868","text":""},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_18","title":"\u62c9\u94fe\u6cd5","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\nusing namespace std; \n\nconst int N = 100003;\nint h[N], e[N], ne[N], idx;\n\nvoid insert (int x) {\n    // \u5728\u6570\u5b66\u91cc\u9762-10 mod 3\u5e94\u8be5\u662f2\uff0c\u56e0\u4e3a-10=-4 * 3 + 2\n    // \u800c\u5728C\u91cc\u9762-10 mod3\u5f97\u5230\u7684\u662f-1\n    // \u800c\u4e14\u4e0d\u80fd\uff08x + N\uff09%N\u539f\u56e0\u662fx+N\u4ecd\u7136\u53ef\u80fd\u662f\u8d1f\u6570\uff0c\u52a0\u4e86\u6ca1\u7528\n    // \u5fc5\u987b\u5148\u6a21\u518d\u52a0\u518d\u6a21\n    int k = (x % N + N) % N; // +N\u7684\u76ee\u7684\u662f\u8ba9\u4f59\u6570\u53d8\u6210\u6b63\u6570,k\u5c31\u662f\u54c8\u5e0c\u503c\n    e[idx] = x, ne[idx] = h[k], h[k] = idx++; // \u662f\u5934\u63d2\n}\n\nbool find(int x) {\n    int k = (x % N + N) % N;\n    for (int i = h[k]; i != -1; i = ne[i]) {\n        if (e[i] == x)\n            return true;\n    }\n    return false;\n}\n\nint main () {\n    int n;\n    scanf(\"%d\", &amp;n);\n\n    memset(h, -1, sizeof h); // \u5148\u628a\u94fe\u8868\u6e05\u7a7a\uff0c\u7a7a\u6307\u9488\u4e00\u822c\u7528-1\u8868\u793a\n\n    while (n --) {\n        char op[2];//\u5c3d\u91cf\u8bfb\u5b57\u7b26\u4e32\n        int x;\n        scanf(\"%s%d\", op, &amp;x);\n        if (*op == 'I') insert(x);\n        else {\n            if (find(x)) puts(\"Yes\");\n            else puts(\"No\");\n        }\n    }\n    return 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_19","title":"\u5f00\u653e\u5bfb\u5740\u6cd5","text":"<p>\u53ea\u5f00\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4\uff0c\u4f46\u662f\u8fd9\u4e2a\u6570\u7ec4\u7684\u957f\u5ea6\u7ecf\u9a8c\u4e0a\u6765\u8bf4\u8981\u5f00\u5230\u9898\u76ee\u6570\u503c\u8303\u56f4\u7684\u4e24\u5230\u4e09\u500d</p> <p>100000\u7684\u6570\u9700\u8981\u5f00\u5230\u4e8c\u4e09\u5341\u4e07</p> <p>\u6dfb\u52a0\uff1ah(k) \u7684\u4f4d\u7f6e\u6709\u4eba\u5c31\u53bb\u4e0b\u4e00\u4e2a\u5751\u4f4d\uff0c\u76f4\u5230\u627e\u5230\u6ca1\u6709\u4eba\u7684\u5751\u4f4d</p> <p>\u67e5\u627e\uff1a\u4e5f\u662f\u4ece\u7b2ck\u4e2a\u5751\u4f4d\u5f00\u59cb\uff0c\u4ece\u524d\u5f80\u540e\u627e</p> <p>\u5220\u9664\uff1a\u5982\u679c\u627e\u5230x\u7684\u8bdd\uff0c\u5728\u6570\u7ec4\u91cc\u9762\u6253\u4e2a\u6807\u8bb0\u6765\u6307\u51fa\u4ed6\u88ab\u5220\u9664\u4e86</p> <p>\u5f00\u653e\u5bfb\u5740\u6cd5\u7684\u597d\u5904\u662f\u53ea\u7528\u5f00\u4e00\u4e2a\u6570\u7ec4</p> <p>\u5927\u4e8e\u4e8c\u5341\u4e07\u6700\u5c0f\u7684\u8d28\u6570\u662f200003</p> <p>\u5f00\u653e\u5bfb\u5740\u6cd5\u7684\u6838\u5fc3\u662ffind\u51fd\u6570\uff0c\u5982\u679c\u5b58\u5728\u8fd4\u56dex\u4f4d\u7f6e\uff0c\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u8fd4\u56de\u5e94\u8be5\u5b58\u50a8\u7684\u4f4d\u7f6e</p> <p>\u6ce8\u610fmemset()\u662f\u6309\u5b57\u8282\u8d4b\u503c\uff0c\u51990x3f3f3f3f\u5c31\u4f1a\u62a5\u9519</p> <p>\u5728\u7b97\u6cd5\u7ade\u8d5b\u4e2d\uff0c\u6211\u4eec\u5e38\u5e38\u9700\u8981\u7528\u5230\u8bbe\u7f6e\u4e00\u4e2a\u5e38\u91cf\u7528\u6765\u4ee3\u8868\u201c\u65e0\u7a77\u5927\u201d\u3002</p> <p>\u6bd4\u5982\u5bf9\u4e8eint\u7c7b\u578b\u7684\u6570\uff0c\u6709\u7684\u4eba\u4f1a\u91c7\u7528INT_MAX\uff0c\u53730x7fffffff\u4f5c\u4e3a\u65e0\u7a77\u5927\u3002\u4f46\u662f\u4ee5INT_MAX\u4e3a\u65e0\u7a77\u5927\u5e38\u5e38\u9762\u4e34\u4e00\u4e2a\u95ee\u9898\uff0c\u5373\u52a0\u4e00\u4e2a\u5176\u4ed6\u7684\u6570\u4f1a\u6ea2\u51fa\u3002</p> <p>\u800c\u8fd9\u79cd\u60c5\u51b5\u5728\u52a8\u6001\u89c4\u5212\uff0c\u6216\u8005\u5176\u4ed6\u4e00\u4e9b\u9012\u63a8\u7684\u7b97\u6cd5\u4e2d\u5e38\u5e38\u51fa\u73b0\uff0c\u5f88\u6709\u53ef\u80fd\u5bfc\u81f4\u7b97\u6cd5\u51fa\u95ee\u9898\u3002</p> <p>\u6240\u4ee5\u5728\u7b97\u6cd5\u7ade\u8d5b\u4e2d\uff0c\u6211\u4eec\u5e38\u91c7\u75280x3f3f3f3f\u6765\u4f5c\u4e3a\u65e0\u7a77\u5927\u30020x3f3f3f3f\u4e3b\u8981\u6709\u5982\u4e0b\u597d\u5904\uff1a</p> <p>0x3f3f3f3f\u7684\u5341\u8fdb\u5236\u4e3a1061109567\uff0c\u548cINT_MAX\u4e00\u4e2a\u6570\u91cf\u7ea7\uff0c\u537310<sup>9\u6570\u91cf\u7ea7\uff0c\u800c\u4e00\u822c\u573a\u5408\u4e0b\u7684\u6570\u636e\u90fd\u662f\u5c0f\u4e8e10</sup>9\u7684\u3002 0x3f3f3f3f * 2 = 2122219134\uff0c\u65e0\u7a77\u5927\u76f8\u52a0\u4f9d\u7136\u4e0d\u4f1a\u6ea2\u51fa\u3002 \u53ef\u4ee5\u4f7f\u7528memset(array, 0x3f, sizeof(array))\u6765\u4e3a\u6570\u7ec4\u8bbe\u521d\u503c\u4e3a0x3f3f3f3f\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u6570\u7684\u6bcf\u4e2a\u5b57\u8282\u90fd\u662f0x3f\u3002</p> <p>\u7ecf\u9a8c\u4e0a\u6765\u8bf4\uff0c\u6bcf\u4e2a\u6570\u53ea\u8981\u627e\u4e24\u4e09\u4e2a\u5751\u4f4d\u5c31\u80fd\u627e\u5230\u4e86</p> <pre><code>#include &lt;cstring&gt;\n#include &lt;iostream&gt;\n\nusing namespace std;\n\nconst int N = 200003, null = 0x3f3f3f3f;\n\nint h[N];\n\nint find(int x)\n{\n    int t = (x % N + N) % N;\n    while (h[t] != null &amp;&amp; h[t] != x)\n    {\n        t ++ ;\n        if (t == N) t = 0;\n    }\n    return t;\n}\n\nint main()\n{\n    memset(h, 0x3f, sizeof h);\n\n    int n;\n    scanf(\"%d\", &amp;n);\n\n    while (n -- )\n    {\n        char op[2];\n        int x;\n        scanf(\"%s%d\", op, &amp;x);\n        if (*op == 'I') h[find(x)] = x;\n        else\n        {\n            if (h[find(x)] == null) puts(\"No\");\n            else puts(\"Yes\");\n        }\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_20","title":"\u5b57\u7b26\u4e32\u54c8\u5e0c","text":"<p>\u57fa\u672c\u60f3\u6cd5\uff1a\u5c06\u5b57\u7b26\u4e32\u6620\u5c04\u6210\u6574\u6570</p> <p>\u5047\u8bbe\u6240\u6709\u5b57\u7b26\u4e32\u90fd\u662f\u5c0f\u5199\u5b57\u6bcd\uff0c\u5c06\u4e00\u4e2a\u5b57\u7b26\u4e32\u770b\u6210p\u8fdb\u5236\u7684\u6570\u7136\u540e\u6a21\u4e0a\u4e00\u4e2aQ\u7684\u7ed3\u679c</p> <p>\u6bd4\u5982abcabcdefg</p> <p>1231234567 = (1* p^9 + 2* p^8 + 3 * p ^7...) %q = 0~q - 1\u8fd9\u4e2a\u503c\u5c31\u662f\u54c8\u5e0c\u503c</p> <p>p\u4e00\u822c\u53d6131\u6216\u800513331\uff0cq\u53d62^64\uff0c\u56e0\u4e3a\u53ef\u4ee5\u76f4\u63a5\u7528unsigned long long 8bit \u6700\u591a\u53ea\u80fd\u5b58\u50a82^64\uff0c\u8d85\u51fa\u7684\u90e8\u5206\u4f1a\u81ea\u52a8\u53d6\u6a21</p> <p>\u53d6\u6a21\u8fd0\u7b97\u6bd4\u52a0\u51cf\u4e58\u9664\u6162\u4e86\u5f88\u591a\u500d\uff0c\u6240\u4ee5\u8981\u7528unsigned long long</p> <p>hash(abd) = (124)131 = 131 * 131  + 2 * 131 + 4 * 1</p> <p>\u4e00\u79cd\u7279\u6b8a\u7684\u54c8\u5e0c\u65b9\u5f0f\uff0c\u5b57\u7b26\u4e32\u524d\u7f00\u54c8\u5e0c\u6cd5</p> <p>h[n] \u8868\u793a\u524dn\u4e2a\u5b57\u7b26\u7684\u54c8\u5e0c</p> <p>str = \"ABCA\"</p> <p>h[0] = 0;</p> <p>h[1] = \"A\"\u7684hash\u503c</p> <p>h[2] = \"AB\"\u7684hash\u503c</p> <ol> <li>\u5c06\u5b57\u7b26\u4e32\u770b\u6210p\u8fdb\u5236\u7684\u6570\uff0c\u6bd4\u5982ABCD\u5b57\u7b26\u4e32\u53ef\u4ee5\u770b\u6210\uff081\uff0c2\uff0c3\uff0c4\uff09\uff0c1 * p^3 + 2 * p^2 + 3 * p^1 + 4 * p ^0,\u7136\u540e\u7ed9\u8fd9\u4e2a\u503cmodQ</li> <li>\u6ce8\u610f\u4e0d\u80fd\u5c06\u67d0\u4e2a\u5b57\u6bcd\u6620\u5c04\u62100\uff0c\u56e0\u4e3a0\u7684p\u8fdb\u5236\u6570\u6c38\u8fdc\u662f0\uff0c\u201cAAA\u201d\u548c\u201cAA\u201d\u90fd\u662f0</li> <li>\u54c8\u5e0c\u6570\u5b57\u7684\u65f6\u5019\u53ef\u4ee5\u5bb9\u5fcd\u51b2\u7a81\uff0c\u54c8\u5e0c\u5b57\u7b26\u4e32\u505a\u6cd5\u8981\u5047\u5b9a\u4eba\u54c1\u8db3\u591f\u597d\uff0c\u78b0\u4e0d\u5230\u51b2\u7a81\u7684\u60c5\u51b5\uff0c\u6240\u4ee5\u8fd9\u4e2a\u65b9\u6cd5\u5b8c\u5168\u4e0d\u8003\u8651\u91cd\u51b2\u7a81\u60c5\u51b5</li> <li>\u4e00\u822c\u6765\u8bf4\uff0cp\u53d6131\u6216\u800513331\uff0cQ\u53d62^64,\u6211\u4eec\u5c31\u80fd\u5047\u5b9a\u78b0\u4e0d\u5230\u51b2\u7a81\u7684\u60c5\u51b5\u4e86</li> <li>\u53ef\u4ee5\u5229\u7528\u54c8\u5e0c\u8ba1\u7b97\u51fa\u6240\u6709\u5b50\u4e32\u7684\u54c8\u5e0c</li> </ol> <p>\u6bd4\u5982\uff1a\u9700\u8981\u6c42\u51fa\u4e00\u4e2a\u5b57\u7b26\u4e32\u4eceL\u5230R\u7684\u5b57\u7b26\u4e32\u7684\u54c8\u5e0c\u503c\uff0c\u516c\u5f0f\u5c31\u662fh[R] - h[L] * p^(R - L +1)</p> <p>\u5b57\u7b26\u4e32\u54c8\u5e0c\uff1a    </p> <pre><code>\u6838\u5fc3\u601d\u60f3\uff1a\u5c06\u5b57\u7b26\u4e32\u770b\u6210P\u8fdb\u5236\u6570\uff0cP\u7684\u7ecf\u9a8c\u503c\u662f131\u621613331\uff0c\u53d6\u8fd9\u4e24\u4e2a\u503c\u7684\u51b2\u7a81\u6982\u7387\u4f4e\n\u5c0f\u6280\u5de7\uff1a\u53d6\u6a21\u7684\u6570\u75282^64\uff0c\u8fd9\u6837\u76f4\u63a5\u7528unsigned long long\u5b58\u50a8\uff0c\u6ea2\u51fa\u7684\u7ed3\u679c\u5c31\u662f\u53d6\u6a21\u7684\u7ed3\u679c\n\ntypedef unsigned long long ULL;\nULL h[N], p[N]; // h[k]\u5b58\u50a8\u5b57\u7b26\u4e32\u524dk\u4e2a\u5b57\u6bcd\u7684\u54c8\u5e0c\u503c, p[k]\u5b58\u50a8 P^k mod 2^64\n\n// \u521d\u59cb\u5316\np[0] = 1;\nfor (int i = 1; i &lt;= n; i ++ )\n{\n    h[i] = h[i - 1] * P + str[i];\n    p[i] = p[i - 1] * P;+9\n}\n\n// \u8ba1\u7b97\u5b50\u4e32 str[l ~ r] \u7684\u54c8\u5e0c\u503c\nULL get(int l, int r)\n{\n    return h[r] - h[l - 1] * p[r - l + 1];\n}\n</code></pre> <p>\u54c8\u5e0c\u503c\u76f8\u540c\u7684\u8bdd\u5c31\u8ba4\u4e3a\u4e24\u4e2a\u5b57\u7b26\u4e32\u76f8\u540c</p> <p>h[N]\u8868\u793a\u7684\u662f\u67d0\u4e00\u4e2a\u524d\u7f00\u7684\u54c8\u5e0c\u503c</p> <p>p\u4ee3\u8868p\u8fdb\u5236</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#841","title":"841. \u5b57\u7b26\u4e32\u54c8\u5e0c","text":"<p>\u8003\u8651\u4e00\u4e0babab\u5c31\u61c2\u4e86</p> <p>h[1] = 1</p> <p>h[2] = 1 * 131 + 2</p> <p>h[3] = 1*131 ^ 2 + 2 * 131 + 1</p> <p>h[4] = 1 * 131 ^3 + 2 * 131 ^2 +1 * 131 + 1</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\ntypedef unsigned long long ULL;\nconst int N = 100010, P = 131;\n\nint n, m;\nchar str[N];\nULL h[N], p[N];\n\nULL get(int l, int r) {\n    return h[r] - h[l - 1] * p[r - l + 1];\n}\n\nint main () {\n    scanf(\"%d%d%s\", &amp;n, &amp;m, str + 1); // \u52a0\u4e00\u662f\u4e3a\u4e86\u9632\u6b62\u4ece0\u5f00\u59cb\n    p[0] = 1;\n    for (int i = 1; i &lt;= n; i++) {\n        p[i] = p[i - 1] * P;\n        h[i] = h[i - 1] * P + str[i]; // \u6240\u4ee5\u6700\u5de6\u8fb9\u7684\u90a3\u4e00\u4f4d\u6700\u540e\u4f1a\u53d8\u6210 P^(n - 1)\n    }\n\n    while (m --){\n        int l1, r1, l2, r2;\n        scanf(\"%d%d%d%d\", &amp;l1, &amp;r1, &amp;l2, &amp;r2);\n\n        if (get(l1, r1) == get(l2, r2)) puts(\"Yes\");\n        else puts(\"No\");\n    }\n    return 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#c-stl","title":"C++ STL\u7b80\u4ecb","text":"<p>vector</p> <p>\u6570\u7ec4\u957f\u5ea6\u662f\u52a8\u6001\u53d8\u5316\u7684</p> <p>string</p> <p>\u5904\u7406\u5b57\u7b26\u4e32\u7684\u5229\u5668</p> <p>queue, priority_queue</p> <p>stack</p> <p>deque</p> <p>set, map, multiset, multimap</p> <p>unoredered_set, unordered_map, unordered_multiset, unordered_multimap</p> <p>bitset</p> <pre><code>vector, \u53d8\u957f\u6570\u7ec4\uff0c\u500d\u589e\u7684\u601d\u60f3\n    size()  \u8fd4\u56de\u5143\u7d20\u4e2a\u6570\n    empty()  \u8fd4\u56de\u662f\u5426\u4e3a\u7a7a\n    clear()  \u6e05\u7a7a\n    front()/back()\n    push_back()/pop_back()\n    begin()/end()\n    []\n    \u652f\u6301\u6bd4\u8f83\u8fd0\u7b97\uff0c\u6309\u5b57\u5178\u5e8f\n\npair&lt;int, int&gt; \u597d\u5904\u662f\u76f8\u5f53\u4e8e\u4e00\u4e2a\u81ea\u5e26\u7684\u7ed3\u6784\u4f53\uff0c\u800c\u4e14\u81ea\u5e26\u4e86\u4e00\u4e2a\u6bd4\u8f83\n    first, \u7b2c\u4e00\u4e2a\u5143\u7d20\n    second, \u7b2c\u4e8c\u4e2a\u5143\u7d20\n    \u652f\u6301\u6bd4\u8f83\u8fd0\u7b97\uff0c\u4ee5first\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\uff0c\u4ee5second\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\uff08\u5b57\u5178\u5e8f\uff09\n    p = make_pair(10, \"yxc\"); // \u53ef\u4ee5\u751f\u6210pair\n    p = {20, \"abv\"}; // C++11\u53ef\u4ee5\u76f4\u63a5\u5199\n    pair&lt;int, pair&lt;int, int&gt;&gt; p // \u53ef\u4ee5\u505a\u5230\u5b58\u50a8\u4e09\u4e2a\u4e0d\u540c\u7684\u53d8\u91cf\n\nstring\uff0c\u5b57\u7b26\u4e32\n    size()/length()  \u8fd4\u56de\u5b57\u7b26\u4e32\u957f\u5ea6\n    empty()\n    clear()\n    substr(\u8d77\u59cb\u4e0b\u6807\uff0c(\u5b50\u4e32\u957f\u5ea6))  \u8fd4\u56de\u5b50\u4e32\uff0c\u6ce8\u610f\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u957f\u5ea6\uff01\n    c_str()  \u8fd4\u56de\u5b57\u7b26\u4e32\u6240\u5728\u5b57\u7b26\u6570\u7ec4\u7684\u8d77\u59cb\u5730\u5740\u3001\u5934\u6307\u9488\n    printf(\"%s\\n\", a.c_str());\n\nqueue, \u961f\u5217\uff0c\u5148\u8fdb\u5148\u51fa\uff0c\u6ca1\u6709clear\n    size()\n    empty()\n    push()  \u5411\u961f\u5c3e\u63d2\u5165\u4e00\u4e2a\u5143\u7d20\n    front()  \u8fd4\u56de\u961f\u5934\u5143\u7d20\n    back()  \u8fd4\u56de\u961f\u5c3e\u5143\u7d20\n    pop()  \u5f39\u51fa\u961f\u5934\u5143\u7d20\n    q = queue&lt;int&gt;(); \u80fd\u591f\u76f4\u63a5\u6e05\u7a7aq\uff0c\u800c\u4e0d\u9700\u8981\u7528\u5230clear\n\npriority_queue, \u4f18\u5148\u961f\u5217\uff0c\u9ed8\u8ba4\u662f\u5927\u6839\u5806\n    size()\n    empty()\n    push()  \u63d2\u5165\u4e00\u4e2a\u5143\u7d20\n    top()  \u8fd4\u56de\u5806\u9876\u5143\u7d20\n    pop()  \u5f39\u51fa\u5806\u9876\u5143\u7d20\n    \u5b9a\u4e49\u6210\u5c0f\u6839\u5806\u53ef\u4ee5\u5411\u91cc\u9762\u63d2\u5165-x\n    \u5b9a\u4e49\u6210\u5c0f\u6839\u5806\u7684\u65b9\u5f0f\uff1apriority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; q;\n\nstack, \u6808\n    size()\n    empty()\n    push()  \u5411\u6808\u9876\u63d2\u5165\u4e00\u4e2a\u5143\u7d20\n    top()  \u8fd4\u56de\u6808\u9876\u5143\u7d20\n    pop()  \u5f39\u51fa\u6808\u9876\u5143\u7d20\n\ndeque, \u53cc\u7aef\u961f\u5217\uff0c\u961f\u5c3e\u961f\u5934\u90fd\u53ef\u4ee5\u63d2\u5165\u548c\u5f39\u51fa\uff0c\u800c\u4e14\u53ef\u4ee5\u652f\u6301\u968f\u673a\u8bbf\u95ee\uff0c\u52a0\u5f3a\u7248vector\uff0c\u7f3a\u70b9\u662f\u901f\u5ea6\u6162\u6548\u7387\u5de8\u4f4e\uff0c\u6bd4\u4e00\u822c\u6570\u7ec4\u6162\u4e86\u597d\u51e0\u500d\uff0c\u800c\u4e14\u7a7a\u95f4\u4e5f\u5927\uff0c\u4f1a\u8d85\u51fa\u7a7a\u95f4\n    size()\n    empty()\n    clear()\n    front()/back()\n    push_back()/pop_back()\n    push_front()/pop_front()\n    begin()/end()\n    []\n\nset, map, multiset, multimap, \u57fa\u4e8e\u5e73\u8861\u4e8c\u53c9\u6811\uff08\u7ea2\u9ed1\u6811\uff09\uff0c\u52a8\u6001\u7ef4\u62a4\u6709\u5e8f\u5e8f\u5217\n    set\u91cc\u9762\u662f\u4e0d\u80fd\u6709\u91cd\u590d\u5143\u7d20\u7684\uff0c\u800cmultiset\u91cc\u9762\u53ef\u4ee5\u6709\n    set\u6240\u6709\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u8bfb\u662flog(n)\n    size()\n    empty() \n    clear()\n    begin()/end()\n    ++, -- \u8fd4\u56de\u524d\u9a71\u548c\u540e\u7ee7\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 O(logn)\u524d\u9a71\u5c31\u662f\u524d\u9762\u4e00\u4e2a\u6570\uff0c\u540e\u7ee7\u5c31\u662f\u540e\u9762\u4e00\u4e2a\u6570\n\n    set/multiset\n        insert()  \u63d2\u5165\u4e00\u4e2a\u6570\n        find()  \u67e5\u627e\u4e00\u4e2a\u6570\uff0c\u4e0d\u5b58\u5728\u7684\u8bdd\u8fd4\u56deend\u8fed\u4ee3\u5668\n        count()  \u8fd4\u56de\u67d0\u4e00\u4e2a\u6570\u7684\u4e2a\u6570\n        erase()\n            (1) \u8f93\u5165\u662f\u4e00\u4e2a\u6570x\uff0c\u5220\u9664\u6240\u6709x   O(k + logn)k\u662fx\u4e2a\u6570 \n            (2) \u8f93\u5165\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u5220\u9664\u8fd9\u4e2a\u8fed\u4ee3\u5668\n        lower_bound()/upper_bound()\n            lower_bound(x)  \u8fd4\u56de\u5927\u4e8e\u7b49\u4e8ex\u7684\u6700\u5c0f\u7684\u6570\u7684\u8fed\u4ee3\u5668\n            upper_bound(x)  \u8fd4\u56de\u5927\u4e8ex\u7684\u6700\u5c0f\u7684\u6570\u7684\u8fed\u4ee3\u5668 \n    map/multimap\n        insert()  \u63d2\u5165\u7684\u6570\u662f\u4e00\u4e2apair\n        erase()  \u8f93\u5165\u7684\u53c2\u6570\u662fpair\u6216\u8005\u8fed\u4ee3\u5668\n        find()\n        []  \u6ce8\u610fmultimap\u4e0d\u652f\u6301\u6b64\u64cd\u4f5c\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\u662f O(logn)\n        lower_bound()/upper_bound()\n\u4f8b\u5b50\uff1a map&lt;string,int&gt; a; a[\"yxc\"] = 1; cout &lt;&lt; a[\"yxc\"] &lt;&lt; endl;\n\nunordered_set, unordered_map, unordered_multiset, unordered_multimap, \u57fa\u4e8e\u54c8\u5e0c\u8868\u5b9e\u73b0\u7684\n    \u548c\u4e0a\u9762\u7c7b\u4f3c\uff0c\u589e\u5220\u6539\u67e5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(1)\n    \u4e0d\u652f\u6301 lower_bound()/upper_bound()\uff0c \u8fed\u4ee3\u5668\u7684++\uff0c--,\u56e0\u4e3a\u5185\u90e8\u662f\u6ca1\u6709\u5e8f\u7684\n\nbitset, \u5727\u4f4d\n    \u6bd4\u6b63\u5e38\u7684bool\u6570\u7ec4\u7701\u5185\u5b58\uff0c\u516b\u5206\u4e4b\u4e00\n    10000*10000\u7684bool\u77e9\u9635\u9700\u898110^8 100MB\uff0c\u800cbitset\u53ea\u9700\u898112MB\n\n    bitset&lt;10000&gt; s;\n    ~, &amp;, |, ^\n    &gt;&gt;, &lt;&lt;\n    ==, !=\n    []\n    count()  \u8fd4\u56de\u6709\u591a\u5c11\u4e2a1\n\n    any()  \u5224\u65ad\u662f\u5426\u81f3\u5c11\u6709\u4e00\u4e2a1\n    none()  \u5224\u65ad\u662f\u5426\u5168\u4e3a0\n\n    set()  \u628a\u6240\u6709\u4f4d\u7f6e\u62101\n    set(k, v)  \u5c06\u7b2ck\u4f4d\u53d8\u6210v\n    reset()  \u628a\u6240\u6709\u4f4d\u53d8\u62100\n    flip()  \u7b49\u4ef7\u4e8e~\n    flip(k) \u628a\u7b2ck\u4f4d\u53d6\u53cd\n\nlist\u7528\u7684\u4e0d\u591a\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#include","title":"#include  <p>vector\u662f\u53d8\u957f\u6570\u7ec4\uff0c\u652f\u6301\u968f\u673a\u8bbf\u95ee\uff0c\u4e0d\u652f\u6301\u5728\u4efb\u610f\u4f4d\u7f6e O(1) \u63d2\u5165\u3002\u4e3a\u4e86\u4fdd\u8bc1\u6548\u7387\uff0c\u5143\u7d20\u7684\u589e\u5220\u4e00\u822c\u5e94\u8be5\u5728\u672b\u5c3e\u8fdb\u884c\u3002</p> <p>\u7cfb\u7edf\u4e3a\u67d0\u4e00\u7a0b\u5e8f\u5206\u914d\u7a7a\u95f4\u65f6\uff0c\u6240\u9700\u7684\u65f6\u95f4\uff0c\u57fa\u672c\u4e0a\u4e0e\u7a7a\u95f4\u5927\u5c0f\u65e0\u5173\uff0c\u4e0e\u7533\u8bf7\u6b21\u6570\u6709\u5173\uff0c\u7cfb\u7edf\u5206\u914d\u957f\u5ea6\u4e3a1\u548c100\u7684\u6570\u7ec4\u7684\u65f6\u95f4\u662f\u4e00\u6837\u7684</p> <p>\u53d8\u957f\u6570\u7ec4\u8981\u7ecf\u91cf\u51cf\u5c11\u7533\u8bf7\u7a7a\u95f4\u7684\u6b21\u6570</p>","text":""},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#11","title":"1.1\u58f0\u660e","text":"<pre><code>#include &lt;vector&gt;   // \u5934\u6587\u4ef6\nvector&lt;int&gt; a;      // \u76f8\u5f53\u4e8e\u4e00\u4e2a\u957f\u5ea6\u52a8\u6001\u53d8\u5316\u7684int\u6570\u7ec4\nvector&lt;int&gt; b[233]; // \u76f8\u5f53\u4e8e\u7b2c\u4e00\u7ef4\u957f233\uff0c\u7b2c\u4e8c\u4f4d\u957f\u5ea6\u52a8\u6001\u53d8\u5316\u7684int\u6570\u7ec4\nstruct rec{\u2026};\nvector&lt;rec&gt; c;      // \u81ea\u5b9a\u4e49\u7684\u7ed3\u6784\u4f53\u7c7b\u578b\u4e5f\u53ef\u4ee5\u4fdd\u5b58\u5728vector\u4e2d\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#12-sizeempty","title":"1.2 size/empty","text":"<p>size\u51fd\u6570\u8fd4\u56devector\u7684\u5b9e\u9645\u957f\u5ea6\uff08\u5305\u542b\u7684\u5143\u7d20\u4e2a\u6570\uff09\uff0cempty\u51fd\u6570\u8fd4\u56de\u4e00\u4e2abool\u7c7b\u578b\uff0c\u8868\u660evector\u662f\u5426\u4e3a\u7a7a\u3002\u4e8c\u8005\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662f O(1)\u6240\u6709\u7684STL\u5bb9\u5668\u90fd\u652f\u6301\u8fd9\u4e24\u4e2a\u65b9\u6cd5\uff0c\u542b\u4e49\u4e5f\u76f8\u540c\uff0c\u4e4b\u540e\u6211\u4eec\u5c31\u4e0d\u518d\u91cd\u590d\u7ed9\u51fa\u3002</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#13-clear","title":"1.3 clear","text":"<p>clear\u51fd\u6570\u628avector\u6e05\u7a7a\u3002</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#14","title":"1.4 \u8fed\u4ee3\u5668","text":"<p>\u8fed\u4ee3\u5668\u5c31\u50cfSTL\u5bb9\u5668\u7684\u201c\u6307\u9488\u201d\uff0c\u53ef\u4ee5\u7528\u661f\u53f7*\u64cd\u4f5c\u7b26\u89e3\u9664\u5f15\u7528\u3002</p> <p>\u4e00\u4e2a\u4fdd\u5b58int\u7684vector\u7684\u8fed\u4ee3\u5668\u58f0\u660e\u65b9\u6cd5\u4e3a\uff1a</p> <p><code>vector&lt;int&gt;::iterator it;</code> vector\u7684\u8fed\u4ee3\u5668\u662f\u201c\u968f\u673a\u8bbf\u95ee\u8fed\u4ee3\u5668\u201d\uff0c\u53ef\u4ee5\u628avector\u7684\u8fed\u4ee3\u5668\u4e0e\u4e00\u4e2a\u6574\u6570\u76f8\u52a0\u51cf\uff0c\u5176\u884c\u4e3a\u548c\u6307\u9488\u7684\u79fb\u52a8\u7c7b\u4f3c\u3002\u53ef\u4ee5\u628avector\u7684\u4e24\u4e2a\u8fed\u4ee3\u5668\u76f8\u51cf\uff0c\u5176\u7ed3\u679c\u4e5f\u548c\u6307\u9488\u76f8\u51cf\u7c7b\u4f3c\uff0c\u5f97\u5230\u4e24\u4e2a\u8fed\u4ee3\u5668\u5bf9\u5e94\u4e0b\u6807\u4e4b\u95f4\u7684\u8ddd\u79bb\u3002</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#15-beginend","title":"1.5 begin/end","text":"<p>begin\u51fd\u6570\u8fd4\u56de\u6307\u5411vector\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668\u3002\u4f8b\u5982a\u662f\u4e00\u4e2a\u975e\u7a7a\u7684vector\uff0c\u5219*a.begin()\u4e0ea[0]\u7684\u4f5c\u7528\u76f8\u540c\u3002</p> <p>\u6240\u6709\u7684\u5bb9\u5668\u90fd\u53ef\u4ee5\u89c6\u4f5c\u4e00\u4e2a\u201c\u524d\u95ed\u540e\u5f00\u201d\u7684\u7ed3\u6784\uff0cend\u51fd\u6570\u8fd4\u56devector\u7684\u5c3e\u90e8\uff0c\u5373\u7b2cn \u4e2a\u5143\u7d20\u518d\u5f80\u540e\u7684\u201c\u8fb9\u754c\u201d\u3002*a.end()\u4e0ea[n]\u90fd\u662f\u8d8a\u754c\u8bbf\u95ee\uff0c\u5176\u4e2dn = a.size()\u3002</p> <p>\u4e0b\u9762\u4e24\u4efd\u4ee3\u7801\u90fd\u904d\u5386\u4e86vector a\uff0c\u5e76\u8f93\u51fa\u5b83\u7684\u6240\u6709\u5143\u7d20\u3002"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#16-frontback","title":"1.6 front/back","text":"<p>front\u51fd\u6570\u8fd4\u56devector\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c\u7b49\u4ef7\u4e8ea.begin()\u548ca[0]\u3002 back\u51fd\u6570\u8fd4\u56devector\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff0c\u7b49\u4ef7\u4e8e--a.end()\u548ca[a.size() \u2013 1]\u3002</p>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#17-push_backpop_back","title":"1.7 push_back()\u548cpop_back()","text":"<p>a.push_back(x)\u628a\u5143\u7d20x\u63d2\u5165\u5230vector a\u7684\u5c3e\u90e8\u3002 b.pop_back()\u5220\u9664vector a\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u3002</p> <pre><code>#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n#include &lt;vector&gt;\n\nusing namespace std;\n\nint main () {\n    vector&lt;int&gt; a(10);\n    vector&lt;int&gt; b(10, 3); // \u957f\u5ea6\u4e3a10\u7684\u6570\u7ec4\uff0c\u5e76\u4e14\u5168\u90e8\u521d\u59cb\u5316\u4e3a3\n    for (auto i : b) cout &lt;&lt; i &lt;&lt; ' ';\n    cout &lt;&lt; endl;\n\n    vector&lt;int&gt; c;\n    for (int i = 0; i &lt; 10; i ++) c.push_back(i);\n\n    for (int i = 0; i &lt; 10; i++) cout &lt;&lt; c[i] &lt;&lt; ' ';\n    cout &lt;&lt; endl;\n\n    for (vector&lt;int&gt;::iterator i = c.begin(); i != c.end(); i++) cout &lt;&lt; *i &lt;&lt; ' ';\n    cout &lt;&lt; endl;\n\n\n    return 0;\n}\n</code></pre>"},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E8%B4%AA%E5%BF%83/","title":"\u7b2c\u516d\u8bb2  \u8d2a\u5fc3","text":""},{"location":"Problem/acwing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE%E8%B4%AA%E5%BF%83/#_2","title":"\u54c8\u592b\u66fc\u6811","text":"<p>\u7531\u4e8e\u54c8\u592b\u66fc\u6811\u7684\u6839\u8282\u70b9\u662f\u7531\u4e24\u4e2a\u5b50\u8282\u70b9\u5408\u5e76\u800c\u6765\uff0c\u6240\u4ee5\u54c8\u592b\u66fc\u6811\u4e00\u5b9a\u662f\u5b8c\u5168\u4e8c\u53c9\u6811</p> <p>\u505a\u6cd5\u662f\u6bcf\u4e00\u6b21\u6311\u51fa\u6700\u5c0f\u7684\u4e24\u5806</p> <ol> <li>\u5728\u6240\u6709\u6570\u91cc\u9762\uff0c\u6570\u6700\u5c0f\u7684\u4e24\u4e2a\u6570\u4e00\u5b9a\u662f\u6df1\u5ea6\u6700\u6df1\u7684\u4e24\u4e2a\u70b9\u4e14\u53ef\u4ee5\u4e92\u4e3a\u5144\u5f1f\u8282\u70b9</li> </ol> <p>\u6bcf\u4e00\u6b21\u6c42\u6700\u5c0f\u503c\uff0c\u53ef\u4ee5\u7528\u5c0f\u6839\u5806\u3001\u4f18\u5148\u961f\u5217\uff0c\u5c0f\u6839\u5806\u5c31\u662f\u6bcf\u6b21\u7684top()\u662f\u6700\u5c0f\u503c</p> <pre><code> std::priority_queue&lt;int, std::vector&lt;int&gt;, std::greater&lt;int&gt;&gt; minHeap;\n</code></pre> <p><code>vector&lt;int&gt;</code>\u6307\u7684\u662f\u7528\u6765\u5b58\u50a8\u5143\u7d20\u7684\u5e95\u5c42\u5bb9\u5668  </p> <p>\u5927\u6839\u5806\u5c31\u662f\u6bcf\u6b21\u7684top()\u90fd\u662f\u6700\u5927\u503c</p> <pre><code>std::priority_queue&lt;int&gt; maxHeap;\n</code></pre> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;queue&gt;\nusing namespace std;\n\nint n;\nint main () {\n    cin &gt;&gt; n;\n    priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; heap;\n\n    for (int i = 0; i &lt; n; i++) {\n        int x;\n        scanf(\"%d\", &amp;x);\n        heap.push(x);\n    }\n    int res = 0;\n    while (heap.size() &gt; 1) {\n        int a = heap.top();\n        heap.pop();\n        int b = heap.top();\n        heap.pop();\n        res += a + b;\n        heap.push(a + b);\n    }\n    printf(\"%d\\n\", res);\n    return 0;\n}\n</code></pre>"},{"location":"Problem/contest/contest/","title":"LeetCode \u5468\u8d5b","text":""},{"location":"Problem/contest/contest/#debug","title":"\u5173\u4e8edebug","text":""},{"location":"Problem/contest/contest/#overflow","title":"overflow\u78b0\u5230\u7684\u53ef\u80fd\u95ee\u9898","text":"<ol> <li>\u5728\u9700\u8981\u9012\u51cf\u7684\u5faa\u73af\u91cc\u6ca1\u6709\u9009\u62e9\u9012\u51cf\u6bd4\u5982<code>for (int i = nums.size() - 2; i &gt;= 0; i--)</code>\u8981\u6ce8\u610f\u8fd9\u91cc\u7684i\u9700\u8981<code>i--</code></li> </ol>"},{"location":"Problem/contest/contest/#2240","title":"2240. \u4e70\u94a2\u7b14\u548c\u94c5\u7b14\u7684\u65b9\u6848\u6570","text":"<pre><code>class Solution {\npublic:\n    long long waysToBuyPensPencils(int total, int cost1, int cost2) {\n        // \u89c2\u5bdf\u5230\u5982\u679ccost1\u53d8\u5927\uff0c\u90a3\u4e48\u5faa\u73af\u6b21\u6570\u5c31\u4f1a\u53d8\u5c0f\uff0c\u90a3\u4e48\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u4f1a\u964d\u4f4e\n        if (cost1 &lt; cost2) return waysToBuyPensPencils(total, cost2, cost1);\n        long long res = 0;\n        for (int i = 0; i &lt;= total / cost1; i++) {\n            res += (total - cost1 * i) / cost2 + 1;\n        }\n        return res;\n    }\n};\n</code></pre>"},{"location":"Problem/contest/contest/#1400-1600","title":"1400-1600","text":""},{"location":"Problem/contest/contest/#2-2909-ii","title":"2. 2909. \u5143\u7d20\u548c\u6700\u5c0f\u7684\u5c71\u5f62\u4e09\u5143\u7ec4 II","text":"<p>\u7ecf\u5178\u7684\u524d\u540e\u7f00\u5206\u89e3\u95ee\u9898</p> <p>\u89c2\u5bdf\u8fd9\u9053\u9898\u8981\u6c42\u7684\u662f\uff0c\u4e2d\u95f4\u7684\u6570\u8981\u5927\u4e8e\u4e24\u8fb9\uff0c\u90a3\u4e48\u5c31\u76f8\u5f53\u4e8e\u6700\u5173\u952e\u7684\u662f\u4e2d\u95f4\u8fd9\u4e2a\u6570\uff0c\u6240\u4ee5\u679a\u4e3e\u8fd9\u4e2a\u6570\u5373\u53ef</p> <p>\u524d\u7f00\u82f1\u6587prefix \u540e\u7f00\u82f1\u6587suffix</p> <pre><code>class Solution {\npublic:\n    int minimumSum(vector&lt;int&gt;&amp; nums) {\n        int res = INT_MAX;\n        vector&lt;int&gt; suf(nums.size());\n        suf[nums.size() - 1] = nums[nums.size() - 1];\n        for (int i = nums.size() - 2; i &gt;= 0; i--) {\n            suf[i] = min(suf[i + 1], nums[i]);\n        }\n\n        vector&lt;int&gt; pre(nums.size());\n        pre[0] = nums[0];\n        for (int i = 1; i &lt; nums.size() - 1; i++) {\n            pre[i] = min(pre[i - 1], nums[i]);\n            if (nums[i] &gt; pre[i - 1] &amp;&amp; nums[i] &gt; suf[i + 1]) {\n                res = min(res, nums[i] + pre[i - 1] + suf[i + 1]);\n            }\n        }\n\n        return (res == INT_MAX) ? -1 : res;\n    }\n};\n</code></pre>"},{"location":"Problem/contest/contest/#_1","title":"LeetCode \u5468\u8d5b","text":""},{"location":"Problem/interview/javaguide%E5%B8%B8%E8%80%83%E5%86%85%E5%AE%B9/","title":"Javaguide\u5e38\u8003\u5185\u5bb9","text":""},{"location":"Problem/interview/javaguide%E5%B8%B8%E8%80%83%E5%86%85%E5%AE%B9/#_1","title":"\u5e38\u8003\u5185\u5bb9","text":"<p>\u4ee5\u4e0b\u5168\u90e8\u662fjavaguide\u4e2d\u7684\u7ae0\u8282\uff1a</p>"},{"location":"Problem/interview/javaguide%E5%B8%B8%E8%80%83%E5%86%85%E5%AE%B9/#java","title":"Java\u57fa\u7840","text":""},{"location":"Problem/interview/javaguide%E5%B8%B8%E8%80%83%E5%86%85%E5%AE%B9/#java_1","title":"java\u57fa\u7840\u5e38\u89c1\u9762\u8bd5\u9898\u603b\u7ed3\uff08\u4e0a\uff09","text":"<ol> <li>\u6210\u5458\u53d8\u91cf\u4e0e\u5c40\u90e8\u53d8\u91cf\u7684\u533a\u522b</li> <li>\u9759\u6001\u53d8\u91cf\u7684\u4f5c\u7528</li> <li>\u9759\u6001\u65b9\u6cd5\u4e3a\u4ec0\u4e48\u4e0d\u80fd\u8c03\u7528\u975e\u9759\u6001\u6210\u5458</li> <li>\u9759\u6001\u65b9\u6cd5\u548c\u5b9e\u4f8b\u65b9\u6cd5\u6709\u4f55\u4e0d\u540c\uff1f</li> <li>\u91cd\u8f7d\u548c\u91cd\u5199\u6709\u4ec0\u4e48\u533a\u522b\uff1f</li> </ol>"},{"location":"Problem/interview/javaguide%E5%B8%B8%E8%80%83%E5%86%85%E5%AE%B9/#java_2","title":"java\u57fa\u7840\u5e38\u89c1\u9762\u8bd5\u9898\u603b\u7ed3\uff08\u4e2d\uff09","text":"<ol> <li>\u9762\u5411\u5bf9\u8c61\u7684\u4e09\u5927\u7279\u5f81</li> <li>==\u548cequals\u7684\u533a\u522b</li> <li>\u4e3a\u4ec0\u4e48\u91cd\u5199 equals() \u65f6\u5fc5\u987b\u91cd\u5199 hashCode() \u65b9\u6cd5\uff1f</li> </ol>"},{"location":"Problem/interview/javaguide%E5%B8%B8%E8%80%83%E5%86%85%E5%AE%B9/#java_3","title":"java\u57fa\u7840\u91cd\u8981\u77e5\u8bc6\u70b9","text":"<ol> <li>Java\u53cd\u5c04\u673a\u5236\u8be6\u89e3</li> </ol>"},{"location":"Problem/interview/javaguide%E5%B8%B8%E8%80%83%E5%86%85%E5%AE%B9/#java_4","title":"Java\u96c6\u5408","text":""},{"location":"Problem/interview/javaguide%E5%B8%B8%E8%80%83%E5%86%85%E5%AE%B9/#java_5","title":"Java\u96c6\u5408\u5e38\u89c1\u9762\u8bd5\u9898\u603b\u7ed3\uff08\u4e0a\uff09","text":"<ol> <li>ArrayList \u548c Array\uff08\u6570\u7ec4\uff09\u7684\u533a\u522b\uff1f</li> <li>ArrayList \u548c Vector \u7684\u533a\u522b?\uff08\u4e86\u89e3\u5373\u53ef\uff09</li> <li>ArrayList \u63d2\u5165\u548c\u5220\u9664\u5143\u7d20\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff1f</li> <li>LinkedList \u63d2\u5165\u548c\u5220\u9664\u5143\u7d20\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff1f</li> <li>ArrayList \u4e0e LinkedList \u533a\u522b?</li> </ol>"},{"location":"Problem/interview/javaguide%E5%B8%B8%E8%80%83%E5%86%85%E5%AE%B9/#java_6","title":"Java\u96c6\u5408\u5e38\u89c1\u9762\u8bd5\u9898\u603b\u7ed3\uff08\u4e2d\uff09","text":"<ol> <li>HashMap \u548c HashSet \u533a\u522b</li> <li>HashMap \u7684\u5e95\u5c42\u5b9e\u73b0</li> </ol>"},{"location":"Problem/interview/javaguide%E5%B8%B8%E8%80%83%E5%86%85%E5%AE%B9/#java_7","title":"java\u96c6\u5408\u6e90\u7801\u5206\u6790","text":"<ol> <li>HashMap\u6e90\u7801\u5206\u6790\uff08\u5fc5\u770b\uff09</li> </ol>"},{"location":"Problem/interview/javaguide%E5%B8%B8%E8%80%83%E5%86%85%E5%AE%B9/#java_8","title":"java\u5e76\u53d1\u7f16\u7a0b","text":""},{"location":"Problem/interview/javaguide%E5%B8%B8%E8%80%83%E5%86%85%E5%AE%B9/#java_9","title":"java\u5e76\u53d1\u5e38\u89c1\u9762\u8bd5\u9898\u603b\u7ed3\uff08\u4e0a\uff09","text":"<ol> <li>\u5982\u4f55\u521b\u5efa\u7ebf\u7a0b\uff1f</li> <li>\u8bf4\u8bf4\u7ebf\u7a0b\u7684\u751f\u547d\u5468\u671f\u548c\u72b6\u6001?</li> <li>\u4ec0\u4e48\u662f\u7ebf\u7a0b\u6b7b\u9501?\u5982\u4f55\u907f\u514d\u6b7b\u9501?</li> </ol>"},{"location":"Problem/interview/javaguide%E5%B8%B8%E8%80%83%E5%86%85%E5%AE%B9/#java_10","title":"java\u5e76\u53d1\u5e38\u89c1\u9762\u8bd5\u9898\u603b\u7ed3\uff08\u4e2d\uff09","text":"<p>\u6574\u4e2aJava\u5e76\u53d1\u5e38\u89c1\u9762\u8bd5\u9898\uff08\u4e2d\uff09\u4e00\u5b9a\u8981\u5168\u90e8\u770b\u5b8c\uff01</p>"},{"location":"Problem/interview/javaguide%E5%B8%B8%E8%80%83%E5%86%85%E5%AE%B9/#java_11","title":"java\u5e76\u53d1\u5e38\u89c1\u9762\u8bd5\u9898\u603b\u7ed3\uff08\u4e0b\uff09","text":"<p>\u5c06\u7ebf\u7a0b\u6c60\u7684\u90e8\u5206\u5168\u90e8\u770b\u5b8c\uff01</p> <p>\u770b\u5b8c\u4e4b\u540e\u56de\u7b54\uff1a1. \u7ebf\u7a0b\u6c60\u7684\u6240\u6709\u53c2\u6570 2. \u573a\u666f\uff1a\u5047\u8bbe\u67091000\u4e2a\u4efb\u52a1\u8fdb\u6765\uff0c\u6838\u5fc3\u7ebf\u7a0b\u6570\u662f10\uff0c\u6551\u6025\u7ebf\u7a0b\u6570\u662f2\uff0c\u963b\u585e\u961f\u5217\u7684\u957f\u5ea6\u662f10\uff0c\u8bf7\u8bf4\u660e\u4ece\u591a\u5c11\u5230\u591a\u5c11\u7684\u4efb\u52a1\u662f\u600e\u4e48\u5206\u914d\u7684</p>"},{"location":"Problem/interview/javaguide%E5%B8%B8%E8%80%83%E5%86%85%E5%AE%B9/#java_12","title":"java\u5e76\u53d1\u7f16\u7a0b\u91cd\u8981\u77e5\u8bc6\u70b9","text":"<ul> <li>JMM\uff08Java \u5185\u5b58\u6a21\u578b\uff09\u8be6\u89e3</li> <li>Java \u7ebf\u7a0b\u6c60\u8be6\u89e3</li> </ul>"},{"location":"Problem/interview/javaguide%E5%B8%B8%E8%80%83%E5%86%85%E5%AE%B9/#jvm","title":"JVM","text":"<ul> <li>Java\u5185\u5b58\u533a\u57df\u8be6\u89e3\uff08\u91cd\u70b9\uff09</li> <li> <p>JVM\u5783\u573e\u56de\u6536\u8be6\u89e3\uff08\u91cd\u70b9\uff09</p> </li> <li> <p>\u7c7b\u52a0\u8f7d\u5668\u8be6\u89e3\uff08\u91cd\u70b9\uff09</p> </li> </ul>"},{"location":"Problem/interview/%E5%BF%AB%E9%80%9F%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/","title":"\u5feb\u901f\u9762\u8bd5\u51c6\u5907","text":""},{"location":"Problem/interview/%E5%BF%AB%E9%80%9F%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/#_1","title":"\u7b97\u6cd5","text":"<ul> <li>leetcode hot 100\uff08\u5237\u4e8c\u5341\u5929\uff09</li> <li>\u9762\u8bd5\u524d\u5c06\u9762\u8bd5\u516c\u53f8\u7684\u5e38\u8003\u9898\u5237\u524d\u4e8c\u4e09\u5341\u9898\uff1acodetop \uff08\u4e0d\u540c\u516c\u53f8\u4e4b\u95f4\u4f1a\u6709\u91cd\u590d\u7684\uff0c\u591a\u5237\u5c31\u80fd\u53d8\u6210\u9ed8\u5199\u4e86\uff09</li> </ul>"},{"location":"Problem/interview/%E5%BF%AB%E9%80%9F%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/#_2","title":"\u9762\u8bd5","text":"<ul> <li> <p>\u9762\u8bd5\u4e3b\u8981\u662f\u8003 java\u57fa\u7840 + java\u9879\u76ee + \u8ba1\u7b97\u673a\u7f51\u7edc + \u8ba1\u7b97\u673a\u7cfb\u7edf + \u6570\u636e\u5e93\uff08\u76f4\u63a5\u5199sql\u5f88\u5c11\u8003\uff09</p> </li> <li> <p>\u65f6\u95f4\u7d27\u8ba1\u7f51\u548c\u7cfb\u7edf\u770b\u6211\u4e0b\u9762\u63d0\u5230\u7684\u5c0f\u6797coding\u7684\u51e0\u7bc7\uff0c\u7136\u540e\u770b\u4e00\u4e0b\u4ee3\u7801\u968f\u60f3\u5f55\u516b\u80a1\u6587\u901f\u8bb0\u7248\u5e38\u8003\u7684\u8ba1\u7b97\u673a\u57fa\u7840\u7684\u603b\u7ed3\u5373\u53ef</p> </li> <li> <p>\u9762\u8bd5\u524d\u5feb\u901f\u638c\u63e1\u516b\u80a1\uff1a\u4ee3\u7801\u968f\u60f3\u5f55\u516b\u80a1\u6587\u901f\u8bb0\u7248\uff08\u4e00\u517138\u9762\uff0c\u7f51\u7edc17\u95ee\uff0c\u64cd\u4f5c\u7cfb\u7edf12\u95ee\uff0c\u6570\u636e\u5e9312\u95ee\uff09</p> </li> </ul>"},{"location":"Problem/interview/%E5%BF%AB%E9%80%9F%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/#java","title":"java\u57fa\u7840","text":"<ul> <li>\u9ed1\u9a6c\u7a0b\u5e8f\u5458\u7684java\u9762\u8bd5\u89c6\u9891\uff0c\u770b\u5b8c\u89c6\u9891\u5927\u90e8\u5206\u4e00\u9762\u90fd\u80fd\u8fc7\uff1a\uff08\u4e00\u517123\u5c0f\u65f6\uff0c7\u5929\u770b\u5b8c\uff09</li> <li>\u770b\u7684\u65f6\u5019\u4e00\u5b9a\u8981\u914d\u5408\u82cd\u7a79\u5916\u5356\u7684\u9879\u76ee\uff0c\u8054\u7cfb\u9879\u76ee\u4e2d\u7684\u4f7f\u7528\uff01</li> <li> <p>\u5fc5\u770b\uff1a\u9ed1\u9a6c\u7a0b\u5e8f\u5458\u9762\u8bd5\u89c6\u9891</p> </li> <li> <p>\u5176\u4ed6\u7684java\u77e5\u8bc6\u591a\u770bjavaguide\u5373\u53ef</p> </li> </ul>"},{"location":"Problem/interview/%E5%BF%AB%E9%80%9F%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/#java_1","title":"java\u9879\u76ee","text":"<ul> <li>\u63a8\u8350\u505a\u82cd\u7a79\u5916\u5356\uff0c\u8fc7\u5927\u90e8\u5206\u4e00\u9762\u591f\u7528\uff08\u4e00\u517137\u5c0f\u65f6\uff0c10\u5929\u5185\u505a\u5b8c\uff0c\u6559\u7a0b\u672c\u8eab\u5c31\u662f\u5206\u5929\u7684\uff09</li> <li>\u4f46\u662f\u9879\u76ee\u5b9e\u9645\u4e0a\u6709\u4e9b\u7b80\u5355\uff0c\u8fc7\u4e8c\u9762\u4e09\u9762\u8981\u770b\u8fd0\u6c14\u548c\u9762\u8bd5\u5b98</li> <li>\u7b80\u5386\u4e0a\u600e\u4e48\u5199\u82cd\u7a79\u5916\u5356\u5efa\u8bae\u4e0a\u725b\u5ba2\u641c\u7d22</li> <li>\u82cd\u7a79\u5916\u5356</li> </ul>"},{"location":"Problem/interview/%E5%BF%AB%E9%80%9F%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/#_3","title":"\u8ba1\u7b97\u673a\u7f51\u7edc \uff08\u4e09\u56db\u5929\uff09","text":"<ul> <li>\u53ea\u8981\u770b\u5c0f\u6797coding\u7684\u57fa\u7840\u7bc7\u548cTCP\u7bc7\uff08\u5927\u90e8\u5206\u7f51\u7edc\u90e8\u5206\u53ea\u5728\u8fd9\u4e24\u7bc7\u91cc\u9762\uff01\uff09</li> <li>HTTP\u5404\u4e2a\u7248\u672c\u4e4b\u95f4\u7684\u533a\u522b\u77e5\u9053\u5373\u53ef</li> </ul>"},{"location":"Problem/interview/%E5%BF%AB%E9%80%9F%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/#_4","title":"\u8ba1\u7b97\u673a\u7cfb\u7edf \uff08\u4e09\u56db\u5929\uff09","text":"<ul> <li>\u53ea\u8981\u770b\u5c0f\u6797coding\u7684\u5185\u5b58\u7ba1\u7406\u3001\u8fdb\u7a0b\u7ba1\u7406\u3001\u8c03\u5ea6\u7b97\u6cd5\uff08\u5927\u90e8\u5206\u7cfb\u7edf\u53ea\u8003\u8fd9\u4e24\u90e8\u5206\uff09</li> <li>\u6709\u7a7a\u770b\u4e00\u4e0b\u5c0f\u6797coding\u7684\u6587\u4ef6\u7cfb\u7edf\u548c\u7f51\u7edc\u7cfb\u7edf</li> <li>\u5c0f\u6797coding</li> </ul>"},{"location":"Problem/interview/%E5%BF%AB%E9%80%9F%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/#sql","title":"sql\u5e94\u7528\uff08\u9009\u770b\uff09","text":"<ul> <li>sql\u725b\u5ba2\u5237\u9898\u57fa\u7840\u5165\u95e8\uff08\u4e00\u4e2a\u5c0f\u65f6\u534a\uff0c40\u9053\u9898\u76ee\uff09</li> </ul>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/","title":"\u7b14\u8bd5\u7ec3\u4e60","text":""},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#_2","title":"\u6280\u5de7\u6c47\u603b","text":""},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#c","title":"C++\u677f\u5b50","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\ntypedef long long LL;\nusing namespace std;\n\nint main () {\n\n    return 0;\n}\n</code></pre>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#_3","title":"\u7b14\u8bd5\u9898\u76ee","text":""},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#linux-1000","title":"linux \u54ea\u4e2a\u547d\u4ee4\u4f1a\u5f3a\u5236\u6740\u6b7b\u8fdb\u7a0b 1000,\u800c\u4e0d\u4f1a\u4f18\u96c5\u7684\u5173\u95ed","text":"<p>\u5728Linux\u4e2d\uff0c\u8981\u5f3a\u5236\u6740\u6b7b\u4e00\u4e2a\u8fdb\u7a0b\u800c\u4e0d\u5c1d\u8bd5\u4f18\u96c5\u5173\u95ed\uff0c\u53ef\u4ee5\u4f7f\u7528<code>kill</code>\u547d\u4ee4\u914d\u5408<code>SIGKILL</code>\u4fe1\u53f7\u3002<code>SIGKILL</code>\u662f\u4e00\u4e2a\u5f3a\u5236\u7ec8\u6b62\u8fdb\u7a0b\u7684\u4fe1\u53f7\uff0c\u8fdb\u7a0b\u4e0d\u80fd\u6355\u83b7\u6216\u5ffd\u7565\u8be5\u4fe1\u53f7\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u4e0d\u4f1a\u6709\u673a\u4f1a\u8fdb\u884c\u4efb\u4f55\u6e05\u7406\u64cd\u4f5c\u5c31\u88ab\u7acb\u5373\u7ec8\u6b62\u3002</p> <p>\u547d\u4ee4\u683c\u5f0f\u5982\u4e0b\uff1a</p> <pre><code>kill -SIGKILL 1000\n</code></pre> <p>\u6216\u8005\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u4fe1\u53f7\u7684\u6570\u503c\uff0c<code>SIGKILL</code>\u7684\u503c\u901a\u5e38\u662f9\uff1a</p> <pre><code>kill -9 1000\n</code></pre> <p>\u8fd9\u91cc\uff0c<code>1000</code>\u662f\u4f60\u60f3\u8981\u5f3a\u5236\u6740\u6b7b\u7684\u8fdb\u7a0bID\u3002\u4f7f\u7528<code>-9</code>\u9009\u9879\u53ef\u4ee5\u786e\u4fdd\u8fdb\u7a0b\u88ab\u7acb\u5373\u7ec8\u6b62\uff0c\u4e0d\u8fdb\u884c\u4efb\u4f55\u6e05\u7406\u64cd\u4f5c\u3002</p>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#linux-1000_1","title":"linux \u54ea\u4e2a\u547d\u4ee4\u4f1a\u4f18\u96c5\u7684\u5173\u95ed\u8fdb\u7a0b1000","text":"<p>\u5728Linux\u4e2d\uff0c\u8981\u4f18\u96c5\u5730\u5173\u95ed\u8fdb\u7a0b\uff0c\u901a\u5e38\u4f7f\u7528<code>kill</code>\u547d\u4ee4\u53d1\u9001<code>SIGTERM</code>\u4fe1\u53f7\u3002<code>SIGTERM</code>\uff08\u4fe1\u53f7\u503c\u4e3a15\uff09\u662f\u4e00\u4e2a\u8f6f\u7ec8\u6b62\u4fe1\u53f7\uff0c\u5141\u8bb8\u8fdb\u7a0b\u5728\u7ec8\u6b62\u4e4b\u524d\u91ca\u653e\u8d44\u6e90\u548c\u8fdb\u884c\u6e05\u7406\u5de5\u4f5c\u3002\u8fd9\u662f\u7ec8\u6b62\u8fdb\u7a0b\u7684\u63a8\u8350\u65b9\u5f0f\uff0c\u56e0\u4e3a\u5b83\u7ed9\u4e86\u8fdb\u7a0b\u4e00\u4e2a\u9002\u5f53\u5173\u95ed\u81ea\u8eab\u7684\u673a\u4f1a\u3002</p> <p>\u547d\u4ee4\u683c\u5f0f\u5982\u4e0b\uff1a</p> <pre><code>kill -SIGTERM 1000\n</code></pre> <p>\u6216\u8005\uff0c\u7531\u4e8e<code>SIGTERM</code>\u662f<code>kill</code>\u547d\u4ee4\u7684\u9ed8\u8ba4\u4fe1\u53f7\uff0c\u4f60\u53ef\u4ee5\u7701\u7565\u4fe1\u53f7\u540d\u79f0\uff1a</p> <pre><code>kill 1000\n</code></pre>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#single-responsibility-principle-srp","title":"\u5355\u4e00\u8d23\u4efb\u5236\u7684\u597d\u5904\uff08Single Responsibility Principle, SRP\uff09","text":"<p>\u5355\u4e00\u8d23\u4efb\u539f\u5219\uff08Single Responsibility Principle, SRP\uff09\u662f\u9762\u5411\u5bf9\u8c61\u8bbe\u8ba1\u539f\u5219\u4e2d\u7684\u4e00\u4e2a\u6982\u5ff5\uff0c\u5b83\u6307\u7684\u662f\u4e00\u4e2a\u7c7b\u5e94\u8be5\u4ec5\u6709\u4e00\u4e2a\u5f15\u8d77\u5b83\u53d8\u5316\u7684\u539f\u56e0\u3002\u8fd9\u4e2a\u539f\u5219\u5f3a\u8c03\u5c06\u529f\u80fd\u660e\u786e\u3001\u76f8\u5173\u6027\u5f3a\u7684\u884c\u4e3a\u5c01\u88c5\u5728\u540c\u4e00\u4e2a\u7c7b\u4e2d\uff0c\u800c\u4e0d\u662f\u5c06\u591a\u79cd\u4e0d\u540c\u7684\u884c\u4e3a\u5806\u780c\u5728\u4e00\u8d77\u3002\u5355\u4e00\u8d23\u4efb\u539f\u5219\u7684\u597d\u5904\u5305\u62ec\uff1a</p>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#1","title":"1. \u63d0\u9ad8\u7cfb\u7edf\u7684\u53ef\u7ef4\u62a4\u6027","text":"<p>\u5f53\u4e00\u4e2a\u7c7b\u53ea\u8d1f\u8d23\u4e00\u4e2a\u529f\u80fd\u6216\u4e1a\u52a1\u903b\u8f91\u65f6\uff0c\u5bf9\u8be5\u529f\u80fd\u7684\u4fee\u6539\u53ea\u4f1a\u5f71\u54cd\u5230\u8fd9\u4e2a\u7c7b\uff0c\u4e0d\u4f1a\u5bf9\u7cfb\u7edf\u4e2d\u7684\u5176\u4ed6\u90e8\u5206\u4ea7\u751f\u526f\u4f5c\u7528\u3002\u8fd9\u4f7f\u5f97\u7ef4\u62a4\u548c\u66f4\u65b0\u7279\u5b9a\u529f\u80fd\u53d8\u5f97\u66f4\u52a0\u7b80\u5355\u76f4\u63a5\u3002</p>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#2","title":"2. \u63d0\u9ad8\u4ee3\u7801\u7684\u53ef\u8bfb\u6027","text":"<p>\u9075\u5faa\u5355\u4e00\u8d23\u4efb\u539f\u5219\u7684\u4ee3\u7801\u901a\u5e38\u66f4\u52a0\u6e05\u6670\u548c\u6613\u4e8e\u7406\u89e3\u3002\u6bcf\u4e2a\u7c7b\u7684\u804c\u8d23\u90fd\u5f88\u660e\u786e\uff0c\u5f00\u53d1\u4eba\u5458\u53ef\u4ee5\u5feb\u901f\u5b9a\u4f4d\u76f8\u5173\u7684\u4e1a\u52a1\u903b\u8f91\uff0c\u964d\u4f4e\u4e86\u5b66\u4e60\u548c\u7406\u89e3\u4ee3\u7801\u7684\u96be\u5ea6\u3002</p>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#3","title":"3. \u4fc3\u8fdb\u4ee3\u7801\u7684\u590d\u7528","text":"<p>\u5f53\u6bcf\u4e2a\u7c7b\u90fd\u53ea\u5173\u6ce8\u4e8e\u5b8c\u6210\u4e00\u4e2a\u5177\u4f53\u7684\u4efb\u52a1\u65f6\uff0c\u8fd9\u6837\u7684\u7c7b\u66f4\u5bb9\u6613\u5728\u5176\u4ed6\u7cfb\u7edf\u6216\u6a21\u5757\u4e2d\u88ab\u590d\u7528\u3002\u56e0\u4e3a\u5b83\u4eec\u4e0d\u4f1a\u4e0e\u7279\u5b9a\u7684\u4e1a\u52a1\u903b\u8f91\u8fc7\u4e8e\u8026\u5408\uff0c\u53ef\u4ee5\u5728\u4e0d\u540c\u7684\u4e0a\u4e0b\u6587\u4e2d\u53d1\u6325\u4f5c\u7528\u3002</p>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#4","title":"4. \u964d\u4f4e\u4fee\u6539\u5e26\u6765\u7684\u98ce\u9669","text":"<p>\u4fee\u6539\u4e00\u4e2a\u591a\u8d23\u4efb\u7684\u7c7b\u65f6\uff0c\u53ef\u80fd\u4f1a\u5f71\u54cd\u5230\u4e0e\u8fd9\u4e9b\u8d23\u4efb\u76f8\u5173\u7684\u6240\u6709\u529f\u80fd\u3002\u4f46\u5982\u679c\u9075\u5faa\u5355\u4e00\u8d23\u4efb\u539f\u5219\uff0c\u4fee\u6539\u4e00\u4e2a\u7c7b\u7684\u884c\u4e3a\u53ea\u4f1a\u5f71\u54cd\u5230\u8be5\u7c7b\u6240\u8d1f\u8d23\u7684\u90a3\u90e8\u5206\u529f\u80fd\uff0c\u4ece\u800c\u964d\u4f4e\u4e86\u5f15\u5165\u9519\u8bef\u7684\u98ce\u9669\u3002</p>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#5","title":"5. \u7b80\u5316\u5355\u5143\u6d4b\u8bd5","text":"<p>\u5355\u4e00\u8d23\u4efb\u7684\u7c7b\u901a\u5e38\u66f4\u5bb9\u6613\u88ab\u6d4b\u8bd5\u3002\u56e0\u4e3a\u5b83\u4eec\u53ea\u8d1f\u8d23\u4e00\u4e2a\u529f\u80fd\uff0c\u6240\u4ee5\u5199\u6d4b\u8bd5\u7528\u4f8b\u65f6\u53ea\u9700\u8981\u5173\u6ce8\u8fd9\u4e00\u70b9\u3002\u8fd9\u4f7f\u5f97\u6d4b\u8bd5\u66f4\u52a0\u76f4\u63a5\u3001\u9ad8\u6548\uff0c\u4e5f\u4f7f\u5f97\u6d4b\u8bd5\u80fd\u591f\u66f4\u5168\u9762\u5730\u8986\u76d6\u5230\u7c7b\u7684\u884c\u4e3a\u3002</p>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#_4","title":"\u603b\u7ed3","text":"<p>\u5355\u4e00\u8d23\u4efb\u539f\u5219\u901a\u8fc7\u9650\u5236\u7c7b\u7684\u804c\u8d23\u8303\u56f4\uff0c\u63d0\u9ad8\u4e86\u8f6f\u4ef6\u8bbe\u8ba1\u7684\u6e05\u6670\u5ea6\u548c\u7cfb\u7edf\u7684\u5065\u58ef\u6027\u3002\u5b83\u6709\u52a9\u4e8e\u521b\u5efa\u6613\u4e8e\u7ef4\u62a4\u3001\u6269\u5c55\u548c\u6d4b\u8bd5\u7684\u4ee3\u7801\uff0c\u662f\u6784\u5efa\u9ad8\u8d28\u91cf\u8f6f\u4ef6\u7cfb\u7edf\u7684\u5173\u952e\u539f\u5219\u4e4b\u4e00\u3002\u5c3d\u7ba1\u5728\u5b9e\u8df5\u4e2d\u4e25\u683c\u9075\u5faa\u8fd9\u4e00\u539f\u5219\u53ef\u80fd\u4f1a\u5bfc\u81f4\u7c7b\u7684\u6570\u91cf\u589e\u52a0\uff0c\u4f46\u901a\u8fc7\u5408\u7406\u7684\u8bbe\u8ba1\u548c\u7ec4\u7ec7\uff0c\u53ef\u4ee5\u6700\u5927\u5316\u5730\u53d1\u6325\u5176\u5e26\u6765\u7684\u597d\u5904\u3002</p>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#_5","title":"\u5728\u8fd9\u56db\u4e2a\u9009\u9879\u4e2d\uff0c\u4e0d\u662f\u7ed3\u6784\u578b\u8bbe\u8ba1\u6a21\u5f0f\u7684\u662f\u201c\u5de5\u5382\u201d\u3002","text":"<p>\u5728\u8fd9\u56db\u4e2a\u9009\u9879\u4e2d\uff0c\u4e0d\u662f\u7ed3\u6784\u578b\u8bbe\u8ba1\u6a21\u5f0f\u7684\u662f\u201c\u5de5\u5382\u201d\u3002</p> <p>\u89e3\u91ca\u5982\u4e0b\uff1a</p> <ul> <li>\u5de5\u5382\uff08Factory\uff09: \u5c5e\u4e8e\u521b\u5efa\u578b\u8bbe\u8ba1\u6a21\u5f0f\uff0c\u5176\u76ee\u7684\u662f\u521b\u5efa\u5bf9\u8c61\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u901a\u8fc7new\u5173\u952e\u5b57\u5b9e\u4f8b\u5316\u5bf9\u8c61\u3002\u8fd9\u6837\u53ef\u4ee5\u63d0\u9ad8\u7cfb\u7edf\u7684\u7075\u6d3b\u6027\uff0c\u56e0\u4e3a\u521b\u5efa\u5bf9\u8c61\u7684\u5177\u4f53\u7c7b\u522b\u53ef\u4ee5\u5728\u8fd0\u884c\u65f6\u523b\u51b3\u5b9a\u3002</li> <li>\u9002\u914d\u5668\uff08Adapter\uff09: \u5c5e\u4e8e\u7ed3\u6784\u578b\u8bbe\u8ba1\u6a21\u5f0f\uff0c\u5b83\u5141\u8bb8\u4e0d\u517c\u5bb9\u7684\u63a5\u53e3\u4e4b\u95f4\u8fdb\u884c\u4ea4\u4e92\u3002\u9002\u914d\u5668\u6a21\u5f0f\u901a\u8fc7\u5305\u88c5\u4e00\u4e2a\u5df2\u5b58\u5728\u7684\u7c7b\uff0c\u63d0\u4f9b\u4e00\u4e2a\u671f\u671b\u7684\u63a5\u53e3\u3002</li> <li>\u4fee\u9970\u5668\uff08Decorator\uff09: \u4e5f\u662f\u7ed3\u6784\u578b\u8bbe\u8ba1\u6a21\u5f0f\uff0c\u5b83\u5141\u8bb8\u5411\u4e00\u4e2a\u73b0\u6709\u7684\u5bf9\u8c61\u6dfb\u52a0\u65b0\u7684\u529f\u80fd\uff0c\u540c\u65f6\u53c8\u4e0d\u6539\u53d8\u5176\u7ed3\u6784\u3002\u8fd9\u79cd\u7c7b\u578b\u7684\u8bbe\u8ba1\u6a21\u5f0f\u4f5c\u4e3a\u73b0\u6709\u7c7b\u7684\u4e00\u4e2a\u5305\u88c5\u3002</li> <li>\u5355\u4f8b\uff08Singleton\uff09: \u5c5e\u4e8e\u521b\u5efa\u578b\u8bbe\u8ba1\u6a21\u5f0f\uff0c\u786e\u4fdd\u4e00\u4e2a\u7c7b\u53ea\u6709\u4e00\u4e2a\u5b9e\u4f8b\uff0c\u5e76\u63d0\u4f9b\u4e00\u4e2a\u5168\u5c40\u8bbf\u95ee\u70b9\u6765\u83b7\u53d6\u8be5\u5b9e\u4f8b\u3002</li> </ul> <p>\u603b\u7ed3\uff0c\u5de5\u5382\u6a21\u5f0f\u662f\u521b\u5efa\u578b\u8bbe\u8ba1\u6a21\u5f0f\uff0c\u800c\u9002\u914d\u5668\u548c\u4fee\u9970\u5668\u662f\u7ed3\u6784\u578b\u8bbe\u8ba1\u6a21\u5f0f\uff0c\u5355\u4f8b\u6a21\u5f0f\u662f\u521b\u5efa\u578b\u8bbe\u8ba1\u6a21\u5f0f\u3002</p> <p>\u89c2\u5bdf\u8005\u6a21\u5f0f\u662f\u4e00\u79cd\u884c\u4e3a\u578b\u8bbe\u8ba1\u6a21\u5f0f\u3002\u5b83\u5b9a\u4e49\u4e86\u5bf9\u8c61\u4e4b\u95f4\u7684\u4e00\u5bf9\u591a\u4f9d\u8d56\u5173\u7cfb\uff0c\u4f7f\u5f97\u5f53\u4e00\u4e2a\u5bf9\u8c61\u6539\u53d8\u72b6\u6001\u65f6\uff0c\u6240\u6709\u4f9d\u8d56\u4e8e\u5b83\u7684\u5bf9\u8c61\u90fd\u4f1a\u5f97\u5230\u901a\u77e5\u5e76\u81ea\u52a8\u66f4\u65b0\u3002\u89c2\u5bdf\u8005\u6a21\u5f0f\u4e3b\u8981\u7528\u4e8e\u5b9e\u73b0\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\u7684\u4e8b\u4ef6\u5904\u7406\u7cfb\u7edf\u3001\u5728\u684c\u9762\u5e94\u7528\u4e2d\u5b9e\u73b0MVC\u6a21\u578b\uff0c\u4ee5\u53ca\u5404\u79cd\u53d1\u5e03-\u8ba2\u9605\uff08Pub/Sub\uff09\u7cfb\u7edf\u4e2d\u3002</p>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#1921681024ip","title":"\u9898\u76ee\uff1a\u5047\u8bbe\u6709\u4e00\u4e2a\u5b50\u7f51 192.168.1.0/24\uff0c\u4ee5\u4e0b\u54ea\u4e2aIP\u5730\u5740\u4e0d\u80fd\u591f\u6b63\u5e38\u5728\u8fd9\u4e2a\u5b50\u7f51\u4e0b\u901a\u4fe1\uff1f","text":"<p>A) 192.168.1.25 B) 192.168.1.255 C) 192.168.2.1 D) 192.168.1.0</p> <p>\u7b54\u6848\u89e3\u6790\uff1a</p> <p>\u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u7406\u89e3\u9898\u76ee\u7ed9\u51fa\u7684\u5b50\u7f51\u4fe1\u606f\u3002\u8fd9\u91cc\u7684\u5b50\u7f51\u662f192.168.1.0/24\uff0c\u8868\u793a\u4f7f\u7528\u5b50\u7f51\u63a9\u7801255.255.255.0\uff0c\u8fd9\u610f\u5473\u7740\u8fd9\u4e2a\u5b50\u7f51\u7684IP\u5730\u5740\u8303\u56f4\u662f192.168.1.0\u5230192.168.1.255\u3002</p> <ul> <li>A) 192.168.1.25\u5728\u8fd9\u4e2a\u8303\u56f4\u5185\uff0c\u56e0\u6b64\u53ef\u4ee5\u6b63\u5e38\u901a\u4fe1\u3002</li> <li>B) 192.168.1.255\u662f\u8fd9\u4e2a\u5b50\u7f51\u7684\u5e7f\u64ad\u5730\u5740\uff0c\u867d\u7136\u5728\u6280\u672f\u4e0a\u662f\u8fd9\u4e2a\u5b50\u7f51\u7684\u4e00\u90e8\u5206\uff0c\u4f46\u5b83\u662f\u7528\u6765\u5e7f\u64ad\u5230\u6240\u6709\u8fd9\u4e2a\u5b50\u7f51\u5185\u7684\u8bbe\u5907\uff0c\u800c\u4e0d\u662f\u5206\u914d\u7ed9\u5355\u4e2a\u8bbe\u5907\u7684\uff0c\u56e0\u6b64\u5b83\u53ef\u4ee5\u201c\u901a\u4fe1\u201d\uff0c\u4f46\u5176\u5b9e\u7528\u9014\u4e0d\u662f\u5206\u914d\u7ed9\u5355\u4e2a\u8bbe\u5907\u3002</li> <li>C) 192.168.2.1\u4e0d\u5728192.168.1.0\u5230192.168.1.255\u7684\u8303\u56f4\u5185\uff0c\u56e0\u6b64\u5b83\u4e0d\u80fd\u5728192.168.1.0/24\u5b50\u7f51\u4e0b\u6b63\u5e38\u901a\u4fe1\u3002</li> <li>D) 192.168.1.0\u662f\u8fd9\u4e2a\u5b50\u7f51\u7684\u7f51\u7edc\u5730\u5740\uff0c\u5b83\u6807\u8bc6\u7684\u662f\u6574\u4e2a\u7f51\u7edc\u800c\u975e\u4e00\u4e2a\u53ef\u5206\u914d\u7684\u4e3b\u673a\u5730\u5740\uff0c\u56e0\u6b64\u5b83\u81ea\u8eab\u4e0d\u7528\u4e8e\u8bbe\u5907\u901a\u4fe1\u3002</li> </ul> <p>\u56e0\u6b64\uff0c\u6b63\u786e\u7b54\u6848\u662fC) 192.168.2.1\uff0c\u5b83\u4e0d\u80fd\u5728192.168.1.0/24\u5b50\u7f51\u4e0b\u6b63\u5e38\u901a\u4fe1</p>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#19216810242552552550","title":"\u4e3a\u4ec0\u4e48\u201c\u8fd9\u91cc\u7684\u5b50\u7f51\u662f192.168.1.0/24\uff0c\u8868\u793a\u4f7f\u7528\u5b50\u7f51\u63a9\u7801255.255.255.0\u201d","text":"<p>\u201c\u8fd9\u91cc\u7684\u5b50\u7f51\u662f192.168.1.0/24\uff0c\u8868\u793a\u4f7f\u7528\u5b50\u7f51\u63a9\u7801255.255.255.0\u201d\u8fd9\u53e5\u8bdd\u7684\u610f\u601d\u662f\u57fa\u4e8e\u5b50\u7f51\u63a9\u7801\u548cCIDR\uff08\u65e0\u7c7b\u522b\u57df\u95f4\u8def\u7531\uff09\u8868\u793a\u6cd5\u7684\u6982\u5ff5\u3002\u8fd9\u91cc\uff0c192.168.1.0/24\u662f\u4e00\u4e2a\u7f51\u7edc\u5730\u5740\uff0c\u5176\u4e2d\u201c/24\u201d\u662fCIDR\u8868\u793a\u6cd5\uff0c\u7528\u6765\u6307\u793a\u7f51\u7edc\u5730\u5740\u4e2d\u670924\u4f4d\u662f\u7f51\u7edc\u524d\u7f00\uff0c\u5269\u4f59\u7684\u4f4d\uff08\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u662f8\u4f4d\uff09\u7528\u4e8e\u4e3b\u673a\u5730\u5740\u3002\u8ba9\u6211\u4eec\u5206\u89e3\u8fd9\u4e2a\u6982\u5ff5\u4ee5\u4fbf\u66f4\u597d\u5730\u7406\u89e3\u5b83\uff1a</p>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#subnet-mask","title":"\u5b50\u7f51\u63a9\u7801\uff08Subnet Mask\uff09","text":"<p>\u5b50\u7f51\u63a9\u7801\u7528\u6765\u533a\u5206\u4e00\u4e2aIP\u5730\u5740\u4e2d\u7684\u7f51\u7edc\u90e8\u5206\u548c\u4e3b\u673a\u90e8\u5206\u3002\u5728IPv4\u4e2d\uff0c\u4e00\u4e2aIP\u5730\u5740\u753132\u4f4d\u7ec4\u6210\uff0c\u5206\u4e3a\u56db\u4e2a\u5b57\u8282\uff0c\u6bcf\u4e2a\u5b57\u8282\u75318\u4f4d\u7ec4\u6210\uff0c\u7528\u70b9\u5206\u5341\u8fdb\u5236\u8868\u793a\uff0c\u5982255.255.255.0\u3002</p>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#cidr","title":"CIDR\u8868\u793a\u6cd5","text":"<p>CIDR\u8868\u793a\u6cd5\uff08\u4f8b\u5982/24\uff09\u63d0\u4f9b\u4e86\u4e00\u79cd\u65b9\u5f0f\u6765\u8868\u793a\u5b50\u7f51\u63a9\u7801\u7684\u957f\u5ea6\u3002\u5728/24\u7684\u4f8b\u5b50\u4e2d\uff0c\u524d24\u4f4d\u88ab\u7528\u4f5c\u7f51\u7edc\u5730\u5740\uff0c\u8fd9\u610f\u5473\u7740\u6700\u540e8\u4f4d\u7528\u4e8e\u4e3b\u673a\u5730\u5740\u3002\u8fd9\u79cd\u8868\u793a\u65b9\u6cd5\u63d0\u4f9b\u4e86\u4e00\u79cd\u66f4\u7075\u6d3b\u7684\u5212\u5206\u7f51\u7edc\u548c\u4e3b\u673a\u7684\u65b9\u5f0f\uff0c\u6bd4\u4f20\u7edf\u7684A\u7c7b\u3001B\u7c7b\u548cC\u7c7b\u5730\u5740\u66f4\u52a0\u7ec6\u7c92\u5ea6\u3002</p>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#242552552550","title":"\u89e3\u91ca\u4e3a\u4ec0\u4e48\u201c/24\u8868\u793a\u4f7f\u7528\u5b50\u7f51\u63a9\u7801255.255.255.0\u201d","text":"<p>\u5f53\u6211\u4eec\u8bf4/24\u65f6\uff0c\u6211\u4eec\u6307\u7684\u662f\u524d24\u4f4d\u662f\u7f51\u7edc\u90e8\u5206\uff0c\u5269\u4e0b\u7684\u662f\u4e3b\u673a\u90e8\u5206\u3002\u5728\u4e8c\u8fdb\u5236\u4e2d\uff0c\u8fd9\u8868\u793a\u524d24\u4f4d\u90fd\u662f1\uff0c\u5269\u4e0b\u7684\u4f4d\u90fd\u662f0\uff1a</p> <pre><code>11111111.11111111.11111111.00000000\n</code></pre> <p>\u8f6c\u6362\u4e3a\u70b9\u5206\u5341\u8fdb\u5236\uff0c\u5c31\u662f255.255.255.0\u3002\u8fd9\u610f\u5473\u7740\u5728\u8fd9\u4e2a\u5b50\u7f51\u4e2d\uff0c\u53ea\u6709\u6700\u540e\u76848\u4f4d\u53ef\u4ee5\u7528\u6765\u5206\u914d\u7ed9\u4e3b\u673a\uff0c\u63d0\u4f9b\u4e86256\u4e2a\u53ef\u80fd\u7684\u5730\u5740\uff08\u5305\u62ec\u7f51\u7edc\u5730\u5740\u548c\u5e7f\u64ad\u5730\u5740\u5728\u5185\uff09\u3002\u5b9e\u9645\u53ef\u7528\u4e8e\u4e3b\u673a\u7684\u5730\u5740\u662f\u8fd9\u4e2a\u8303\u56f4\u51cf\u53bb\u7f51\u7edc\u5730\u5740\uff08192.168.1.0\uff09\u548c\u5e7f\u64ad\u5730\u5740\uff08192.168.1.255\uff09\uff0c\u56e0\u6b64\u63d0\u4f9b\u4e86254\u4e2a\u53ef\u7528\u5730\u5740\uff08192.168.1.1\u5230192.168.1.254\uff09\u3002</p> <p>\u901a\u8fc7\u4f7f\u7528/24CIDR\u8868\u793a\u6cd5\u548c\u5bf9\u5e94\u7684255.255.255.0\u5b50\u7f51\u63a9\u7801\uff0c\u53ef\u4ee5\u6e05\u6670\u5730\u5212\u5206\u7f51\u7edc\u5730\u5740\u548c\u53ef\u7528\u4e8e\u5206\u914d\u7ed9\u8bbe\u5907\u7684\u4e3b\u673a\u5730\u5740\u3002\u8fd9\u79cd\u65b9\u5f0f\u5728\u8bbe\u8ba1\u548c\u7ba1\u7406\u7f51\u7edc\u65f6\u63d0\u4f9b\u4e86\u663e\u8457\u7684\u7075\u6d3b\u6027\u548c\u51c6\u786e\u6027\u3002</p>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#_6","title":"\u7528\u6570\u636e\u5e93\u5b58\u4ee3\u7801\u7684\u597d\u5904","text":"<p>\u5c06\u4ee3\u7801\u5b58\u50a8\u5728\u6570\u636e\u5e93\u4e2d\u800c\u4e0d\u662f\u6587\u4ef6\u7cfb\u7edf\u6216\u7248\u672c\u63a7\u5236\u7cfb\u7edf\uff08\u5982Git\uff09\u4e2d\u53ef\u4ee5\u5728\u7279\u5b9a\u573a\u666f\u4e0b\u5e26\u6765\u4e00\u4e9b\u597d\u5904\uff0c\u5c3d\u7ba1\u8fd9\u79cd\u505a\u6cd5\u5e76\u4e0d\u5e38\u89c1\uff0c\u4e14\u9700\u8981\u8c28\u614e\u4f7f\u7528\u3002\u4e0b\u9762\u662f\u4e00\u4e9b\u53ef\u80fd\u7684\u597d\u5904\uff1a</p>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#1_1","title":"1. \u96c6\u4e2d\u7ba1\u7406","text":"<ul> <li>\u5c06\u4ee3\u7801\u5b58\u50a8\u5728\u6570\u636e\u5e93\u4e2d\u53ef\u4ee5\u5b9e\u73b0\u4ee3\u7801\u7684\u96c6\u4e2d\u7ba1\u7406\u3002\u5bf9\u4e8e\u4e00\u4e9b\u52a8\u6001\u751f\u6210\u6216\u9891\u7e41\u66f4\u6539\u7684\u4ee3\u7801\uff0c\u4f8b\u5982\u52a8\u6001SQL\u8bed\u53e5\u3001\u914d\u7f6e\u811a\u672c\u6216\u4e1a\u52a1\u903b\u8f91\uff0c\u96c6\u4e2d\u5b58\u50a8\u53ef\u4ee5\u7b80\u5316\u7ba1\u7406\u3002</li> </ul>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#2_1","title":"2. \u5b89\u5168\u6027","text":"<ul> <li>\u6570\u636e\u5e93\u53ef\u4ee5\u63d0\u4f9b\u7ec6\u7c92\u5ea6\u7684\u8bbf\u95ee\u63a7\u5236\u548c\u5ba1\u8ba1\u529f\u80fd\uff0c\u5e2e\u52a9\u4fdd\u62a4\u4ee3\u7801\u4e0d\u88ab\u672a\u6388\u6743\u8bbf\u95ee\u6216\u4fee\u6539\u3002\u8fd9\u5bf9\u4e8e\u5b58\u50a8\u654f\u611f\u903b\u8f91\u6216\u6570\u636e\u5904\u7406\u811a\u672c\u5c24\u5176\u91cd\u8981\u3002</li> </ul>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#3_1","title":"3. \u7248\u672c\u63a7\u5236","text":"<ul> <li>\u867d\u7136\u6587\u4ef6\u7cfb\u7edf\u57fa\u7684\u7248\u672c\u63a7\u5236\u7cfb\u7edf\uff08\u5982Git\uff09\u5bf9\u4ee3\u7801\u7684\u7248\u672c\u7ba1\u7406\u975e\u5e38\u6709\u6548\uff0c\u4f46\u6570\u636e\u5e93\u4e5f\u53ef\u4ee5\u5b9e\u73b0\u7248\u672c\u63a7\u5236\uff0c\u901a\u8fc7\u8bb0\u5f55\u6570\u636e\u53d8\u66f4\u7684\u5386\u53f2\u6765\u7ba1\u7406\u4ee3\u7801\u7248\u672c\u3002\u8fd9\u53ef\u4ee5\u786e\u4fdd\u4ee3\u7801\u53d8\u66f4\u7684\u8ffd\u8e2a\u548c\u56de\u6eda\u3002</li> </ul>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#4_1","title":"4. \u6613\u4e8e\u90e8\u7f72\u548c\u8fc1\u79fb","text":"<ul> <li>\u5c06\u4ee3\u7801\u5b58\u50a8\u5728\u6570\u636e\u5e93\u4e2d\uff0c\u53ef\u4ee5\u7b80\u5316\u4ee3\u7801\u90e8\u7f72\u548c\u8fc1\u79fb\u7684\u8fc7\u7a0b\u3002\u5728\u591a\u73af\u5883\uff08\u5f00\u53d1\u3001\u6d4b\u8bd5\u3001\u751f\u4ea7\uff09\u90e8\u7f72\u4e2d\uff0c\u53ef\u4ee5\u901a\u8fc7\u6570\u636e\u5e93\u8fc1\u79fb\u811a\u672c\u6765\u7edf\u4e00\u7ba1\u7406\u548c\u8fc1\u79fb\u4ee3\u7801\uff0c\u65e0\u9700\u989d\u5916\u7684\u6587\u4ef6\u540c\u6b65\u64cd\u4f5c\u3002</li> </ul>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#5_1","title":"5. \u52a8\u6001\u6267\u884c","text":"<ul> <li>\u5bf9\u4e8e\u9700\u8981\u6839\u636e\u4e0d\u540c\u6761\u4ef6\u52a8\u6001\u6267\u884c\u4e0d\u540c\u903b\u8f91\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u5c06\u4ee3\u7801\u5b58\u50a8\u5728\u6570\u636e\u5e93\u4e2d\u53ef\u4ee5\u5b9e\u73b0\u66f4\u7075\u6d3b\u7684\u52a8\u6001\u6267\u884c\u3002\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u6839\u636e\u9700\u8981\u67e5\u8be2\u6570\u636e\u5e93\uff0c\u83b7\u53d6\u5e76\u6267\u884c\u76f8\u5e94\u7684\u4ee3\u7801\u7247\u6bb5\u3002</li> </ul>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#6","title":"6. \u4e0e\u6570\u636e\u7d27\u5bc6\u76f8\u5173\u7684\u64cd\u4f5c","text":"<ul> <li>\u5bf9\u4e8e\u4e00\u4e9b\u4e0e\u6570\u636e\u7d27\u5bc6\u76f8\u5173\u7684\u64cd\u4f5c\uff0c\u5982\u6570\u636e\u5e93\u89e6\u53d1\u5668\u3001\u5b58\u50a8\u8fc7\u7a0b\u7b49\uff0c\u5c06\u8fd9\u4e9b\u4ee3\u7801\u5b58\u50a8\u5728\u6570\u636e\u5e93\u4e2d\u53ef\u4ee5\u63d0\u9ad8\u6267\u884c\u6548\u7387\u548c\u4fbf\u6377\u6027\u3002</li> </ul>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#_7","title":"\u5728\u7ed9\u5b9a\u7684\u4e00\u4e2a\u6574\u6570(\u6709\u6b63\u6709\u8d1f)\u7c7b\u578b\u6570\u7ec4\u4e2d, \u6c42\u6700\u5c0f\u5b50\u5e8f\u5217\u548c","text":"<p>\u5178\u578b\u7684\u52a8\u6001\u89c4\u5212\u95ee\u9898</p> <p>f[i] \u6807\u8bc6\u7684\u5c31\u662f\u4ee5i\u4e3a\u7ed3\u5c3e\u7684\u6240\u6709\u5b50\u4e32\u5e8f\u5217\u548c\u4e2d\u7684\u6700\u5c0f\u503c</p> <p>\u4e00\u79cd\u662f\u548c\u524d\u9762\u7684\u7ec4\u6210\u5e8f\u5217\uff0c\u4e00\u79cd\u662f\u5355\u72ec\u81ea\u5df1</p> <pre><code>#include &lt;bits/stdc++.h&gt;\ntypedef long long LL;\nusing namespace std;\nint findMinSubArraySum(const vector&lt;int&gt;&amp; nums) {\n    if (nums.empty()) return 0;\n    int currMin = nums[0];\n    int globalMin = nums[0];\n\n    for (int i = 1; i &lt; nums.size(); i++) {\n        currMin = min(nums[i], nums[i] + currMin);\n        globalMin = min(globalMin, currMin);\n    }\n    return globalMin;\n}\n\nint main () {\n    vector&lt;int&gt; nums = {2, 1, -2, -3};\n    cout &lt;&lt; findMinSubArraySum(nums) &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#_8","title":"\u6700\u8fd1\u516c\u5171\u7956\u5148","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n        // \u4e00\u5171\u662f\u4e24\u79cd\u60c5\u51b5\u5728\u6839\u8282\u70b9\u7684\u4e24\u4fa7\n        // \u672c\u8eab\u662fp/q\uff0c\u53e6\u4e00\u4e2a\u5728\u53e6\u5916\u4e00\u4fa7\n        if (!root) return nullptr;\n        if (root == p) return root;\n        if (root == q) return root;\n\n        TreeNode *left = lowestCommonAncestor(root-&gt;left, p, q);\n        TreeNode *right = lowestCommonAncestor(root-&gt;right, p, q);\n        if (left &amp;&amp; right) return root;\n        else if (left) return left;\n        else if (right) return right;\n        else return nullptr;\n\n    }\n};\n</code></pre>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#10242023","title":"\u65e0\u5411\u56fe1024\u9876\u70b9\uff0c2023\u6761\u8fb9\u7528\u90bb\u63a5\u77e9\u9635\u5b58\u50a8\uff0c\u90bb\u63a5\u77e9\u9635\u7684\u5927\u5c0f","text":"<p>\u5728\u65e0\u5411\u56fe\u4e2d\uff0c\u90bb\u63a5\u77e9\u9635\u662f\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\uff0c\u5176\u5927\u5c0f\u4e3a\u9876\u70b9\u6570\u7684\u5e73\u65b9\u3002\u5bf9\u4e8e\u4e00\u4e2a\u67091024\u4e2a\u9876\u70b9\u7684\u65e0\u5411\u56fe\uff0c\u90bb\u63a5\u77e9\u9635\u7684\u5927\u5c0f\uff08\u5373\u6570\u7ec4\u7684\u5927\u5c0f\uff09\u5c06\u662f1024 x 1024\u3002</p>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#left-join-right-join-inner-join-join","title":"left join, right join, inner join, join\u7684\u533a\u522b\u548c\u4ee5\u53ca\u5177\u4f53\u7684\u7528\u6cd5","text":""},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#inner-join","title":"INNER JOIN (\u5185\u8fde\u63a5)","text":"<p>\u5f53\u4f60\u53ea\u5199<code>JOIN</code>\u65f6\uff0c\u9ed8\u8ba4\u662f\u8fdb\u884c\u5185\u8fde\u63a5\uff08INNER JOIN\uff09</p> <ul> <li>\u5b9a\u4e49\uff1a\u53ea\u8fd4\u56de\u4e24\u4e2a\u8868\u4e2d\u5339\u914d\u7684\u8bb0\u5f55\u3002</li> <li>\u7528\u6cd5: \u5047\u8bbe\u6211\u4eec\u6709\u4e24\u4e2a\u8868\uff0c\u4e00\u4e2a\u662f<code>employees</code>\uff08\u5458\u5de5\uff09\uff0c\u53e6\u4e00\u4e2a\u662f<code>departments</code>\uff08\u90e8\u95e8\uff09\uff0c\u6211\u4eec\u60f3\u627e\u51fa\u6240\u6709\u5458\u5de5\u53ca\u5176\u6240\u5c5e\u90e8\u95e8\u7684\u4fe1\u606f\u3002</li> </ul> <pre><code>SELECT employees.name, departments.department_name\nFROM employees\nINNER JOIN departments\nON employees.department_id = departments.id;\n</code></pre>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#left-join","title":"LEFT JOIN\uff08\u5de6\u8fde\u63a5\uff09","text":"<ul> <li>\u5b9a\u4e49\uff1a\u8fd4\u56de\u5de6\u8868\uff08<code>table1</code>\uff09\u7684\u6240\u6709\u8bb0\u5f55\u548c\u53f3\u8868\uff08<code>table2</code>\uff09\u4e2d\u5339\u914d\u7684\u8bb0\u5f55\u3002\u5982\u679c\u5de6\u8868\u7684\u67d0\u6761\u8bb0\u5f55\u5728\u53f3\u8868\u4e2d\u6ca1\u6709\u5339\u914d\uff0c\u5219\u7ed3\u679c\u4e2d\u8fd9\u6761\u8bb0\u5f55\u7684\u53f3\u8868\u90e8\u5206\u4e3aNULL\u3002</li> <li>\u7528\u6cd5\uff1a\u5982\u679c\u6211\u4eec\u60f3\u627e\u51fa\u6240\u6709\u5458\u5de5\u7684\u4fe1\u606f\uff0c\u5373\u4f7f\u4ed6\u4eec\u6ca1\u6709\u5f52\u5c5e\u7684\u90e8\u95e8\u3002</li> </ul> <pre><code>SELECT employees.name, departments.department_name\nFROM employees\nLEFT JOIN departments\nON employees.department_id = departments.id;\n</code></pre>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#right-join","title":"RIGHT JOIN\uff08\u53f3\u8fde\u63a5\uff09","text":"<ul> <li>\u5b9a\u4e49\uff1a\u8fd4\u56de\u53f3\u8868\uff08<code>table2</code>\uff09\u7684\u6240\u6709\u8bb0\u5f55\u548c\u5de6\u8868\uff08<code>table1</code>\uff09\u4e2d\u5339\u914d\u7684\u8bb0\u5f55\u3002\u5982\u679c\u53f3\u8868\u7684\u67d0\u6761\u8bb0\u5f55\u5728\u5de6\u8868\u4e2d\u6ca1\u6709\u5339\u914d\uff0c\u5219\u7ed3\u679c\u4e2d\u8fd9\u6761\u8bb0\u5f55\u7684\u5de6\u8868\u90e8\u5206\u4e3aNULL\u3002</li> <li>\u7528\u6cd5\uff1a\u5982\u679c\u6211\u4eec\u60f3\u5217\u51fa\u6240\u6709\u90e8\u95e8\uff0c\u5373\u4f7f\u5b83\u4eec\u6ca1\u6709\u5458\u5de5\u3002</li> </ul> <pre><code>SELECT employees.name, departments.department_name\nFROM employees\nRIGHT JOIN departments\nON employees.department_id = departments.id;\n</code></pre>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#202100216ip-255255255192ip20210021626","title":"202.100.2.16IP \u548c255.255.255.192\u5b50\u7f51\u63a9\u7801\uff0cIP\u8fd8\u80fd\u600e\u4e48\u8868\u793a\uff0c\u5e94\u8be5\u662f202.100.2.16/26?","text":"<p>\u5f53\u4f60\u6709\u4e00\u4e2aIP\u5730\u5740202.100.2.16\u548c\u5b50\u7f51\u63a9\u7801255.255.255.192\u65f6\uff0c\u8fd9\u4e2a\u5730\u5740\u53ef\u4ee5\u4f7f\u7528CIDR\uff08\u65e0\u7c7b\u522b\u57df\u95f4\u8def\u7531\uff09\u8868\u793a\u6cd5\u8868\u793a\u4e3a202.100.2.16/26\u3002</p> <p>\u8fd9\u91cc\u7684\u201c/26\u201d\u8868\u793a\u5b50\u7f51\u63a9\u7801\u7684\u524d26\u4f4d\u662f\u7f51\u7edc\u90e8\u5206\uff0c\u8fd9\u662f\u56e0\u4e3a\u5b50\u7f51\u63a9\u7801255.255.255.192\u5728\u4e8c\u8fdb\u5236\u4e2d\u8868\u793a\u4e3a11111111.11111111.11111111.11000000\u3002\u8fd9\u91cc\uff0c\u524d26\u4f4d\u662f1\uff0c\u610f\u5473\u7740\u7f51\u7edc\u90e8\u5206\u5360\u4e8626\u4f4d\u3002\u5269\u4e0b\u76846\u4f4d\u7528\u4e8e\u4e3b\u673a\uff0c\u5141\u8bb8\u5728\u5b50\u7f51\u5185\u5206\u914d\u7684IP\u5730\u5740\u6570\u91cf\u3002</p> <p>\u5177\u4f53\u5230\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u5b50\u7f51\u63a9\u7801255.255.255.192\u5c06IP\u5730\u5740\u7a7a\u95f4\u5206\u6210\u4e864\u4e2a\u5b50\u7f51\uff0c\u6bcf\u4e2a\u5b50\u7f51\u670964\u4e2a\u5730\u5740\uff08\u5305\u62ec\u7f51\u7edc\u5730\u5740\u548c\u5e7f\u64ad\u5730\u5740\uff09\u3002\u56e0\u6b64\uff0c\u8fd9\u4e2a\u7279\u5b9a\u7684IP\u5730\u5740202.100.2.16\u5c5e\u4e8e\u5176\u6240\u5728\u768464\u5730\u5740\u8303\u56f4\u5185\u7684\u4e00\u4e2a\u5730\u5740\uff0c\u4f7f\u7528CIDR\u8868\u793a\u6cd5\u5c31\u662f202.100.2.16/26\u3002</p>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#315","title":"\u5171\u4eab\u4e34\u754c\u533a\u6bcf\u6b21\u5141\u8bb83\u4e2a\u8fdb\u7a0b\u8fdb\u5165\uff0c\u4e00\u517115\u4e2a\u8fdb\u7a0b\uff0c\u4fe1\u53f7\u91cf\u7684\u53d8\u5316\u8303\u56f4\u662f\u591a\u5c11\uff1f","text":"<ul> <li>\u6700\u5927\u503c\u4e3a3\uff1a\u5f53\u6ca1\u6709\u8fdb\u7a0b\u5728\u4e34\u754c\u533a\u6216\u8005\u521a\u597d\u6709\u4e00\u4e2a\u8fdb\u7a0b\u79bb\u5f00\u4e34\u754c\u533a\uff0c\u4f7f\u5f97\u4fe1\u53f7\u91cf\u589e\u52a0\u5230\u6700\u5927\u5bb9\u91cf\u65f6\u3002</li> <li>\u6700\u5c0f\u503c\uff1a\u7406\u8bba\u4e0a\uff0c\u5982\u679c\u6240\u670915\u4e2a\u8fdb\u7a0b\u90fd\u8bd5\u56fe\u8fdb\u5165\u5df2\u6ee1\u7684\u4e34\u754c\u533a\uff0c\u5219\u4fe1\u53f7\u91cf\u7684\u503c\u53ef\u4ee5\u8fbe\u5230<code>3 - 15 = -12</code>\u3002\u5b9e\u9645\u4e0a\uff0c\u8fd9\u4e2a\u6700\u5c0f\u503c\u53d6\u51b3\u4e8e\u7cfb\u7edf\u5bf9\u4fe1\u53f7\u91cf\u7684\u5b9e\u73b0\u548c\u4f7f\u7528\u65b9\u5f0f\uff0c\u4ee5\u53ca\u662f\u5426\u5141\u8bb8\u6240\u6709\u8fdb\u7a0b\u51e0\u4e4e\u540c\u65f6\u8bf7\u6c42\u8fdb\u5165\u4e34\u754c\u533a\u3002</li> </ul> <p>10.0.17.0/24\u7b49\u957f\u5b50\u7f51\u5212\u5206\uff0c\u63a9\u7801255.255.255.240,\u6700\u5927\u5b50\u7f51\u4e2a\u6570\u548c\u6700\u5927\u5206\u914d\u5730\u5740</p> <p>\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u7f51\u7edc10.0.17.0/24\uff0c\u5f53\u4f60\u4f7f\u7528\u5b50\u7f51\u63a9\u7801255.255.255.240\u8fdb\u884c\u7b49\u957f\u5b50\u7f51\u5212\u5206\u65f6\uff0c\u610f\u5473\u7740\u4f60\u5c06\u539f\u59cb\u7684/24\u7f51\u7edc\u8fdb\u4e00\u6b65\u5212\u5206\u3002\u5b50\u7f51\u63a9\u7801255.255.255.240\u5728CIDR\u8868\u793a\u6cd5\u4e2d\u4e3a/28\u3002\u8fd9\u610f\u5473\u7740\u6bcf\u4e2a\u5b50\u7f51\u6709232\u221228232\u221228\u4e2a\u5730\u5740\uff0c\u5373\u6bcf\u4e2a\u5b50\u7f51\u670916\u4e2a\u5730\u5740\u3002</p>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#_9","title":"\u8ba1\u7b97\u6700\u5927\u5b50\u7f51\u4e2a\u6570","text":"<p>\u8981\u8ba1\u7b97\u5728/24\u7f51\u7edc\u4e2d\u53ef\u4ee5\u5212\u5206\u51fa\u591a\u5c11\u4e2a/28\u5b50\u7f51\uff0c\u53ef\u4ee5\u4f7f\u7528\u516c\u5f0f2(\u5b50\u7f51\u63a9\u7801\u957f\u5ea6\u2212\u539f\u7f51\u7edc\u63a9\u7801\u957f\u5ea6)2(\u5b50\u7f51\u63a9\u7801\u957f\u5ea6\u2212\u539f\u7f51\u7edc\u63a9\u7801\u957f\u5ea6)\u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u8fd9\u5c06\u662f2(28\u221224)=242(28\u221224)=24\u3002</p> <p>2(28\u221224)=24=162(28\u221224)=24=16</p> <p>\u56e0\u6b64\uff0c\u4f60\u53ef\u4ee5\u4ece\u4e00\u4e2a/24\u7f51\u7edc\u4e2d\u5212\u5206\u51fa16\u4e2a/28\u5b50\u7f51\u3002</p>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#_10","title":"\u8ba1\u7b97\u6700\u5927\u5206\u914d\u5730\u5740","text":"<p>\u6bcf\u4e2a/28\u5b50\u7f51\u53ef\u4ee5\u670916\u4e2a\u5730\u5740\uff0c\u5305\u62ec\u7f51\u7edc\u5730\u5740\u548c\u5e7f\u64ad\u5730\u5740\u3002\u56e0\u4e3a\u7f51\u7edc\u5730\u5740\u548c\u5e7f\u64ad\u5730\u5740\u4e0d\u80fd\u5206\u914d\u7ed9\u4e3b\u673a\uff0c\u6240\u4ee5\u6bcf\u4e2a\u5b50\u7f51\u5b9e\u9645\u4e0a\u53ef\u4ee5\u5206\u914d\u7684\u5730\u5740\u6570\u4e3a16 - 2 = 14\u4e2a\u3002</p>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#_11","title":"\u603b\u7ed3","text":"<ul> <li>\u6700\u5927\u5b50\u7f51\u4e2a\u6570\uff1a16\u4e2a\u5b50\u7f51</li> <li>\u6bcf\u4e2a\u5b50\u7f51\u7684\u6700\u5927\u5206\u914d\u5730\u5740\u6570\uff1a14\u4e2a\u5730\u5740</li> </ul> <p>\u8fd9\u610f\u5473\u7740\u5bf9\u4e8e10.0.17.0/24\u7f51\u7edc\uff0c\u4f7f\u7528\u5b50\u7f51\u63a9\u7801255.255.255.240\u8fdb\u884c\u7b49\u957f\u5b50\u7f51\u5212\u5206\u65f6\uff0c\u4f60\u53ef\u4ee5\u5f97\u523016\u4e2a\u5b50\u7f51\uff0c\u6bcf\u4e2a\u5b50\u7f51\u4e2d\u670914\u4e2a\u53ef\u5206\u914d\u7ed9\u8bbe\u5907\u7684IP\u5730\u5740\u3002</p>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#_12","title":"\u975e\u62a2\u5360\u8c03\u5ea6\u4e2d\u5f15\u8d77\u8fdb\u7a0b\u8c03\u5ea6\u7684\u539f\u56e0","text":""},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#1_2","title":"1. \u8fdb\u7a0b\u7ec8\u6b62","text":"<p>\u5f53\u8fdb\u7a0b\u5b8c\u6210\u5176\u6267\u884c\u5e76\u7ec8\u6b62\u65f6\uff0c\u64cd\u4f5c\u7cfb\u7edf\u9700\u8981\u9009\u62e9\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u6765\u6267\u884c\u3002\u8fd9\u662f\u6700\u76f4\u63a5\u7684\u5f15\u8d77\u8fdb\u7a0b\u8c03\u5ea6\u7684\u539f\u56e0\u3002</p>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#2_2","title":"2. \u8fdb\u7a0b\u963b\u585e","text":"<p>\u5f53\u8fdb\u7a0b\u6267\u884c\u8fc7\u7a0b\u4e2d\u8fdb\u884c\u4e86\u67d0\u79cd\u7b49\u5f85\u64cd\u4f5c\uff0c\u5982\u7b49\u5f85I/O\u64cd\u4f5c\u5b8c\u6210\u3001\u7b49\u5f85\u6587\u4ef6\u7cfb\u7edf\u64cd\u4f5c\u6216\u7b49\u5f85\u540c\u6b65\u5bf9\u8c61\uff08\u4f8b\u5982\u4fe1\u53f7\u91cf\u3001\u9501\u7b49\uff09\u65f6\uff0c\u8be5\u8fdb\u7a0b\u4f1a\u8fdb\u5165\u963b\u585e\u72b6\u6001\u3002\u7531\u4e8e\u5b83\u4e0d\u80fd\u7ee7\u7eed\u6267\u884c\uff0c\u64cd\u4f5c\u7cfb\u7edf\u5c06\u9009\u62e9\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u6765\u4f7f\u7528CPU\u3002</p>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#3_2","title":"3. \u7cfb\u7edf\u8c03\u7528","text":"<p>\u5373\u4f7f\u5728\u975e\u62a2\u5360\u5f0f\u8c03\u5ea6\u7b56\u7565\u4e2d\uff0c\u8fdb\u7a0b\u4e5f\u53ef\u80fd\u56e0\u4e3a\u6267\u884c\u7cfb\u7edf\u8c03\u7528\u800c\u6682\u65f6\u201c\u8ba9\u51fa\u201dCPU\u3002\u5982\u679c\u8fd9\u4e2a\u7cfb\u7edf\u8c03\u7528\u6d89\u53ca\u5230\u7b49\u5f85\u64cd\u4f5c\uff08\u5982\u8bfb\u53d6\u78c1\u76d8\u6587\u4ef6\uff09\uff0c\u90a3\u4e48\u5728\u7b49\u5f85\u671f\u95f4\uff0c\u5176\u4ed6\u8fdb\u7a0b\u53ef\u4ee5\u88ab\u8c03\u5ea6\u6267\u884c\u3002</p>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#4_2","title":"4. \u7528\u6237\u4ea4\u4e92","text":"<p>\u5728\u67d0\u4e9b\u57fa\u4e8e\u4e8b\u4ef6\u7684\u6216\u7528\u6237\u4ea4\u4e92\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u8fdb\u7a0b\u53ef\u80fd\u5728\u7b49\u5f85\u7528\u6237\u8f93\u5165\u65f6\u81ea\u613f\u653e\u5f03CPU\u3002\u8fd9\u5141\u8bb8\u5176\u4ed6\u8fdb\u7a0b\u5728\u7528\u6237\u505a\u51fa\u54cd\u5e94\u4e4b\u524d\u6267\u884c\u3002</p>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#5_2","title":"5. \u534f\u4f5c\u5f0f\u8ba9\u51fa","text":"<p>\u5728\u4e00\u4e9b\u64cd\u4f5c\u7cfb\u7edf\u6216\u8fd0\u884c\u65f6\u73af\u5883\u4e2d\uff0c\u8fdb\u7a0b\u6216\u7ebf\u7a0b\u53ef\u4ee5\u663e\u5f0f\u8c03\u7528\u7279\u5b9a\u7684\u51fd\u6570\u6765\u8ba9\u51fa\u5176CPU\u7684\u4f7f\u7528\u6743\u3002\u8fd9\u901a\u5e38\u51fa\u73b0\u5728\u8bbe\u8ba1\u826f\u597d\u7684\u534f\u4f5c\u5f0f\u591a\u4efb\u52a1\u5904\u7406\u7cfb\u7edf\u4e2d\uff0c\u5176\u4e2d\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u4f1a\u5b9a\u671f\u8ba9\u51fa\u63a7\u5236\u6743\uff0c\u4ee5\u5141\u8bb8\u5176\u4ed6\u8fdb\u7a0b\u8fd0\u884c\u3002</p>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#_13","title":"\u6ce8\u610f","text":"<p>\u975e\u62a2\u5360\u5f0f\u8c03\u5ea6\u8981\u6c42\u8fdb\u7a0b\u826f\u597d\u7684\u534f\u4f5c\u3002\u5982\u679c\u4e00\u4e2a\u8fdb\u7a0b\u957f\u65f6\u95f4\u5360\u7528CPU\u800c\u4e0d\u91ca\u653e\uff08\u4f8b\u5982\uff0c\u8fdb\u5165\u65e0\u9650\u5faa\u73af\uff09\uff0c\u5b83\u53ef\u80fd\u4f1a\u5bfc\u81f4\u7cfb\u7edf\u53d8\u5f97\u4e0d\u54cd\u5e94\uff0c\u56e0\u4e3a\u5176\u4ed6\u8fdb\u7a0b\u65e0\u6cd5\u5f97\u5230\u6267\u884c\u7684\u673a\u4f1a\u3002\u56e0\u6b64\uff0c\u5728\u8bbe\u8ba1\u8fd9\u6837\u7684\u7cfb\u7edf\u65f6\uff0c\u5f00\u53d1\u8005\u9700\u8981\u683c\u5916\u6ce8\u610f\u786e\u4fdd\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u4f1a\u5728\u5408\u7406\u7684\u65f6\u95f4\u5185\u8ba9\u51faCPU\u3002</p>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#_14","title":"\u5f02\u6b65\u4f20\u8f93\u548c\u540c\u6b65\u4f20\u8f93\u7684\u533a\u522b","text":"<p>\u5f02\u6b65\u4f20\u8f93\u548c\u540c\u6b65\u4f20\u8f93\u662f\u8ba1\u7b97\u673a\u7f51\u7edc\u548c\u6570\u636e\u901a\u8baf\u4e2d\u7684\u4e24\u79cd\u57fa\u672c\u4f20\u8f93\u673a\u5236\uff0c\u5b83\u4eec\u5728\u6570\u636e\u53d1\u9001\u548c\u63a5\u6536\u7684\u65b9\u5f0f\u4e0a\u6709\u672c\u8d28\u7684\u533a\u522b\u3002</p>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#asynchronous-transmission","title":"\u5f02\u6b65\u4f20\u8f93\uff08Asynchronous Transmission\uff09","text":"<ul> <li>\u7279\u70b9\uff1a</li> <li>\u6570\u636e\u4ee5\u72ec\u7acb\u7684\u5355\u4f4d\u4f20\u8f93\uff0c\u6bcf\u4e2a\u5355\u4f4d\u901a\u5e38\u4ee5\u8d77\u59cb\u4f4d\u5f00\u59cb\uff0c\u4ee5\u505c\u6b62\u4f4d\u7ed3\u675f\u3002\u8fd9\u610f\u5473\u7740\u53d1\u9001\u7684\u6570\u636e\u4e4b\u95f4\u4e0d\u662f\u8fde\u7eed\u7684\uff0c\u6bcf\u4e2a\u6570\u636e\u5355\u5143\uff08\u5982\u4e00\u4e2a\u5b57\u8282\uff09\u4e4b\u95f4\u53ef\u80fd\u5b58\u5728\u95f4\u9694\u65f6\u95f4\u3002</li> <li>\u6bcf\u4e2a\u6570\u636e\u5355\u5143\u7684\u4f20\u8f93\u662f\u72ec\u7acb\u7684\uff0c\u63a5\u6536\u65b9\u6839\u636e\u8d77\u59cb\u4f4d\u548c\u505c\u6b62\u4f4d\u6765\u8bc6\u522b\u6570\u636e\u5355\u5143\u7684\u5f00\u59cb\u548c\u7ed3\u675f\u3002</li> <li>\u4e0d\u9700\u8981\u53d1\u9001\u65b9\u548c\u63a5\u6536\u65b9\u4e4b\u95f4\u7684\u65f6\u949f\u540c\u6b65\u3002\u6bcf\u4e2a\u6570\u636e\u5355\u5143\u90fd\u6709\u81ea\u5df1\u7684\u8d77\u59cb\u548c\u505c\u6b62\u4f4d\uff0c\u8fd9\u4f7f\u5f97\u63a5\u6536\u65b9\u53ef\u4ee5\u6839\u636e\u8fd9\u4e9b\u4f4d\u6765\u91cd\u65b0\u540c\u6b65\u3002</li> <li>\u7528\u9014\uff1a</li> <li>\u5e38\u7528\u4e8e\u8ba1\u7b97\u673a\u4e32\u884c\u901a\u8baf\uff0c\u5982RS-232\u63a5\u53e3\uff0c\u4ee5\u53ca\u67d0\u4e9b\u4f4e\u901f\u5ea6\u7684\u7f51\u7edc\u901a\u8baf\u3002</li> </ul>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#synchronous-transmission","title":"\u540c\u6b65\u4f20\u8f93\uff08Synchronous Transmission\uff09","text":"<ul> <li>\u7279\u70b9\uff1a</li> <li>\u6570\u636e\u4ee5\u8fde\u7eed\u7684\u6d41\u5f62\u5f0f\u4f20\u8f93\uff0c\u4e0d\u5728\u6570\u636e\u5355\u5143\u4e4b\u95f4\u63d2\u5165\u8d77\u59cb\u4f4d\u548c\u505c\u6b62\u4f4d\u3002\u8fd9\u610f\u5473\u7740\u53d1\u9001\u7684\u6570\u636e\u662f\u8fde\u7eed\u7684\uff0c\u6ca1\u6709\u660e\u663e\u7684\u95f4\u9694\u3002</li> <li>\u9700\u8981\u53d1\u9001\u65b9\u548c\u63a5\u6536\u65b9\u4e4b\u95f4\u6709\u4e25\u683c\u7684\u65f6\u949f\u540c\u6b65\uff0c\u4ee5\u786e\u4fdd\u63a5\u6536\u65b9\u6b63\u786e\u5730\u8bc6\u522b\u51fa\u53d1\u9001\u7684\u6570\u636e\u5355\u5143\u3002</li> <li>\u6570\u636e\u4ee5\u5757\u7684\u5f62\u5f0f\u53d1\u9001\uff0c\u901a\u5e38\u9700\u8981\u5728\u6570\u636e\u5757\u7684\u5f00\u59cb\u548c\u7ed3\u675f\u6dfb\u52a0\u7279\u6b8a\u7684\u540c\u6b65\u5b57\u7b26\uff0c\u4ee5\u5e2e\u52a9\u63a5\u6536\u65b9\u786e\u5b9a\u6570\u636e\u5757\u7684\u8fb9\u754c\u3002</li> <li>\u7528\u9014\uff1a</li> <li>\u5e38\u7528\u4e8e\u66f4\u9ad8\u901f\u5ea6\u7684\u7f51\u7edc\u901a\u8baf\uff0c\u5982\u4ee5\u592a\u7f51\u3001\u5149\u7ea4\u901a\u9053\u7b49\uff0c\u4ee5\u53ca\u5185\u90e8\u603b\u7ebf\u901a\u8baf\u534f\u8bae\u3002</li> </ul>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#_15","title":"\u533a\u522b\u603b\u7ed3","text":"<ul> <li>\u65f6\u949f\u540c\u6b65\uff1a\u540c\u6b65\u4f20\u8f93\u9700\u8981\u53d1\u9001\u65b9\u548c\u63a5\u6536\u65b9\u4e4b\u95f4\u7684\u65f6\u949f\u540c\u6b65\uff0c\u800c\u5f02\u6b65\u4f20\u8f93\u4e0d\u9700\u8981\u3002</li> <li>\u6570\u636e\u5355\u5143\u8fb9\u754c\uff1a\u5f02\u6b65\u4f20\u8f93\u7684\u6570\u636e\u5355\u5143\u4e4b\u95f4\u6709\u660e\u786e\u7684\u8d77\u59cb\u548c\u505c\u6b62\u4f4d\u4f5c\u4e3a\u8fb9\u754c\uff0c\u800c\u540c\u6b65\u4f20\u8f93\u901a\u8fc7\u8fde\u7eed\u53d1\u9001\u6570\u636e\uff0c\u5e76\u4f7f\u7528\u7279\u6b8a\u540c\u6b65\u5b57\u7b26\u6807\u8bc6\u6570\u636e\u5757\u7684\u5f00\u59cb\u548c\u7ed3\u675f\u3002</li> <li>\u9002\u7528\u573a\u666f\uff1a\u5f02\u6b65\u4f20\u8f93\u9002\u7528\u4e8e\u4f4e\u901f\u6216\u4e2d\u901f\u901a\u8baf\uff0c\u5e38\u7528\u4e8e\u4e32\u884c\u901a\u8baf\u3002\u540c\u6b65\u4f20\u8f93\u9002\u7528\u4e8e\u9ad8\u901f\u901a\u8baf\uff0c\u5e38\u7528\u4e8e\u7f51\u7edc\u901a\u8baf\u548c\u5185\u90e8\u603b\u7ebf\u534f\u8bae\u3002</li> <li>\u6548\u7387\uff1a\u540c\u6b65\u4f20\u8f93\u7531\u4e8e\u4e0d\u9700\u8981\u5728\u6bcf\u4e2a\u5b57\u7b26\u4e4b\u95f4\u6dfb\u52a0\u989d\u5916\u7684\u8d77\u59cb\u548c\u505c\u6b62\u4f4d\uff0c\u56e0\u6b64\u5728\u9ad8\u901f\u901a\u8baf\u4e2d\u66f4\u4e3a\u9ad8\u6548\u3002\u7136\u800c\uff0c\u5b83\u9700\u8981\u66f4\u590d\u6742\u7684\u786c\u4ef6\u548c\u8f6f\u4ef6\u6765\u7ef4\u6301\u65f6\u949f\u540c\u6b65\u3002</li> </ul> <p>\u6839\u636e\u5e94\u7528\u7684\u5177\u4f53\u9700\u6c42\u548c\u73af\u5883\uff0c\u9009\u62e9\u9002\u5408\u7684\u4f20\u8f93\u673a\u5236\u662f\u975e\u5e38\u91cd\u8981\u7684\u3002</p>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#_16","title":"\u5f02\u6b65\u4f20\u8f93\u548c\u540c\u6b65\u4f20\u8f93\u7684\u4f8b\u5b50","text":""},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#_17","title":"\u5f02\u6b65\u4f20\u8f93\u7684\u4f8b\u5b50","text":"<ol> <li>HTTP\uff08Hypertext Transfer Protocol\uff09:</li> <li>\u901a\u5e38\u88ab\u89c6\u4e3a\u5f02\u6b65\u4f20\u8f93\uff0c\u7279\u522b\u662f\u5728\u73b0\u4ee3\u7684web\u5e94\u7528\u4e2d\uff0c\u5ba2\u6237\u7aef\uff08\u5982\u6d4f\u89c8\u5668\uff09\u53d1\u9001\u8bf7\u6c42\u540e\u4e0d\u9700\u8981\u4e00\u76f4\u7b49\u5f85\u54cd\u5e94\uff0c\u53ef\u4ee5\u7ee7\u7eed\u5176\u4ed6\u4efb\u52a1\uff0c\u670d\u52a1\u5668\u54cd\u5e94\u51c6\u5907\u597d\u540e\u518d\u5904\u7406\u3002</li> <li>SMTP\uff08Simple Mail Transfer Protocol\uff09:</li> <li>\u7528\u4e8e\u7535\u5b50\u90ae\u4ef6\u7684\u4f20\u8f93\uff0c\u90ae\u4ef6\u53d1\u9001\u540e\uff0c\u4f20\u8f93\u8fc7\u7a0b\u548c\u90ae\u4ef6\u5230\u8fbe\u53ef\u4ee5\u5f02\u6b65\u8fdb\u884c\uff0c\u53d1\u9001\u8005\u4e0d\u9700\u8981\u7b49\u5f85\u6574\u4e2a\u8fc7\u7a0b\u5b8c\u6210\u3002</li> <li>MQTT\uff08Message Queuing Telemetry Transport\uff09:</li> <li>\u4e00\u4e2a\u8f7b\u91cf\u7ea7\u7684\u6d88\u606f\u534f\u8bae\uff0c\u7528\u4e8e\u8bbe\u5907\u95f4\u5f02\u6b65\u901a\u4fe1\uff0c\u5141\u8bb8\u8bbe\u5907\u53d1\u5e03\u6d88\u606f\u5230\u4e3b\u9898\uff0c\u800c\u5176\u4ed6\u8bbe\u5907\u8ba2\u9605\u8fd9\u4e9b\u4e3b\u9898\uff0c\u4e0d\u9700\u8981\u5b9e\u65f6\u7b49\u5f85\u3002</li> </ol>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#_18","title":"\u540c\u6b65\u4f20\u8f93\u7684\u4f8b\u5b50","text":"<ol> <li>TCP\uff08Transmission Control Protocol\uff09:</li> <li>TCP\u63d0\u4f9b\u4e00\u79cd\u9762\u5411\u8fde\u63a5\u7684\u3001\u53ef\u9760\u7684\u5b57\u8282\u6d41\u670d\u52a1\u3002\u5728TCP\u8fde\u63a5\u4e2d\uff0c\u6570\u636e\u7684\u53d1\u9001\u548c\u63a5\u6536\u9700\u8981\u6309\u7167\u4e25\u683c\u7684\u987a\u5e8f\u8fdb\u884c\uff0c\u63a5\u6536\u65b9\u5fc5\u987b\u786e\u8ba4\u6bcf\u4e2a\u53d1\u9001\u7684\u6570\u636e\u5305\uff0c\u8fd9\u53ef\u4ee5\u88ab\u89c6\u4e3a\u4e00\u79cd\u540c\u6b65\u4f20\u8f93\u65b9\u5f0f\u3002</li> <li>FTP\uff08File Transfer Protocol\uff09:</li> <li>\u7528\u4e8e\u6587\u4ef6\u4f20\u8f93\uff0c\u901a\u5e38\u5728\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u4e4b\u95f4\u5efa\u7acbTCP\u8fde\u63a5\u8fdb\u884c\u540c\u6b65\u6570\u636e\u4f20\u8f93\uff0c\u6570\u636e\u548c\u547d\u4ee4\u4f20\u8f93\u4e25\u683c\u9075\u5faa\u8bf7\u6c42-\u54cd\u5e94\u6a21\u5f0f\u3002</li> <li>Telnet:</li> <li>\u4e00\u79cd\u7f51\u7edc\u534f\u8bae\uff0c\u7528\u4e8e\u5728\u8fdc\u7a0b\u8ba1\u7b97\u673a\u4e0a\u6267\u884c\u547d\u4ee4\uff0c\u5b83\u901a\u8fc7\u540c\u6b65\u4f20\u8f93\u6a21\u5f0f\u8fdb\u884c\u4ea4\u4e92\uff0c\u7528\u6237\u8f93\u5165\u547d\u4ee4\u540e\u5fc5\u987b\u7b49\u5f85\u5e76\u63a5\u6536\u5230\u54cd\u5e94\u3002</li> </ol>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#c_1","title":"C++\u4e07\u80fd\u5934\u6587\u4ef6","text":"<p><code>#include &lt;bits/stdc++.h&gt;</code></p>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#_19","title":"\u6bd4\u8f83\u4e09\u4e2a\u6570\u7684\u6700\u5c0f\u503c","text":"<p><code>min({a, b, c});</code></p>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#keyvalue","title":"\u76f4\u63a5\u4f7f\u7528\u54c8\u5e0c\u8868\u7684key\u548cvalue","text":"<pre><code>for (auto&amp; [charKey, charNumber] : charCount) {}\n</code></pre>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#_20","title":"\u5ffd\u7565\u7ed3\u5c3e\u7684\u6362\u884c\u7b26","text":"<pre><code>cin.ignore();\n</code></pre>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#_21","title":"\u5b57\u7b26\u4e32\u4e2d\u51fa\u73b0\u6b21\u6570","text":"<pre><code>int cnt = count(s.begin(), s.end(), 'M') + count(s.begin(), s.end(), 'T');\n</code></pre>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#_22","title":"\u5904\u7406\u77e9\u9635\u8f93\u5165","text":"<p>\u7528string\u8f93\u5165\uff0c\u7136\u540e\u4e00\u4e2a\u4e00\u4e2a\u586b</p> <p>\u8f93\u5165\uff1a</p> <p>1010 0101 1100 0011</p> <pre><code>for (int i = 0; i &lt; n; i++) {\n        string row;\n        cin &gt;&gt; row;\n        for (int j = 0; j &lt; n; j++) {\n            matrix[i][j] = row[j] - '0';\n        }\n    }\n</code></pre>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#_23","title":"\u53ef\u4ee5\u6a21\u62df\u7684\u65f6\u5019\u4e0d\u8981\u72b9\u8c6b\uff0c\u76f4\u63a5\u6700\u76f4\u63a5\u7684\u6a21\u62df\u5373\u53ef\uff0c\u4e0d\u7528\u627e\u6570\u5b66\u89c4\u5f8b\u4e86","text":"<pre><code>vector&lt;int&gt; slimePos(n, 1);\n    for (int i = 0; i &lt; n; i++) {\n        cin &gt;&gt; a[i];\n    }\n\n    for (int t = 0; t &lt; n; t++) {\n        vector&lt;int&gt; newSlimePos(n, 0);\n        int emptyCells = 0;\n        for (int i = 0; i &lt; n; i++) {\n            if (slimePos[i] == 1) {\n                if (a[t] == 0 &amp;&amp; i &gt; 0) {\n                    newSlimePos[i - 1] = 1;\n                }\n                else if (a[t] == 1 &amp;&amp; i &lt; n - 1) {\n                    newSlimePos[i + 1] = 1;\n                }\n            }\n        }\n        slimePos = newSlimePos;\n</code></pre>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#set","title":"\u5173\u4e8eset\u7684\u4f7f\u7528","text":"<p>\u5728 C++ \u7684 <code>set</code> \u5bb9\u5668\u4e2d\uff0c\u5143\u7d20\u662f\u81ea\u52a8\u6392\u5e8f\u5e76\u4e14\u552f\u4e00\u7684\u3002\u7531\u4e8e <code>set</code> \u662f\u57fa\u4e8e\u7ea2\u9ed1\u6811\u5b9e\u73b0\u7684\uff0c\u5b83\u4e0d\u63d0\u4f9b\u76f4\u63a5\u4fee\u6539\u5143\u7d20\u7684\u80fd\u529b\uff0c\u56e0\u4e3a\u8fd9\u53ef\u80fd\u4f1a\u7834\u574f\u96c6\u5408\u7684\u5185\u90e8\u6392\u5e8f\u89c4\u5219\u3002\u4f46\u662f\uff0c\u4f60\u53ef\u4ee5\u8bbf\u95ee <code>set</code> \u7684\u9996\u5143\u7d20\uff0c\u5e76\u4e14\u5982\u679c\u9700\u8981\u4fee\u6539\u9996\u5143\u7d20\uff0c\u4f60\u5fc5\u987b\u5148\u79fb\u9664\u5b83\uff0c\u7136\u540e\u63d2\u5165\u4e00\u4e2a\u65b0\u7684\u5143\u7d20\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u79cd\u64cd\u4f5c\u53ef\u80fd\u4f1a\u6539\u53d8\u539f\u672c\u7684\u961f\u9996\u5143\u7d20\u3002</p> <p>\u4ee5\u4e0b\u662f\u5982\u4f55\u8bbf\u95ee\u548c\u4fee\u6539 <code>set</code> \u4e2d\u961f\u9996\u5143\u7d20\u7684\u6b65\u9aa4\uff1a</p>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#_24","title":"\u8bbf\u95ee\u961f\u9996\u5143\u7d20","text":"<p>\u4f60\u53ef\u4ee5\u4f7f\u7528 <code>begin()</code> \u65b9\u6cd5\u83b7\u53d6\u5230 <code>set</code> \u7684\u8fed\u4ee3\u5668\uff0c\u6307\u5411\u7b2c\u4e00\u4e2a\uff08\u5373\u6700\u5c0f\u7684\uff09\u5143\u7d20\uff0c\u7136\u540e\u901a\u8fc7\u89e3\u5f15\u7528\u8be5\u8fed\u4ee3\u5668\u6765\u8bbf\u95ee\u8be5\u5143\u7d20\u3002</p> <pre><code>std::set&lt;int&gt; mySet = {5, 1, 4};  // 1, 4, 5\nauto firstElement = *mySet.begin();  // \u8bbf\u95ee\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c\u6b64\u5904\u4e3a 1\n</code></pre>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#_25","title":"\u4fee\u6539\u961f\u9996\u5143\u7d20","text":"<p>\u7531\u4e8e <code>set</code> \u4e2d\u7684\u5143\u7d20\u662f\u5e38\u91cf\uff0c\u4e0d\u80fd\u76f4\u63a5\u88ab\u4fee\u6539\u3002\u5982\u679c\u4f60\u60f3\u8981\u4fee\u6539\u961f\u9996\u5143\u7d20\uff0c\u4f60\u9700\u8981\u5148\u5220\u9664\u5b83\uff0c\u7136\u540e\u63d2\u5165\u4e00\u4e2a\u65b0\u7684\u5143\u7d20\u3002\u4f46\u662f\uff0c\u8fd9\u79cd\u64cd\u4f5c\u4f1a\u5f71\u54cd <code>set</code> \u7684\u6392\u5e8f\uff0c\u65b0\u63d2\u5165\u7684\u5143\u7d20\u53ef\u80fd\u4e0d\u4f1a\u6210\u4e3a\u65b0\u7684\u961f\u9996\u5143\u7d20\u3002</p> <pre><code>// \u5220\u9664\u961f\u9996\u5143\u7d20\nmySet.erase(mySet.begin());\n\n// \u63d2\u5165\u65b0\u5143\u7d20\nmySet.insert(newElement);\n</code></pre> <p>\u8fd9\u79cd\u65b9\u6cd5\u5728\u64cd\u4f5c\u4e0a\u662f\u6709\u6548\u7684\uff0c\u4f46\u8bf7\u8bb0\u4f4f\uff0c\u7531\u4e8e <code>set</code> \u7684\u6392\u5e8f\u7279\u6027\uff0c\u65b0\u63d2\u5165\u7684\u5143\u7d20\u53ef\u80fd\u4e0d\u4f1a\u653e\u7f6e\u5728\u539f\u6765\u961f\u9996\u5143\u7d20\u7684\u4f4d\u7f6e\u3002</p>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#24-03-13","title":"24-03-13 \u643a\u7a0b\u540e\u7aef\u5c97\u7b14\u8bd5","text":""},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#1-you","title":"1. you\u5b50\u4e32","text":"<p>\u9898\u76ee\u63cf\u8ff0 \u5c0f\u76d6\u62ff\u5230\u4e86\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5979\u60f3\u91cd\u6392\u8fd9\u4e2a\u5b57\u7b26\u4e32\u540e\uff0c\u4f7f\u5f97\u8be5\u5b57\u7b26\u4e32\u5305\u542b\u5c3d\u53ef\u80fd\u591a\u7684\"you\"\u8fde\u7eed\u5b50\u4e32\u3002\u4f60\u80fd\u5e2e\u5e2e\u5979\u5417?</p> <p>\u8f93\u5165\u63cf\u8ff0 \u4e00\u4e2a\u4ec5\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u7684\u5b57\u7b26\u4e32\uff0c\u957f\u5ea6\u4e0d\u8d85\u8fc710^5</p> <p>\u8f93\u51fa\u63cf\u8ff0 \u91cd\u6392\u540e\u7684\u5b57\u7b26\u4e32\u3002\u6709\u591a\u89e3\u65f6\u8f93\u51fa\u4efb\u610f\u5373\u53ef\u3002</p> <p>\u6837\u4f8b \u8f93\u5165 yyoouuuu \u8f93\u51fa uyouyouu</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nint main () {\n    string s;\n    cin &gt;&gt; s;\n    string answer;\n    int n = s.size();\n    unordered_map&lt;char, int&gt; charCount;\n    for (int i = 0; i &lt; n; i++) {\n        charCount[s[i]]++;\n    }\n    int minCount = min({charCount['y'], charCount['o'], charCount['u']});\n\n    for (int i = 0; i &lt; minCount; i++) {\n        answer += \"you\";\n        charCount['y']--, charCount['o']--, charCount['u']--;\n    }\n\n\n    // \u76f4\u63a5\u4ece\u54c8\u5e0c\u6620\u5c04\u4e2d\u6784\u5efa\u5b57\u7b26\u4e32\n    for (auto&amp; [charKey, charNumber] : charCount) {\n        while (charNumber-- &gt; 0) {\n            answer += charKey;\n        }\n    }\n    cout &lt;&lt; answer &lt;&lt; endl;\n}\n</code></pre>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#2_3","title":"2. \u6570\u7ec4\u63a8\u5e73","text":"<p>\u9898\u76ee\u63cf\u8ff0 \u5c0f\u76d6\u62ff\u5230\u4e86\u4e00\u4e2a\u6570\u7ec4\uff0c\u5979\u6bcf\u6b21\u64cd\u4f5c\u53ef\u4ee5\u4efb\u9009\u4e00\u4e2a\u5143\u7d20\u52a0 1\u6216\u8005\u51cf 1\u3002\u5c0f\u76d6\u60f3\u77e5\u9053\uff0c\u5c06\u6240\u6709\u5143\u7d20\u90fd\u53d8\u6210\u548cai\u76f8\u7b49\u9700\u8981\u64cd\u4f5c\u6700\u5c11\u591a\u5c11\u6b21?\u4f60\u9700\u8981\u56de\u7b54i[1,n]\u7684\u7ed3\u679c\u3002</p> <p>\u8f93\u5165\u63cf\u8ff0 \u7b2c\u4e00\u884c\u8f93\u5165\u4e00\u4e2a\u6b63\u6574\u6570n\uff0c\u4ee3\u8868\u6570\u7ec4\u7684\u5927\u5c0f\u3002\u7b2c\u4e8c\u884c\u8f93\u5165n\u4e2a\u6b63\u6574\u6570ai\uff0c\u4ee3\u8868\u6570\u7ec4\u7684\u5143\u7d20\u30021&lt;=n&lt;=10^5 1&lt;=ai&lt;=10^9</p> <p>\u8f93\u51fa\u63cf\u8ff0 \u8f93\u51fan\u884c\uff0c\u5206\u522b\u4ee3\u8868i[1,n]\u7684\u7ed3\u679c\u3002 \u6837\u4f8b \u8f93\u5165 3 2 1 4</p> <p>\u8f93\u51fa</p> <p>3</p> <p>4</p> <p>5</p> <p>\u4f7f\u7528\u524d\u540e\u7f00\u5206\u89e3\uff0c\u52a0\u4e0a\u54c8\u5e0c\u8868\u6765\u5b58\u50a8\u7ed3\u679c\u6bcf\u4e2a\u6570\u5b57\u5bf9\u5e94\u7684\u7ed3\u679c</p> <p>==&gt;\u524d\u540e\u7f00\u5206\u89e3\u662f\u56e0\u4e3a\uff0c\u6570\u7ec4\u4e2d\u4f1a\u6709\u6bd4ai\u5927\u7684\u6570\uff0c\u4e5f\u4f1a\u6709\u6bd4ai\u5c0f\u7684\u6570\uff0c\u6240\u4ee5\u5c0f\u7684\u548c\u5927\u7684\u6709\u5206\u7c7b\u8ba8\u8bba</p> <p>==&gt;\u800c\u524d\u7f00\u548c\u53c8\u53ef\u4ee5\u8f7b\u677e\u77e5\u9053\u6bcf\u4e2a\u6570\u5de6\u53f3\u7684\u6570\u7684\u548c\uff0c\u6240\u4ee5\u4f7f\u7528\u524d\u540e\u7f00\u5206\u89e3</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n#include &lt;vector&gt;\n#include &lt;unordered_map&gt;\nusing namespace std;\n\nint main () {\n    int n;\n    cin &gt;&gt; n;\n    vector&lt;int&gt; nums(n);\n    for (int i = 0; i &lt; n; i++) cin &gt;&gt; nums[i];\n    vector&lt;int&gt; sortedNums(nums);\n    sort(sortedNums.begin(), sortedNums.end());\n\n    vector&lt;int&gt; left(n, 0);\n    int sumLeft = 0;\n    for (int i = 0; i &lt; n; i++) {\n        sumLeft += sortedNums[i];\n        left[i] = sumLeft;\n    }\n\n    vector&lt;int&gt; right(n, 0);\n    int sumRight = 0;\n    for (int i = n - 1; i &gt;= 0; i--) {\n        sumRight += sortedNums[i];\n        right[i] = sumRight;\n    }\n    // for (int i = 0; i &lt; n; i++) cout &lt;&lt; left[i] &lt;&lt; \" \" &lt;&lt; right[i] &lt;&lt; endl;\n    unordered_map&lt;int, int&gt; opsMap;\n    for (int i = 0; i &lt; n; i++) {\n        if (opsMap.count(sortedNums[i])) {\n            continue;\n        }\n        // \u81ea\u5df1\u672c\u8eab\u7684\u64cd\u4f5c\u6b65\u6570\u80af\u5b9a\u662f0\uff0c\u6240\u4ee5\u4e0d\u7528\u8003\u8651\n        int leftOps = (i &gt; 0) ? i * sortedNums[i] - left[i - 1] : 0;\n        int rightOps = (i &lt; n - 1) ? right[i + 1] - (n - i - 1) * sortedNums[i] : 0;\n        // cout &lt;&lt; sortedNums[i] &lt;&lt; \" \" &lt;&lt; leftOps &lt;&lt; \" \" &lt;&lt; rightOps &lt;&lt; endl;\n        opsMap[sortedNums[i]] = leftOps + rightOps;\n    }\n\n    for (int i = 0; i &lt; n; i++) {\n        cout &lt;&lt; opsMap[nums[i]] &lt;&lt; endl;\n    }\n}\n</code></pre>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#24-03-09","title":"24-03-09 \u7f8e\u56e2\u540e\u7aef\u5c97\u7b14\u8bd5","text":""},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#1-mt","title":"1. MT","text":"<p>\u9898\u76ee\u63cf\u8ff0 MT \u662f\u5f00\u6c34\u7684\u7f29\u5199\uff0c\u56e0\u6b64\u5c0f\u76d6\u5f88\u559c\u6b22\u8fd9\u4e24\u4e2a\u5b57\u6bcd\u3002 \u73b0\u5728\u5c0f\u76d6\u62ff\u5230\u4e86\u4e00\u4e2a\u4ec5\u7531\u5927\u5199\u5b57\u6bcd\u7ec4\u6210\u5b57\u7b26\u4e32\uff0c\u5979\u53ef\u4ee5\u6700\u591a\u64cd\u4f5ck\u6b21\uff0c\u6bcf\u6b21\u53ef\u4ee5\u4fee\u6539\u4efb\u610f\u4e00\u4e2a\u5b57\u7b26\u3002\u5c0f\u76d6\u60f3\u77e5\u9053\uff0c\u64cd\u4f5c\u7ed3\u675f\u540e\u6700\u591a\u5171\u6709\u591a\u5c11\u4e2a'M'\u548cT'\u5b57\u7b26?</p> <p>\u8f93\u5165\u63cf\u8ff0 \u7b2c\u4e00\u884c\u8f93\u5165\u4e24\u4e2a\u6b63\u6574\u6570\uff0c\u4ee3\u8868\u5b57\u7b26\u4e32\u957f\u5ea6n\u548c\u64cd\u4f5c\u6b21\u6570k\u3002\u7b2c\u4e8c\u884c\u8f93\u5165\u4e00\u4e2a\u957f\u5ea6\u4e3ak\u7684\u3001\u4ec5\u7531\u5927\u5199\u5b57\u6bcd\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\u30021&lt;=k&lt;=n&lt;=10^5</p> <p>\u8f93\u51fa\u63cf\u8ff0 \u8f93\u51fa\u64cd\u4f5c\u7ed3\u675f\u540e\u6700\u591a\u5171\u6709\u591a\u5c11\u4e2a'M'\u548cT'\u5b57\u7b26</p> <p>\u6837\u4f8b \u8f93\u5165 5 2 MTUAN</p> <p>\u8f93\u51fa 4</p> <p>\u6837\u4f8b\u8bf4\u660e \u4fee\u6539\u7b2c\u4e09\u4e2a\u548c\u7b2c\u4e94\u4e2a\u5b57\u7b26\uff0c\u5f62\u6210\u7684\u5b57\u7b26\u4e32\u4e3aMTTAM\uff0c\u8fd9\u6837\u5171\u6709 4 \u4e2a'M'\u548cT\u2019\u3002</p>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#_26","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>#include&lt;iostream&gt;\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nint main () {\n    int n, k;\n    cin &gt;&gt; n &gt;&gt; k;\n    string s;\n    cin &gt;&gt; s;\n    int sum = 0;\n    for (int i = 0; i &lt; n; i++) {\n        if (s[i] == 'M' || s[i] == 'T') {\n            sum++;\n        }\n    }\n    int ans = (sum + k &gt; n) ? n : sum + k;\n    cout &lt;&lt; ans &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#techguide","title":"techguide\u7b54\u6848","text":"<pre><code>// \u6ce8\u610fcount\u4f7f\u7528\n// \u6ce8\u610fcin.ignore()\u4f7f\u7528\n#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\nint main () {\n    int n, k;\n    cin &gt;&gt; n &gt;&gt; k;\n    cin.ignore();\n    string s;\n    getline(cin, s);\n    int cnt = count(s.begin(), s.end(), 'M') + count(s.begin(), s.end(), 'T');\n    cout &lt;&lt; cnt + min(n - cnt, k) &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#2_4","title":"2. \u6570\u7ec4\u8be2\u95ee","text":"<p>\u9898\u76ee\u63cf\u8ff0 \u5c0f\u76d6\u62ff\u5230\u4e86\u4e00\u4e2a\u7531\u6b63\u6574\u6570\u7ec4\u6210\u7684\u6570\u7ec4\uff0c\u4f46\u5176\u4e2d\u6709\u4e00\u4e9b\u5143\u7d20\u662f\u672b\u77e5\u7684(\u75280\u6765\u8868\u793a)\u3002 \u73b0\u5728\u5c0f\u76d6\u60f3\u77e5\u9053\uff0c\u5982\u679c\u90a3\u4e9b\u672a\u77e5\u7684\u5143\u7d20\u5728\u533a\u95f4[l, r]\u8303\u56f4\u5185\u968f\u673a\u53d6\u503c\u7684\u8bdd\uff0c\u6570\u7ec4\u6240\u6709\u5143\u7d20\u4e4b\u548c\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u5206\u522b\u662f\u591a\u5c11? \u5171\u6709q\u6b21\u8be2\u95ee\u3002</p> <p>\u8f93\u5165\u63cf\u8ff0 \u7b2c\u4e00\u884c\u8f93\u5165\u4e24\u4e2a\u6b63\u6574\u6570n,q\uff0c\u4ee3\u8868\u6570\u7ec4\u5927\u5c0f\u548c\u8be2\u95ee\u6b21\u6570\u3002 \u7b2c\u4e8c\u884c\u8f93\u5165n\u4e2a\u6574\u6570ai\uff0c\u5176\u4e2d\u5982\u679c\u8f93\u5165ai\u7684\u4e3a0\uff0c\u90a3\u4e48\u8bf4\u660eai\u662f\u672a\u77e5\u7684\u3002 \u63a5\u4e0b\u6765\u7684q\u884c\uff0c\u6bcf\u884c\u8f93\u5165\u4e24\u4e2a\u6b63\u6574\u6570r\uff0c\u4ee3\u8868\u4e00\u6b21\u8be2\u95ee\u3002</p> <p>\u8f93\u51fa\u63cf\u8ff0 \u8f93\u51faq\u884c\uff0c\u6bcf\u884c\u8f93\u51fa\u4e24\u4e2a\u6b63\u6574\u6570\uff0c\u4ee3\u8868\u6240\u6709\u5143\u7d20\u4e4b\u548c\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u3002</p> <p>\u6837\u4f8b \u8f93\u5165 3 2 1 0 3 1 2 4 4 \u8f93\u51fa 5 6 8 8 \u6837\u4f8b\u8bf4\u660e \u53ea\u6709\u7b2c\u4e8c\u4e2a\u5143\u7d20\u662f\u672a\u77e5\u7684\u3002 \u7b2c\u4e00\u6b21\u8be2\u95ee\uff0c\u6570\u7ec4\u6700\u5c0f\u7684\u548c\u662f 1+1=3=5\u6700\u5927\u7684\u548c\u662f 1+2+3=6 \u7b2c\u4e8c\u6b21\u8be2\u95ee\uff0c\u663e\u7136\u6570\u7ec4\u7684\u5143\u7d20\u548c\u5fc5\u7136\u4e3a 8.</p>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#_27","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main () {\n    int n, q;\n    cin &gt;&gt; n &gt;&gt; q;\n    int sum = 0, number = 0;\n    for (int i = 0; i &lt; n; i++) {\n        int j;\n        cin &gt;&gt; j;\n        if (j == 0) {\n            number++;\n        }\n        else {\n            sum += j;\n        }\n    }\n    int l, r;\n    while (q--) {\n        cin &gt;&gt; l &gt;&gt; r;\n        cout &lt;&lt; sum + number * l &lt;&lt; ' ' &lt;&lt; sum + number * r &lt;&lt; endl;\n    }\n    return 0\n}\n</code></pre>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#techguide_1","title":"techguide\u7b54\u6848","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nint countZeros(const vector&lt;int&gt; &amp; array) {\n    int zeros = 0;\n    for (int num : array) {\n        if (num == 0) {\n            zeros++;\n        }\n    }\n    return zeros;\n}\n\nint sumArray(const vector&lt;int&gt;&amp; array) {\n    int sum = 0;\n    for (int num : array) {\n        sum += num;\n    }\n    return sum;\n}\n\n\nint main () {\n    int n, q;\n    cin &gt;&gt; n &gt;&gt; q;\n    vector&lt;int&gt; A(n);\n    for (int i = 0; i &lt; n; i++) cin &gt;&gt; A[i];\n\n    int zeros = countZeros(A);\n    int sum = sumArray(A);\n    // cout &lt;&lt; \"----\" &lt;&lt;endl;\n\n    for (int i = 0; i &lt; q; i++) {\n        int l, r;\n        cin &gt;&gt; l &gt;&gt; r;\n        cout &lt;&lt; (sum + zeros * l) &lt;&lt; \" \" &lt;&lt; sum + zeros * r &lt;&lt; endl;\n    }\n    return 0;\n}\n</code></pre>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#3_3","title":"3. \u5e73\u8861\u77e9\u9635","text":"<p>\u9898\u76ee\u63cf\u8ff0 \u5c0f\u76d6\u62ff\u5230\u4e86\u4e00\u4e2a<code>n*n</code> \u7684\u77e9\u9635\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5143\u7d20\u662f 0\u6216\u8005 1\u3002 \u5c0f\u76d6\u8ba4\u4e3a\u4e00\u4e2a\u77e9\u5f62\u533a\u57df\u662f\u5b8c\u7f8e\u7684\uff0c\u5f53\u4e14\u4ec5\u5f53\u8be5\u533a\u57df\u5185 0 \u7684\u6570\u91cf\u6070\u597d\u7b49\u4e8e1\u7684\u6570\u91cf\u3002 \u73b0\u5728\uff0c\u5c0f\u76d6\u5e0c\u671b\u4f60\u56de\u7b54\u6709\u591a\u5c11\u4e2a<code>i*i</code>\u7684\u5b8c\u7f8e\u77e9\u5f62\u533a\u57df\u3002\u4f60\u9700\u8981\u56de\u7b541&lt;=i&lt;=n\u7684\u6240\u6709\u7b54\u6848\u3002</p> <p>\u8f93\u5165\u63cf\u8ff0 \u7b2c\u4e00\u884c\u8f93\u5165\u4e00\u4e2a\u6b63\u6574\u6570n\uff0c\u4ee3\u8868\u77e9\u9635\u5927\u5c0f\u3002\u63a5\u4e0b\u6765\u7684n\u884c\uff0c\u6bcf\u884c\u8f93\u5165\u4e00\u4e2a\u957f\u5ea6\u4e3an\u768401\u4e32\uff0c\u7528\u6765\u8868\u793a\u77e9\u9635\u3002</p> <p>\u8f93\u51fa\u63cf\u8ff0 \u8f93\u51fan\u884c\uff0c\u7b2ci\u884c\u8f93\u51fa\u7684i * i\u5b8c\u7f8e\u77e9\u5f62\u533a\u57df\u7684\u6570\u91cf\u3002</p> <p>\u6837\u4f8b</p> <p>\u8f93\u5165 4 1010 0101 1100 0011</p> <p>\u8f93\u51fa 0 7 0 1</p>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#_28","title":"\u81ea\u5df1\u7b54\u6848","text":"<pre><code>// \u533a\u57df\u51850\u7684\u6570\u91cf\u548c1\u7684\u6570\u91cf\u76f8\u7b49\uff0c\u76f8\u5f53\u4e8en\u4e2a\u6570\u7684\u533a\u57df\u548c\u4e3an / 2\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint main () {\n    int n;\n    cin &gt;&gt; n;\n    vector&lt;vector&lt;int&gt;&gt; array(n + 1, vector&lt;int&gt;(n + 1));\n    // for (int i = 1; i &lt;= n; i++) {\n    //     for (int j = 1; j &lt;= n; j++) {\n    //         cin &gt;&gt; array[i][j];\n    //     }\n    // }\n\n    for (int i = 1; i &lt;= n; i++) {\n        string s;\n        cin &gt;&gt; s;\n        for (int j = 1; j &lt;= n; j++) {\n            array[i][j] = s[j - 1] - '0';\n        }\n    }\n\n    // cout &lt;&lt; \"111111111111\" &lt;&lt; endl;\n    // for (int i = 1; i &lt;= n; i++) {\n    //     for (int j = 1; j &lt;= n; j++) {\n    //         cout &lt;&lt; array[i][j] &lt;&lt; ' ';\n    //     }\n    //     cout &lt;&lt; endl;\n    // }\n    // cout &lt;&lt; \"2222222222222\" &lt;&lt; endl;\n\n    vector&lt;vector&lt;int&gt;&gt; pre(n + 1, vector&lt;int&gt;(n + 1, 0));\n    for (int i = 1; i &lt;= n; i++) {\n        for (int j = 1; j &lt;= n; j++) {\n            pre[i][j] = pre[i - 1][j] + pre[i][j - 1] - pre[i - 1][j - 1] + array[i][j];\n        }\n    }\n\n    // cout &lt;&lt; \"111111111111\" &lt;&lt; endl;\n    // for (int i = 1; i &lt;= n; i++) {\n    //     for (int j = 1; j &lt;= n; j++) {\n    //         cout &lt;&lt; pre[i][j] &lt;&lt; ' ';\n    //     }\n    //     cout &lt;&lt; endl;\n    // }\n    // cout &lt;&lt; \"2222222222222\" &lt;&lt; endl;\n\n    vector&lt;int&gt; ans(n + 1);\n    for (int i = 1; i &lt;= n; i++) {\n        for (int j = 1; j &lt;= n; j++) {\n            for (int k = 1; i + k - 1&lt;= n; k++) {\n                // (i, j) (i + k - 1, j + k - 1)\n                int c = i + k - 1, d = j + k - 1;\n                int sum = pre[c][d] - pre[c][j - 1] - pre[i - 1][d] + pre[i - 1][j - 1];\n                if (sum * 2 == k * k) {\n                    ans[k]++;\n                }\n            }\n        }\n    }\n    for (int i = 1; i &lt;= n; i++) {\n        cout &lt;&lt; ans[i] &lt;&lt; endl;\n    }\n    return 0;\n}\n</code></pre>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#techguide_2","title":"techguide","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\nusing namespace std;\n\nint getSubMatrix(vector&lt;vector&lt;int&gt;&gt;&amp; pre, int x1, int y1, int x2, int y2) {\n    return pre[x2 + 1][y2 + 1] - pre[x1][y2 + 1] - pre[x2 + 1][y1] + pre[x1][y1];\n}\n\nint main() {\n    int n;\n    cin &gt;&gt; n;\n    vector&lt;vector&lt;int&gt;&gt; matrix(n, vector&lt;int&gt;(n));\n\n    for (int i = 0; i &lt; n; i++) {\n        string row;\n        cin &gt;&gt; row;\n        for (int j = 0; j &lt; n; j++) {\n            matrix[i][j] = row[j] - '0';\n        }\n    }\n\n    vector&lt;vector&lt;int&gt;&gt; pre(n + 1, vector&lt;int&gt;(n + 1, 0));\n    for (int i = 1; i &lt;= n; i++) {\n        for (int j = 1; j &lt;= n; j++) {\n            pre[i][j] = pre[i - 1][j] + pre[i][j - 1] - pre[i - 1][j - 1] + matrix[i - 1][j - 1];\n        }\n    }\n\n    vector&lt;int&gt; ans(n, 0);\n    for (int i = 0; i &lt; n; i++) {\n        for (int j = 0; j &lt; n; j++) {\n            for (int k = 0; k &lt; n; k++) {\n                if (i + k &gt;= n || j + k &gt;= n) break;\n\n                int subMatrix = getSubMatrix(pre, i, j, i + k, j + k);\n                if (subMatrix * 2 == (k + 1) * (k + 1)) {\n                    ans[k]++;\n                }\n            }\n        }\n    }\n\n    for (int a : ans) {\n        cout &lt;&lt; a &lt;&lt; endl;\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#4_3","title":"4. \u533a\u95f4\u5220\u9664","text":"<p>\u9898\u76ee\u63cf\u8ff0 \u5c0f\u76d6\u62ff\u5230\u4e86\u4e00\u4e2a\u5927\u5c0f\u4e3an\u7684\u6570\u7ec4\uff0c\u5979\u5e0c\u671b\u5220\u9664\u4e00\u4e2a\u533a\u95f4\u540e\uff0c\u4f7f\u5f97\u5269\u4f59\u6240\u6709\u5143\u7d20\u7684\u4e58\u79ef\u672b\u5c3e\u81f3\u5c11\u6709k\u4e2a 0\u3002\u5c0f\u76d6\u60f3\u77e5\u9053\uff0c\u4e00\u5171\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u5220\u9664\u65b9\u6848?</p> <p>\u8f93\u5165\u63cf\u8ff0 \u7b2c\u4e00\u884c\u8f93\u5165\u4e24\u4e2a\u6b63\u6574\u6570n\uff0ck\u3002\u7b2c\u4e8c\u884c\u8f93\u5165n\u4e2a\u6b63\u6574\u6570ai\uff0c\u4ee3\u8868\u5c0f\u76d6\u62ff\u5230\u7684\u6570\u7ec4\u3002</p> <p>\u8f93\u51fa\u63cf\u8ff0 \u4e00\u4e2a\u6574\u6570\uff0c\u4ee3\u8868\u5220\u9664\u7684\u65b9\u6848\u6570\u3002</p> <p>\u6837\u4f8b \u8f93\u5165 5 2 2 5 3 4 20</p> <p>\u8f93\u51fa 4</p> <p>\u6837\u4f8b\u8bf4\u660e \u7b2c\u4e00\u4e2a\u65b9\u6848\uff0c\u5220\u9664[3]\u3002 \u7b2c\u4e8c\u4e2a\u65b9\u6848\uff0c\u5220\u9664[4]\u3002 \u7b2c\u4e09\u4e2a\u65b9\u6848\uff0c\u5220\u9664[3,4]\u3002 \u7b2c\u56db\u4e2a\u65b9\u6848\uff0c\u5220\u9664[2]\u3002</p>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#on2","title":"\u6211\u7684\u7b54\u6848\uff08\u4f7f\u7528\u6700\u7b80\u5355\u7684\u65b9\u6cd5\uff0c\u4f46\u662f\u65f6\u95f4\u590d\u6742\u5ea6\u9ad8 O(n^2)\uff0c\u8bf4\u660e\u6027\u8d28\u5206\u6790\u9519\u8bef\uff09","text":"<pre><code>// \u5206\u6790\u6027\u8d28\uff1a\n// k\u4e2a0\u4ee3\u8868multiplication % (pow(10, k)) = 0\n\n// \u533a\u95f4\u90a3\u4e48\u5c31\u6ed1\u52a8\u7a97\u53e3\uff0c\u521b\u9020\u533a\u95f4\n// \u5982\u679c\u52301\u4e2a\u6570\uff0c\u4e0d\u80fd\u6210\u7acb\u7684\u65f6\u5019\uff0c\u90a3\u4e48\u4ed6\u7684\u540e\u9762\u7684\u6570\u5b57\u90fd\u4e0d\u80fd\u6210\u7acb\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;algorithm&gt;\n#include &lt;math.h&gt;\ntypedef long long LL;\nusing namespace std;\n\nint main () {\n    int n, k;\n    cin &gt;&gt; n &gt;&gt; k;\n    vector&lt;int&gt; a(n);\n    LL mul = 1;\n    int ans = 0;\n    for (int i = 0; i &lt; n; i++) {\n        cin &gt;&gt; a[i];\n        mul *= a[i];\n    }\n    int div = pow(10, k);\n    for (int i = 0; i &lt; n; i++) {\n        int temp = mul;\n        for (int j = i; j &lt; n; j++) {\n            temp /= a[j];\n            if (temp % div == 0) ans++;\n            else break;\n        }\n    }\n    cout &lt;&lt; ans &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#2_5","title":"\u6211\u7684\u7b54\u68482\u9700\u8981\u4fee\u6539\uff01\uff01\uff01","text":"<pre><code>// \u672b\u5c3e\u81f3\u5c11\u6709k\u4e2a0\n// \u5c31\u76f8\u5f53\u4e8e\u6240\u6709\u7684\u56e0\u6570\u4e2d\u81f3\u5c11\u6709k\u4e2a2\u548ck\u4e2a5\n\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint getFactor2 (int n) {\n    int f2 = 0;\n    while (n % 2 == 0) {\n        n /= 2;\n        f2++;\n    }\n    return f2;\n}\n\nint getFactor5(int n) {\n    int f5 = 0;\n    while (n % 5 == 0) {\n        n /= 5;\n        f5++;\n    }\n    return f5;\n}\n\nint binarySearch(vector&lt;int&gt;&amp; pres, int target) {\n    int l = 0, r = pres.size() - 1;\n    while (l &lt; r) {\n        int mid = l + r + 1 &gt;&gt; 1;\n        int x = pres[mid];\n        if (x &gt; target) {\n            r = mid - 1;\n        }\n        else l = mid;\n    }\n    return l;\n} \n\nint main () {\n    int n, k;\n    cin &gt;&gt; n &gt;&gt; k;\n    vector&lt;int&gt; A(n + 1);\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; A[i];\n    }\n\n    vector&lt;int&gt; pres2(n + 1);\n    vector&lt;int&gt; pres5(n + 1);\n\n    // cout &lt;&lt; getFactor2(200) &lt;&lt; getFactor5(200) &lt;&lt; endl;\n    int all2 = 0, all5 = 0;\n    for (int i = 1; i &lt;= n; i++) {\n        int f2 = getFactor2(A[i]);\n        pres2[i] = pres2[i - 1] + f2;\n        all2 += f2;\n        int f5 = getFactor5(A[i]);\n        pres5[i] = pres5[i - 1] + f5;\n        all5 += f5;\n    }\n\n    // cout &lt;&lt; all2 &lt;&lt; all5 &lt;&lt; endl;\n    // for (int i = 1; i &lt;= n; i++) {\n    //     cout &lt;&lt; pres2[i] &lt;&lt; ' ' &lt;&lt; pres5[i] &lt;&lt; endl;\n    // }\n\n    // \u9700\u8981\u627e\u5230\u7684\u662f\u5c0f\u4e8e\u7b49\u4e8e\u8fd9\u4e2a\u503c\u7684\u4f4d\u7f6e\n    int ans = 0;\n    for (int i = 1; i &lt;= n; i++) {\n\n        int p2 = binarySearch(pres2, all2 + pres2[i] - k);\n        // cout &lt;&lt; \"i = \" &lt;&lt; i &lt;&lt; ' ' &lt;&lt; \"p2 = \" &lt;&lt; p2 &lt;&lt; endl;\n        int p5 = binarySearch(pres5, all5 + pres5[i] - k);\n        // cout &lt;&lt; \"i = \" &lt;&lt; i &lt;&lt; ' ' &lt;&lt; \"p5 = \" &lt;&lt; p5 &lt;&lt; endl;\n        cout &lt;&lt; \"i = \" &lt;&lt; i &lt;&lt; min(p2, p5) &lt;&lt; endl;\n        ans += min(p2, p5) - i + 1;\n    }\n    cout &lt;&lt; ans &lt;&lt;endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#5_3","title":"5. \u670b\u53cb\u5173\u7cfb","text":"<p>\u9898\u76ee\u63cf\u8ff0 \u5c0f\u76d6\u8ba4\u4e3a\uff0c\u5728\u4eba\u9645\u4ea4\u5f80\u4e2d\uff0c\u4f46\u662f\u968f\u7740\u65f6\u95f4\u7684\u6d41\u901d\uff0c\u670b\u53cb\u7684\u5173\u7cfb\u4e5f\u662f\u4f1a\u6162\u6162\u53d8\u6de1\u7684\uff0c\u6700\u7ec8\u670b\u53cb\u5173\u7cfb\u5c31\u6de1\u5fd8\u4e86\u3002 \u73b0\u5728\u521d\u59cb\u6709\u4e00\u4e9b\u670b\u53cb\u5173\u7cfb\uff0c\u5b58\u5728\u4e00\u4e9b\u4e8b\u4ef6\u4f1a\u5bfc\u81f4\u4e24\u4e2a\u4eba\u6de1\u5fd8\u4e86\u4ed6\u4eec\u7684\u670b\u53cb\u5173\u7cfb\u3002\u5c0f\u76d6\u60f3\u77e5\u9053\u67d0\u4e00\u65f6\u523b\u4e2d\uff0c\u67d0\u4e24\u4eba\u662f\u5426\u53ef\u4ee5\u901a\u8fc7\u670b\u53cb\u4ecb\u7ecd\u4e92\u76f8\u8ba4\u8bc6? \u4e8b\u4ef6\u5171\u6709 2 \u79cd 1 u v:\u4ee3\u8868\u7f16\u53f7u\u7684\u4eba\u548c\u7f16\u53f7v\u7684\u4eba\u6de1\u5fd8\u4e86\u4ed6\u4eec\u7684\u670b\u53cb\u5173\u7cfb 2 u v:\u4ee3\u8868\u5c0f\u76d6\u67e5\u8be2\u7f16\u53f7u\u7684\u4eba\u548c\u7f16\u53f7 v\u7684\u4eba\u662f\u5426\u80fd\u901a\u8fc7\u670b\u53cb\u4ecb\u7ecd\u4e92\u76f8\u8ba4\u8bc6\u3002 \u6ce8:\u4ecb\u7ecd\u53ef\u4ee5\u6709\u591a\u5c42\uff0c\u6bd4\u5982 2\u53f7\u628a1\u53f7\u4ecb\u7ecd\u7ed93\u53f7\uff0c\u7136\u540e3\u53f7\u518d\u628a1\u53f7\u4ecb\u7ecd\u7ed94\u53f7\uff0c\u8fd9\u68371\u53f7\u548c 4\u53f7\u5c31\u8ba4\u8bc6\u4e86\u3002</p> <p>\u8f93\u5165\u63cf\u8ff0 \u7b2c\u4e00\u884c\u8f93\u5165\u4e09\u4e2a\u6b63\u6574\u6570n,m\uff0cq\uff0c\u4ee3\u8868\u603b\u4eba\u6570\uff0c\u521d\u59cb\u7684\u670b\u53cb\u5173\u7cfb\u6570\u91cf\uff0c\u53d1\u751f\u7684\u4e8b\u4ef6\u6570\u91cf\u3002\u63a5\u4e0b\u6765\u7684m\u884c\uff0c\u6bcf\u884c\u8f93\u5165\u4e24\u4e2a\u6b63\u6574\u6570uv\uff0c\u4ee3\u8868\u521d\u59cb\u7f16\u53f7u\u7684\u4eba\u548c\u7f16\u53f7v\u7684\u4eba\u662f\u670b\u53cb\u5173\u7cfb\u3002\u63a5\u4e0b\u6765\u7684q\u884c\uff0c\u6bcf\u884c\u8f93\u5165\u4e09\u4e2a\u6b63\u6574\u6570p,u,V\uff0c\u542b\u4e49\u5982\u9898\u76ee\u63cf\u8ff0\u6240\u8ff0\u3002## \u8f93\u51fa\u63cf\u8ff0\u4e00\u4e2a\u6574\u6570\uff0c\u4ee3\u8868\u5220\u9664\u7684\u65b9\u6848\u6570\u3002</p> <p>\u8f93\u5165\u63cf\u8ff0 \u5bf9\u4e8e\u6bcf\u6b21 2 \u53f7\u64cd\u4f5c\uff0c\u8f93\u51fa\u4e00\u884c\u5b57\u7b26\u4e32\u4ee3\u8868\u67e5\u8be2\u7684\u7b54\u6848\u3002\u5982\u679c\u7f16\u53f7u\u7684\u4eba\u548c\u7f16\u53f7v\u7684\u4eba\u80fd\u901a\u8fc7\u670b\u53cb\u4ecb\u7ecd\u4e92\u76f8\u8ba4\u8bc6\uff0c\u5219\u8f93\u51fa\"Yes\"\u3002\u5426\u5219\u8f93\u51fa\"NO\u201d\u3002</p> <p>\u6837\u4f8b \u8f93\u5165 5 3 5 1 2 2 3 4 5 1 1 5 2 1 3 2 1 4 1 1 2 2 1 3</p> <p>\u8f93\u51fa Yes No No</p> <p>\u6837\u4f8b\u8bf4\u660e \u7b2c\u4e00\u6b21\u4e8b\u4ef6\uff0c1\u53f7\u548c5\u53f7\u672c\u6765\u5c31\u4e0d\u662f\u670b\u53cb\u6240\u4ee5\u65e0\u4e8b\u53d1\u751f\u3002 \u7b2c\u4e8c\u6b21\u4e8b\u4ef6\u662f\u8be2\u95ee\uff0c1\u53f7\u548c3\u53f7\u53ef\u4ee5\u901a\u8fc7 2\u53f7\u7684\u4ecb\u7ecd\u8ba4\u8bc6\u3002 \u7b2c\u4e09\u6b21\u4e8b\u4ef6\u662f\u8be2\u95ee\uff0c\u663e\u71361\u53f7\u548c 4\u53f7\u65e0\u6cd5\u4e92\u76f8\u8ba4\u8bc6\u3002 \u7b2c\u56db\u6b21\u4e8b\u4ef6\uff0c1\u53f7\u548c2 \u53f7\u6de1\u5fd8\u4e86\u3002\u7b2c\u4e94\u6b21\u4e8b\u4ef6\uff0c\u6b64\u65f61\u53f7\u65e0\u6cd5\u518d\u7ecf\u8fc7 2\u53f7\u548c 3\u53f7\u4e92\u76f8\u8ba4\u8bc6\u4e86\u3002</p>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#23-08-19","title":"23-08-19 \u7f8e\u56e2\u540e\u7aef\u5c97\u7b14\u8bd5","text":""},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#1_3","title":"1. \u5916\u5356\u8ba2\u5355\u7f16\u53f7","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint main () {\n    int n;\n    cin &gt;&gt; n;\n    while (n--) {\n        int a, b;\n        cin &gt;&gt; a &gt;&gt; b;\n        int div = b % a;\n        if (div == 0) {\n            cout &lt;&lt; a &lt;&lt; endl;\n        }\n        else cout &lt;&lt; div &lt;&lt; endl;\n    }\n    return 0;\n}\n</code></pre>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#2_6","title":"2. \u52a0\u6cd5","text":"<pre><code>// \u5c06\u4e00\u4e2a\u52a0\u6cd5\u6539\u6210\u4e58\u6cd5\u4e4b\u540e: a + b --&gt; a * b\n// \u90a3\u4e48\u540e\u9762\u548c\u524d\u9762\u7684\u5dee\u503c\u662fa * b - a + b\n// \u53ea\u8981\u5dee\u503c\u6700\u5927\uff0c\u5c31\u662f\u6700\u540e\u6240\u5f97\u5230\u7684\u548c\u6700\u5927\n#include &lt;bits/stdc++.h&gt;\ntypedef long long LL;\nusing namespace std;\n\nint main () {\n    int n;\n    cin &gt;&gt; n;\n    vector&lt;int&gt; a(n);\n    int sum = 0;\n\n    for (int i = 0; i &lt; n; i++) {\n        cin &gt;&gt; a[i];\n        sum += a[i];\n    }\n\n\n    int maxDiff = 0;\n    int c = 0, d = 1;\n    for (int i = 0; i &lt; n - 1; i++) {\n        int j = i + 1;\n        int diff = a[i] * a[j] - (a[i] + a[j]);\n        if (diff &gt; maxDiff) {\n            maxDiff = diff;\n            c = i;\n            d = j;\n        }\n    }\n    cout &lt;&lt; sum - a[c] - a[d] + a[c] * a[d] &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#3-01","title":"3. 01\u4e32\u7ffb\u8f6c","text":"<p>\u9898\u76ee\u63cf\u8ff0 \u5c0f\u76d6\u5b9a\u4e49\u4e00\u4e2a 01 \u4e32\u7684\u6743\u503c\u4e3a:\u6bcf\u6b21\u64cd\u4f5c\u9009\u62e9\u4e00\u4f4d\u53d6\u53cd\uff0c\u4f7f\u5f97\u76f8\u90bb\u5b57\u7b26\u90fd\u4e0d\u76f8\u7b49\u7684\u6700\u5c0f\u64cd\u4f5c\u6b21\u6570\u3002 \u4f8b\u5982\uff0c\"10001\"\u7684\u6743\u503c\u662f 1\uff0c\u56e0\u4e3a\u53ea\u9700\u8981\u4fee\u6539\u4e00\u6b21:\u5bf9\u7b2c\u4e09\u4e2a\u5b57\u7b26\u53d6\u53cd\u5373\u53ef\u3002 \u73b0\u5728\u5c0f\u76d6\u62ff\u5230\u4e86\u4e00\u4e2a 01\u4e32\uff0c\u5979\u5e0c\u671b\u4f60\u6c42\u51fa\u6240\u6709\u975e\u7a7a\u8fde\u7eed\u5b50\u4e32\u7684\u6743\u503c\u4e4b\u548c\uff0c\u4f60\u80fd\u5e2e\u5e2e\u5979\u5417?</p> <p>\u8f93\u5165\u63cf\u8ff0 \u4e00\u4e2a\u4ec5\u5305\u542b'0'\u548c'1'\u7684\u5b57\u7b26\u4e32\uff0c\u957f\u5ea6\u4e0d\u8d85\u8fc7 2000\u3002</p> <p>\u8f93\u51fa\u63cf\u8ff0 \u6240\u6709\u975e\u7a7a\u5b50\u4e32\u7684\u6743\u503c\u548c\u3002</p> <p>\u6837\u4f8b \u8f93\u5165 10001</p> <p>\u8f93\u51fa 8</p> <p>\u6837\u4f8b\u8bf4\u660e \u957f\u5ea6\u4e3a 2 \u7684\u5b50\u4e32\u4e2d\uff0c\u67092\u4e2a\"00\"\u7684\u6743\u503c\u662f1\u3002 \u957f\u5ea6\u4e3a 3 \u7684 3\u4e2a\u5b50\u4e32\u6743\u503c\u90fd\u662f 1\u3002 \u957f\u5ea6\u4e3a 4\u7684 2 \u4e2a\u5b50\u4e32\u6743\u503c\u90fd\u662f 1\u3002\u957f\u5ea6\u4e3a 5 \u76841\u4e2a\u5b50\u4e32\u6743\u503c\u662f 1\u3002\u603b\u6743\u503c\u4e4b\u548c\u4e3a 2+3+2+1=8</p>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#23-03-18","title":"23-03-18 \u7f8e\u56e2\u540e\u7aef\u5c97\u7b14\u8bd5","text":""},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#1_4","title":"1. \u6355\u83b7","text":"<p>\u9898\u76ee\u63cf\u8ff0 \u5c0f\u7f8e\u5728\u73a9\u4e00\u9879\u6e38\u620f\u3002\u8bf7\u8be5\u6e38\u620f\u7684\u76ee\u6807\u662f\u5c3d\u53ef\u80fd\u6293\u83b7\u654c\u4eba\u3002 \u654c\u4eba\u7684\u4f4d\u7f6e\u5c06\u88ab\u4e00\u4e2a\u4e8c\u7ef4\u5750\u6807(x,y)\u6240\u63cf\u8ff0\u3002 \u5c0f\u7f8e\u6709\u4e00\u4e2a\u5168\u5c4f\u6280\u80fd\uff0c\u8be5\u6280\u80fd\u80fd\u4e00\u6b21\u6027\u5c06\u82e5\u5e72\u654c\u4eba\u4e00\u6b21\u6027\u6355\u83b7\u3002 \u6355\u83b7\u7684\u654c\u4eba\u4e4b\u95f4\u7684\u6a2a\u5750\u6807\u7684\u6700\u5927\u5dee\u503c\u4e0d\u80fd\u5927\u4e8eA\uff0c\u7eb5\u5750\u6807\u7684\u6700\u5927\u5dee\u503c\u4e0d\u80fd\u5927\u4e8eB\u3002 \u73b0\u5728\u7ed9\u51fa\u6240\u6709\u654c\u4eba\u7684\u5750\u6807\uff0c\u4f60\u7684\u4efb\u52a1\u662f\u8ba1\u7b97\u5c0f\u7f8e\u4e00\u6b21\u6027\u6700\u591a\u80fd\u4f7f\u7528\u6280\u80fd\u6355\u83b7\u591a\u5c11\u654c\u4eba\u3002</p> <p>\u8f93\u5165\u63cf\u8ff0 \u7b2c\u4e00\u884c\u4e09\u4e2a\u6574\u6570N,A,B\uff0c\u8868\u793a\u5171\u6709N\u4e2a\u654c\u4eba\uff0c\u5c0f\u7f8e\u7684\u5168\u5c4f\u6280\u80fd\u7684\u53c2\u6570A\u548c\u53c2\u6570B\u3002 \u63a5\u4e0b\u6765N\u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6570\u5b57xy\uff0c\u63cf\u8ff0\u4e00\u4e2a\u654c\u4eba\u6240\u5728\u7684\u5750\u6807\u3002 1\u2264N\u2264500\uff0c1\u2264A,B\u22641000\uff0c1\u2264x,y\u22641000\u3002</p> <p>3 1 1 1 1 1 2 1 3</p> <p>\u8f93\u51fa\u63cf\u8ff0 \u4e00\u884c\uff0c\u4e00\u4e2a\u6574\u6570\u8868\u793a\u5c0f\u7f8e\u4f7f\u7528\u6280\u80fd\u5355\u6b21\u6240\u53ef\u4ee5\u6355\u83b7\u7684\u6700\u591a\u6570\u91cf\u3002 2</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint main () {\n    int n, a, b;\n    cin &gt;&gt; n &gt;&gt; a &gt;&gt; b;\n    vector&lt;pair&lt;int, int&gt;&gt; enemies(n);\n    for (int i = 0; i &lt; n; i++) {\n        cin &gt;&gt; enemies[i].first;\n        cin &gt;&gt; enemies[i].second;\n    }\n    // \u5bf9\u654c\u4eba\u7684\u5750\u6807\u8fdb\u884c\u6392\u5e8f\n    // \u5bf9\u7b2c\u4e00\u4e2a\u5b57\u6bb5\u8fdb\u884c\u5347\u5e8f\u6392\u5e8f\n    sort(enemies.begin(), enemies.end());\n\n    int maxSize = 0;\n    // \u4f7f\u7528\u6ed1\u52a8\u7a97\u53e3\u5bfb\u627e\u6700\u5927\u7684\u7b26\u5408\u6761\u4ef6\u7684\u654c\u4eba\u96c6\u5408\n    for (int i = 0; i &lt; n; i++) {\n        for (int j = i; j &lt; n; j++) {\n            // \u68c0\u67e5\u5f53\u524d\u7a97\u53e3\u5185\u7684\u654c\u4eba\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\n            if (abs(enemies[j].first - enemies[i].first) &lt;= a &amp;&amp; \n                abs(enemies[j].second - enemies[i].second) &lt;= b) {\n                maxSize = max(maxSize, j - i + 1);\n            }\n            else break;\n        }\n    }\n    cout &lt;&lt; maxSize &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#2_7","title":"2. \u5f69\u5e26","text":"<p>\u9898\u76ee\u63cf\u8ff0 \u5c0f\u7f8e\u73b0\u5728\u6709\u4e00\u4e32\u5f69\u5e26\uff0c\u5047\u5b9a\u6bcf\u4e00\u5398\u7c73\u7684\u5f69\u5e26\u4e0a\u90fd\u662f\u4e00\u79cd\u8272\u5f69\u3002 \u56e0\u4e3a\u4efb\u52a1\u7684\u9700\u8981\uff0c\u5c0f\u7f8e\u5e0c\u671b\u4ece\u5f69\u5e26\u4e0a\u622a\u53d6\u4e00\u6bb5\uff0c\u4f7f\u5f97\u5f69\u5e26\u4e2d\u7684\u989c\u8272\u6570\u91cf\u4e0d\u8d85\u8fc7K\u79cd\u3002 \u663e\u7136\uff0c\u8fd9\u6837\u7684\u622a\u53d6\u65b9\u6cd5\u53ef\u80fd\u975e\u5e38\u591a\u3002\u4e8e\u662f\u5c0f\u7f8e\u51b3\u5b9a\u5c3d\u91cf\u957f\u5730\u622a\u53d6\u4e00\u6bb5\u3002 \u4f60\u7684\u4efb\u52a1\u662f\u5e2e\u52a9\u5c0f\u7f8e\u622a\u53d6\u5c3d\u91cf\u957f\u7684\u4e00\u6bb5\uff0c\u4f7f\u5f97\u8fd9\u6bb5\u5f69\u5e26\u4e0a\u4e0d\u540c\u7684\u8272\u5f69\u6570\u91cf\u4e0d\u8d85\u8fc7K\u79cd\u3002</p> <p>\u8f93\u5165\u63cf\u8ff0 \u7b2c\u4e00\u884c\u4e24\u4e2a\u6574\u6570N,K\uff0c\u4ee5\u7a7a\u683c\u5206\u5f00\uff0c\u5206\u522b\u8868\u793a\u5f69\u5e26\u6709N\u5398\u7c73\u957f\uff0c\u4f60\u622a\u53d6\u7684\u4e00\u6bb5\u8fde\u7eed\u7684\u5f69\u5e26\u4e0d\u80fd\u8d85\u8fc7K\u79cd\u989c\u8272\u3002 \u63a5\u4e0b\u6765\u4e00\u884cN\u4e2a\u6574\u6570\uff0c\u6bcf\u4e2a\u6574\u6570\u8868\u793a\u4e00\u79cd\u8272\u5f69\uff0c\u76f8\u540c\u7684\u6574\u6570\u8868\u793a\u76f8\u540c\u7684\u8272\u5f69\u3002 1\u2264N,K\u22645000\uff0c\u5f69\u5e26\u4e0a\u7684\u989c\u8272\u6570\u5b57\u4ecb\u4e8e[1,2000]\u4e4b\u95f4\u3002</p> <p>8 3 1 2 3 2 1 4 5 1 \u8f93\u51fa\u63cf\u8ff0 \u4e00\u884c\uff0c\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u9009\u53d6\u7684\u5f69\u5e26\u7684\u6700\u5927\u957f\u5ea6\u3002 5</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint main () {\n    int n, k;\n    cin &gt;&gt; n &gt;&gt; k;\n    vector&lt;int&gt; a(n);\n    for (int i = 0; i &lt; n; i++) {\n        cin &gt;&gt; a[i];\n    }\n    int l = 0, r = 0;\n    vector&lt;int&gt; b(n);\n    int type = 0;\n    // \u4ee5r\u4e3a\u7ed3\u5c3e\u7684\u533a\u95f4\n    // r\u4e00\u4f4d\u4e00\u4f4d\u5730\u79fb\u52a8\uff0c\u7136\u540el\u4f5c\u4e3a\u8c03\u6574\n    int cnt = 0;\n    int res = 0;\n    while (r &lt; n) {\n        int n = a[r];\n        b[n]++;\n        if (b[n] == 1) {\n            cnt++;\n        }\n        while (cnt &gt; k) {\n            int lNum = a[l];\n            b[l]--;\n            if (b[l] == 0) {\n                cnt--;\n            }\n            l++;\n        }\n        res = max(res, r - l + 1);\n        r++;\n    }\n    cout &lt;&lt; res &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#3_4","title":"3. \u56de\u6587\u4e32","text":"<p>\u9898\u76ee\u63cf\u8ff0 \u73b0\u5728\u5c0f\u7f8e\u83b7\u5f97\u4e86\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002\u5c0f\u7f8e\u60f3\u8981\u4f7f\u5f97\u8fd9\u4e2a\u5b57\u7b26\u4e32\u662f\u56de\u6587\u4e32\u3002 \u5c0f\u7f8e\u627e\u5230\u4e86\u4f60\u3002\u4f60\u53ef\u4ee5\u5c06\u5b57\u7b26\u4e32\u4e2d\u81f3\u591a\u4e24\u4e2a\u4f4d\u7f6e\u6539\u4e3a\u4efb\u610f\u5c0f\u5199\u82f1\u6587\u5b57\u7b26'a'-'z' \u4f60\u7684\u4efb\u52a1\u662f\u5e2e\u52a9\u5c0f\u7f8e\u5728\u5f53\u524d\u5236\u7ea6\u4e0b\uff0c\u83b7\u5f97\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u56de\u6587\u5b57\u7b26\u4e32\u3002 \u6570\u636e\u4fdd\u8bc1\u80fd\u5728\u9898\u76ee\u9650\u5236\u4e0b\u5f62\u6210\u56de\u6587\u5b57\u7b26\u4e32\u3002 \u6ce8:\u56de\u6587\u5b57\u7b26\u4e32:\u5373\u4e00\u4e2a\u5b57\u7b26\u4e32\u4ece\u524d\u5411\u540e\u548c\u4ece\u540e\u5411\u524d\u662f\u5b8c\u5168\u4e00\u81f4\u7684\u5b57\u7b26\u4e32\u3002 \u4f8b\u5982\u5b57\u7b26\u4e32abcba,aaaa,acca\u90fd\u662f\u56de\u6587\u5b57\u7b26\u4e32\u3002\u5b57\u7b26\u4e32abcd,acea\u90fd\u4e0d\u662f\u56de\u6587\u5b57\u7b26\u4e32\uff0c</p> <p>\u8f93\u5165\u63cf\u8ff0 \u4e00\u884c\uff0c\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002\u5b57\u7b26\u4e32\u4e2d\u4ec5\u7531\u5c0f\u5199\u82f1\u6587\u5b57\u7b26\u6784\u6210\u3002 \u4fdd\u8bc1\u5b57\u7b26\u4e32\u4e0d\u4f1a\u662f\u7a7a\u5b57\u7b26\u4e32\u3002 \u5b57\u7b26\u4e32\u957f\u5ea6\u4ecb\u4e8e[1,100000]\u4e4b\u95f4\u3002</p> <p>acca</p> <p>\u8f93\u51fa\u63cf\u8ff0 \u4e00\u884c\uff0c\u4e00\u4e2a\u5728\u9898\u76ee\u6761\u4ef6\u9650\u5236\u4e0b\u6240\u53ef\u4ee5\u83b7\u5f97\u7684\u4e00\u884c,\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u56de\u6587\u5b57\u7b26\u4e32\u3002 aaaa</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;algorithm&gt;\n\nusing namespace std;\n\nint main() {\n    string str;\n    cin &gt;&gt; str;\n    vector&lt;char&gt; s(str.begin(), str.end());\n    int l = 0;\n    int r = s.size() - 1;\n    int res = 2;\n    vector&lt;vector&lt;int&gt;&gt; tmp;\n    while (l &lt; r) {\n        if (s[l] != s[r]) {\n            tmp.push_back({l,r});\n        }\n        l++;\n        r--;\n    }\n    if (tmp.size() == 2) {\n        s[tmp[0][0]] = min(s[tmp[0][0]],s[tmp[0][1]]);\n        s[tmp[0][1]] = min(s[tmp[0][0]],s[tmp[0][1]]);\n        s[tmp[1][0]] = min(s[tmp[1][0]],s[tmp[1][1]]);\n        s[tmp[1][1]] = min(s[tmp[1][0]],s[tmp[1][1]]);\n    } else if (tmp.size() == 1) {\n        char c = min(s[tmp[0][0]],s[tmp[0][1]]);\n        if (c != 'a') {\n            s[tmp[0][0]] = 'a';\n            s[tmp[0][1]] = 'a';\n        } else {\n            s[tmp[0][0]] = 'a';\n            s[tmp[0][1]] = 'a';\n            if (s.size() % 2 == 1) {\n                s[s.size() / 2] = 'a';\n            }\n        }\n    } else {\n        l = 0;\n        r = s.size() - 1;\n        int cnt = 2;\n        while (cnt &gt; 0 &amp;&amp; l &lt;= r) {\n            if (s[l] != 'a') {\n                s[l] = 'a';\n                s[r] = 'a';\n                cnt -= 2;\n            }\n            l++;\n            r--;\n        }\n    }\n    for (auto ch : s) {\n        cout &lt;&lt; ch;\n    }\n    return 0;\n}\n</code></pre>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#4_4","title":"4. \u5546\u5e97","text":"<p>\u9898\u76ee\u63cf\u8ff0 \u73b0\u5728\u5546\u5e97\u91cc\u6709N\u4e2a\u7269\u54c1\uff0c\u6bcf\u4e2a\u7269\u54c1\u6709\u539f\u4ef7\u548c\u6298\u6263\u4ef7\u3002 \u5c0f\u7f8e\u60f3\u8981\u8d2d\u4e70\u5546\u54c1\u3002\u5c0f\u7f8e\u62e5\u6709X\u5143\uff0c\u4e00\u5171Y\u5f20\u6298\u6263\u5238\u3002 \u5c0f\u7f8e\u9700\u8981\u6700\u5927\u5316\u8d2d\u4e70\u5546\u54c1\u7684\u6570\u91cf\uff0c\u5e76\u5728\u6240\u8d2d\u5546\u54c1\u6570\u91cf\u5c3d\u91cf\u591a\u7684\u524d\u63d0\u4e0b\uff0c\u5c3d\u91cf\u51cf\u5c11\u82b1\u8d39\u3002\u4f60\u7684\u4efb\u52a1\u662f\u5e2e\u52a9\u5c0f\u7f8e\u6c42\u51fa\u6700\u4f18\u60c5\u51b5\u4e0b\u7684\u5546\u54c1\u8d2d\u4e70\u6570\u91cf\u548c\u82b1\u8d39\u7684\u94b1\u6570\u3002</p> <p>\u8f93\u5165\u63cf\u8ff0 \u7b2c\u4e00\u884c\u4e09\u4e2a\u6574\u6570\uff0c\u4ee5\u7a7a\u683c\u5206\u5f00\uff0c\u5206\u522b\u8868\u793aN,X,Y. \u63a5\u4e0b\u6765N\u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6574\u6570\uff0c\u4ee5\u7a7a\u683c\u5206\u5f00\u8868\u793a\u4e00\u4e2a\u7684\u539f\u4ef7\u548c\u6298\u6263\u4ef7\u3002 1\u2264N\u2264100,1\u2264X\u22645000,1\u2264Y&lt;50\uff0c\u6bcf\u4e2a\u5546\u54c1\u539f\u4ef7\u548c\u6298\u6263\u4ef7\u5747\u4ecb\u4e8e[1,50]\u4e4b\u95f4\u3002</p> <p>3 5 1</p> <p>4 3</p> <p>3 1</p> <p>6 5</p> <p>\u8f93\u51fa\u63cf\u8ff0 \u4e00\u884c\uff0c\u4e24\u4e2a\u6574\u6570\uff0c\u4ee5\u7a7a\u683c\u5206\u5f00\u3002\u7b2c\u4e00\u4e2a\u6570\u5b57\u8868\u793a\u6700\u591a\u4e70\u51e0\u4e2a\u5546\u54c1\uff0c\u7b2c\u4e8c\u4e2a\u6570\u5b57\u8868\u793a\u5728\u6ee1\u8db3\u5546\u54c1\u5c3d\u91cf\u591a\u7684\u524d\u63d0\u4e0b\u6240\u82b1\u8d39\u7684\u6700\u5c11\u7684\u94b1\u6570\u3002 2 5</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint main () {\n    int n, x, y;\n    cin &gt;&gt; n &gt;&gt; x &gt;&gt; y;\n    vector&lt;pair&lt;int, int&gt;&gt; products(n);\n    for (int i = 0; i &lt; n; i++) {\n        cin &gt;&gt; products[i].first &gt;&gt; products[i].second;\n    }\n\n\n    // dp[i][j][k]\u8868\u793a\u5728\u8003\u8651\u524di\u4e2a\u5546\u54c1\uff0cj\u5f20\u8d2d\u7269\u5238\uff0c\u603b\u5171\u82b1\u8d39k\u5143\u7684\u60c5\u51b5\u4e0b\uff0c\u8d2d\u4e70\u7684\u5546\u54c1\u6570\u91cf\n    sort(products.begin(), products.end(), [](const pair&lt;int, int&gt;&amp; a, const pair&lt;int, int&gt;&amp; b) {\n        return (a.first - a.second) &gt; (b.first - b.second);\n    });\n    return 0;\n}\n</code></pre> <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;algorithm&gt;\n\nusing namespace std;\n\nint main() {\n    int N, X, Y;\n    cin &gt;&gt; N &gt;&gt; X &gt;&gt; Y;\n    vector&lt;pair&lt;int, int&gt;&gt; products(N);\n    for (int i = 0; i &lt; N; ++i) {\n        cin &gt;&gt; products[i].first &gt;&gt; products[i].second; // first\u662f\u539f\u4ef7\uff0csecond\u662f\u6298\u6263\u4ef7\n    }\n\n    // \u5546\u54c1\u6309\u539f\u4ef7\u4e0e\u6298\u6263\u4ef7\u7684\u5dee\u989d\u6392\u5e8f\n    sort(products.begin(), products.end(), [](const pair&lt;int, int&gt;&amp; a, const pair&lt;int, int&gt;&amp; b) {\n        return (a.first - a.second) &gt; (b.first - b.second);\n    });\n\n    // \u521d\u59cb\u5316DP\u6570\u7ec4\n    vector&lt;vector&lt;vector&lt;int&gt;&gt;&gt; dp(N+1, vector&lt;vector&lt;int&gt;&gt;(Y+1, vector&lt;int&gt;(X+1, -1)));\n    dp[0][0][0] = 0;\n\n    for (int i = 1; i &lt;= N; ++i) {\n        int cost = products[i-1].first; // \u539f\u4ef7\n        int discountCost = products[i-1].second; // \u6298\u6263\u4ef7\n        for (int j = 0; j &lt;= Y; ++j) {\n            for (int k = 0; k &lt;= X; ++k) {\n                // \u4e0d\u8d2d\u4e70\u5f53\u524d\u5546\u54c1\n                dp[i][j][k] = max(dp[i][j][k], dp[i-1][j][k]);\n                // \u8d2d\u4e70\u5f53\u524d\u5546\u54c1\uff0c\u4e0d\u4f7f\u7528\u6298\u6263\u5238\n                if (k &gt;= cost) dp[i][j][k] = max(dp[i][j][k], dp[i-1][j][k-cost] + 1);\n                // \u8d2d\u4e70\u5f53\u524d\u5546\u54c1\uff0c\u4f7f\u7528\u6298\u6263\u5238\n                if (j &gt; 0 &amp;&amp; k &gt;= discountCost) dp[i][j][k] = max(dp[i][j][k], dp[i-1][j-1][k-discountCost] + 1);\n            }\n        }\n    }\n\n    int maxItems = 0, minCost = X;\n    for (int j = 0; j &lt;= Y; ++j) {\n        for (int k = 0; k &lt;= X; ++k) {\n            if (dp[N][j][k] &gt; maxItems || (dp[N][j][k] == maxItems &amp;&amp; k &lt; minCost)) {\n                maxItems = dp[N][j][k];\n                minCost = k;\n            }\n        }\n    }\n\n    cout &lt;&lt; maxItems &lt;&lt; \" \" &lt;&lt; minCost &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#5_4","title":"5. \u80fd\u91cf\u5854","text":"<p>\u9898\u76ee\u63cf\u8ff0 \u73b0\u5728\u6709\u82e5\u5e72\u8282\u70b9\u3002\u6bcf\u4e2a\u8282\u70b9\u4e0a\u6709\u80fd\u91cf\u5854\u3002\u6240\u6709\u8282\u70b9\u6784\u6210\u4e00\u68f5\u6811\u3002 \u67d0\u4e2a\u8282\u70b9u\u53ef\u4ee5\u4e3a\u548cu\u8ddd\u79bb\u4e0d\u8d85\u8fc7\u7ed9\u5b9a\u503c\u7684\u8282\u70b9\u5404\u63d0\u4f9b\u4e00\u70b9\u80fd\u91cf\u3002\u6b64\u5904\u8ddd\u79bb\u7684\u5b9a\u4e49\u4e3a\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u7ecf\u8fc7\u7684\u8fb9\u7684\u6570\u91cf\u3002\u7279\u522b\u7684\uff0c\u8282\u70b9u\u5230\u672c\u8eab\u7684\u8ddd\u79bb\u4e3a\u96f6\u3002 \u73b0\u5728\u7ed9\u51fa\u6bcf\u4e2a\u8282\u70b9\u4e0a\u7684\u80fd\u91cf\u5854\u53ef\u4ee5\u4e3a\u591a\u8fdc\u7684\u8ddd\u79bb\u5185\u7684\u70b9\u63d0\u4f9b\u80fd\u91cf\u3002 \u5c0f\u7f8e\u60f3\u8981\u63a2\u7a76\u6bcf\u4e2a\u8282\u70b9\u4e0a\u7684\u80fd\u91cf\u503c\u5177\u4f53\u662f\u591a\u5c11\u3002 \u4f60\u7684\u4efb\u52a1\u662f\u5e2e\u52a9\u5c0f\u7f8e\u8ba1\u7b97\u5f97\u5230\uff0c\u5e76\u4f9d\u6b21\u8f93\u51fa\u3002</p> <p>\u8f93\u5165\u63cf\u8ff0 \u7b2c\u4e00\u884c\u4e00\u4e2a\u6574\u6570N\uff0c\u8868\u793a\u8282\u70b9\u7684\u6570\u91cf\u3002</p> <p>\u63a5\u4e0b\u6765\u4e00\u884cN\u4e2a\u4ee5\u7a7a\u683c\u5206\u5f00\u7684\u6574\u6570\uff0c\u4f9d\u6b21\u8868\u793a\u8282\u70b91\uff0c\u8282\u70b92\uff0c\u2026\u8282\u70b9N\u7684\u80fd\u91cf\u5854\u6240\u80fd\u63d0\u4f9b\u80fd\u91cf\u7684\u6700\u8fdc\u8ddd\u79bb\u3002</p> <p>\u63a5\u4e0b\u6765N-1\u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6574\u6570\uff0c\u8868\u793a\u4e24\u4e2a\u70b9\u4e4b\u95f4\u6709\u4e00\u6761\u8fb9\u3002 1\u2264N&lt;500\uff0c\u8282\u70b9\u4e0a\u80fd\u91cf\u5854\u6240\u80fd\u5230\u8fbe\u7684\u6700\u8fdc\u8ddd\u79bb\u8ddd\u79bb\u4e0d\u4f1a\u5927\u4e8e 500\u3002 3 1 1 1 1 2 2 3 \u8f93\u51fa\u63cf\u8ff0 2 3 2</p> <p>1 2 3</p>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#24-03-10","title":"24-03-10 \u7c73\u54c8\u6e38\u540e\u7aef\u5c97\u7b14\u8bd5\u9898","text":""},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#1_5","title":"1. \u8e66\u8e66\u53f2\u83b1\u59c6","text":"<p>\u9898\u76ee\u63cf\u8ff0 \u5730\u56fe\u4e0a\u6709n\u4e2a\u683c\u5b50\u6392\u6210\u4e00\u6392\uff0c\u6700\u5de6\u8fb9\u7684\u683c\u5b50\u4e3a1\uff0c\u6700\u53f3\u8fb9\u7684\u683c\u5b50\u4e3an\u3002 \u7b2c0 \u79d2\u65f6\uff0c\u6bcf\u4e2a\u683c\u5b50\u90fd\u6709\u4e00\u53ea\u53f2\u83b1\u59c6\u3002 \u7b2ci \u53ea\u53f2\u83b1\u59c6\u7684\u8df3\u8dc3\u65b9\u5411\u7528\u6570\u7ec4a \u8868\u793a\u3002 ai=0 \u8868\u793a\u53f2\u83b1\u59c6\u8df3\u8dc3\u7684\u65b9\u5411\u662f\u5f80\u5de6\u3002\u82e5\u7b2ci\u79d2\u53f2\u83b1\u59c6\u4f4d\u4e8e\u683c\u5b50 x\uff0c\u90a3\u4e48\u7b2ci+1\u79d2\u53f2\u83b1\u59c6\u4f1a\u8df3\u5230\u683c\u5b50x-1\u3002\u5982\u679c\u5f53\u524d\u53f2\u83b1\u59c6\u5728\u683c\u5b501\u5219\u4e0b\u4e00\u79d2\u53f2\u83b1\u59c6\u5c06\u8df3\u51fa\u5730\u56fe\u3002 ai=1 \u8868\u793a\u53f2\u83b1\u59c6\u8df3\u8dc3\u7684\u65b9\u5411\u662f\u5f80\u53f3\u3002\u82e5\u7b2c\u79d2\u53f2\u83b1\u59c6\u4f4d\u4e8e\u683c\u5b50x\uff0c\u90a3\u4e48\u7b2c i+1\u79d2\u53f2\u83b1\u59c6\u4f1a\u8df3\u5230\u683c\u5b50x+1\u3002\u5982\u679c\u5f53\u524d\u53f2\u83b1\u59c6\u5728\u683c\u5b50n\uff0c\u5219\u4e0b\u4e00\u79d2\u53f2\u83b1\u59c6\u5c06\u8df3\u51fa\u5730\u56fe\u3002 \u7c73\u5c0f\u6e38\u60f3\u77e5\u9053\u7b2c 1-n \u79d2\uff0c\u5730\u56fe\u4e0a\u6709\u591a\u5c11\u4e2a\u683c\u5b50\u6ca1\u6709\u53f2\u83b1\u59c6\u3002</p> <p>\u8f93\u5165\u63cf\u8ff0 \u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570n\uff0cn[1,3000]\uff0c\u8868\u793a\u5730\u56fe\u4e0a\u7684\u683c\u5b50\u6570\u91cf\u3002</p> <p>\u7b2c\u4e8c\u884c\u5305\u542bn \u4e2a\u6574\u6570ai\uff0cai[0,1]\uff0c\u8868\u793a\u6bcf\u53ea\u53f2\u83b1\u59c6\u7684\u8df3\u8dc3\u65b9\u5411\u3002</p> <p>\u8f93\u51fa\u63cf\u8ff0 \u8f93\u51fa\u5305\u542b\u4e00\u884cn \u4e2a\u6574\u6570\uff0c\u7528\u7a7a\u683c\u9694\u5f00\uff0c\u7b2ci\u4e2a\u6570\u8868\u793a\u7b2ci \u79d2\u6ca1\u6709\u53f2\u83b1\u59c6\u7684\u683c\u5b50\u6570\u91cf\u3002</p> <p>\u6837\u4f8b \u8f93\u5165 3 1 0 1</p> <p>\u8f93\u51fa 1 2 3 \u6837\u4f8b\u8bf4\u660e \u53f2\u83b1\u59c61-3 \u7684\u8df3\u8dc3\u65b9\u5411\u5206\u522b\u4e3a\uff0c\u5f80\u53f3\uff0c\u5f80\u5de6\uff0c\u5f80\u53f3\u3002 \u7b2c1\u79d2\uff0c5\u53f2\u83b1\u59c61\u8df3\u5230\u683c\u5b50 2\uff0c\u53f2\u83b1\u59c62 \u8df3\u5230\u683c\u5b501\uff0c\u53f2\u83b1\u59c63 \u8df3\u51fa\u5730\u56fe\uff0c\u683c\u5b503\u6ca1\u6709\u53f2\u83b1\u59c6\u3002 \u7b2c2\u79d2\uff0c\u53f2\u83b1\u59c61\u8df3\u5230\u683c\u5b503\uff0c\u53f2\u83b1\u59c62\u8df3\u51fa\u5730\u56fe\uff0c\u683c\u5b50 1,2 \u6ca1\u6709\u53f2\u83b1\u59c6\u3002 \u7b2c 3 \u79d2\uff0c\u53f2\u83b1\u59c61\u8df3\u51fa\u5730\u56fe\uff0c\u683c\u5b501,2,3 \u6ca1\u6709\u53f2\u83b1\u59c6\u3002</p> <pre><code>// \u76f4\u63a5\u8fdb\u884c\u6a21\u62df\u6765\u786e\u5b9a\u53f2\u83b1\u59c6\u7684\u683c\u5b50\u6570\u91cf\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint main () {\n    int n;\n    cin &gt;&gt; n;\n    vector&lt;int&gt; a(n);\n    vector&lt;int&gt; slimePos(n, 1);\n    for (int i = 0; i &lt; n; i++) {\n        cin &gt;&gt; a[i];\n    }\n\n    for (int t = 0; t &lt; n; t++) {\n        vector&lt;int&gt; newSlimePos(n, 0);\n        int emptyCells = 0;\n        for (int i = 0; i &lt; n; i++) {\n            if (slimePos[i] == 1) {\n                if (a[t] == 0 &amp;&amp; i &gt; 0) {\n                    newSlimePos[i - 1] = 1;\n                }\n                else if (a[t] == 1 &amp;&amp; i &lt; n - 1) {\n                    newSlimePos[i + 1] = 1;\n                }\n            }\n        }\n        slimePos = newSlimePos;\n        for (int i = 0; i &lt; n; i++) {\n            if (slimePos[i] == 0) {\n                emptyCells++;\n            }\n        }\n        cout &lt;&lt; emptyCells &lt;&lt; \" \";\n    }\n    cout &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#2_8","title":"2. \u4e00\u756a\u8d4f","text":"<p>\u9898\u76ee\u63cf\u8ff0 \u672c\u9898\u76ee\u7531\u62bd\u5d29\u574f\u4e09\u8336\u6b47\u65f6\u523b\u4e00\u756a\u8d4f\u771f\u5b9e\u4e8b\u4ef6\u6539(\u4e71)\u7f16! -\u756a\u8d4f\u521d\u59cb\u6709 n\u4e2a\u62bd\u8d4f\uff0c\u5927\u5bb6\u9700\u8981\u6392\u961f\u8d2d\u4e70\uff0c\u53ea\u6709\u5728\u961f\u5217\u6700\u524d\u9762\u7684\u4eba\u53ef\u4ee5\u9009\u62e9\u8d2d\u4e70\u6216\u8005\u4e0d\u8d2d\u4e70\uff0c\u6240\u6709\u4eba\u968f\u65f6\u90fd\u53ef\u4ee5\u79bb\u5f00\u961f\u5217\uff0c\u79bb\u5f00\u961f\u5217\u540e\u4e5f\u53ef\u4ee5\u968f\u65f6\u52a0\u5165\u961f\u5217\u3002 \u5c0f\u76d6\u966a\u7740\u5979\u7684\u597d\u670b\u53cb\u83ab\u5a1c\u6765\u4e70\u4e00\u756a\u8d4f\uff0c\u5979\u65f6\u4e0d\u65f6\u4f1a\u770b\u4e00\u773c\u961f\u5217\u4e2d\u6709\u591a\u5c11\u4eba\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5171\u6709 4 \u79cd\u4e8b\u4ef6: 1s:\u540d\u5b57\u4e3as\u7684\u4eba\u52a0\u5165\u961f\u5217\u7684\u7ed3\u5c3e(\u4fdd\u8bc1\u4e0d\u5728\u961f\u5217\u4e2d)\u3002 2s:\u540d\u5b57\u4e3as\u7684\u4eba\u79bb\u5f00\u961f\u5217(\u4fdd\u8bc1s\u5728\u961f\u5217\u4e2d\uff0c\u4f46\u4e0d\u4e00\u5b9a\u5728\u961f\u5217\u6700\u524d\u9762) 3x:\u961f\u5217\u6700\u524d\u9762\u7684\u4eba\u8d2d\u4e70\u4e86x\u4e2a\u62bd\u8d4f(\u4fdd\u8bc1\u5728\u62bd\u8d4f\u4e2a\u6570\u5927\u4e8e0\u65f6\uff0c\u5f53\u524d\u81f3\u5c11\u6709x\u4e2a\u62bd\u8d4f) 4:\u5c0f\u76d6\u67e5\u770b\u961f\u5217\u4eba\u6570\u3002</p> <p>\u8fd8\u6709\u4e00\u4e2a\u7279\u6b8a\u89c4\u5219:\u5f53\u62bd\u8d4f\u4e2a\u6570\u5c0f\u4e8e\u7b49\u4e8em\u65f6\uff0c\u5904\u4e8e\u961f\u5217\u6700\u524d\u9762\u7684\u4eba\u4e00\u5b9a\u4f1a\u628a\u5269\u4f59\u7684\u6240\u6709\u62bd\u8d4f\u5168\u90e8\u4e70\u8d70\u3002\u5f53\u62bd\u8d4f\u5168\u90e8\u88ab\u4e70\u8d70\u540e\uff0c\u961f\u5217\u4f1a\u7acb\u5373\u6e05\u7a7a\uff0c\u540e\u7eed\u7684\u6240\u6709\u4e8b\u4ef6\u90fd\u5c06\u5931\u6548\u3002 \u5c0f\u76d6\u60f3\u77e5\u9053\uff0c\u5979\u6bcf\u6b21\u67e5\u770b\u961f\u5217\u4eba\u6570\u65f6\uff0c\u961f\u5217\u4e2d\u6709\u591a\u5c11\u4eba\u3002\u4ee5\u53ca\u6700\u540e\u62bd\u8d4f\u5168\u90e8\u5356\u5b8c\u6216\u8005\u6240\u6709\u4e8b\u4ef6\u7ed3\u675f\u540e\uff0c\u6bcf\u4e2a\u53c2\u4e0e\u8fc7\u6392\u961f\u7684\u4eba\u5404\u4e70\u4e86\u591a\u5c11\u4e2a\u62bd\u8d4f?(\u6309\u540d\u5b57\u5b57\u5178\u5e8f\u5347\u5e8f\u8f93\u51fa)</p> <p>\u8f93\u5165\u63cf\u8ff0 \u7b2c\u4e00\u884c\u8f93\u5165\u4e09\u4e2a\u6574\u6570 n,m(1&lt;=m&lt;=n&lt;=10^9)\uff0cq(1&lt;=q&lt;=2*10 ^5 \u8868\u793a\u62bd\u8d4f\u4e2a\u6570\u3001\u7279\u6b8a\u89c4\u5219\u9650\u5236\u3001\u4e8b\u4ef6\u4e2a\u6570\u3002\u63a5\u4e0b\u6765q \u884c\uff0c\u9996\u5148\u8f93\u5165\u4e00\u4e2a\u6574\u6570 op(1&lt;=op&lt;=4)\u8868\u793a\u4e8b\u4ef6\u7c7b\u578b \u82e5\u4e8b\u4ef6\u7c7b\u578b\u4e3a1\u62162\uff0c\u5219\u518d\u8f93\u5165\u4e00\u4e2a\u957f\u5ea6\u4e0d\u8d85\u8fc7 10 \u7684\u53ea\u7531\u5927\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\u7684\u5b57\u7b26\u4e329\u8868\u793a\u540d\u5b57 \u82e5\u4e8b\u4ef6\u7c7b\u578b\u4e3a 3\uff0c\u5219\u518d\u8f93\u5165\u4e00\u4e2a\u6574\u6570x\u8868\u793a\u8d2d\u4e70\u7684\u62bd\u8d4f\u4e2a\u6570\uff0c \u82e5\u4e8b\u4ef6\u7c7b\u578b\u4e3a 4\uff0c\u5219\u4e0d\u518d\u8f93\u5165\u3002</p> <p>\u8f93\u51fa\u63cf\u8ff0 \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u7c7b\u578b\u4e3a 4 \u7684\u4e8b\u4ef6\uff0c\u8f93\u51fa\u4e00\u884c\uff0c\u5305\u542b\u4e00\u4e2a\u6574\u6570\u8868\u793a\u961f\u5217\u4e2d\u7684\u4eba\u6570\u3002\u6700\u540e\u6bcf\u4e00\u884c\u6309\u5b57\u5178\u5e8f\u5347\u5e8f\u8f93\u51fa\u6bcf\u4e00\u4e2a\u53c2\u4e0e\u8fc7\u6392\u961f\u7684\u4eba\u7684\u540d\u5b57\u548c\u8d2d\u4e70\u7684\u62bd\u8d4f\u4e2a\u6570(\u7528\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00)</p> <p>\u6837\u4f8b \u8f93\u5165 70 20 8 1 Mona 1 Kaveh 4 2 Mona 1 Mona 2 Kaveh 4 1 Kaveh</p> <p>\u8f93\u51fa 2 1 Kaveh 0 Mona 0</p> <p>\u6837\u4f8b\u8bf4\u660e</p> <p>\u521d\u59cb\u65f6\u961f\u5217\u4e3a\u7a7a\u3002 \u7b2c1\u4e2a\u4e8b\u4ef6:Mona\u52a0\u5165\u961f\u5217\uff0c\u961f\u5217\u4e3a:[\u201cMo na\"]\u3002 \u7b2c2\u4e2a\u4e8b\u4ef6:Kaveh\u52a0\u5165\u961f\u5217\uff0c\u961f\u5217\u4e3a:[\u201cMona\"\"Kaveh\"\u3002 \u7b2c3\u4e2a\u4e8b\u4ef6:\u67e5\u770b\u961f\u5217\u4eba\u6570\uff0c\u961f\u5217\u4e3a:[\u201cMona\"\"Kaveh\u201d]\uff0c\u5171\u67092\u4eba\u3002 \u7b2c4\u4e2a\u4e8b\u4ef6:Mona\u79bb\u5f00\u961f\u5217\uff0c\u961f\u5217\u4e3a:[\u201cKaveh\"]\u3002 \u7b2c5\u4e2a\u4e8b\u4ef6:Mona\u52a0\u5165\u961f\u5217\uff0c\u961f\u5217\u4e3a:[\u201cKaveh\"\"Mona\"1. \u7b2c6\u4e2a\u4e8b\u4ef6:Kaveh\u79bb\u5f00\u961f\u5217\uff0c\u961f\u5217\u4e3a:[\u201cMona\"\u3002 \u7b2c7\u4e2a\u4e8b\u4ef6:\u67e5\u770b\u961f\u5217\u4eba\u6570\uff0c\u961f\u5217\u4e3a:[\u201cMona\u201d]\uff0c\u5171\u67091\u4eba\u3002 \u7b2c8\u4e2a\u4e8b\u4ef6:Kaveh\u52a0\u5165\u961f\u5217\uff0c\u961f\u5217\u4e3a:[\u201cMona\"\"Kaveh\"]\u3002 Kaveh\u5171\u8d2d\u4e70\u4e860\u4e2a\u62bd\u8d4f</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nint main () {\n    int n, m, q;\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; q;\n    // \u9700\u8981\u4ec0\u4e48\u6570\u636e\u7ed3\u6784\u6765\u5b58\u50a8\n    // \u56e0\u4e3a\u6709\u51fa\u961f\u548c\u5165\u961f\u53ef\u4ee5\u60f3\u5230\uff0cqueue\u548cset\u7684\u6570\u636e\u7ed3\u6784\u90fd\u80fd\u5b58\u50a8\u961f\u5217\n    // \u4f46\u662f\u53d1\u73b0\u6709\u53ef\u80fd\u961f\u4f0d\u4e2d\u7684\u4eba\u4e5f\u4f1a\u51fa\u961f\uff0c\u90a3\u4e48queue\u5c31\u505a\u4e0d\u5230\u4e86\uff0c\u53ea\u80fd\u4f7f\u7528set\n    // \u4e3a\u4e86\u8ba9set\u6309\u7167\u5165\u961f\u987a\u5e8f\u6392\u5e8f\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u5728set\u4e2d\u5b58\u50a8pair{time, name}\n\n    // \u4e3a\u4e86\u6700\u540e\u80fd\u8f93\u51fa\u6bcf\u4e2a\u4eba\u4e70\u4e86\u591a\u5c11\uff0c\u90a3\u4e48\u9700\u8981\u8bb0\u5f55\u6bcf\u4e2a\u8d2d\u4e70\u91cf\u4f7f\u7528\u54c8\u5e0c\u8868\u8bb0\u5f55unordered_map&lt;name, int&gt;\n    // \u56e0\u4e3a\u6700\u540e\u9700\u8981\u6309\u7167\u540d\u5b57\u5b57\u5178\u5e8f\u8f93\u51fa\uff0c\u800cunordered_map\u662f\u6ca1\u6709\u987a\u5e8f\uff0c\u4f7f\u7528map\u4f1a\u81ea\u52a8\u6309\u7167\u540d\u5b57\u7684\u7b2c\u4e00\u4e2a\u5b57\u6bcd\u6392\u5e8f\n\n    // \u6700\u540e\u8fd8\u9700\u8981\u4ee5O(1)\u65f6\u95f4\u67e5\u8be2\u540d\u5b57\u5230\u5165\u961f\u65f6\u95f4\u6620\u5c04\uff0c\u90a3\u4e48\u91c7\u7528unordered_map&lt;name, int&gt;\n    set&lt;pair&lt;int, string&gt;&gt; queue;// \u961f\u5217\uff0c\u4ee5\u5165\u961f\u65f6\u95f4\u548c\u540d\u5b57\u4f5c\u4e3a\u952e\uff0c\u7528\u5165\u961f\u65f6\u95f4\u8fdb\u884c\n    map&lt;string, int&gt; purchases; // \u8d2d\u4e70\u8bb0\u5f55\uff0c\u6309\u540d\u5b57\u5b57\u5178\u5e8f\u5b58\u50a8\n    unordered_map&lt;string, int&gt; nameToTime;// \u540d\u5b57\u5230\u5165\u961f\u65f6\u95f4\u7684\u6620\u5c04\n\n\n    for (int i = 0; i &lt; q; i++) {\n        int op;\n        string name;\n        cin &gt;&gt; op;\n        switch (op) {\n            case 1:{\n                cin &gt;&gt; name;\n                queue.insert({i, name});\n                // \u786e\u4fdd\u5728\u8d2d\u4e70\u8bb0\u5f55\u4e2d\uff0c\u56e0\u4e3a\u9700\u8981\u8f93\u51fa\u6240\u6709\u4eba\u7684\u8d2d\u4e70\u8bb0\u5f55\n                purchases[name] = 0;\n                nameToTime[name] = i;\n                // case\u5343\u4e07\u4e0d\u8981\u5fd8\u8bb0break!!!!!!!!!!!\n                break;\n            }\n            case 2: {\n                cin &gt;&gt; name;\n                int time = nameToTime[name];\n                queue.erase({time, name});\n                // \u5c06\u4e0d\u5b58\u5728\u7684\u4eba\u7684\u5165\u961f\u65f6\u95f4\u62b9\u9664\n                nameToTime.erase(name);\n                break;\n            }\n            case 3: {\n                int x;\n                cin &gt;&gt; x;\n                auto p = *queue.begin();\n                queue.erase(queue.begin());\n                nameToTime.erase(p.second);\n                purchases[p.second] += x;\n                n -= x;\n                if (n &lt;= m) {\n                    purchases[p.second] += n;\n                    n = 0;\n                    // \u6e05\u7a7a\u961f\u5217\n                    queue.clear();\n                }\n                break;\n            }\n            case 4:{\n                cout &lt;&lt; queue.size() &lt;&lt; endl;\n                break;\n            }\n            default: {\n                cout &lt;&lt; \"Something went wrong!\" &lt;&lt; endl;\n            } \n        }\n        if (n == 0) break;  // \u5982\u679c\u6240\u6709\u62bd\u8d4f\u90fd\u88ab\u8d2d\u4e70\u4e86\uff0c\u7ed3\u675f\u4e8b\u4ef6\u5904\u7406\n    }\n\n    for (const auto&amp; p : purchases) {\n        cout &lt;&lt; p.first &lt;&lt; \" \" &lt;&lt; p.second &lt;&lt; endl;\n    }\n    return 0;\n}\n</code></pre>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#3_5","title":"3. \u5efa\u6728","text":"<p>\u9898\u76ee\u63cf\u8ff0 \u4ed9\u821f\u7f57\u6d6e\u4e0a\u6709\u4e00\u68f5\u5efa\u6728\uff0c\u636e\u8bf4\u670d\u4e0b\u5efa\u6728\u751f\u6210\u7684\u795e\u5b9e\u5c31\u53ef\u4ee5\u5f97\u5230\u201c\u65e0\u5c3d\u5f62\u5bff\u201d\u7684\u8eab\u4f53,\u8715\u53d8\u4e3a\u957f\u751f\u79cd\u3002\u5c0f\u76d6\u662f\u77ed\u751f\u79cd\uff0c\u56e0\u6b64\u5979\u5f88\u60f3\u627e\u5230\u795e\u5b9e.\u5efa\u6728\u662f\u4e00\u68f5\u6709 n\u4e2a\u8282\u70b9\u7684\u6709\u6839\u6811\uff0c\u8282\u70b9\u7f16\u53f7\u4e3a1-n \uff0c\u6839\u8282\u70b9\u4e3ax\u3002\u5bf9\u4e8e\u7f16\u53f7\u4e3ai \u7684\u8282\u70b9fi \u8868\u793a\u4ee5i \u4e3a\u6839\u7684\u5b50\u6811\u4e2d\uff0c\u8282\u70b9\u7f16\u53f7\u662fi \u7684\u56e0\u5b50\u7684\u8282\u70b9\u4e2a\u6570\u3002\u5efa\u6728\u4e0a\u795e\u5b9e\u7684\u603b\u6570\u5c31\u662f zf\u95e8\uff0c\u5c0f\u76d6\u60f3\u77e5\u9053\u5efa\u6728\u4e0a\u795e\u5b9e\u7684\u603b\u6570\u662f\u591a\u5c11\u3002</p> <p>\u8f93\u5165\u63cf\u8ff0 \u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570 n,x(1&lt;=x&lt;=n&lt;=5*10^5)\uff0c\u8868\u793a\u6811\u7684\u8282\u70b9\u4e2a\u6570\uff0c\u6839\u8282\u70b9\u7f16\u53f7\u3002 \u63a5\u4e0b\u6765n-1 \u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6574\u6570 u, v(1&lt;=u,v&lt;=n)\uff0c\u8868\u793a\u4e00\u6761u \u5230v \u7684\u6811\u8fb9\u3002 \u6570\u636e\u4fdd\u8bc1\u4e00\u5b9a\u662f\u4e00\u68f5\u6811\u3002</p> <p>\u8f93\u51fa\u63cf\u8ff0 \u8f93\u51fa\u5305\u542b\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u5efa\u6728\u4e0a\u795e\u5b9e\u7684\u603b\u6570\u3002 \u6837\u4f8b \u8f93\u5165 4 4 1 2 4 3 2 4 \u8f93\u51fa 7</p> <p>\u6837\u4f8b\u8bf4\u660e</p> <p>\u4ee5\u8282\u70b94 \u4e3a\u6839\u7684\u5b50\u6811\u7684\u8282\u70b9\u6709[1,2,3,4] \u5176\u4e2d[1,2,4]\u662f4\u7684\u56e0\u5b50f[4]=3\u3002 \u4ee5\u8282\u70b9 2 \u4e3a\u6839\u7684\u5b50\u6811\u7684\u8282\u70b9\u6709[1,2]\uff0c\u5176\u4e2d[1,2]\u662f2\u7684\u56e0\u5b50f[2]=2\u3002 \u4ee5\u8282\u70b91 \u4e3a\u6839\u7684\u5b50\u6811\u7684\u8282\u70b9\u6709[1]\uff0c\u5176\u4e2d[1]\u662f1\u7684\u56e0\u5b50\uff0cf[1]=1\u3002 \u4ee5\u8282\u70b93 \u4e3a\u6839\u7684\u5b50\u6811\u7684\u8282\u70b9\u6709[3]\uff0c\u5176\u4e2d[3]\u662f3\u7684\u56e0\u5b50f[3]=1\u3002 3+2+1+1=7</p> <pre><code>// gpt\u7b54\u6848\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;unordered_map&gt;\n\nusing namespace std;\n\nvector&lt;vector&lt;int&gt;&gt; graph;\nvector&lt;int&gt; factors;\nunordered_map&lt;int, int&gt; subtree_factors;\n\nvoid dfs(int node, int parent) {\n    factors[node] = 1;\n    for (int child : graph[node]) {\n        if (child != parent) {\n            dfs(child, node);\n            factors[node] += factors[child];\n        }\n    }\n    subtree_factors[node] = factors[node];\n}\n\nint main() {\n    int n, x;\n    cin &gt;&gt; n &gt;&gt; x;\n\n    graph.resize(n + 1);\n    factors.resize(n + 1);\n\n    for (int i = 0; i &lt; n - 1; ++i) {\n        int u, v;\n        cin &gt;&gt; u &gt;&gt; v;\n        graph[u].push_back(v);\n        graph[v].push_back(u);\n    }\n\n    dfs(x, 0);\n\n    long long total = 0;\n    for (auto&amp; entry : subtree_factors) {\n        total += entry.second;\n    }\n\n    cout &lt;&lt; total &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre> <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;unordered_map&gt;\n#include &lt;cmath&gt;\n\nusing namespace std;\n\nunordered_map&lt;int, vector&lt;int&gt;&gt; graph;\nint ans = 0;\n\nvector&lt;int&gt; getDivisors(int n) {\n    vector&lt;int&gt; res;\n    for (int i = 1; i &lt;= n; i++) {\n        if (n % i == 0) {\n            res.push_back(i);\n            if (i != n / i) {\n                res.push_back(n / i);\n            }\n        }\n    }\n    return res;\n}\n\nvoid dfs(int node, int parent, unordered_map&lt;int, int&gt;&amp; counts) {\n    vector&lt;int&gt; divisors = getDivisors(node);\n    for (int div : divisors) {\n        counts[div]++;\n    }\n    ans += counts[node];\n\n    for (int next : graph[node]) {\n        if (next != parent) {\n            dfs(next, node, counts);\n        }\n    }\n\n    for (int div : divisors) {\n        counts[div]--;\n    }\n}\n\nint main() {\n    int n, x;\n    cin &gt;&gt; n &gt;&gt; x;\n\n    for (int i = 1; i &lt;= n; i++) {\n        graph[i] = vector&lt;int&gt;();\n    }\n\n    for (int i = 0; i &lt; n - 1; i++) {\n        int u, v;\n        cin &gt;&gt; u &gt;&gt; v;\n        graph[u].push_back(v);\n        graph[v].push_back(u);\n    }\n\n    unordered_map&lt;int, int&gt; counts;\n    dfs(x, -1, counts);\n    cout &lt;&lt; ans &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#23-03-17","title":"23-03-17 \u7c73\u54c8\u6e38\u540e\u7aef\u7b14\u8bd5\u9898","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\nusing namespace std;\n\nvoid solve(int number[][100], int i, int j, int n, int m, int color);\n\nint main() {\n    int n, m;\n    cin &gt;&gt; n &gt;&gt; m;\n    cin.ignore();\n    string str;\n    getline(cin, str);\n    int number[n][100];\n    int numberF[n][100];\n    int nn = 0;\n    for(int i = 0; i &lt; n; i++){\n        for(int j = 0; j &lt; m; j++){\n            char temp = str[nn];\n            if (temp == 'R'){\n                number[i][j] = 1;\n                numberF[i][j] = 1;\n            } else if (temp == 'G'){\n                number[i][j] = 2;\n                numberF[i][j] = 2;\n            } else {\n                number[i][j] = 3;\n                numberF[i][j] = 2;\n            }\n            nn++;\n        }\n    }\n    int truth= 0;\n    for (int i = 0; i &lt; n; i++){\n        for (int j = 0; j &lt; m; j++){\n            if (number[i][j] == 0){\n                continue;\n            } else {\n                truth++;\n                solve(number, i, j, n, m, number[i][j]);\n            }\n        }\n    }\n    int fake = 0;\n    for (int i = 0; i &lt; n; i++){\n        for (int j = 0; j &lt; m; j++){\n            if (numberF[i][j] == 0){\n                continue;\n            } else {\n                fake++;\n                solve(numberF, i, j, n, m, numberF[i][j]);\n            }\n        }\n    }\n    cout &lt;&lt; truth - fake &lt;&lt; endl;\n    return 0;\n}\n\nvoid solve(int number[][100], int i, int j, int n, int m, int color){\n    number[i][j] = 0;\n    //\u4e0a\n    if (i - 1 &gt;= 0){\n        if (number[i - 1][j] == color){\n            solve(number, i - 1, j, n, m, color);\n        }\n    }\n    //\u4e0b\n    if (i + 1 &lt; n){\n        if (number[i + 1][j] == color){\n            solve(number, i + 1, j, n, m, color);\n        }\n    }\n    //\u5de6\n    if (j - 1 &gt;= 0){\n        if (number[i][j - 1] == color){\n            solve(number, i, j - 1, n, m, color);\n        }\n    }\n    //\u53f3\n    if (j + 1 &lt; m){\n        if (number[i][j + 1] == color){\n            solve(number, i, j + 1, n, m, color);\n        }\n    }\n    return;\n}\n</code></pre>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#23-04-10","title":"23-04-10 \u534e\u4e3a\u540e\u7aef\u7b14\u8bd5\u771f\u9898","text":""},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#1_6","title":"1. \u4e91\u670d\u52a1\u8ba1\u8d39","text":"<p>\u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\u4e3a\u67d0\u4e91\u670d\u52a1\u8ba1\u7b97\u5ba2\u6237\u8bdd\u5355\uff0c\u8f93\u5165\u4e3a\u67d0\u4e91\u670d\u52a1\u7684\u8ba1\u8d39\u65e5\u5fd7\u548c\u5404\u79cd\u8ba1\u8d39\u56e0\u5b50\u7684\u8ba1\u8d39\u5355\u4ef7\u7684\u5217\u8868\uff0c\u8ba1\u8d39\u65e5\u5fd7\u5185\u5bb9\u5305\u542b\u65f6\u95f4\u6233\u3001\u5ba2\u6237\u6807\u8bc6\u3001\u8ba1\u8d39\u56e0\u5b50\u3001\u8ba1\u8d39\u65f6\u957f4\u4e2a\u5b57\u6bb5\u3002\u65e5\u5fd7\u4e2d\u5982\u679c\u540c\u4e00\u5ba2\u6237\u540c\u4e00\u8ba1\u8d39\u56e0\u5b50\u5728\u76f8\u540c\u65f6\u95f4\u6233\u4e0a\u62a5\u591a\u6b21\u8bdd\u5355\u53ea\u80fd\u8ba1\u8d39\u4e00\u6b21\uff0c\u9009\u5148\u4e0a\u62a5\u7684\u65e5\u5fd7\u8ba1\u8d39\u3002\u8ba1\u7b97\u6bcf\u4e2a\u5ba2\u6237\u7684\u8bdd\u5355\u603b\u8d39\u7528\u3002</p> <p>\u89e3\u7b54\u8981\u6c42</p> <p>\u65f6\u95f4\u9650\u5236: C/C++ 1000ms,\u5176\u4ed6\u8bed\u8a00: 2000ms\u5185\u5b58\u9650\u5236: C/C++ 256MB,\u5176\u4ed6\u8bed\u8a00: 512MB</p> <p>\u8f93\u5165</p> <p>\u7b2c1\u884c\u8868\u793a\u8ba1\u8d39\u65e5\u5fd7\u7684\u6761\u6570n\uff0c\u662f\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u8303\u56f4\u662f1&lt;=n&lt;=1000</p> <p>\u7b2c2\u5230n+1\u884c\u8868\u793a\u4e91\u670d\u52a1\u7684\u8ba1\u8d39\u65e5\u5fd7\uff0c\u51714\u5217\uff0c\u7b2c1\u5217\u8868\u793a\u65f6\u95f4\u6233(\u662f\u4e00\u4e2a\u6570\u5b57\u5b57\u7b26\u4e32\uff0c\u957f\u5ea6\u4e3a10) \u3001\u7b2c2\u5217\u8868\u793a\u5ba2\u6237\u6807\u8bc6(\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u957f\u5ea6\u4e3a1-16)\uff0c\u7b2c3\u5217\u8868\u793a\u8ba1\u8d39\u56e0\u5b50 (\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u957f\u5ea6\u4e3a1-16\uff0c\u8ba1\u8d39\u56e0\u5b50\u67e5\u4e0d\u5230\u65f6\u8ba4\u4e3a\u8ba1\u8d39\u56e0\u5b50\u5355\u4ef7\u662f0\uff09\uff0c\u7b2c\u56db\u5217\u8868\u793a\u8ba1\u8d39\u65f6\u957f\u65f6\u957f\uff08\u8303\u56f4\u4e3a0-100\uff0c\u5f53\u8ba1\u8d39\u65f6\u957f\u4e0d\u5728\u8303\u56f4\u5185\u8981\u8ba4\u4e3a\u662f\u8ba1\u8d39\u65e5\u5fd7\u6709\u95ee\u9898\uff0c\u5f53\u6210\u8ba1\u8d39\u4e3a0\u5904\u7406)\uff0c\u8fd94\u4e2a\u5b57\u6bb5\u4f7f\u7528\u9017\u53f7\u5206\u9694</p> <p>\u7b2cn+2\u884c\u8868\u793a\u8ba1\u8d39\u56e0\u5b50\u7684\u6570\u91cfm\uff0cm\u662f\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u8303\u56f4\u662f1&lt;=m&lt;=100</p> <p>\u7b2cn+3\u5230n+3+m\u884c\u8868\u793a\u5404\u79cd\u8ba1\u8d39\u56e0\u5b50\u7684\u8ba1\u8d39\u5355\u4ef7\u7684\u5217\u8868\uff0c\u8be5\u8868\u67092\u5217,\u7b2c1\u5217\u8868\u793a\u8ba1\u8d39\u56e0\u5b50 (\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u957f\u5ea6\u4e3a1-16)\uff0c\u7b2c2\u5217\u8868\u793a\u5355\u4ef7(\u662f\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u8303\u56f4\u4e3a1~100)\uff0c\u8fd92\u4e2a\u5b57\u6bb5\u4f7f\u7528\u9017\u53f7\u5206</p> <p>\u8f93\u51fa</p> <p>\u6bcf\u4e2a\u5ba2\u6237\u7684\u8bdd\u5355\u603b\u8d39\u7528,\u51712\u5217\uff0c\u7b2c1\u5217\u8868\u793a\u5ba2\u6237\u540d\uff0c\u7b2c2\u5217\u8868\u793a\u8bdd\u5355\u8d39\u7528\uff0c2\u5217\u7528\u9017\u53f7\u5206\u5272\uff0c\u8f93\u51fa\u6309\u5ba2\u6237\u6807\u8bc6\u5b57\u5178\u5e8f\u5347\u5e8f\u6392\u5e8f</p> <p>\u6837\u4f8b</p> <p>\u8f93\u5165</p> <pre><code>5\n1627845600,client1,factorA,10\n1627845605,client2,factorB,15\n1627845610,client1,factorA,5\n1627845610,client1,factorB,8\n1627845620,client2,factorB,20\n2\nfactorA,5\nfactorB,7\n</code></pre> <p>\u8f93\u51fa</p> <pre><code>client1,131\nclient2,245\n</code></pre> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 1010;\nstring s[N];                      // \u5b58\u50a8\u8f93\u5165\u7684n\u4e2a\u5b57\u7b26\u4e32\nunordered_map&lt;string, int&gt; value; // \u4e0d\u540c\u8282\u70b9\u5bf9\u5e94\u7684\u5355\u4ef7\nunordered_map&lt;string, int&gt; info;  // \u65f6\u95f4\u6233+\u540d\u5b57+\u8282\u70b9\uff08\u8fd9\u8fb9\u53ef\u4ee5\u7528set\uff09\nunordered_map&lt;string, int&gt; cost;  // \u4e0d\u540c\u7528\u6237\u5bf9\u5e94\u7684\u6d88\u8d39\nvector&lt;string&gt; nameall;           // \u6240\u6709\u7528\u6237\u7684\u540d\u5b57\nint main()\n{\n    int n, m;\n    cin &gt;&gt; n;\n    for (int i = 0; i &lt; n; i++)\n        cin &gt;&gt; s[i];\n    cin &gt;&gt; m;\n    for (int i = 0; i &lt; m; i++)\n    {\n        string str, str1, str2;\n        cin &gt;&gt; str;\n        int len = str.length();\n        // \u5b58\u50a8\u4e0d\u540c\u8282\u70b9\u5bf9\u5e94\u7684\u5355\u4ef7\n        for (int j = 0; j &lt; len; j++)\n        {\n            if (str[j] == ',')\n            {\n                str1 = str.substr(0, j);           // \u8282\u70b9\n                str2 = str.substr(j + 1, len - j); // \u5355\u4ef7\n                // cout&lt;&lt;str1&lt;&lt;\" \"&lt;&lt;str2&lt;&lt;endl;\n                int t = stoi(str2);\n                value[str1] = t;\n            }\n        }\n    }\n    for (int i = 0; i &lt; n; i++)\n    {\n        int len = s[i].length();\n        int cnt = 0;    // \u9017\u53f7\u7684\u4e2a\u6570\n        int d1, d2, d3; // \u7b2c1\u30012\u30013\u4e2a\u9017\u53f7\u7684\u4e0b\u6807\n        for (int j = 0; j &lt; len; j++)\n        {\n            if (s[i][j] == ',')\n            {\n                if (cnt == 0)\n                    d1 = j;\n                else if (cnt == 1)\n                    d2 = j;\n                else if (cnt == 2)\n                    d3 = j;\n                cnt++;\n            }\n        }\n        // cout&lt;&lt;\"d1=\"&lt;&lt;d1&lt;&lt;\"d2=\"&lt;&lt;d2&lt;&lt;\"d3=\"&lt;&lt;d3&lt;&lt;endl;\n        string name = s[i].substr(d1 + 1, d2 - d1 - 1);\n        bool sign = false;\n        for (auto t : nameall)\n        {\n            if (t == name)\n                sign = true;\n        }\n        if (!sign)\n            nameall.push_back(name);\n        string ti = s[i].substr(0, d1);\n        string factor = s[i].substr(d2 + 1, d3 - d2 - 1);\n        string hhour = s[i].substr(d3 + 1, len - d3 - 1);\n        int hour = stoi(hhour);\n        if (hour &lt; 0 || hour &gt; 100)\n            hour = 0; // \u9898\u76ee\u8981\u6c42\u4e0d\u5728\u8303\u56f4\u63090\u7b97\n        string inf = ti + name + factor;\n        if (info[inf] == 0) // \u9898\u76ee\u8981\u6c42\uff0c\u5982\u679c\u6709\u540c\u4e00\u65f6\u95f4\u540c\u4e00\u7528\u6237\u540c\u4e00\u8282\u70b9\u91cd\u590d\u4fe1\u606f\uff0c\u53ea\u7b97\u7b2c\u4e00\u4e2a\n        {\n            cost[name] = cost[name] + value[factor] * hour;\n            info[inf] = 1;\n        }\n        // cout&lt;&lt;\"name=\"&lt;&lt;name&lt;&lt;\"facotr=\"&lt;&lt;factor&lt;&lt;\"hour=\"&lt;&lt;hour&lt;&lt;endl;\n    }\n    sort(nameall.begin(), nameall.end());\n    for (auto name : nameall)\n    {\n        cout &lt;&lt; name &lt;&lt; \",\" &lt;&lt; cost[name] &lt;&lt; endl;\n    }\n    return 0;\n}\n</code></pre>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#2_9","title":"2. \u76f8\u4f3c\u56fe\u7247\u5206\u7c7b","text":"<p>\u5c0f\u660e\u60f3\u8981\u5904\u7406\u4e00\u6279\u56fe\u7247\uff0c\u5c06\u76f8\u4f3c\u7684\u56fe\u7247\u5206\u7c7b\u3002\u4ed6\u9996\u5148\u5bf9\u56fe\u7247\u7684\u7279\u5f81\u91c7\u6837\uff0c\u5f97\u5230\u56fe\u7247\u4e4b\u95f4\u7684\u76f8\u4f3c\u5ea6\uff0c\u7136\u540e\u6309\u7167\u4ee5\u4e0b\u89c4\u5219\u5224\u65ad\u56fe\u7247\u662f\u5426\u53ef\u4ee5\u5f52\u4e3a\u4e00\u7c7b:</p> <p>1)\u76f8\u4f3c\u5ea6&gt;0\u8868\u793a\u4e24\u5f20\u56fe\u7247\u76f8\u4f3c\uff0c</p> <p>2)\u5982\u679cA\u548cB\u76f8\u4f3c\uff0cB\u548cC\u76f8\u4f3c\uff0c\u4f46A\u548cC\u4e0d\u76f8\u4f3c\u3002\u90a3\u4e48\u8ba4\u4e3aA\u548cC\u95f4\u63a5\u76f8\u4f3c\uff0c\u53ef\u4ee5\u628aABC\u5f52\u4e3a\u4e00\u7c7b\uff0c\u4f46\u4e0d\u8ba1\u7b97AC\u7684\u76f8\u4f3c\u5ea6</p> <p>3)\u5982\u679cA\u548c\u6240\u6709\u5176\u4ed6\u56fe\u7247\u90fd\u4e0d\u76f8\u4f3c\uff0c\u5219A\u81ea\u5df1\u5f52\u4e3a\u4e00\u7c7b\uff0c\u76f8\u4f3c\u5ea6\u4e3a0.\u7ed9\u5b9a\u4e00\u4e2a\u5927\u5c0f\u4e3aNxN\u7684\u77e9\u9635M\u5b58\u50a8\u4efb\u610f\u4e24\u5f20\u56fe\u7247\u7684\u76f8\u4f3c\u5ea6\uff0cM[i][j]\u5373\u4e3a\u7b2ci\u4e2a\u56fe\u7247\u548c\u7b2cj\u4e2a\u56fe\u7247\u7684\u76f8\u4f3c\u5ea6\uff0c\u8bf7\u6309\u7167\"\u4ece\u5927\u5230\u5c0f\u201d\u7684\u987a\u5e8f\u8fd4\u56de\u6bcf\u4e2a\u76f8\u4f3c\u7c7b\u4e2d\u6240\u6709\u56fe\u7247\u7684\u76f8\u4f3c\u5ea6\u4e4b\u548c\u3002</p> <p>\u8f93\u5165</p> <p>\u7b2c\u4e00\u884c\u4e00\u4e2a\u6570N\uff0c\u4ee3\u8868\u77e9\u9635M\u4e2d\u6709N\u4e2a\u56fe\u7247\uff0c\u4e0b\u9762\u8ddf\u7740N\u884c\uff0c\u6bcf\u884c\u6709N\u5217\u6570\u636e\uff0c\u7a7a\u683c\u5206\u9694(\u4e3a\u4e86\u663e\u793a\u6574\u5f03\uff0c\u7a7a\u683c\u53ef\u80fd\u4e3a\u591a\u4e2a) \u4ee3\u8868N\u4e2a\u56fe\u7247\u4e4b\u95f4\u7684\u76f8\u4f3c\u5ea6\u3002</p> <pre><code>\u7ea6\u675f\uff1a1.0&lt;N&lt;=900\n0&lt;=M[i][j]&lt;=100,\u8f93\u5165\u4fdd\u8bc1M[i][i] =0,M[i][j]=M[j][i]\n</code></pre> <p>\u8f93\u51fa</p> <p>\u6bcf\u4e2a\u76f8\u4f3c\u7c7b\u7684\u76f8\u4f3c\u5ea6\u4e4b\u548c\u3002\u683c\u5f0f\u4e3a:\u4e00\u884c\u6570\u5b57\uff0c\u5206\u9694\u7b26\u4e3a1\u4e2a\u7a7a\u683c\u3002</p> <p>\u6837\u4f8b</p> <p>\u8f93\u5165</p> <pre><code>5\n0 0 50 0 0\n0 0 0 25 0\n50 0 0 0 15\n0 25 0 0 0\n0 0 15 0 0\n</code></pre> <p>\u8f93\u51fa</p> <pre><code>65 25\n</code></pre> <p>\u8003\u8bd5\u4ee3\u7801\u5fd8\u8bb0\u4fdd\u5b58\u4e86\uff0c\u4e0b\u9762\u662f\u8003\u5b8c\u540e\u590d\u76d8\u518d\u5199\u7684\u3002</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 910;\nint idx = 0;         // \u76ee\u524d\u7b97\u5230\u7b2c\u51e0\u4e2a\u96c6\u5408\nint g[N][N];         // \u5b58\u56fe\nvector&lt;int&gt;v[N];     // \u90bb\u63a5\u77e9\u9635\nvector&lt;int&gt;res;      // \u6bcf\u4e2a\u96c6\u5408\u5bf9\u5e94\u7684\u76f8\u4f3c\u503c\u4e4b\u548c\nvector&lt;int&gt;jihe[N];  // \u6bcf\u4e2a\u96c6\u5408\u7684\u70b9\nbool st[N];          // \u662f\u5426\u7ed3\u675f\u8bbf\u95ee\nbool cmp(int a, int b)\n{\n    return a &gt; b;\n}\nint main()\n{\n    int n;\n    cin &gt;&gt; n;\n    for (int i = 0; i &lt; n; i++)\n    {\n        for (int j = 0; j &lt; n; j++)\n        {\n            cin &gt;&gt; g[i][j];\n            if (g[i][j])\n                v[i].push_back(j);\n        }\n    }\n\n    for (int i = 0; i &lt; n; i++)\n    {\n        // \u5982\u679c\u90bb\u63a5\u77e9\u9635\u4e3a\u7a7a\u8bf4\u660e\u6ca1\u6709\u76f8\u4f3c\u7684\u56fe\uff0c\u81ea\u6210\u4e00\u6d3e\n        if (v[i].size() == 0)\n        {\n            //cout&lt;&lt;\"i=\"&lt;&lt;i&lt;&lt;\",idx=\"&lt;&lt;idx&lt;&lt;endl;\n            st[i]=true;\n            jihe[idx++].push_back(i); // \u4e00\u5f00\u59cb\u6ca1\u52a0\u8fdb\u53bb\uff0c\u53ea\u80fd\u8fc732%\u6570\u636e\u70b9\n            continue;\n        }\n        if (st[i])\n            continue;\n        //cout&lt;&lt;\"i=\"&lt;&lt;i&lt;&lt;\",idx=\"&lt;&lt;idx&lt;&lt;endl;\n        queue&lt;int&gt; q;\n        q.push(i);\n        st[i]=true;\n        jihe[idx].push_back(i);\n        // bfs\u5c55\u5f00\n        while (q.size())\n        {\n            int t = q.front();\n            q.pop();\n            st[t] = true;\n            for (auto x : v[t])\n            {\n                if (!st[x])\n                {\n                    q.push(x);\n                    jihe[idx].push_back(x);\n                }\n            }\n        }\n        idx++;\n\n    }\n    // \u8ba1\u7b97\u6bcf\u4e00\u4e2a\u96c6\u5408\u7684\u76f8\u4f3c\u503c\u4e4b\u548c\n    for (int i = 0; i &lt; idx; i++)\n    {\n        int t = 0, len = jihe[i].size();\n        for (int j = 0; j &lt; len; j++)\n        {\n            for (int k = j + 1; k &lt; len; k++)\n            {\n                int x = jihe[i][j], y = jihe[i][k];\n                t += g[x][y];\n            }\n        }\n        res.push_back(t);\n    }\n    /*debug\u68c0\u67e5\u6bcf\u4e2a\u96c6\u5408\u662f\u5426\u6b63\u786e\n    for (int i = 0; i &lt; idx; i++)\n    {\n        cout &lt;&lt; \"jihe[\" &lt;&lt; i &lt;&lt; \"]:\";\n        for (auto x : jihe[i])\n            cout &lt;&lt; x;\n        cout &lt;&lt; endl;\n    }\n    cout &lt;&lt; \"idx=\" &lt;&lt; idx &lt;&lt; endl;\n    */\n    // \u964d\u5e8f\u4e14\u8f93\u51fa\n    sort(res.begin(), res.end(), cmp);\n    int len = res.size();\n    for (int i = 0; i &lt; len - 1; i++)\n        cout &lt;&lt; res[i] &lt;&lt; \" \";\n    cout &lt;&lt; res[len - 1];\n    return 0;\n}\n</code></pre>"},{"location":"Problem/interview/%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0/#3_6","title":"3. \u7f51\u7edc\u4fdd\u536b\u6218","text":"<p>\u516c\u6709\u4e91\u7684\u67d0\u4e2aregion\u5185\uff0cN\u4e2a\u7f51\u7edc\u8282\u70b9\u7ec4\u7f51\u60c5\u51b5\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2an* n\u7684\u77e9\u9635matrix\u8868\u793a\uff0c\u5728\u8fd9\u4e2a\u7ec4\u7f51\u56fe\u4e2d\uff0cmatrix[i][j] = p \u65f6\uff0c\u8868\u793a\u7528\u6237\u5728\u7f16\u53f7\u4e3a i\u7684\u8282\u70b9\u8bbf\u95ee\u7f16\u53f7\u4e3aj\u7684\u8282\u70b9\u65f6\uff0c\u5fc5\u987b\u5728 i\u8282\u70b9\u4e0a\u5177\u6709&gt;=p \u7684\u6743\u9650\u7b49\u7ea7(p=0\u65f6\u8868\u793a\u65e0\u6cd5\u901a\u8fc7\u7b2ci\u8282\u70b9\u8bbf\u95eej\u8282\u70b9)\uff0c\u5982\u679c\u7528\u6237\u6210\u529f\u8bbf\u95ee\u4e86j\u8282\u70b9\uff0c\u90a3\u4e48\u5b83\u5728j\u8282\u70b9\u4e0a\u7684\u6743\u9650\u7b49\u7ea7\u8c03\u6574\u4e3a P\u3002</p> <p>exposed \u4e3a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff0c\u8868\u793a\u66b4\u9732\u5728\u516c\u7f51\u4e0a\u7684\u7f51\u7edc\u8282\u70b9\u7684\u7f16\u53f7\u5217\u8868\u3002\u67d0\u5929\u626b\u63cf\u53d1\u73b0\u8fd9\u6279\u66b4\u9700\u5728\u516c\u7f51\u7684\u8282\u70b9\u5b58\u5728\u88ab\u5916\u90e8\u6076\u610f\u653b\u51fb\u98ce\u9669\u4e14\u8be5\u653b\u51fb\u4f1a\u5f71\u54cd\u5230\u53ef\u8bbf\u95ee\u7684\u5176\u4ed6\u8282\u70b9\uff0c\u5e76\u53ef\u4ee5\u6301\u7eed\u4f20\u9012\u8fdb\u884c\u653b\u51fb\uff0c\u88ab\u6076\u610f\u653b\u51fb\u7684\u8282\u70b9\u4ece\u516c\u7f51\u8bbf\u95ee\u65f6\uff0c\u653b\u51fb\u8005\u83b7\u5f97\u4e86ROOT \u6743\u9650(\u6743\u9650\u7b49\u7ea7\u4e3a10\uff0c\u5373\u6700\u5927\u503c)\u3002</p> <p>\u5c0f\u674e\u662f\u4e00\u540d\u7f51\u7edc\u5b89\u5168\u5de5\u7a0b\u5e08\uff0c\u4e3a\u4e86\u5728\u6709\u9650\u7684\u65f6\u95f4\u5185\u5c3d\u53ef\u80fd\u7684\u51cf\u5c11\u6545\u969c\u5e26\u6765\u7684\u635f\u5931\uff0c\u9700\u8981\u7acb\u5373\u5c06\u67d0\u4e2a\u8282\u70b9\u4ece\u516c\u7f51\"\u4e0b\u7ebf\"\u3002</p> <p>\u5047\u8bbe\u653b\u51fb\u7ed3\u675f\u65f6\uff0c\u88ab\u653b\u51fb\u8fc7\u7684\u8282\u70b9\u6570\u91cf\u4e3aR\uff0c\u8bf7\u5e2e\u5c0f\u674e\u8ba1\u7b97\u51fa\u5c06\u54ea\u4e2a\u8282\u70b9\u4e0b\u7ebf\u80fd\u4f7fR\u5c3d\u53ef\u80fd\u5c0f\uff0c\u5982\u679c\u7b54\u6848\u6709\u591a\u4e2a\u8282\u70b9\uff0c\u8fd4\u56de\u7d22\u5f15\u6700\u5c0f\u7684\u90a3\u4e2a\u8282\u70b9\u3002</p> <p>\u8bf7\u6ce8\u610f\uff1a\u4ece\u516c\u7f51\u201c\u4e0b\u7ebf\u201d\u7684\u8282\u70b9\uff0c\u4e0d\u4f1a\u53d7\u5230\u6765\u81ea\u516c\u7f51\u7684\u653b\u51fb\uff0c\u4f46\u4ecd\u7136\u53ef\u80fd\u88ab\u201c\u53ef\u8bbf\u95ee\u201d\u7684\u5176\u4ed6\u8282\u70b9\u4f20\u9012\u653b\u51fb\u3002</p> <p>\u89e3\u7b54\u8981\u6c42</p> <p>\u65f6\u95f4\u9650\u5236: C/C++ 5000ms,\u5176\u4ed6\u8bed\u8a00: 10000ms\u5185\u5b58\u9650\u5236: C/C++ 128MB\uff0c\u5176\u4ed6\u8bed\u8a00: 256MB</p> <p>\u8f93\u5165</p> <pre><code>\u8f93\u5165\u7684\u7b2c\u4e00\u884c\u662f\u7f51\u7edc\u8282\u70b9\u6570\u91cfN\u540e\u7eed\u7684N\u884c\uff0c\u6bcf\u884cN\u4e2a\u6570\u5b57v\uff0c\u4ee5\u7a7a\u683c\u5206\u5272\uff0c\u5f62\u6210\u4e00\u4e2aN*N\u7684\u77e9\u9635\uff0c\u8868\u793a\u7f51\u7edc\u8282\u70b9\u7ec4\u7f51\u7684\u77e9\u9635\u3002\u6700\u540e\u4e00\u884c\uff0c\u8f93\u5165 exposed \u6570\u7ec4\uff0c\u8868\u793a\u66b4\u9732\u5728\u516c\u7f51\u4e0a\u7684\u7f51\u7edc\u8282\u70b9\u7684\u7f16\u53f7\u5217\u8868\uff0c\u6570\u7ec4\u5143\u7d20\u4e0d\u4f1a\u91cd\u590d\u3002\u8f93\u5165\u8303\u56f4\u8bf4\u660e\uff1a\n2&lt;=n&lt;=24\n0&lt;=v&lt;=10\n0&lt;=exposed[i]&lt;=n-1\n</code></pre> <p>\u8f93\u51fa</p> <p>\u8f93\u51fa\u5728 exposed \u6570\u7ec4\u4e2d\uff0c\u8ba1\u5212\"\u4e0b\u7ebf\u201d\u7684\u90a3\u4e2a\u8282\u70b9\u7684\u7f16\u53f7\u3002</p> <p>\u6837\u4f8b1</p> <p>\u8f93\u5165</p> <pre><code>4\n1 0 0 0\n0 1 2 0\n0 1 1 4\n0 0 3 1\n1 3\n</code></pre> <p>\u8f93\u51fa</p> <pre><code>3\n</code></pre> <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;queue&gt;\n#include &lt;limits&gt;\n\nusing namespace std;\n\nint simulateAttack(int n, const vector&lt;vector&lt;int&gt;&gt;&amp; matrix, const vector&lt;int&gt;&amp; exposed, int offlineNode) {\n    vector&lt;bool&gt; attacked(n, false);\n    queue&lt;int&gt; q;\n    // \u521d\u59cb\u5316\u653b\u51fb\uff0c\u6392\u9664\u4e0b\u7ebf\u7684\u8282\u70b9\n    for (int node : exposed) {\n        if (node != offlineNode) {\n            q.push(node);\n            attacked[node] = true;\n        }\n    }\n    // \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u6a21\u62df\u653b\u51fb\u8fc7\u7a0b\n    while (!q.empty()) {\n        int current = q.front();\n        q.pop();\n        for (int i = 0; i &lt; n; ++i) {\n            if (!attacked[i] &amp;&amp; matrix[current][i] &gt; 0 &amp;&amp; matrix[current][i] &lt;= 10) {\n                attacked[i] = true;\n                q.push(i);\n            }\n        }\n    }\n    // \u8ba1\u7b97\u88ab\u653b\u51fb\u7684\u8282\u70b9\u6570\u91cf\n    int count = 0;\n    for (bool status : attacked) {\n        if (status) ++count;\n    }\n    return count;\n}\n\nint main() {\n    int n;\n    cin &gt;&gt; n;\n    vector&lt;vector&lt;int&gt;&gt; matrix(n, vector&lt;int&gt;(n));\n    for (int i = 0; i &lt; n; ++i) {\n        for (int j = 0; j &lt; n; ++j) {\n            cin &gt;&gt; matrix[i][j];\n        }\n    }\n    int e;\n    cin &gt;&gt; e;\n    vector&lt;int&gt; exposed(e);\n    for (int i = 0; i &lt; e; ++i) {\n        cin &gt;&gt; exposed[i];\n    }\n\n    int minAttacked = numeric_limits&lt;int&gt;::max();\n    int nodeToOffline = -1;\n    for (int node : exposed) {\n        int attacked = simulateAttack(n, matrix, exposed, node);\n        if (attacked &lt; minAttacked) {\n            minAttacked = attacked;\n            nodeToOffline = node;\n        }\n    }\n\n    cout &lt;&lt; nodeToOffline &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"Problem/interview/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/","title":"\u82cd\u7a79\u5916\u5356\u9879\u76ee\u9762\u8bd5\u95ee\u9898\u603b\u7ed3","text":"<p>\u5783\u573e\u56de\u6536\u5668</p>"},{"location":"Problem/interview/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/#redis","title":"redis","text":"<ul> <li>\u8bb2\u8bb2 redis\uff0c\u5b83\u5728\u4f60\u7684\u9879\u76ee\u4e2d\u4f5c\u7528\u662f\u4ec0\u4e48\uff1f</li> <li>Redis \u662f\u9ad8\u6027\u80fd\u7684\uff0c\u57fa\u4e8e\u952e\u503c\u5bf9\u7684\uff0c\u5199\u5165\u7f13\u5b58\u7684\u00a0\u5185\u5b58\u5b58\u50a8\u7cfb\u7edf\u3002\u5b83\u652f\u6301\u591a\u79cd\u6570\u636e\u7ed3\u6784\u5982\u5b57\u7b26\u4e32\u3001\u54c8\u5e0c\u8868\u3001\u5217\u8868\u3001\u96c6\u5408\u3001\u6709\u5e8f\u96c6\u5408\u7b49\uff0c\u5e76\u63d0\u4f9b\u4e86\u4e30\u5bcc\u7684\u64cd\u4f5c\u547d\u4ee4\u3002</li> <li>\u9879\u76ee\u4e2d\u5f15\u5165 Redis \u7684\u5730\u65b9\u662f\uff1a\u67e5\u8be2\u54c1\u724c\u3001\u5ba2\u670d\u8425\u4e1a\u72b6\u6001\u00a0\uff0c\u50cf\u8fd9\u79cd\u54c1\u724c\u5ba2\u670d\u8425\u4e1a\u72b6\u6001\uff0c\u672c\u9879\u76ee\u65e0\u975e\u5c31\u4e24\u4e2a\u72b6\u6001\uff1a\u8425\u4e1a\u4e2d/\u6253\u6837\u3002\u800c\u4e14\u5b83\u5c5e\u4e8e\u9ad8\u9891\u67e5\u8be2\u3002\u53ea\u8981\u7528\u6237\u6d4f\u89c8\u5230\u8fd9\u4e2a\u5e97\u94fa\uff0c\u524d\u7aef\u5c31\u8981\u81ea\u52a8\u53d1\u9001\u8bf7\u6c42\u5230\u540e\u7aef\u67e5\u8be2\u5e97\u94fa\u72b6\u6001\u3002Redis \u662f\u57fa\u4e8e\u952e\u503c\u5bf9\u8fd9\u79cd\u5f62\u5f0f\u5b58\u50a8\u7684\uff0c\u800c\u4e14 Redis \u4e5f\u628a\u5c06\u6570\u636e\u653e\u5230\u7f13\u5b58\u4e2d\uff0c\u800c\u4e0d\u662f\u78c1\u76d8\uff0c\u6709\u6548\u7f13\u89e3\u4e86\u8fd9\u79cd\u9ad8\u9891\u67e5\u8be2\u7ed9\u78c1\u76d8\u5e26\u6765\u7684\u538b\u529b\u3002</li> <li>\u5728\u9879\u76ee\u4e2dredis\u8fd8\u6709\u7f13\u5b58\u5546\u54c1\u7684\u529f\u80fd\u3002\u7528\u6237\u7aef\u5c0f\u7a0b\u5e8f\u5c55\u793a\u5546\u54c1\u6570\u636e\u90fd\u662f\u901a\u8fc7\u67e5\u8be2\u6570\u636e\u5e93\u83b7\u5f97\uff0c\u5982\u679c\u7528\u6237\u7aef\u8bbf\u95ee\u91cf\u6bd4\u8f83\u5927\uff0c\u6570\u636e\u5e93\u8bbf\u95ee\u538b\u529b\u968f\u4e4b\u589e\u5927\u3002\u7ed3\u679c\uff1a\u7cfb\u7edf\u54cd\u5e94\u6162\u3001\u7528\u6237\u4f53\u9a8c\u5dee\u3002</li> <li> <p>\u5f53\u5728\u540e\u53f0\u4fee\u6539\u83dc\u54c1\u6570\u636e\u65f6\uff0c\u4e3a\u4e86\u4fdd\u8bc1Redis\u7f13\u5b58\u4e2d\u7684\u6570\u636e\u548c\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e\u65f6\u523b\u4fdd\u6301\u4e00\u81f4\uff0c\u5f53\u4fee\u6539\u540e\uff0c\u9700\u8981\u6e05\u7a7a\u5bf9\u5e94\u7684\u7f13\u5b58\u6570\u636e\u3002\u7528\u6237\u518d\u6b21\u8bbf\u95ee\u65f6\uff0c\u8fd8\u662f\u5148\u4ece\u6570\u636e\u5e93\u4e2d\u67e5\u8be2\uff0c\u540c\u65f6\u518d\u628a\u67e5\u8be2\u7684\u7ed3\u679c\u5b58\u50a8\u5230Redis\u4e2d\uff0c\u8fd9\u6837\uff0c\u5c31\u80fd\u4fdd\u8bc1\u7f13\u5b58\u548c\u6570\u636e\u5e93\u7684\u6570\u636e\u4fdd\u6301\u4e00\u81f4\u3002</p> </li> <li> <p>\u4f7f\u7528\u7684\u662f opsForValue() \u65b9\u6cd5\uff0c\u5b83\u7528\u4e8e\u64cd\u4f5c Redis \u4e2d\u7684 String \u7c7b\u578b\u6570\u636e\uff0c\u800c\u4e0d\u662f\u54c8\u5e0c\uff08Hash\uff09\u7c7b\u578b\u3002</p> </li> <li> <p>\u4f7f\u7528\u4e86 redisTemplate.opsForValue().set(key, list) \u5c06\u83dc\u54c1\u4fe1\u606f\u5b58\u50a8\u5728 Redis \u4e2d\uff0c\u8fd9\u8868\u793a\u60a8\u7684\u6570\u636e\u7ed3\u6784\u662f\u5c06\u83dc\u54c1\u4fe1\u606f\u4ee5\u5b57\u7b26\u4e32\u7684\u5f62\u5f0f\u5b58\u50a8\u5728 Redis \u4e2d\uff0c\u5e76\u4f7f\u7528\u4e86\u4e00\u4e2a\u5e26\u6709\u5206\u7c7b ID \u7684\u952e\u3002\u8fd9\u79cd\u5b58\u50a8\u65b9\u5f0f\u7684\u597d\u5904\u662f\u7b80\u5355\u76f4\u63a5\uff0c\u4f46\u4e5f\u6709\u4e00\u4e9b\u9650\u5236\uff0c\u4f8b\u5982\u65e0\u6cd5\u76f4\u63a5\u5bf9\u7279\u5b9a\u5b57\u6bb5\u8fdb\u884c\u66f4\u65b0\uff0c\u9700\u8981\u5148\u53d6\u51fa\u6574\u4e2a\u5bf9\u8c61\uff0c\u7136\u540e\u518d\u4fee\u6539\u540e\u91cd\u65b0\u5b58\u50a8\u3002</p> </li> <li> <p>\u5982\u679c\u60a8\u5e0c\u671b\u66f4\u7075\u6d3b\u5730\u64cd\u4f5c\u83dc\u54c1\u4fe1\u606f\uff0c\u53ef\u4ee5\u8003\u8651\u5c06\u83dc\u54c1\u4fe1\u606f\u5b58\u50a8\u4e3a\u54c8\u5e0c\u7c7b\u578b\u3002\u8fd9\u6837\uff0c\u60a8\u53ef\u4ee5\u5728\u54c8\u5e0c\u4e2d\u5b58\u50a8\u83dc\u54c1\u7684\u5404\u4e2a\u5c5e\u6027\uff0c\u4f8b\u5982\u83dc\u54c1\u540d\u79f0\u3001\u4ef7\u683c\u3001\u63cf\u8ff0\u7b49\uff0c\u6bcf\u4e2a\u5c5e\u6027\u90fd\u53ef\u4ee5\u5355\u72ec\u8bbf\u95ee\u548c\u66f4\u65b0\uff0c\u66f4\u52a0\u7075\u6d3b\u3002</p> </li> <li> <p>\u5546\u5bb6\u72b6\u6001\uff1a\u57fa\u4e8eRedis\u7684\u5b57\u7b26\u4e32\u6765\u8fdb\u884c\u5b58\u50a8 \u7ea6\u5b9a\uff1a1\u8868\u793a\u8425\u4e1a 0\u8868\u793a\u6253\u70ca</p> </li> <li></li> <li> <p>\u4f60\u7684redis\u662f\u600e\u4e48\u4f18\u5316\u7684\uff1f</p> </li> <li> <p>\u5408\u7406\u7684\u6570\u636e\u7ed3\u6784\u9009\u62e9\uff1a\u952e\u9f20\u5957\u88c5\uff1a\u4e00\u4e2a\u5957\u88c5\u7684\u4fe1\u606f\u662f\u7528\u54c8\u5e0c\u5b58\u50a8\uff0c\u5185\u90e8\u7684\u952e\u76d8\u9f20\u6807\u5217\u8868\u7528\u952e\u9f20\u5957\u88c5\u7684id\u4f5c\u4e3a\u952e\u5b58\u50a8\u5728set</p> </li> <li> <p>\u4f7f\u7528\u54c8\u5e0c\u7c7b\u578b\u5b58\u50a8\u5bf9\u8c61\uff1a\u4e0d\u4f7f\u7528\u54c8\u5e0c\u65f6\uff0c\u4f60\u53ef\u80fd\u4f1a\u4e3a\u6bcf\u4e2a\u7528\u6237\u5c5e\u6027\u521b\u5efa\u4e00\u4e2a\u952e\uff0c\u9700\u8981\u591a\u4e2a\u547d\u4ee4\u6765\u5b58\u50a8\u6216\u67e5\u8be2\u5355\u4e2a\u7528\u6237\u7684\u5168\u90e8\u4fe1\u606f\uff0c\u67e5\u8be2\u6548\u7387\u8f83\u4f4e\uff0c\u5c24\u5176\u662f\u5f53\u9700\u8981\u83b7\u53d6\u7528\u6237\u7684\u6240\u6709\u4fe1\u606f\u65f6\u3002</p> </li> <li> <p>\u4f7f\u7528\u54c8\u5e0c\u7c7b\u578b\uff0c\u53ef\u4ee5\u5c06\u4e00\u4e2a\u7528\u6237\u7684\u6240\u6709\u4fe1\u606f\u5b58\u50a8\u5728\u4e00\u4e2a\u952e\u4e2d\uff0c\u6bcf\u4e2a\u5b57\u6bb5\u4ee3\u8868\u7528\u6237\u7684\u4e00\u4e2a\u5c5e\u6027\uff0c\u63d0\u9ad8\u4e86\u67e5\u8be2\u6548\u7387\uff0c\u901a\u8fc7\u4e00\u4e2a\u547d\u4ee4<code>HGETALL user:1001</code>\u5c31\u53ef\u4ee5\u67e5\u8be2\u5230\u7528\u6237\u7684\u6240\u6709\u4fe1\u606f\u3002</p> </li> <li> <p>\u9002\u5f53\u7684\u8fc7\u671f\u7b56\u7565\uff1a\u5982\u679c\u4e0d\u4e3a\u7f13\u5b58\u7684\u70ed\u95e8\u5546\u54c1\u5185\u5bb9\u8bbe\u7f6e\u8fc7\u671f\u65f6\u95f4\uff0c\u7f13\u5b58\u7684\u547d\u4e2d\u7387\u4f1a\u4e0b\u964d\uff0c\u7f13\u5b58\u7a7a\u95f4\u4f1a\u8d8a\u6765\u8d8a\u7d27\u5f20\uff0c\u67e5\u8be2\u901f\u5ea6\u4f1a\u53d8\u6162</p> </li> <li> <p>\u4e3a\u7f13\u5b58\u6570\u636e\u8bbe\u7f6e\u5408\u7406\u7684\u8fc7\u671f\u65f6\u95f4\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u6570\u636e\u7684\u65f6\u6548\u6027\u540c\u65f6\u907f\u514d\u957f\u65f6\u95f4\u5360\u7528\u5185\u5b58\u3002\u5bf9\u4e8e\u90a3\u4e9b\u66f4\u65b0\u9891\u7387\u4e0d\u9ad8\u4f46\u8bfb\u53d6\u9891\u7e41\u7684\u6570\u636e\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u8f83\u957f\u7684\u8fc7\u671f\u65f6\u95f4\u3002</p> </li> <li> <p>\u5b9a\u671f\u5220\u9664\uff08\u5220\u9664\u8fd8\u6709\u60f0\u6027\u5220\u9664\uff09\uff1a\u6bcf\u9694\u4e00\u6bb5\u65f6\u95f4\uff0c\u6211\u4eec\u5c31\u5bf9\u4e00\u4e9bkey\u8fdb\u884c\u68c0\u67e5\uff0c\u5220\u9664\u91cc\u9762\u8fc7\u671f\u7684key(\u4ece\u4e00\u5b9a\u6570\u91cf\u7684\u6570\u636e\u5e93\u4e2d\u53d6\u51fa\u4e00\u5b9a\u6570\u91cf\u7684\u968f\u673akey\u8fdb\u884c\u68c0\u67e5\uff0c\u5e76\u5220\u9664\u5176\u4e2d\u7684\u8fc7\u671fkey)\u3002</p> </li> <li> <p>\u5185\u5b58\u7ba1\u7406\uff1a\u76d1\u63a7\u548c\u914d\u7f6e Redis \u7684\u5185\u5b58\u4f7f\u7528\u7b56\u7565\uff0c\u5982\u542f\u7528\u5185\u5b58\u6dd8\u6c70\u7b56\u7565\uff0c\u5728\u5185\u5b58\u4e0d\u8db3\u65f6\u81ea\u52a8\u5220\u9664\u90e8\u5206\u6570\u636e\uff0c\u786e\u4fdd\u7cfb\u7edf\u7a33\u5b9a\u8fd0\u884c\u3002</p> </li> <li> <p>redis\u7f13\u5b58\u539f\u7406\uff0c\u4e3a\u4ec0\u4e48\u5feb\uff1f</p> </li> <li>Redis \u7684\u6570\u636e\u662f\u4fdd\u5b58\u5728\u5185\u5b58\u4e2d\u7684\uff08\u5185\u5b58\u6570\u636e\u5e93\uff0c\u652f\u6301\u6301\u4e45\u5316\uff09\uff0c\u56e0\u6b64\u8bfb\u5199\u901f\u5ea6\u975e\u5e38\u5feb\uff0cRedis \u5b58\u50a8\u7684\u662f KV \u952e\u503c\u5bf9\u6570\u636e\u3002</li> <li>Redis \u5185\u90e8\u505a\u4e86\u975e\u5e38\u591a\u7684\u6027\u80fd\u4f18\u5316\uff0c\u6bd4\u8f83\u91cd\u8981\u7684\u6709\u4e0b\u9762 3 \u70b9\uff1a</li> <li>Redis \u57fa\u4e8e\u5185\u5b58\uff0c\u5185\u5b58\u7684\u8bbf\u95ee\u901f\u5ea6\u662f\u78c1\u76d8\u7684\u4e0a\u5343\u500d\uff0cC\u8bed\u8a00\u7f16\u5199\uff1b</li> <li>Redis \u57fa\u4e8e Reactor \u6a21\u5f0f\u8bbe\u8ba1\u5f00\u53d1\u4e86\u4e00\u5957\u9ad8\u6548\u7684\u4e8b\u4ef6\u5904\u7406\u6a21\u578b\uff0c\u4e3b\u8981\u662f\u5355\u7ebf\u7a0b\u4e8b\u4ef6\u5faa\u73af\u548c IO \u591a\u8def\u590d\u7528\uff08Redis \u7ebf\u7a0b\u6a21\u5f0f\u540e\u9762\u4f1a\u8be6\u7ec6\u4ecb\u7ecd\u5230\uff09\uff1b</li> <li>\u91c7\u7528\u5355\u7ebf\u7a0b\uff0c\u907f\u514d\u4e0d\u5fc5\u8981\u7684\u4e0a\u4e0b\u6587\u5207\u6362\u53ef\u7ade\u4e89\u6761\u4ef6(\u591a\u7ebf\u7a0b\u7684\u8bdd\u8fd8\u8981\u4f7f\u7528\u9501\uff0c\u6027\u80fd\u4f1a\u964d\u4f4e)</li> <li> <p>Redis \u5185\u7f6e\u4e86\u591a\u79cd\u4f18\u5316\u8fc7\u540e\u7684\u6570\u636e\u7c7b\u578b/\u7ed3\u6784\u5b9e\u73b0\uff0c\u6027\u80fd\u975e\u5e38\u9ad8\u3002</p> </li> <li> <p>redis\u7684\u57fa\u672c\u6570\u636e\u7c7b\u578b\uff1f</p> </li> <li> <p>String\uff08\u5b57\u7b26\u4e32\uff09\u3001List\uff08\u5217\u8868\uff09\u3001Set\uff08\u96c6\u5408\uff09\u3001Hash\uff08\u6563\u5217\uff09\u3001Zset\uff08\u6709\u5e8f\u96c6\u5408\uff09\u3002</p> </li> <li>String \u662f Redis \u4e2d\u6700\u7b80\u5355\u540c\u65f6\u4e5f\u662f\u6700\u5e38\u7528\u7684\u4e00\u4e2a\u6570\u636e\u7c7b\u578b\u3002String \u662f\u4e00\u79cd\u4e8c\u8fdb\u5236\u5b89\u5168\u7684\u6570\u636e\u7c7b\u578b\uff0c\u53ef\u4ee5\u7528\u6765\u5b58\u50a8\u4efb\u4f55\u7c7b\u578b\u7684\u6570\u636e\u6bd4\u5982\u5b57\u7b26\u4e32\u3001\u6574\u6570\u3001\u6d6e\u70b9\u6570\u3001\u56fe\u7247\uff08\u56fe\u7247\u7684 base64 \u7f16\u7801\u6216\u8005\u89e3\u7801\u6216\u8005\u56fe\u7247\u7684\u8def\u5f84\uff09\u3001\u5e8f\u5217\u5316\u540e\u7684\u5bf9\u8c61\u3002</li> <li>Redis \u7684 List \u7684\u5b9e\u73b0\u4e3a\u4e00\u4e2a \u53cc\u5411\u94fe\u8868\uff0c\u5373\u53ef\u4ee5\u652f\u6301\u53cd\u5411\u67e5\u627e\u548c\u904d\u5386\uff0c\u66f4\u65b9\u4fbf\u64cd\u4f5c\uff0c\u4e0d\u8fc7\u5e26\u6765\u4e86\u90e8\u5206\u989d\u5916\u7684\u5185\u5b58\u5f00\u9500\u3002</li> <li>Redis \u4e2d\u7684 Hash \u662f\u4e00\u4e2a String \u7c7b\u578b\u7684 field-value\uff08\u952e\u503c\u5bf9\uff09 \u7684\u6620\u5c04\u8868\uff0c\u7279\u522b\u9002\u5408\u7528\u4e8e\u5b58\u50a8\u5bf9\u8c61\uff0c\u540e\u7eed\u64cd\u4f5c\u7684\u65f6\u5019\uff0c\u4f60\u53ef\u4ee5\u76f4\u63a5\u4fee\u6539\u8fd9\u4e2a\u5bf9\u8c61\u4e2d\u7684\u67d0\u4e9b\u5b57\u6bb5\u7684\u503c\u3002Hash \u7c7b\u4f3c\u4e8e JDK1.8 \u524d\u7684 <code>HashMap</code>\uff0c\u5185\u90e8\u5b9e\u73b0\u4e5f\u5dee\u4e0d\u591a(\u6570\u7ec4 + \u94fe\u8868)\u3002</li> <li>Redis \u4e2d\u7684 Set \u7c7b\u578b\u662f\u4e00\u79cd\u65e0\u5e8f\u96c6\u5408\uff0c\u96c6\u5408\u4e2d\u7684\u5143\u7d20\u6ca1\u6709\u5148\u540e\u987a\u5e8f\u4f46\u90fd\u552f\u4e00\uff0c\u6709\u70b9\u7c7b\u4f3c\u4e8e Java \u4e2d\u7684 <code>HashSet</code> \u3002\u5f53\u4f60\u9700\u8981\u5b58\u50a8\u4e00\u4e2a\u5217\u8868\u6570\u636e\uff0c\u53c8\u4e0d\u5e0c\u671b\u51fa\u73b0\u91cd\u590d\u6570\u636e\u65f6\uff0cSet \u662f\u4e00\u4e2a\u5f88\u597d\u7684\u9009\u62e9\uff0c\u5e76\u4e14 Set \u63d0\u4f9b\u4e86\u5224\u65ad\u67d0\u4e2a\u5143\u7d20\u662f\u5426\u5728\u4e00\u4e2a Set \u96c6\u5408\u5185\u7684\u91cd\u8981\u63a5\u53e3\uff0c\u8fd9\u4e2a\u4e5f\u662f List \u6240\u4e0d\u80fd\u63d0\u4f9b\u7684\u3002</li> <li>Sorted Set \u7c7b\u4f3c\u4e8e Set\uff0c\u4f46\u548c Set \u76f8\u6bd4\uff0cSorted Set \u589e\u52a0\u4e86\u4e00\u4e2a\u6743\u91cd\u53c2\u6570 <code>score</code>\uff0c\u4f7f\u5f97\u96c6\u5408\u4e2d\u7684\u5143\u7d20\u80fd\u591f\u6309 <code>score</code> \u8fdb\u884c\u6709\u5e8f\u6392\u5217\uff0c\u8fd8\u53ef\u4ee5\u901a\u8fc7 <code>score</code> \u7684\u8303\u56f4\u6765\u83b7\u53d6\u5143\u7d20\u7684\u5217\u8868\u3002</li> <li>zset\u5e95\u5c42\u6570\u636e\u7ed3\u6784</li> <li>\u538b\u7f29\u5217\u8868+\u8df3\u8868</li> <li>\u5f53\u6570\u636e\u91cf\u5c0f\u7684\u65f6\u5019\u4f7f\u7528\u538b\u7f29\u5217\u8868</li> <li>\u8df3\u8868\u7684\u539f\u7406\u5c31\u662f\u5efa\u7acb\u591a\u7ea7\u7d22\u5f15\uff0c\u7136\u540e\u901a\u8fc7\u7d22\u5f15\u6311\u6765\u8df3\u53bb\uff0c\u67e5\u627e\u65f6\u95f4\u590d\u6742\u5ea6logN (\u7c7b\u4f3c\u4e8c\u5206) \u5220\u9664\u67e5\u627e\u90fd\u662flogN</li> <li>zset\u6709\u4e00\u4e2a\u5f88\u6838\u5fc3\u7684\u64cd\u4f5c\u5c31\u662f\u8303\u56f4\u67e5\u627e\uff0c\u8303\u56f4\u67e5\u627e\u7684\u6548\u7387\u6bd4\u7ea2\u9ed1\u6811\u3001\u4e8c\u53c9\u6811\u9ad8</li> <li>zset\u7684\u5b9e\u73b0\u6bd4\u7ea2\u9ed1\u6811\u4e8c\u53c9\u6811\u7b80\u5355\uff0c\u80fd\u901a\u8fc7\u63a7\u5236\u7d22\u5f15\u7684\u5c42\u7ea7\uff0c\u6765\u63a7\u5236\u5185\u5b58</li> <li>\u76f8\u5bf9\u5e73\u8861\u6811\uff0c\u5bf9\u4e8e\u8303\u56f4\u67e5\u8be2\u6765\u8bf4\uff0c\u5b83\u4e5f\u53ef\u4ee5\u901a\u8fc7\u4e2d\u5e8f\u904d\u5386\u7684\u65b9\u5f0f\u8fbe\u5230\u548c\u8df3\u8868\u4e00\u6837\u7684\u6548\u679c\u3002\u4f46\u662f\u5b83\u7684\u6bcf\u4e00\u6b21\u63d2\u5165\u6216\u8005\u5220\u9664\u64cd\u4f5c\u90fd\u9700\u8981\u4fdd\u8bc1\u6574\u9897\u6811\u5de6\u53f3\u8282\u70b9\u7684\u7edd\u5bf9\u5e73\u8861\uff0c\u53ea\u8981\u4e0d\u5e73\u8861\u5c31\u8981\u901a\u8fc7\u65cb\u8f6c\u64cd\u4f5c\u6765\u4fdd\u6301\u5e73\u8861\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u662f\u6bd4\u8f83\u8017\u65f6\u7684\u3002</li> <li> <p>B+\u6811\u5b83\u662f\u7edd\u5bf9\u7684\u5e73\u8861\uff0c\u5373\u6811\u7684\u5404\u4e2a\u5206\u652f\u9ad8\u5ea6\u76f8\u5dee\u4e0d\u5927\uff0c\u786e\u4fdd\u67e5\u8be2\u548c\u63d2\u5165\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(log n)\uff0c\u53f6\u5b50\u8282\u70b9\u95f4\u901a\u8fc7\u94fe\u8868\u6307\u9488\u76f8\u8fde\uff0c\u8303\u56f4\u67e5\u8be2\u8868\u73b0\u51fa\u8272\u3002\u5b83\u7684\u6838\u5fc3\u601d\u60f3\u662f\u901a\u8fc7\u53ef\u80fd\u5c11\u7684 IO \u5b9a\u4f4d\u5230\u5c3d\u53ef\u80fd\u591a\u7684\u7d22\u5f15\u6765\u83b7\u5f97\u67e5\u8be2\u6570\u636e\u3002</p> </li> <li> <p>redis \u7684\u6dd8\u6c70\u673a\u5236\u662f\u600e\u4e48\u6837\u7684\uff1f\uff08\u5047\u5982\u7f13\u5b58\u8fc7\u591a\uff0c\u5185\u5b58\u662f\u6709\u9650\u7684\uff0c\u5185\u5b58\u88ab\u5360\u6ee1\u4e86\u600e\u4e48\u529e\uff1f\uff09</p> </li> <li> <p>\u6570\u636e\u7684\u6dd8\u6c70\u7b56\u7565\uff1a\u5f53 Redis \u4e2d\u7684\u5185\u5b58\u4e0d\u591f\u7528\u65f6\uff0c\u6b64\u65f6\u5728\u5411 Redis \u4e2d\u6dfb\u52a0\u65b0\u7684 key\uff0c\u90a3\u4e48 Redis \u5c31\u4f1a\u6309\u7167\u67d0\u4e00\u79cd\u89c4\u5219\u5c06\u5185\u5b58\u4e2d\u7684\u6570\u636e\u5220\u9664\u6389\uff0c\u8fd9\u79cd\u6570\u636e\u7684\u5220\u9664\u89c4\u5219\u88ab\u79f0\u4e4b\u4e3a\u5185\u5b58\u7684\u6dd8\u6c70\u7b56\u7565\u3002</p> </li> <li>\u8fd9\u4e2a\u5728 redis \u4e2d\u63d0\u4f9b\u4e86\u5f88\u591a\u79cd\uff0c\u9ed8\u8ba4\u662f noeviction\uff0c\u4e0d\u6dd8\u6c70\u4efb\u4f55 key\uff0c\u5185\u90e8\u4e0d\u8db3\u76f4\u63a5\u62a5\u9519</li> <li>\u4f46\u662f\u5185\u5b58\u6ee1\u65f6\u4e0d\u5141\u8bb8\u5199\u5165\u65b0\u6570\u636e\u3002\u8fd8\u6709\u968f\u673a\u6dd8\u6c70\u4ee5\u53ca LRU\uff08\u6700\u5c11\u6700\u8fd1\u4f7f\u7528\uff09\u548c LFU\uff08\u6700\u5c11\u9891\u7387\u4f7f\u7528\uff09\u7b49\u7b49\u3002</li> <li>\u662f\u53ef\u4ee5\u5728redis\u7684\u914d\u7f6e\u6587\u4ef6\u4e2d\u8fdb\u884c\u8bbe\u7f6e\u7684\uff0c\u91cc\u9762\u6709\u4e24\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u6982\u5ff5\uff0c\u4e00\u4e2a\u662fLRU\uff0c\u53e6\u5916\u4e00\u4e2a\u662fLFU</li> <li>LRU\u7684\u610f\u601d\u5c31\u662f\u6700\u5c11\u6700\u8fd1\u4f7f\u7528\uff0c\u7528\u5f53\u524d\u65f6\u95f4\u51cf\u53bb\u6700\u540e\u4e00\u6b21\u8bbf\u95ee\u65f6\u95f4\uff0c\u8fd9\u4e2a\u503c\u8d8a\u5927\u5219\u6dd8\u6c70\u4f18\u5148\u7ea7\u8d8a\u9ad8\u3002</li> <li>LFU\u7684\u610f\u601d\u662f\u6700\u5c11\u9891\u7387\u4f7f\u7528\u3002\u4f1a\u7edf\u8ba1\u6bcf\u4e2akey\u7684\u8bbf\u95ee\u9891\u7387\uff0c\u503c\u8d8a\u5c0f\u6dd8\u6c70\u4f18\u5148\u7ea7\u8d8a\u9ad8</li> <li>\u6211\u4eec\u5728\u9879\u76ee\u8bbe\u7f6e\u7684allkeys-lru\uff0c\u6311\u9009\u6700\u8fd1\u6700\u5c11\u4f7f\u7528\u7684\u6570\u636e\u6dd8\u6c70\uff0c\u628a\u4e00\u4e9b\u7ecf\u5e38\u8bbf\u95ee\u7684key\u7559\u5728redis\u4e2d</li> <li> <p>\u4fdd\u8bc1Redis\u4e2d\u7684\u6570\u636e\u90fd\u662f\u70ed\u70b9\u6570\u636e ?\u53ef\u4ee5\u4f7f\u7528 allkeys-lru \uff08\u6311\u9009\u6700\u8fd1\u6700\u5c11\u4f7f\u7528\u7684\u6570\u636e\u6dd8\u6c70\uff09\u6dd8\u6c70\u7b56\u7565\uff0c\u90a3\u7559\u4e0b\u6765\u7684\u90fd\u662f\u7ecf\u5e38\u8bbf\u95ee\u7684\u70ed\u70b9\u6570\u636e</p> </li> <li> <p>Redis\u7684\u8fc7\u671f\u65f6\u95f4\u8981\u600e\u4e48\u8bbe\u7f6e</p> </li> <li> <p>EXPIRE key seconds</p> </li> <li> <p>\u8981\u662flua\u811a\u672c\u6765\u4fdd\u8bc1</p> </li> <li> <p><code>lua\u00b7   if redis.call('set', KEYS[1], ARGV[1]) then       return redis.call('expire', KEYS[1], ARGV[2])   else       return nil   end</code></p> </li> <li> <p><code>redis-cli EVAL \"$(cat script.lua)\" 1 mykey myvalue 60</code></p> </li> <li></li> <li> <p>\u5728\u4f60\u7684\u9879\u76ee\u4e2d redis \u4f5c\u4e3a\u7f13\u5b58, MySQL \u7684\u6570\u636e\u5982\u4f55\u4e0e redis \u8fdb\u884c\u540c\u6b65\u5462\uff1f</p> </li> <li>\u82cd\u7a79\u5916\u5356\u8fd9\u4e2a\u9879\u76ee\u4e2d\u7528\u6237\u5728\u67e5\u770b\u5ba2\u670d\u72b6\u6001\u548c\u5e97\u94fa\u72b6\u6001\u65f6\uff0c\u9700\u8981\u8ba9\u6570\u636e\u5e93\u4e0e redis \u9ad8\u5ea6\u4fdd\u6301\u4e00\u81f4\uff0c\u56e0\u4e3a\u5982\u679c\u5e97\u94fa\u6ca1\u6709\u8425\u4e1a\u7684\u8bdd\u5c31\u4e0d\u80fd\u70b9\u5355\u4e86\uff0c\u6240\u4ee5\u5b83\u8981\u6c42\u65f6\u6548\u6027\u6bd4\u8f83\u9ad8\uff0c\u6240\u4ee5\u91c7\u7528\u7684\u8bfb\u5199\u9501\u4fdd\u8bc1\u7684\u5f3a\u4e00\u81f4\u6027\u3002\u6211\u4eec\u91c7\u7528\u7684\u662f redisson \u5b9e\u73b0\u7684\u8bfb\u5199\u9501\uff0c\u5728\u8bfb\u7684\u65f6\u5019\u6dfb\u52a0\u5171\u4eab\u9501\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u8bfb\u8bfb\u4e0d\u4e92\u65a5\uff0c\u8bfb\u5199\u4e92\u65a5\u3002\u5f53\u6211\u4eec\u66f4\u65b0\u6570\u636e\u7684\u65f6\u5019\uff0c\u6dfb\u52a0\u6392\u4ed6\u9501\uff0c\u5b83\u662f\u8bfb\u5199\uff0c\u8bfb\u8bfb\u90fd\u4e92\u65a5\uff0c\u8fd9\u6837\u5c31\u80fd\u4fdd\u8bc1\u5728\u5199\u6570\u636e\u7684\u540c\u65f6\u662f\u4e0d\u4f1a\u8ba9\u5176\u4ed6\u7ebf\u7a0b\u8bfb\u6570\u636e\u7684\uff0c\u907f\u514d\u4e86\u810f\u6570\u636e\u3002\u8fd9\u91cc\u9762\u9700\u8981\u6ce8\u610f\u7684\u662f\u8bfb\u65b9\u6cd5\u548c\u5199\u65b9\u6cd5\u4e0a\u9700\u8981\u4f7f\u7528\u540c\u4e00\u628a\u9501\u624d\u884c\u3002</li> <li>\u5546\u54c1\u7684\u66f4\u65b0\u4f7f\u7528\u5ef6\u8fdf\u53cc\u5220\uff0c\u5982\u679c\u662f\u5199\u64cd\u4f5c\uff0c\u6211\u4eec\u5148\u628a\u7f13\u5b58\u4e2d\u7684\u6570\u636e\u5220\u9664\uff0c\u7136\u540e\u66f4\u65b0\u6570\u636e\u5e93\uff0c\u6700\u540e\u518d\u5ef6\u65f6\u5220\u9664\u7f13\u5b58\u4e2d\u7684\u6570\u636e</li> <li> <p>\u5176\u4e2d\u8fd9\u4e2a\u5ef6\u65f6\u591a\u4e45\u4e0d\u592a\u597d\u786e\u5b9a\uff0c\u5728\u5ef6\u65f6\u7684\u8fc7\u7a0b\u4e2d\u53ef\u80fd\u4f1a\u51fa\u73b0\u810f\u6570\u636e\uff0c\u5e76\u4e0d\u80fd\u4fdd\u8bc1\u5f3a\u4e00\u81f4\u6027\uff0c\u6240\u4ee5\u6ca1\u6709\u91c7\u7528\u5b83\u3002</p> </li> <li> <p>\u5982\u4f55\u89e3\u51b3 Redis \u7684\u7f13\u5b58\u7a7f\u900f\u95ee\u9898</p> </li> <li> <p>\u7f13\u5b58\u7a7f\u900f\u662f\u6307\u67e5\u8be2\u4e00\u4e2a\u4e00\u5b9a\u4e0d\u5b58\u5728\u7684\u6570\u636e\uff0c\u5982\u679c\u4ece\u5b58\u50a8\u5c42\u67e5\u4e0d\u5230\u6570\u636e\u5219\u4e0d\u5199\u5165\u7f13\u5b58\uff0c\u8fd9\u5c06\u5bfc\u81f4\u8fd9\u4e2a\u4e0d\u5b58\u5728\u7684\u6570\u636e\u6bcf\u6b21\u8bf7\u6c42\u90fd\u8981\u5230 DB \u53bb\u67e5\u8be2\uff0c\u53ef\u80fd\u5bfc\u81f4 DB \u6302\u6389\u3002\u8fd9\u79cd\u60c5\u51b5\u5927\u6982\u7387\u662f\u906d\u5230\u4e86\u653b\u51fb\u3002</p> </li> <li>\u4f7f\u7528\u5e03\u9686\u8fc7\u6ee4\u5668\u6765\u89e3\u51b3\u7f13\u5b58\u7a7f\u900f\uff1a\u4e3b\u8981\u662f\u7528\u4e8e\u68c0\u7d22\u4e00\u4e2a\u5143\u7d20\u662f\u5426\u5728\u4e00\u4e2a\u96c6\u5408\u4e2d\u3002\u6211\u4eec\u5f53\u65f6\u4f7f\u7528\u7684\u662f redisson \u5b9e\u73b0\u7684\u5e03\u9686\u8fc7\u6ee4\u5668\u3002\u5b83\u7684\u5e95\u5c42\u4e3b\u8981\u662f\u4e00\u4e2abitmap\uff0c\u91cc\u9762\u5b58\u653e\u7684\u4e8c\u8fdb\u5236 0 \u6216 1\u3002\u5728\u4e00\u5f00\u59cb\u90fd\u662f 0\uff0c\u5f53\u4e00\u4e2a key \u6765\u4e86\u4e4b\u540e\u7ecf\u8fc7 3 \u6b21 hash \u8ba1\u7b97\uff0c\u6a21\u4e8e\u6570\u7ec4\u957f\u5ea6\u627e\u5230\u6570\u636e\u7684\u4e0b\u6807\u7136\u540e\u628a\u6570\u7ec4\u4e2d\u539f\u6765\u7684 0 \u6539\u4e3a 1\uff0c\u8fd9\u6837\u7684\u8bdd\uff0c\u4e09\u4e2a\u6570\u7ec4\u7684\u4f4d\u7f6e\u5c31\u80fd\u6807\u660e\u4e00\u4e2a key \u7684\u5b58\u5728\u3002</li> <li> <p>\u67e5\u627e\u7684\u8fc7\u7a0b\u4e5f\u662f\u4e00\u6837\u7684\u3002\u5f53\u7136\u662f\u6709\u7f3a\u70b9\u7684\uff0c\u5e03\u9686\u8fc7\u6ee4\u5668\u6709\u53ef\u80fd\u4f1a\u4ea7\u751f\u4e00\u5b9a\u7684\u8bef\u5224\uff0c\u6211\u4eec\u4e00\u822c\u53ef\u4ee5\u8bbe\u7f6e\u8fd9\u4e2a\u8bef\u5224\u7387\uff0c\u5927\u6982\u4e0d\u4f1a\u8d85\u8fc7 5%\uff0c\u5176\u5b9e\u8fd9\u4e2a\u8bef\u5224\u662f\u5fc5\u7136\u5b58\u5728\u7684\uff0c\u8981\u4e0d\u5c31\u5f97\u589e\u52a0\u6570\u7ec4\u7684\u957f\u5ea6\uff0c\u5176\u5b9e\u5df2\u7ecf\u7b97\u662f\u5f88\u5212\u5206\u4e86\uff0c5%\u4ee5\u5185\u7684\u8bef\u5224\u7387\u4e00\u822c\u7684\u9879\u76ee\u4e5f\u80fd\u63a5\u53d7\uff0c\u4e0d\u81f3\u4e8e\u9ad8\u5e76\u53d1\u4e0b\u538b\u5012\u6570\u636e\u5e93\u3002</p> </li> <li></li> </ul> <p>\u200b </p> <ul> <li> <p>\u5e03\u9686\u8fc7\u6ee4\u5668\u662f\u4f60\u81ea\u5df1\u5199\u7684\u8fd8\u662f\u7b2c\u4e09\u65b9\uff0c\u81ea\u5df1\u5199\u7684\u8bef\u5dee\u77e5\u9053\u662f\u591a\u5c11\u5417\uff1f\u6709\u8003\u8651\u8fc7\u5417\u3002\u8bb2\u8bb2\u4f60\u7684\u5e03\u9686\u8fc7\u6ee4\u5668\u662f\u600e\u4e48\u81ea\u5b9a\u4e49\u5b9e\u73b0\u7684</p> </li> <li> <p>\u5e03\u9686\u7684\u8bef\u5dee\u7387\u662f\u81ea\u5df1\u7ed9\u5b9a\u7684\uff0c\u7136\u540e\u6839\u636e\u7ed9\u5b9a\u7684\u8bef\u5dee\u7387\u6765\u8ba1\u7b97\u51fa\u54c8\u5e0c\u51fd\u6570\u7684\u4e2a\u6570\u8fd8\u6709bitmap\u7684\u5927\u5c0f</p> </li> <li>\u4f7f\u7528\u5e03\u9686\u8fc7\u6ee4\u5668\u6765\u89e3\u51b3\u7f13\u5b58\u7a7f\u900f\uff1a\u4e3b\u8981\u662f\u7528\u4e8e\u68c0\u7d22\u4e00\u4e2a\u5143\u7d20\u662f\u5426\u5728\u4e00\u4e2a\u96c6\u5408\u4e2d\u3002\u6211\u4eec\u5f53\u65f6\u4f7f\u7528\u7684\u662f redisson \u5b9e\u73b0\u7684\u5e03\u9686\u8fc7\u6ee4\u5668\u3002\u5b83\u7684\u5e95\u5c42\u4e3b\u8981\u662f\u4e00\u4e2abitmap\uff0c\u91cc\u9762\u5b58\u653e\u7684\u4e8c\u8fdb\u5236 0 \u6216 1\u3002\u5728\u4e00\u5f00\u59cb\u90fd\u662f 0\uff0c\u5f53\u4e00\u4e2a key \u6765\u4e86\u4e4b\u540e\u7ecf\u8fc7 3 \u6b21 hash \u8ba1\u7b97\uff0c\u6a21\u4e8e\u6570\u7ec4\u957f\u5ea6\u627e\u5230\u6570\u636e\u7684\u4e0b\u6807\u7136\u540e\u628a\u6570\u7ec4\u4e2d\u539f\u6765\u7684 0 \u6539\u4e3a 1\uff0c\u8fd9\u6837\u7684\u8bdd\uff0c\u4e09\u4e2a\u6570\u7ec4\u7684\u4f4d\u7f6e\u5c31\u80fd\u6807\u660e\u4e00\u4e2a key \u7684\u5b58\u5728\u3002</li> <li>\u67e5\u627e\u7684\u8fc7\u7a0b\u4e5f\u662f\u4e00\u6837\u7684\u3002\u5f53\u7136\u662f\u6709\u7f3a\u70b9\u7684\uff0c\u5e03\u9686\u8fc7\u6ee4\u5668\u6709\u53ef\u80fd\u4f1a\u4ea7\u751f\u4e00\u5b9a\u7684\u8bef\u5224\uff0c\u6211\u4eec\u4e00\u822c\u53ef\u4ee5\u8bbe\u7f6e\u8fd9\u4e2a\u8bef\u5224\u7387\uff0c\u5927\u6982\u4e0d\u4f1a\u8d85\u8fc7 5%\uff0c\u5176\u5b9e\u8fd9\u4e2a\u8bef\u5224\u662f\u5fc5\u7136\u5b58\u5728\u7684\uff0c\u8981\u4e0d\u5c31\u5f97\u589e\u52a0\u6570\u7ec4\u7684\u957f\u5ea6\uff0c\u5176\u5b9e\u5df2\u7ecf\u7b97\u662f\u5f88\u5212\u5206\u4e86\uff0c5%\u4ee5\u5185\u7684\u8bef\u5224\u7387\u4e00\u822c\u7684\u9879\u76ee\u4e5f\u80fd\u63a5\u53d7\uff0c\u4e0d\u81f3\u4e8e\u9ad8\u5e76\u53d1\u4e0b\u538b\u5012\u6570\u636e\u5e93\u3002</li> <li> <p>\u81ea\u5df1\u5b9e\u73b0https://zhuanlan.zhihu.com/p/685677923?utm_psn=1752045231543799808</p> </li> <li> <p>redis \u7684 IO \u591a\u8def\u590d\u7528\u662f\u4ec0\u4e48\uff1f   Redis \u7684 IO \u591a\u8def\u590d\u7528\u662f\u4e00\u79cd\u6280\u672f\uff0c\u5141\u8bb8 Redis \u540c\u65f6\u76d1\u542c\u591a\u4e2a\u5ba2\u6237\u7aef\u8fde\u63a5\uff0c\u5e76\u5728\u6709\u6570\u636e\u5230\u8fbe\u65f6\u53ca\u65f6\u5904\u7406\uff0c\u63d0\u9ad8\u4e86 IO \u6548\u7387\u548c\u6027\u80fd\u3002\u5b83\u901a\u8fc7\u4e00\u79cd\u673a\u5236\u6765\u7ba1\u7406\u548c\u5904\u7406\u591a\u4e2a\u8fde\u63a5\uff0c\u4f7f\u5f97 Redis \u80fd\u591f\u9ad8\u6548\u5730\u5904\u7406\u5927\u91cf\u5ba2\u6237\u7aef\u8bf7\u6c42\u3002</p> </li> <li>I/O\u591a\u8def\u590d\u7528\u662f\u6307\u5229\u7528\u5355\u4e2a\u7ebf\u7a0b\u6765\u540c\u65f6\u76d1\u542c\u591a\u4e2aSocket \uff0c\u5e76\u5728\u67d0\u4e2aSocket\u53ef\u8bfb\u3001\u53ef\u5199\u65f6\u5f97\u5230\u901a\u77e5\uff0c\u4ece\u800c\u907f\u514d\u65e0\u6548\u7684\u7b49\u5f85\uff0c\u5145\u5206\u5229\u7528CPU\u8d44\u6e90\u3002\u76ee\u524d\u7684I/O\u591a\u8def\u590d\u7528\u90fd\u662f\u91c7\u7528\u7684epoll\u6a21\u5f0f\u5b9e\u73b0\uff0c\u5b83\u4f1a\u5728\u901a\u77e5\u7528\u6237\u8fdb\u7a0bSocket\u5c31\u7eea\u7684\u540c\u65f6\uff0c\u628a\u5df2\u5c31\u7eea\u7684Socket\u5199\u5165\u7528\u6237\u7a7a\u95f4\uff0c\u4e0d\u9700\u8981\u6328\u4e2a\u904d\u5386Socket\u6765\u5224\u65ad\u662f\u5426\u5c31\u7eea\uff0c\u63d0\u5347\u4e86\u6027\u80fd\u3002</li> <li>\u5176\u4e2dRedis\u7684\u7f51\u7edc\u6a21\u578b\u5c31\u662f\u4f7f\u7528I/O\u591a\u8def\u590d\u7528\u7ed3\u5408\u4e8b\u4ef6\u7684\u5904\u7406\u5668\u6765\u5e94\u5bf9\u591a\u4e2aSocket\u8bf7\u6c42\uff0c\u6bd4\u5982\uff0c\u63d0\u4f9b\u4e86\u8fde\u63a5\u5e94\u7b54\u5904\u7406\u5668\u3001\u547d\u4ee4\u56de\u590d\u5904\u7406\u5668\uff0c\u547d\u4ee4\u8bf7\u6c42\u5904\u7406\u5668\uff1b</li> <li>\u5728Redis6.0\u4e4b\u540e\uff0c\u4e3a\u4e86\u63d0\u5347\u66f4\u597d\u7684\u6027\u80fd\uff0c\u5728\u547d\u4ee4\u56de\u590d\u5904\u7406\u5668\u4f7f\u7528\u4e86\u591a\u7ebf\u7a0b\u6765\u5904\u7406\u56de\u590d\u4e8b\u4ef6\uff0c\u5728\u547d\u4ee4\u8bf7\u6c42\u5904\u7406\u5668\u4e2d\uff0c\u5c06\u547d\u4ee4\u7684\u8f6c\u6362\u4f7f\u7528\u4e86\u591a\u7ebf\u7a0b\uff0c\u589e\u52a0\u547d\u4ee4\u8f6c\u6362\u901f\u5ea6\uff0c\u5728\u547d\u4ee4\u6267\u884c\u7684\u65f6\u5019\uff0c\u4f9d\u7136\u662f\u5355\u7ebf\u7a0b\uff0c\u4f9d\u7136\u7ebf\u7a0b\u5b89\u5168</li> <li>\u9636\u6bb5\u4e00:\u7528\u6237\u8fdb\u7a0b\u8c03\u7528select\uff0c\u6307\u5b9a\u8981\u76d1\u542c\u7684Socket\u96c6\u5408\uff0c\u5185\u6838\u76d1\u542c\u5bf9\u5e94\u7684\u591a\u4e2asocket\uff0c\u4efb\u610f\u4e00\u4e2a\u6216\u591a\u4e2asocket\u6570\u636e\u5c31\u7eea\u5219\u8fd4\u56dereadable\uff0c\u6b64\u8fc7\u7a0b\u4e2d\u7528\u6237\u8fdb\u7a0b\u963b\u585e</li> <li>\u9636\u6bb5\u4e8c:\u7528\u6237\u8fdb\u7a0b\u627e\u5230\u5c31\u7eea\u7684socket\uff0c \u4f9d\u6b21\u8c03\u7528recvfrom\u8bfb\u53d6\u6570\u636e\uff0c\u5185\u6838\u5c06\u6570\u636e\u62f7\u8d1d\u5230\u7528\u6237\u7a7a\u95f4\uff0c\u7528\u6237\u8fdb\u7a0b\u5904\u7406\u6570\u636e</li> <li>I/O\u591a\u8def\u590d\u7528\u662f\u5229\u7528\u5355\u4e2a\u7ebf\u7a0b\u6765\u540c\u65f6\u76d1\u542c\u591a\u4e2aSocket \uff0c\u5e76\u5728\u67d0\u4e2aSocket\u53ef\u8bfb\u3001\u53ef\u5199\u65f6\u5f97\u5230\u901a\u77e5\uff0c\u4ece\u800c\u907f\u514d\u65e0\u6548\u7684\u7b49\u5f85\u5145\u5206\u5229\u7528CPU\u8d44\u6e90\u3002\u4e0d\u8fc7\u76d1\u542cSocket\u7684\u65b9\u5f0f\u3001\u901a\u77e5\u7684\u65b9\u5f0f\u53c8\u6709\u591a\u79cd\u5b9e\u73b0\uff0c\u5e38\u89c1\u7684\u6709:select,poll,epoll</li> <li>select\u548cpoII\u53ea\u4f1a\u901a\u77e5\u7528\u6237\u8fdb\u7a0b\u6709Socket\u5c31\u7eea\uff0c\u4f46\u4e0d\u786e\u5b9a\u5177\u4f53\u662f\u54ea\u4e2aSocket\uff0c\u9700\u8981\u7528\u6237\u8fdb\u7a0b\u9010\u4e2a\u904d\u5386Socket\u6765\u786e\u8ba4</li> <li> <p>epoll\u5219\u4f1a\u5728\u901a\u77e5\u7528\u6237\u8fdb\u7a0bSocket\u5c31\u7eea\u7684\u540c\u65f6\uff0c\u628a\u5df2\u5c31\u7eea\u7684Socket\u5199\u5165\u7528\u6237\u7a7a\u95f4</p> </li> <li> <p>redis\u96c6\u7fa4\u7684\u6570\u636e\u4e00\u81f4\u6027\u4f60\u662f\u600e\u4e48\u89e3\u51b3\u7684\uff1f</p> </li> <li> <p>\u5728Redis\u4e2d\u63d0\u4f9b\u7684\u96c6\u7fa4\u65b9\u6848\u603b\u5171\u6709\u4e09\u79cd\uff1a\u4e3b\u4ece\u590d\u5236\u3001\u54e8\u5175\u6a21\u5f0f\u3001Redis\u5206\u7247\u96c6\u7fa4</p> </li> <li>\u4e3b\u4ece\u540c\u6b65\uff1a\u5355\u8282\u70b9Redis\u7684\u5e76\u53d1\u80fd\u529b\u662f\u6709\u4e0a\u9650\u7684\uff0c\u8981\u8fdb\u4e00\u6b65\u63d0\u9ad8Redis\u7684\u5e76\u53d1\u80fd\u529b\uff0c\u53ef\u4ee5\u642d\u5efa\u4e3b\u4ece\u96c6\u7fa4\uff0c\u5b9e\u73b0\u8bfb\u5199\u5206\u79bb\u3002\u4e00\u822c\u90fd\u662f\u4e00\u4e3b\u591a\u4ece\uff0c\u4e3b\u8282\u70b9\u8d1f\u8d23\u5199\u6570\u636e\uff0c\u4ece\u8282\u70b9\u8d1f\u8d23\u8bfb\u6570\u636e\uff0c\u4e3b\u8282\u70b9\u5199\u5165\u6570\u636e\u4e4b\u540e\uff0c\u9700\u8981\u628a\u6570\u636e\u540c\u6b65\u5230\u4ece\u8282\u70b9\u4e2d</li> <li>\u4e3b\u4ece\u540c\u6b65\u6570\u636e\u7684\u6d41\u7a0b\uff1a\u4e3b\u4ece\u540c\u6b65\u5206\u4e3a\u4e86\u4e24\u4e2a\u9636\u6bb5\uff0c\u4e00\u4e2a\u662f\u5168\u91cf\u540c\u6b65\uff0c\u4e00\u4e2a\u662f\u589e\u91cf\u540c\u6b65\u3002\u5168\u91cf\u540c\u6b65\u662f\u6307\u4ece\u8282\u70b9\u7b2c\u4e00\u6b21\u4e0e\u4e3b\u8282\u70b9\u5efa\u7acb\u8fde\u63a5\u7684\u65f6\u5019\u4f7f\u7528\u5168\u91cf\u540c\u6b65\uff0c\u6d41\u7a0b\u662f\u8fd9\u6837\u7684\uff1a\u4ece\u8282\u70b9\u8bf7\u6c42\u4e3b\u8282\u70b9\u540c\u6b65\u6570\u636e\uff0c\u5176\u4e2d\u4ece\u8282\u70b9\u4f1a\u643a\u5e26\u81ea\u5df1\u7684replication id\u548coffset\u504f\u79fb\u91cf\u3002\u4e3b\u8282\u70b9\u5224\u65ad\u662f\u5426\u662f\u7b2c\u4e00\u6b21\u8bf7\u6c42\uff0c\u4e3b\u8981\u5224\u65ad\u7684\u4f9d\u636e\u5c31\u662f\uff0c\u4e3b\u8282\u70b9\u4e0e\u4ece\u8282\u70b9\u662f\u5426\u662f\u540c\u4e00\u4e2areplication id\uff0c\u5982\u679c\u4e0d\u662f\uff0c\u5c31\u8bf4\u660e\u662f\u7b2c\u4e00\u6b21\u540c\u6b65\uff0c\u90a3\u4e3b\u8282\u70b9\u5c31\u4f1a\u628a\u81ea\u5df1\u7684replication id\u548coffset\u53d1\u9001\u7ed9\u4ece\u8282\u70b9\uff0c\u8ba9\u4ece\u8282\u70b9\u4e0e\u4e3b\u8282\u70b9\u7684\u4fe1\u606f\u4fdd\u6301\u4e00\u81f4\u3002\u5728\u540c\u65f6\u4e3b\u8282\u70b9\u4f1a\u6267\u884cbgsave\uff0c\u751f\u6210rdb\u6587\u4ef6\u540e\uff0c\u53d1\u9001\u7ed9\u4ece\u8282\u70b9\u53bb\u6267\u884c\uff0c\u4ece\u8282\u70b9\u5148\u628a\u81ea\u5df1\u7684\u6570\u636e\u6e05\u7a7a\uff0c\u7136\u540e\u6267\u884c\u4e3b\u8282\u70b9\u53d1\u9001\u8fc7\u6765\u7684rdb\u6587\u4ef6\uff0c\u8fd9\u6837\u5c31\u4fdd\u6301\u4e86\u4e00\u81f4\u3002\u5f53\u7136\uff0c\u5982\u679c\u5728rdb\u751f\u6210\u6267\u884c\u671f\u95f4\uff0c\u4f9d\u7136\u6709\u8bf7\u6c42\u5230\u4e86\u4e3b\u8282\u70b9\uff0c\u800c\u4e3b\u8282\u70b9\u4f1a\u4ee5\u547d\u4ee4\u7684\u65b9\u5f0f\u8bb0\u5f55\u5230\u7f13\u51b2\u533a\uff0c\u7f13\u51b2\u533a\u662f\u4e00\u4e2a\u65e5\u5fd7\u6587\u4ef6\uff0c\u6700\u540e\u628a\u8fd9\u4e2a\u65e5\u5fd7\u6587\u4ef6\u53d1\u9001\u7ed9\u4ece\u8282\u70b9\uff0c\u8fd9\u6837\u5c31\u80fd\u4fdd\u8bc1\u4e3b\u8282\u70b9\u4e0e\u4ece\u8282\u70b9\u5b8c\u5168\u4e00\u81f4\u4e86\uff0c\u540e\u671f\u518d\u540c\u6b65\u6570\u636e\u7684\u65f6\u5019\uff0c\u90fd\u662f\u4f9d\u8d56\u4e8e\u8fd9\u4e2a\u65e5\u5fd7\u6587\u4ef6\uff0c\u8fd9\u4e2a\u5c31\u662f\u5168\u91cf\u540c\u6b65</li> <li> <p>\u589e\u91cf\u540c\u6b65\u6307\u7684\u662f\uff0c\u5f53\u4ece\u8282\u70b9\u670d\u52a1\u91cd\u542f\u4e4b\u540e\uff0c\u6570\u636e\u5c31\u4e0d\u4e00\u81f4\u4e86\uff0c\u6240\u4ee5\u8fd9\u4e2a\u65f6\u5019\uff0c\u4ece\u8282\u70b9\u4f1a\u8bf7\u6c42\u4e3b\u8282\u70b9\u540c\u6b65\u6570\u636e\uff0c\u4e3b\u8282\u70b9\u8fd8\u662f\u5224\u65ad\u4e0d\u662f\u7b2c\u4e00\u6b21\u8bf7\u6c42\uff0c\u4e0d\u662f\u7b2c\u4e00\u6b21\u5c31\u83b7\u53d6\u4ece\u8282\u70b9\u7684offset\u503c\uff0c\u7136\u540e\u4e3b\u8282\u70b9\u4ece\u547d\u4ee4\u65e5\u5fd7\u4e2d\u83b7\u53d6offset\u503c\u4e4b\u540e\u7684\u6570\u636e\uff0c\u53d1\u9001\u7ed9\u4ece\u8282\u70b9\u8fdb\u884c\u6570\u636e\u540c\u6b65</p> </li> <li> <p>redis\u7f13\u5b58\u67e5\u8be2\u901f\u5ea6\u662f\u5982\u4f55\u8fdb\u884c\u6d4b\u8bd5\u7684</p> </li> <li> </li> </ul> <p>Redis\u81ea\u5e26\u4e86\u4e00\u4e2a\u6027\u80fd\u6d4b\u8bd5\u5de5\u5177<code>redis-benchmark</code>\uff0c\u5b83\u53ef\u4ee5\u7528\u6765\u6267\u884c\u57fa\u672c\u7684\u6027\u80fd\u6d4b\u8bd5\u3002\u8fd9\u4e2a\u5de5\u5177\u6d4b\u8bd5Redis\u670d\u52a1\u5668\u7684\u6027\u80fd\uff0c\u5305\u62ec\u6bcf\u79d2\u6267\u884c\u7684\u8bf7\u6c42\u6b21\u6570\uff08TPS\u6216QPS\uff09\u548c\u8bf7\u6c42\u7684\u5e73\u5747\u5ef6\u8fdf\u3002</p> <p>\u57fa\u672c\u7528\u6cd5\u5982\u4e0b\uff1a</p> <pre><code>redis-benchmark -h [hostname] -p [port] -c [concurrent_connections] -n [number_of_requests]\n</code></pre> <p>\u5176\u4e2d\uff1a</p> <ul> <li><code>-h</code> \u6307\u5b9aRedis\u670d\u52a1\u5668\u7684\u4e3b\u673a\u540d\u3002</li> <li><code>-p</code> \u6307\u5b9aRedis\u670d\u52a1\u5668\u7684\u7aef\u53e3\u3002</li> <li><code>-c</code> \u8bbe\u7f6e\u5e76\u53d1\u8fde\u63a5\u6570\u3002</li> <li><code>-n</code> \u8bbe\u7f6e\u8bf7\u6c42\u603b\u6570\u3002</li> </ul> <p>### 2. \u4f7f\u7528<code>redis-cli</code>\u7684<code>--latency</code>\u548c<code>--stat</code>\u547d\u4ee4</p> <ul> <li><code>redis-cli --latency -h [hostname] -p [port]</code>\uff1a\u76d1\u89c6Redis\u670d\u52a1\u5668\u7684\u5ef6\u8fdf\u3002</li> <li><code>redis-cli --stat</code>\uff1a\u63d0\u4f9bRedis\u670d\u52a1\u5668\u7684\u7edf\u8ba1\u4fe1\u606f\uff0c\u5305\u62ec\u6bcf\u79d2\u5904\u7406\u7684\u547d\u4ee4\u6570\u3002</li> </ul>"},{"location":"Problem/interview/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/#1-redis-benchmark","title":"1. \u4f7f\u7528<code>redis-benchmark</code>\u5de5\u5177","text":""},{"location":"Problem/interview/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/#jwt","title":"JWT\u4ee4\u724c","text":"<ul> <li> <p>\u9879\u76ee\u4e2d\u600e\u4e48\u4f7f\u7528\u7684?</p> </li> <li> <p>\u9996\u5148\u662f\u5458\u5de5\u767b\u5f55\u7684\u65f6\u5019\u6bcf\u6b21\u7684\u8bf7\u6c42\u4ece\u524d\u7aef\u90fd\u4f1a\u643a\u5e26jwt\u4ee4\u724c,\u7136\u540e\u901a\u8fc7JWT\u4ee4\u724c\u53ef\u4ee5\u89e3\u6790\u51fa\u5f53\u524d\u767b\u5f55\u5458\u5de5id</p> </li> <li> <p>\u540e\u7aef\u7684\u62e6\u622a\u5668\u4f1a\u5c06\u89e3\u6790\u51fa\u6765\u7684\u5f53\u524d\u767b\u5f55\u5458\u5de5id\u5b58\u5165threadlocal\u7ebf\u7a0b\u5c40\u90e8\u53d8\u91cf\u4e2d</p> </li> <li> <p>\u5728\u5904\u7406\u8bf7\u6c42\u7684\u540e\u7eed\u6b65\u9aa4\u4e2d\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7<code>ThreadLocal</code>\u8f7b\u677e\u8bbf\u95ee\u7528\u6237\u4fe1\u606f\uff0c\u800c\u65e0\u9700\u518d\u6b21\u89e3\u6790JWT</p> </li> <li> <p>\u4ec0\u4e48\u662fthreadlocal, \u4e3a\u4ec0\u4e48\u8981\u7528\u8fd9\u4e2a,\u4ee5\u53ca\u5e95\u5c42\u539f\u7406</p> </li> <li> <p>ThreadLocal\u662f\u591a\u7ebf\u7a0b\u4e2d\u5bf9\u4e8e\u89e3\u51b3\u7ebf\u7a0b\u5b89\u5168\u7684\u4e00\u4e2a\u64cd\u4f5c\u7c7b\uff0c\u5b83\u4f1a\u4e3a\u6bcf\u4e2a\u7ebf\u7a0b\u90fd\u5206\u914d\u4e00\u4e2a\u72ec\u7acb\u7684\u7ebf\u7a0b\u526f\u672c\u4ece\u800c\u89e3\u51b3\u4e86\u53d8\u91cf\u5e76\u53d1\u8bbf\u95ee\u51b2\u7a81\u7684\u95ee\u9898, ThreadLocal \u540c\u65f6\u5b9e\u73b0\u4e86\u7ebf\u7a0b\u5185\u7684\u8d44\u6e90\u5171\u4eab</p> </li> <li> <p>\u6211\u7528\u8fd9\u4e2a\u4e3b\u8981\u662f\u4e3a\u4e86\u7ebf\u7a0b\u5185\u5171\u4eab\u7528\u6237\u4fe1\u606f, \u6bd4\u5982\u5728\u6bcf\u6b21\u5806\u6570\u636e\u5e93\u64cd\u4f5c\u7684\u65f6\u5019\u90fd\u8981\u4fdd\u7559\u64cd\u4f5c\u8005\u7684id</p> </li> <li> <p>\u5728ThreadLocal\u5185\u90e8\u7ef4\u62a4\u4e86\u4e00\u4e2a ThreadLocalMap \u7c7b\u578b\u7684\u6210\u5458\u53d8\u91cf\uff0c\u7528\u6765\u5b58\u50a8\u8d44\u6e90\u5bf9\u8c61</p> </li> </ul> <p>\u5f53\u6211\u4eec\u8c03\u7528 set \u65b9\u6cd5\uff0c\u5c31\u662f\u4ee5 ThreadLocal \u81ea\u5df1\u4f5c\u4e3a key\uff0c\u8d44\u6e90\u5bf9\u8c61\u4f5c\u4e3a value\uff0c\u653e\u5165\u5f53\u524d\u7ebf\u7a0b\u7684 ThreadLocalMap \u96c6\u5408\u4e2d</p> <p>\u5f53\u8c03\u7528 get \u65b9\u6cd5\uff0c\u5c31\u662f\u4ee5 ThreadLocal \u81ea\u5df1\u4f5c\u4e3a key\uff0c\u5230\u5f53\u524d\u7ebf\u7a0b\u4e2d\u67e5\u627e\u5173\u8054\u7684\u8d44\u6e90\u503c</p> <p>\u5f53\u8c03\u7528 remove \u65b9\u6cd5\uff0c\u5c31\u662f\u4ee5 ThreadLocal \u81ea\u5df1\u4f5c\u4e3a key\uff0c\u79fb\u9664\u5f53\u524d\u7ebf\u7a0b\u5173\u8054\u7684\u8d44\u6e90\u503c</p> <ul> <li> <ul> <li></li> </ul> </li> <li> <p>ThreadLocal \u4f5c\u7528\uff0c\u5982\u4f55\u4fdd\u8bc1\u6570\u636e\u5b89\u5168\uff1f</p> <ul> <li>\u4f5c\u7528\uff1aThreadLocal \u4e3a\u6bcf\u4e00\u4e2a\u7ebf\u7a0b\u63d0\u4f9b\u4e00\u4e2a\u5355\u72ec\u7684\u5b58\u50a8\u7a7a\u95f4\uff0c\u5177\u6709\u7ebf\u7a0b\u9694\u79bb\u7684\u4f5c\u7528\uff0c\u53ea\u6709\u5728\u540c\u4e00\u4e2a\u7ebf\u7a0b\u5185\u624d\u53ef\u4ee5\u83b7\u5f97\u4ed6\u7684\u503c\uff0c\u4ee5\u4fdd\u8bc1\u7ebf\u7a0b\u5b89\u5168\u3002</li> <li>\u5728\u672c\u6b21\u5f00\u53d1\u4e2d\uff0c\u5728\u5bf9 JWT \u4ee4\u724c\u8fdb\u884c\u89e3\u6790\uff0c\u83b7\u5f97\u5f53\u524d\u8bf7\u6c42\u7684\u7528\u6237 ID \u4ee5\u540e\u5c06\u8be5 ID \u4fdd\u5b58\u81f3 ThreadLocal \u4e2d\uff0c\u4ee5\u4fbf\u5728\u4e4b\u540e\u7684\u64cd\u4f5c\u4e2d\u67e5\u770b\u5f53\u524d\u7528\u6237\u3002</li> </ul> </li> <li> <p>\u6211\u4eec\u516c\u53f8\u4e4b\u524d\u7528\u8fd9\u4e2a\u51fa\u73b0\u8fc7\u810f\u8bfb\u95ee\u9898\uff0c\u4f60\u53d8\u91cf\u662f\u600e\u4e48\u6e05\u9664\u3002</p> </li> <li> <p><code>ThreadLocal</code>\u901a\u5e38\u7528\u4e8e\u5728\u5355\u4e2a\u7ebf\u7a0b\u7684\u4e0a\u4e0b\u6587\u4e2d\u4fdd\u5b58\u6570\u636e\uff0c\u4f7f\u5f97\u8fd9\u4e9b\u6570\u636e\u53ea\u5bf9\u5f53\u524d\u7ebf\u7a0b\u53ef\u89c1\u3002\u8fd9\u79cd\u673a\u5236\u901a\u5e38\u4e0d\u4f1a\u5f15\u8d77\u4f20\u7edf\u610f\u4e49\u4e0a\u7684\u810f\u8bfb\u95ee\u9898\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u7ebf\u7a0b\u90fd\u6709\u5176\u81ea\u5df1\u7684\u72ec\u7acb\u526f\u672c\uff0c\u4e0d\u4f1a\u76f8\u4e92\u5e72\u6270\u3002</p> </li> <li>\u810f\u8bfb\uff08Dirty Read\uff09\u901a\u5e38\u53d1\u751f\u5728\u6570\u636e\u5e93\u4e8b\u52a1\u4e2d\uff0c\u6307\u4e00\u4e2a\u4e8b\u52a1\u8bfb\u53d6\u4e86\u53e6\u4e00\u4e2a\u4e8b\u52a1\u672a\u63d0\u4ea4\u7684\u6570\u636e\u3002\u5982\u679c\u8fd9\u4e9b\u672a\u63d0\u4ea4\u7684\u6570\u636e\u6700\u7ec8\u88ab\u56de\u6eda\uff08\u64a4\u9500\uff09\uff0c\u90a3\u4e48\u7b2c\u4e00\u4e2a\u4e8b\u52a1\u8bfb\u53d6\u7684\u5c31\u662f\u65e0\u6548\u7684\u6216\u8005\u9519\u8bef\u7684\u6570\u636e\u3002\u5728<code>ThreadLocal</code>\u7684\u4e0a\u4e0b\u6587\u4e2d\uff0c\"\u810f\u8bfb\"\u53ef\u80fd\u88ab\u5e7f\u4e49\u5730\u89e3\u91ca\u4e3a\u4e00\u4e2a\u7ebf\u7a0b\u8bfb\u53d6\u5230\u4e86\u7531\u4e8e<code>ThreadLocal</code>\u4e0d\u5f53\u4f7f\u7528\u800c\u6b8b\u7559\u7684\u3001\u4e0a\u4e00\u4e2a\u4f7f\u7528\u76f8\u540c\u7ebf\u7a0b\u7684\u64cd\u4f5c\u9057\u7559\u4e0b\u7684\u6570\u636e\u3002</li> <li> <p>\u5728\u4f7f\u7528<code>ThreadLocal</code>\u65f6\uff0c\u6700\u91cd\u8981\u7684\u4e00\u70b9\u662f\u786e\u4fdd\u4e0d\u518d\u9700\u8981\u5b83\u65f6\u53ca\u65f6\u6e05\u7406\u5b58\u50a8\u5728\u5176\u4e2d\u7684\u6570\u636e\uff0c\u7279\u522b\u662f\u5728\u4f7f\u7528\u7ebf\u7a0b\u6c60\u7684\u60c5\u51b5\u4e0b\u3002\u7ebf\u7a0b\u6c60\u4e2d\u7684\u7ebf\u7a0b\u662f\u4f1a\u88ab\u91cd\u7528\u7684\uff0c\u5982\u679c\u5728\u4f7f\u7528\u5b8c<code>ThreadLocal</code>\u540e\u4e0d\u6e05\u7406\u6570\u636e\uff0c\u4e3a\u4e86\u6e05\u7406<code>ThreadLocal</code>\u4e2d\u7684\u6570\u636e\uff0c\u4f60\u5e94\u8be5\u5728\u9002\u5f53\u7684\u65f6\u5019\u8c03\u7528<code>ThreadLocal.remove()</code>\u65b9\u6cd5: 1. \u8bf7\u6c42\u5904\u7406\u5b8c\u6bd5\u7684\u65f6\u5019; 2. \u5728\u5bf9\u8c61\u88ab\u9500\u6bc1\u524d</p> </li> <li> <p>JWT \u4ee4\u724c\u7684\u5b9a\u4e49\u53ca\u5176\u4f5c\u7528,\u00a0jwt\u7684\u53c2\u6570\u662f\u4ec0\u4e48\u6837\u7684\uff0c\u6709\u4ec0\u4e48\u610f\u4e49</p> </li> <li> <p>\u5b9a\u4e49\uff1aJWT\uff08JSON Web Token\uff09\u662f\u4e00\u79cd\u7528\u4e8e\u8eab\u4efd\u9a8c\u8bc1\u548c\u6388\u6743\u7684\u5f00\u653e\u6807\u51c6\u3002\u5b83\u7531\u4e09\u90e8\u5206\u7ec4\u6210\uff0c\u5206\u522b\u662f\u5934\u90e8\uff08Header\uff09\u3001\u8f7d\u8377\uff08Payload\uff09\u548c\u7b7e\u540d\uff08Signature\uff09\u3002\u5176\u4e2d\uff0c\u7b7e\u540d\u662f\u7528\u4e8e\u9a8c\u8bc1\u4ee4\u724c\u7684\u5b8c\u6574\u6027\u548c\u53ef\u4fe1\u4efb\u6027\u3002</p> </li> <li> <p>JWT \u81ea\u8eab\u5305\u542b\u4e86\u8eab\u4efd\u9a8c\u8bc1\u6240\u9700\u8981\u7684\u6240\u6709\u4fe1\u606f\uff0c\u56e0\u6b64\uff0c\u6211\u4eec\u7684\u670d\u52a1\u5668\u4e0d\u9700\u8981\u5b58\u50a8 Session \u4fe1\u606f\u3002\u8fd9\u663e\u7136\u589e\u52a0\u4e86\u7cfb\u7edf\u7684\u53ef\u7528\u6027\u548c\u4f38\u7f29\u6027\uff0c\u5927\u5927\u51cf\u8f7b\u4e86\u670d\u52a1\u7aef\u7684\u538b\u529b\u3002</p> </li> <li> <p>\u4f5c\u7528\uff1aJWT \u4ee4\u724c\u4e3b\u8981\u7528\u4e8e\u5b9e\u73b0\u4e00\u79cd\u65e0\u72b6\u6001\u7684\u8ba4\u8bc1\u673a\u5236\uff0c\u5b9a\u4e49\u4e86\u4e00\u79cd\u7d27\u51d1\u4e14\u81ea\u5305\u542b\u7684\u65b9\u5f0f\uff0c\u5728\u5404\u65b9\u4e4b\u95f4\u5b89\u5168\u7684\u4f20\u8f93\u4fe1\u606f\uff0c\u4e3b\u8981\u7528\u4e8e\u7528\u6237\u9996\u6b21\u767b\u5f55\u6210\u529f\u4ee5\u540e\uff0c\u670d\u52a1\u5668\u4f1a\u521b\u5efa\u4e00\u4e2a JWT\uff0c\u5c06\u5176\u53d1\u56de\u7ed9\u7528\u6237\uff0c\u968f\u540e\u7528\u6237\u7684\u6bcf\u6b21\u8bf7\u6c42\u90fd\u4f1a\u5305\u542b\u8fd9\u4e2a JWT\u3002JWT \u4f7f\u5f97\u670d\u52a1\u5668\u65e0\u9700\u53bb\u5b58\u50a8\u7528\u6237\u7684\u767b\u5f55\u72b6\u6001\uff0c\u4ece\u800c\u5b9e\u73b0\u65e0\u72b6\u6001\u8ba4\u8bc1\u3002</p> </li> <li> <p>Header : \u63cf\u8ff0 JWT \u7684\u5143\u6570\u636e\uff0c\u5b9a\u4e49\u4e86\u751f\u6210\u7b7e\u540d\u7684\u7b97\u6cd5\u4ee5\u53ca <code>Token</code> \u7684\u7c7b\u578b\u3002</p> </li> <li> <p>Payload : \u7528\u6765\u5b58\u653e\u5b9e\u9645\u9700\u8981\u4f20\u9012\u7684\u6570\u636e(JWT \u7b7e\u53d1\u65b9\\\u63a5\u6536\u65b9\\\u8fc7\u671f\u65f6\u95f4)</p> </li> <li> <p>Signature\uff08\u7b7e\u540d\uff09\uff1a\u670d\u52a1\u5668\u901a\u8fc7 Payload\u3001Header \u548c\u4e00\u4e2a\u5bc6\u94a5(Secret)\u4f7f\u7528 Header \u91cc\u9762\u6307\u5b9a\u7684\u7b7e\u540d\u7b97\u6cd5\uff08\u9ed8\u8ba4\u662f HMAC SHA256\uff09\u751f\u6210\u3002</p> </li> <li> <p>payload\u4e2d\u7684\u4fe1\u606f\u4f1a\u88ab\u89e3\u5bc6\u5417\uff1f\u5bc6\u6587\u5bc6\u7801\u80fd\u88ab\u5b58\u5165\u8d1f\u8f7d\u4e2d\u5417\uff1f\u4e3a\u4ec0\u4e48\uff1f</p> </li> <li>Payload \u90e8\u5206\u9ed8\u8ba4\u662f\u4e0d\u52a0\u5bc6\u7684\uff0c\u4e00\u5b9a\u4e0d\u8981\u5c06\u9690\u79c1\u4fe1\u606f\u5b58\u653e\u5728 Payload \u5f53\u4e2d\uff01\uff01\uff01</li> <li>Signature \u90e8\u5206\u662f\u5bf9\u524d\u4e24\u90e8\u5206\u7684\u7b7e\u540d\uff0c\u4f5c\u7528\u662f\u9632\u6b62 JWT\uff08\u4e3b\u8981\u662f payload\uff09 \u88ab\u7be1\u6539\u3002</li> <li> <p>\u5bc6\u94a5\u4e00\u5b9a\u4fdd\u7ba1\u597d\uff0c\u4e00\u5b9a\u4e0d\u8981\u6cc4\u9732\u51fa\u53bb\u3002JWT \u5b89\u5168\u7684\u6838\u5fc3\u5728\u4e8e\u7b7e\u540d\uff0c\u7b7e\u540d\u5b89\u5168\u7684\u6838\u5fc3\u5728\u5bc6\u94a5</p> </li> <li> <p>jwt\u9a8c\u8bc1\u6d41\u7a0b</p> </li> <li>\u5728\u57fa\u4e8e JWT \u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\u7684\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u670d\u52a1\u5668\u901a\u8fc7 Payload\u3001Header \u548c Secret(\u5bc6\u94a5)\u521b\u5efa JWT \u5e76\u5c06 JWT \u53d1\u9001\u7ed9\u5ba2\u6237\u7aef\u3002\u5ba2\u6237\u7aef\u63a5\u6536\u5230 JWT \u4e4b\u540e\uff0c\u4f1a\u5c06\u5176\u4fdd\u5b58\u5728\u6d4f\u89c8\u5668\u7684localStorage \u91cc\u9762\uff0c\u4ee5\u540e\u5ba2\u6237\u7aef\u53d1\u51fa\u7684\u6240\u6709\u8bf7\u6c42\u90fd\u4f1a\u643a\u5e26\u8fd9\u4e2a\u4ee4\u724c\u3002</li> <li>\u7528\u6237\u5411\u670d\u52a1\u5668\u53d1\u9001\u7528\u6237\u540d\u3001\u5bc6\u7801\u4ee5\u53ca\u9a8c\u8bc1\u7801\u7528\u4e8e\u767b\u9646\u7cfb\u7edf\u3002</li> <li>\u5982\u679c\u7528\u6237\u7528\u6237\u540d\u3001\u5bc6\u7801\u4ee5\u53ca\u9a8c\u8bc1\u7801\u6821\u9a8c\u6b63\u786e\u7684\u8bdd\uff0c\u670d\u52a1\u7aef\u4f1a\u8fd4\u56de\u5df2\u7ecf\u7b7e\u540d\u7684 Token\uff0c\u4e5f\u5c31\u662f JWT</li> <li>\u5ba2\u6237\u7aef\u63a5\u6536\u5230 JWT \u4e4b\u540e\uff0c\u4f1a\u5c06\u5176\u4fdd\u5b58\u5728\u6d4f\u89c8\u5668\u7684localStorage \u91cc\u9762\uff0c\u4ee5\u540e\u5ba2\u6237\u7aef\u53d1\u51fa\u7684\u6240\u6709\u8bf7\u6c42\u90fd\u4f1a\u643a\u5e26\u8fd9\u4e2a\u4ee4\u724c</li> <li> <p>\u670d\u52a1\u7aef\u68c0\u67e5 JWT \u5e76\u4ece\u4e2d\u83b7\u53d6\u7528\u6237\u76f8\u5173\u4fe1\u606f\u3002</p> </li> <li> <p>JWT\u4f18\u7f3a\u70b9\u4ee5\u53calocalStorage</p> </li> <li> <p><code>localStorage</code>\u662fWeb\u5b58\u50a8\u7684\u4e00\u79cd\u5f62\u5f0f\uff0c\u5b83\u5141\u8bb8\u7f51\u7ad9\u5728\u7528\u6237\u7684\u6d4f\u89c8\u5668\u4e2d\u5b58\u50a8\u6570\u636e\u3002\u4e0e<code>sessionStorage</code>\u76f8\u6bd4\uff0c\u5b58\u50a8\u5728<code>localStorage</code>\u4e2d\u7684\u6570\u636e\u6ca1\u6709\u65f6\u95f4\u9650\u5236\uff0c\u5373\u6570\u636e\u5728\u7528\u6237\u5173\u95ed\u6d4f\u89c8\u5668\u7a97\u53e3\u6216\u6807\u7b7e\u9875\u540e\u4f9d\u7136\u53ef\u4ee5\u4fdd\u6301\u3002\u8fd9\u4f7f\u5f97<code>localStorage</code>\u6210\u4e3a\u5b58\u50a8\u8de8\u4f1a\u8bdd\u6570\u636e\u7684\u7406\u60f3\u9009\u62e9\uff0c\u4f8b\u5982\u7528\u6237\u7684\u504f\u597d\u8bbe\u7f6e\u6216\u8eab\u4efd\u9a8c\u8bc1\u4ee4\u724c\uff08\u5982JWT\uff09\u3002</p> </li> </ul>"},{"location":"Problem/interview/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/#_1","title":"\u6d6e\u70b9\u6570\u7cbe\u5ea6","text":"<ul> <li>\u6d6e\u70b9\u6570\u7cbe\u5ea6\u4e22\u5931\u95ee\u9898\u8003\u8651\u8fc7\u5417\uff1f\u5982\u4f55\u89e3\u51b3\u7cbe\u5ea6\u4e22\u5931\u95ee\u9898</li> <li>\u8003\u8651\u8fc7\u4e86,\u4e3b\u8981\u662f\u5728\u8bbe\u8ba1\u94b1\u548c\u8ba2\u5355\u5b9a\u4ef7\u7684\u65b9\u9762,\u8981\u8003\u8651\u6d6e\u70b9\u6570\u7684\u7cbe\u5ea6\u95ee\u9898</li> <li>\u4ecejava\u53d8\u91cf\u7c7b\u578b,\u5230redis\u5b58\u50a8\u7684\u6570\u636e\u673a\u6784,\u8fd8\u6709mysql\u5b58\u50a8\u7684\u6570\u636e\u7ed3\u6784\u90fd\u8981\u8003\u8651</li> <li>java\u91cc\u9762\u91c7\u7528BigDecimal\u6765\u5b58\u50a8\u524d\u76f8\u5173\u7684\u5355\u4ef7\u4ec0\u4e48\u7684,\u7136\u540e\u518dredis\u91cc\u9762\u7528string\u6765\u5b58\u50a8\u5355\u4ef7,\u5728mysql\u91cc\u9762\u7528\u7684\u662fdecimal\u7c7b\u578b</li> <li>mysql\u7684decimal\u7c7b\u578b\u53ef\u4ee5\u6307\u5b9a\u6570\u503c\u7684\u4f4d\u6570\u548c\u5176\u4e2d\u5c0f\u6570\u7684\u957f\u5ea6,DECIMAL(8, 2)</li> <li>\u6ce8\u610fBigDecimal\u7528\u7684\u662fcompareTo\u80fd\u5ffd\u7565\u7cbe\u5ea6,equals\u662f\u4e0d\u80fd\u5ffd\u7565\u4e24\u4f4d\u5c0f\u6570\u548c\u4e09\u4f4d\u5c0f\u6570\u7684\u5dee\u522b\u7684</li> <li>\u6d6e\u70b9\u6570\u4e3a\u4ec0\u4e48\u4f1a\u7cbe\u5ea6\u4e22\u5931\uff0c\u8bb2\u8bb2\u5e95\u5c42</li> <li>\u8fd9\u4e2a\u548c\u8ba1\u7b97\u673a\u4fdd\u5b58\u6d6e\u70b9\u6570\u7684\u673a\u5236\u6709\u5f88\u5927\u5173\u7cfb\u3002\u6211\u4eec\u77e5\u9053\u8ba1\u7b97\u673a\u662f\u4e8c\u8fdb\u5236\u7684\uff0c\u800c\u4e14\u8ba1\u7b97\u673a\u5728\u8868\u793a\u4e00\u4e2a\u6570\u5b57\u65f6\uff0c\u5bbd\u5ea6\u662f\u6709\u9650\u7684\uff0c\u65e0\u9650\u5faa\u73af\u7684\u5c0f\u6570\u5b58\u50a8\u5728\u8ba1\u7b97\u673a\u65f6\uff0c\u53ea\u80fd\u88ab\u622a\u65ad\uff0c\u6240\u4ee5\u5c31\u4f1a\u5bfc\u81f4\u5c0f\u6570\u7cbe\u5ea6\u53d1\u751f\u635f\u5931\u7684\u60c5\u51b5\u3002\u8fd9\u4e5f\u5c31\u662f\u89e3\u91ca\u4e86\u4e3a\u4ec0\u4e48\u6d6e\u70b9\u6570\u6ca1\u6709\u529e\u6cd5\u7528\u4e8c\u8fdb\u5236\u7cbe\u786e\u8868\u793a\u3002\u5c31\u6bd4\u5982\u8bf4\u5341\u8fdb\u5236\u4e0b\u7684 0.2 \u5c31\u6ca1\u529e\u6cd5\u7cbe\u786e\u8f6c\u6362\u6210\u4e8c\u8fdb\u5236\u5c0f\u6570.</li> </ul>"},{"location":"Problem/interview/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/#nginx","title":"nginx","text":"<ul> <li> <p>\u00a0 Nginx \u8d1f\u8f7d\u5747\u8861\u548c\u6b63\u5411\u3001\u53cd\u5411\u4ee3\u7406</p> </li> <li> <p>\u8d1f\u8f7d\u5747\u8861\uff1a   Nginx \u7684\u8d1f\u8f7d\u5747\u8861\u662f\u5c06\u8bbf\u95ee\u8bf7\u6c42\u5206\u53d1\u5230\u591a\u4e2a\u670d\u52a1\u5668\u4e0a\uff0c\u4ee5\u8fbe\u5230\u5e73\u8861\u670d\u52a1\u5668\u8d1f\u8f7d\u548c\u63d0\u9ad8\u7cfb\u7edf\u53ef\u7528\u6027\u7684\u76ee\u7684\u3002</p> </li> <li>\u6b63\u5411\u4ee3\u7406\uff1a(VPN)   \u6b63\u5411\u4ee3\u7406\u662f\u5ba2\u6237\u7aef\u53d1\u9001\u8bf7\u6c42\u540e\u901a\u8fc7\u4ee3\u7406\u670d\u52a1\u5668\u8bbf\u95ee\u76ee\u6807\u670d\u52a1\u5668\uff0c\u4ee3\u7406\u670d\u52a1\u5668\u4ee3\u8868\u5ba2\u6237\u7aef\u53d1\u9001\u8bf7\u6c42\u5e76\u5c06\u54cd\u5e94\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\u3002\u6b63\u5411\u4ee3\u7406\u9690\u85cf\u4e86\u5ba2\u6237\u7aef\u7684\u771f\u5b9e\u8eab\u4efd\u548c\u4f4d\u7f6e\u4fe1\u606f\uff0c\u4e3a\u5ba2\u6237\u7aef\u63d0\u4f9b\u4ee3\u7406\u8bbf\u95ee\u4e92\u8054\u7f51\u7684\u529f\u80fd\u3002</li> <li>\u53cd\u5411\u4ee3\u7406\uff1a(\u670d\u52a1\u5668\u7aef)   \u53cd\u5411\u4ee3\u7406\u662f\u6307\u4ee3\u7406\u670d\u52a1\u5668\u63a5\u6536\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\uff0c\u7136\u540e\u5c06\u8bf7\u6c42\u8f6c\u53d1\u7ed9\u540e\u7aef\u670d\u52a1\u5668\uff0c\u5e76\u5c06\u540e\u7aef\u670d\u52a1\u5668\u7684\u54cd\u5e94\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\u3002\u53cd\u5411\u4ee3\u7406\u9690\u85cf\u4e86\u670d\u52a1\u5668\u7684\u771f\u5b9e\u8eab\u4efd\u548c\u4f4d\u7f6e\u4fe1\u606f\uff0c\u5ba2\u6237\u7aef\u53ea\u77e5\u9053\u4e0e\u53cd\u5411\u4ee3\u7406\u8fdb\u884c\u901a\u4fe1\uff0c\u800c\u4e0d\u77e5\u9053\u771f\u6b63\u7684\u670d\u52a1\u5668\u3002</li> </ul> <p>\u00a0- \u4e3a\u4ec0\u4e48\u8981\u53cd\u5411\u4ee3\u7406</p> <ul> <li> <p>\u524d\u7aef\u8bf7\u6c42\u5730\u5740\uff1ahttp://localhost/api/employee/login</p> </li> <li> <p>\u540e\u7aef\u63a5\u53e3\u5730\u5740\uff1ahttp://localhost:8080/admin/employee/login</p> </li> <li> <p>\u63d0\u9ad8\u8bbf\u95ee\u901f\u5ea6</p> </li> </ul> <p>\u56e0\u4e3anginx\u672c\u8eab\u53ef\u4ee5\u8fdb\u884c\u7f13\u5b58\uff0c\u5982\u679c\u8bbf\u95ee\u7684\u540c\u4e00\u63a5\u53e3\uff0c\u5e76\u4e14\u505a\u4e86\u6570\u636e\u7f13\u5b58\uff0cnginx\u5c31\u76f4\u63a5\u53ef\u628a\u6570\u636e\u8fd4\u56de\uff0c\u4e0d\u9700\u8981\u771f\u6b63\u5730\u8bbf\u95ee\u670d\u52a1\u7aef\uff0c\u4ece\u800c\u63d0\u9ad8\u8bbf\u95ee\u901f\u5ea6\u3002</p> <ul> <li>\u8fdb\u884c\u8d1f\u8f7d\u5747\u8861</li> </ul> <p>\u6240\u8c13\u8d1f\u8f7d\u5747\u8861,\u5c31\u662f\u628a\u5927\u91cf\u7684\u8bf7\u6c42\u6309\u7167\u6211\u4eec\u6307\u5b9a\u7684\u65b9\u5f0f\u5747\u8861\u7684\u5206\u914d\u7ed9\u96c6\u7fa4\u4e2d\u7684\u6bcf\u53f0\u670d\u52a1\u5668\u3002</p> <ul> <li>\u4fdd\u8bc1\u540e\u7aef\u670d\u52a1\u5b89\u5168</li> </ul> <p>\u56e0\u4e3a\u4e00\u822c\u540e\u53f0\u670d\u52a1\u5730\u5740\u4e0d\u4f1a\u66b4\u9732\uff0c\u6240\u4ee5\u4f7f\u7528\u6d4f\u89c8\u5668\u4e0d\u80fd\u76f4\u63a5\u8bbf\u95ee\uff0c\u53ef\u4ee5\u628anginx\u4f5c\u4e3a\u8bf7\u6c42\u8bbf\u95ee\u7684\u5165\u53e3\uff0c\u8bf7\u6c42\u5230\u8fbenginx\u540e\u8f6c\u53d1\u5230\u5177\u4f53\u7684\u670d\u52a1\u4e2d\uff0c\u4ece\u800c\u4fdd\u8bc1\u540e\u7aef\u670d\u52a1\u7684\u5b89\u5168\u3002</p> <p>\u00a0- \u6709\u81ea\u5df1\u90e8\u7f72\u8fc7\u53cd\u5411\u4ee3\u7406\u548c\u8d1f\u8f7d\u5747\u8861\u5417</p> <ul> <li>\u8d1f\u8f7d\u5747\u8861\u4ece\u672c\u8d28\u4e0a\u6765\u8bf4\u4e5f\u662f\u57fa\u4e8e\u53cd\u5411\u4ee3\u7406\u6765\u5b9e\u73b0\u7684\uff0c\u6700\u7ec8\u90fd\u662f\u8f6c\u53d1\u8bf7\u6c42\u3002</li> <li>\u53ef\u4ee5\u8f93\u5165\u76d1\u542c\u7684\u7aef\u53e3\uff0c\u7136\u540e\u8bbe\u7f6eproxy_pass, \u8bbe\u7f6e\u4ee3\u7406\u670d\u52a1\u5668\u7684\u5730\u5740\uff0c\u53ef\u4ee5\u662f\u4e3b\u673a\u540d\u79f0\uff0cIP\u5730\u5740\u52a0\u7aef\u53e3\u53f7\u7b49\u5f62\u5f0f\u3002</li> <li>\u8d1f\u8f7d\u5747\u8861\u53ef\u4ee5\u7528\u8f6e\u8be2\u8fd8\u6709\uff0cweight\uff0cfair(\u65f6\u95f4\u76f8\u5e94\u77ed\u7684\u5148)</li> </ul> <p>\u6d88\u606f\u961f\u5217</p>"},{"location":"Problem/interview/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/#websocket","title":"websocket","text":"<ul> <li> <p>\u540e\u7aef\u5982\u4f55\u4e0e\u5546\u5bb6\u7aef\u5efa\u7acb\u94fe\u63a5\uff0c\u5b9e\u73b0\u5b9e\u65f6\u901a\u4fe1\uff1f   \u4f7f\u7528 Websocket \u6765\u5b9e\u73b0\u7528\u6237\u7aef\u548c\u5546\u5bb6\u7aef\u901a\u4fe1\uff1aWebSocket\u00a0\u662f\u4e00\u79cd\u5728 Web \u5e94\u7528\u7a0b\u5e8f\u4e2d\u5b9e\u73b0\u53cc\u5411\u901a\u4fe1\u7684\u534f\u8bae\u3002\u5b83\u5141\u8bb8\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u4e4b\u95f4\u5efa\u7acb\u6301\u4e45\u7684\u3001\u53cc\u5411\u7684\u901a\u4fe1\u901a\u9053\uff0c\u4f7f\u5f97\u670d\u52a1\u5668\u53ef\u4ee5\u4e3b\u52a8\u5411\u5ba2\u6237\u7aef\u63a8\u9001\u6d88\u606f\uff0c\u800c\u65e0\u9700\u5ba2\u6237\u7aef\u53d1\u9001\u8bf7\u6c42\u3002\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u4e4b\u95f4\u53ef\u4ee5\u5b9e\u65f6\u5730\u53d1\u9001\u6d88\u606f\u548c\u63a5\u6536\u6d88\u606f\uff0c\u4e0d\u9700\u8981\u9891\u7e41\u5730\u53d1\u8d77\u8bf7\u6c42\u3002\u8fd9\u6837\u53ef\u4ee5\u51cf\u5c11\u7f51\u7edc\u6d41\u91cf\u548c\u5ef6\u8fdf\uff0c\u5e76\u63d0\u4f9b\u66f4\u597d\u7684\u7528\u6237\u4f53\u9a8c\u3002</p> </li> <li> <p>Websocket \u4e0e HTTP \u6709\u4ec0\u4e48\u533a\u522b\uff1f \u65e2\u7136 WebSocket \u652f\u6301\u53cc\u5411\u901a\u4fe1\uff0c\u529f\u80fd\u770b\u4f3c\u6bd4 HTTP \u5f3a\u5927\uff0c\u90a3\u4e48\u662f\u4e0d\u662f\u53ef\u4ee5\u57fa\u4e8e WebSocket \u5f00\u53d1\u6240\u6709\u7684\u4e1a\u52a1\u529f\u80fd\uff1f HTTP \u534f\u8bae\u548c WebSocket \u534f\u8bae\u5bf9\u6bd4\uff1a</p> </li> <li> <p>HTTP \u662f\u77ed\u8fde\u63a5</p> </li> <li>WebSocket \u662f\u957f\u8fde\u63a5</li> <li>HTTP \u901a\u4fe1\u662f\u5355\u5411\u7684\uff0c\u57fa\u4e8e\u8bf7\u6c42\u54cd\u5e94\u6a21\u5f0f</li> <li>WebSocket \u652f\u6301\u53cc\u5411\u901a\u4fe1s</li> <li> <p>HTTP \u548c WebSocket \u5e95\u5c42\u90fd\u662f TCP \u8fde\u63a5     \u4e0d\u80fd\u4f7f\u7528 WebSocket \u5e76\u4e0d\u80fd\u5b8c\u5168\u53d6\u4ee3 HTTP\uff0c\u5b83\u53ea\u9002\u5408\u5728\u7279\u5b9a\u7684\u573a\u666f\u4e0b\u4f7f\u7528\uff0c\u539f\u56e0\u5982\u4e0b\uff1a</p> </li> <li> <p>\u8d44\u6e90\u5f00\u9500\uff1aWebSocket \u9700\u8981\u4fdd\u6301\u6301\u4e45\u8fde\u63a5\uff0c\u5bf9\u670d\u52a1\u5668\u8d44\u6e90\u6709\u66f4\u9ad8\u8981\u6c42\uff0c\u4e0d\u9002\u5408\u6240\u6709\u573a\u666f\u3002</p> </li> <li>\u529f\u80fd\u4e0e\u7ea6\u5b9a\uff1aHTTP \u63d0\u4f9b\u4e30\u5bcc\u7684\u529f\u80fd\u548c\u7ea6\u5b9a\uff08\u5982\u72b6\u6001\u7801\u3001\u7f13\u5b58\u63a7\u5236\uff09\uff0c\u9002\u5408\u66f4\u5e7f\u6cdb\u7684\u4e1a\u52a1\u9700\u6c42\u3002</li> <li>\u5b89\u5168\u6027\u548c\u517c\u5bb9\u6027\uff1a\u867d\u7136 WebSocket \u652f\u6301\u52a0\u5bc6\uff0c\u4f46\u7ba1\u7406\u5b89\u5168\u6027\u53ef\u80fd\u66f4\u590d\u6742\uff1b\u4e14\u67d0\u4e9b\u73af\u5883\u4e0b WebSocket \u4e0d\u88ab\u652f\u6301\u6216\u6709\u9650\u5236\u3002</li> <li> <p>\u8bbe\u8ba1\u548c\u5b9e\u8df5\uff1aRESTful API \u548c\u76f8\u5173\u7684 HTTP \u8bbe\u8ba1\u539f\u5219\u4e0d\u6613\u76f4\u63a5\u5e94\u7528\u4e8e WebSocket\u3002</p> </li> <li> <p>websocket\u5e38\u88ab\u7528\u5728\u89c6\u9891\u5b9e\u65f6\u5f39\u5e55\u3001\u7f51\u9875\u804a\u5929\u3001\u80a1\u7968\u4e8b\u5b9e\u8ddf\u65b0</p> </li> <li>\u6211\u4eec\u9879\u76ee\u91cc\u9762\u7528\u5728\u8ba2\u5355\u7684\u5b9e\u65f6\u66f4\u65b0\u3001\u6765\u5355\u63d0\u9192</li> </ul>"},{"location":"Problem/interview/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/#_2","title":"\u5546\u54c1\u8d85\u5356","text":"<ul> <li> <p>\u5546\u54c1\u8d85\u5356\u95ee\u9898\u5982\u4f55\u89e3\u51b3\uff1f</p> </li> <li> <p>\u4e50\u89c2\u9501\u975e\u5e38\u4e50\u89c2\u5c31\u662f\u8ba4\u4e3a\u522b\u7684\u7ebf\u7a0b\u4e0d\u4f1a\u540c\u65f6\u4fee\u6539\u6570\u636e\uff0c\u6240\u4ee5\u4e0d\u4e0a\u9501\uff0c\u4f46\u662f\u5728\u66f4\u65b0\u7684\u65f6\u5019\u4f1a\u5224\u65ad\u4e00\u4e0b\u671f\u95f4\u6709\u6ca1\u6709\u522b\u7684\u7ebf\u7a0b\u66f4\u65b0\u8fc7\u8fd9\u4e2a\u6570\u636e</p> </li> <li> <p>\u4e50\u89c2\u9501\u5c31\u662f\u4f7f\u7528CAS\uff0c\u540c\u4e00\u65f6\u95f4\u53ea\u5904\u7406\u4e00\u4e2a\uff0c\u62d2\u7edd\u5176\u4ed6\u6240\u6709\u7684\u8bf7\u6c42\uff0c\u6240\u4ee5\u6548\u7387\u6bd4\u8f83\u4f4e</p> </li> <li> <p>\u6bcf\u8f6e\u53ea\u80fd\u4e70\u4e00\u4e2a</p> </li> <li> <p>\u4e50\u89c2\u9501\uff1a \u4f7f\u7528\u4e50\u89c2\u9501\uff08Optimistic Locking\uff09\u8fdb\u884c\u5e76\u53d1\u63a7\u5236\u3002\u5728\u8d2d\u4e70\u5546\u54c1\u65f6\uff0c\u5148\u67e5\u8be2\u5f53\u524d\u5e93\u5b58\u6570\u91cf\uff0c\u7136\u540e\u5728\u66f4\u65b0\u5e93\u5b58\u65f6\u8fdb\u884c\u7248\u672c\u53f7\u6bd4\u5bf9\uff0c\u5982\u679c\u7248\u672c\u53f7\u4e00\u81f4\u624d\u6267\u884c\u66f4\u65b0\u64cd\u4f5c\uff0c\u5426\u5219\u8fd4\u56de\u5e93\u5b58\u4e0d\u8db3\u9519\u8bef\u3002\u8fd9\u79cd\u65b9\u5f0f\u9002\u7528\u4e8e\u8bfb\u591a\u5199\u5c11\u7684\u573a\u666f\u3002</p> </li> <li> <ol> <li>\u60b2\u89c2\u9501\uff1a \u5728\u5546\u54c1\u8d2d\u4e70\u8fc7\u7a0b\u4e2d\uff0c\u4f7f\u7528\u60b2\u89c2\u9501\uff08Pessimistic Locking\uff09\u5bf9\u5e93\u5b58\u8fdb\u884c\u52a0\u9501\uff0c\u786e\u4fdd\u540c\u4e00\u65f6\u95f4\u53ea\u6709\u4e00\u4e2a\u7528\u6237\u53ef\u4ee5\u6267\u884c\u51cf\u5e93\u5b58\u64cd\u4f5c\uff0c\u907f\u514d\u5e76\u53d1\u51b2\u7a81\u5bfc\u81f4\u7684\u8d85\u5356\u95ee\u9898\u3002\u4f8b\u5982\uff0c\u5728\u6570\u636e\u5e93\u5c42\u9762\u4f7f\u7528\u6570\u636e\u5e93\u884c\u7ea7\u9501\u6216\u8005\u4e8b\u52a1\u8fdb\u884c\u63a7\u5236\u3002 </li> </ol> </li> <li> <p>\u5206\u5e03\u5f0f\u9501\uff1a \u5728\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\uff0c\u4f7f\u7528\u5206\u5e03\u5f0f\u9501\u5bf9\u5e93\u5b58\u8fdb\u884c\u52a0\u9501\uff0c\u786e\u4fdd\u540c\u4e00\u65f6\u95f4\u53ea\u6709\u4e00\u4e2a\u8282\u70b9\u53ef\u4ee5\u6267\u884c\u5e93\u5b58\u51cf\u5c11\u64cd\u4f5c\uff0c\u907f\u514d\u591a\u4e2a\u8282\u70b9\u4e4b\u95f4\u7684\u5e76\u53d1\u51b2\u7a81\u3002</p> </li> <li> <p>\u4e50\u89c2\u9501\u662f\u4ec0\u4e48\uff1f\u4e50\u89c2\u9501\u662f SQL \u5b9e\u73b0\u8fd8\u662f\u903b\u8f91\u5b9e\u73b0\uff1f</p> </li> <li> <p>\u903b\u8f91\u5b9e\u73b0\u5c31\u662fCAS\u5b9e\u73b0\uff0c\u7528java\u4e2d\u81ea\u5e26\u7684atomic\u5305\u4e2d\u7684\u539f\u5b50\u53d8\u91cf\u5c31\u80fd\u5b9e\u73b0\u4e50\u89c2\u9501</p> </li> <li>\u4e00\u822c\u662f\u5728\u6570\u636e\u8868\u4e2d\u52a0\u4e0a\u4e00\u4e2a\u6570\u636e\u7248\u672c\u53f7 version \u5b57\u6bb5\uff0c\u8868\u793a\u6570\u636e\u88ab\u4fee\u6539\u7684\u6b21\u6570\u3002\u5f53\u6570\u636e\u88ab\u4fee\u6539\u65f6\uff0cversion \u503c\u4f1a +1\u3002\u5f53\u7ebf\u7a0b A \u8981\u66f4\u65b0\u6570\u636e\u65f6\uff0c\u5728\u8bfb\u53d6\u6570\u636e\u7684\u540c\u65f6\u4e5f\u4f1a\u8bfb\u53d6 version \u503c\uff0c\u5728\u63d0\u4ea4\u66f4\u65b0\u65f6\uff0c\u82e5\u521a\u624d\u8bfb\u53d6\u5230\u7684 version \u503c\u4e0e\u5f53\u524d\u6570\u636e\u5e93\u4e2d\u7684 version \u503c\u76f8\u7b49\u65f6\u624d\u66f4\u65b0\uff0c\u5426\u5219\u91cd\u8bd5\u66f4\u65b0\u64cd\u4f5c\uff0c\u76f4\u5230\u66f4\u65b0\u6210\u529f</li> <li> <p>update user set name =\"zs\",version = oldVersion +1 whereversion = oldVersion</p> </li> <li> <p>\u4e50\u89c2\u9501\u662f\u4e00\u79cd\u5e76\u53d1\u63a7\u5236\u673a\u5236\uff0c\u901a\u8fc7\u5047\u8bbe\u5e76\u53d1\u51b2\u7a81\u5f88\u5c11\u53d1\u751f\uff08\u5373\u4e50\u89c2\u7684\u6001\u5ea6\uff09\uff0c\u4e0d\u4f7f\u7528\u963b\u585e\u64cd\u4f5c\uff0c\u800c\u662f\u5728\u66f4\u65b0\u64cd\u4f5c\u4e4b\u524d\u5148\u8fdb\u884c\u68c0\u67e5\u3002\u5982\u679c\u68c0\u67e5\u53d1\u73b0\u5176\u4ed6\u4e8b\u52a1\u5df2\u7ecf\u5bf9\u6570\u636e\u8fdb\u884c\u4e86\u4fee\u6539\uff0c\u90a3\u4e48\u5f53\u524d\u4e8b\u52a1\u5c31\u4f1a\u653e\u5f03\u6216\u8005\u91cd\u65b0\u5c1d\u8bd5\u3002</p> </li> <li>\u4e50\u89c2\u9501\u901a\u5e38\u901a\u8fc7\u7248\u672c\u53f7\uff08Version\uff09\u6216\u65f6\u95f4\u6233\uff08Timestamp\uff09\u6765\u5b9e\u73b0\u3002\u5728\u6bcf\u4e2a\u6570\u636e\u8bb0\u5f55\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u7248\u672c\u53f7\u6216\u65f6\u95f4\u6233\u5b57\u6bb5\uff0c\u5f53\u6570\u636e\u88ab\u8bfb\u53d6\u65f6\uff0c\u5c06\u7248\u672c\u53f7\u6216\u65f6\u95f4\u6233\u4e00\u5e76\u8bfb\u53d6\u5e76\u8bb0\u5f55\u5728\u5185\u5b58\u4e2d\u3002\u5f53\u6570\u636e\u66f4\u65b0\u65f6\uff0c\u68c0\u67e5\u5185\u5b58\u4e2d\u7684\u7248\u672c\u53f7\u6216\u65f6\u95f4\u6233\u4e0e\u6570\u636e\u5e93\u4e2d\u7684\u662f\u5426\u4e00\u81f4\uff0c\u5982\u679c\u4e00\u81f4\u5219\u6267\u884c\u66f4\u65b0\u64cd\u4f5c\uff0c\u5426\u5219\u8868\u793a\u5176\u4ed6\u4e8b\u52a1\u5df2\u7ecf\u5bf9\u6570\u636e\u8fdb\u884c\u4e86\u4fee\u6539\uff0c\u9700\u8981\u6839\u636e\u5177\u4f53\u60c5\u51b5\u8fdb\u884c\u56de\u6eda\u6216\u91cd\u65b0\u5c1d\u8bd5\u3002</li> <li>\u4e50\u89c2\u9501\u662f\u903b\u8f91\u5b9e\u73b0\uff0c\u5373\u7531\u5e94\u7528\u7a0b\u5e8f\u901a\u8fc7\u7f16\u7a0b\u5b9e\u73b0\u5728\u4e1a\u52a1\u903b\u8f91\u5c42\u9762\u8fdb\u884c\u63a7\u5236\uff0c\u800c\u4e0d\u662f\u7531\u6570\u636e\u5e93\u7cfb\u7edf\u63d0\u4f9b\u7684\u7279\u5b9a\u7684\u9501\u673a\u5236\u3002\u4e50\u89c2\u9501\u9002\u7528\u4e8e\u8bfb\u591a\u5199\u5c11\u7684\u573a\u666f\uff0c\u5e76\u4e14\u80fd\u591f\u51cf\u5c11\u9501\u7684\u7ade\u4e89\uff0c\u63d0\u9ad8\u7cfb\u7edf\u7684\u5e76\u53d1\u6027\u80fd\u3002</li> </ul>"},{"location":"Problem/interview/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/#spring","title":"spring","text":"<ul> <li>\u4ec0\u4e48\u662f AOP\uff1f </li> <li> <p>\u6982\u5ff5\uff1a     AOP\uff08Aspect-Oriented Programming\uff0c\u9762\u5411\u5207\u9762\u7f16\u7a0b\uff09\u662f\u4e00\u79cd\u7f16\u7a0b\u8303\u5f0f\uff0c\u65e8\u5728\u901a\u8fc7\u5c06\u6a2a\u5207\u5173\u6ce8\u70b9\uff08cross-cutting concerns\uff09\u4ece\u6838\u5fc3\u4e1a\u52a1\u903b\u8f91\u4e2d\u5206\u79bb\u51fa\u6765\uff0c\u4ee5\u63d0\u9ad8\u4ee3\u7801\u7684\u6a21\u5757\u5316\u6027\u3001\u53ef\u7ef4\u62a4\u6027\u548c\u590d\u7528\u6027\u3002</p> <ul> <li>\u6a2a\u5207\u5173\u6ce8\u70b9\uff1a   \u6bd4\u5982\u65e5\u5fd7\u3001\u4e8b\u52a1\u3001\u5b89\u5168\u6027\u7b49\uff0c\u8fd9\u4e9b\u5173\u6ce8\u70b9\u4f1a\u6a2a\u8de8\u591a\u4e2a\u6a21\u5757\uff0c\u5bfc\u81f4\u4ee3\u7801\u91cd\u590d\u3001\u8026\u5408\u6027\u589e\u52a0\u3001\u96be\u4ee5\u7ef4\u62a4\u7b49\u95ee\u9898\u3002AOP \u901a\u8fc7\u5c06\u8fd9\u4e9b\u6a2a\u5207\u5173\u6ce8\u70b9\u62bd\u8c61\u6210\u4e00\u4e2a\u4e2a\u201c\u5207\u9762\u201d\uff08Aspect\uff09\uff0c\u5e76\u5c06\u5176\u72ec\u7acb\u4e8e\u4e1a\u52a1\u903b\u8f91\u4e4b\u5916\uff0c\u4ee5\u8fbe\u5230\u89e3\u8026\u7684\u76ee\u7684\u3002</li> </ul> </li> <li> <p>AOP \u7684\u6838\u5fc3\u6982\u5ff5\u5305\u62ec\u4ee5\u4e0b\u51e0\u4e2a\u8981\u7d20\uff1a</p> <ol> <li>\u5207\u9762\uff08Aspect\uff09\uff1a \u5207\u9762\u662f\u6a2a\u5207\u5173\u6ce8\u70b9\u7684\u62bd\u8c61\uff0c\u5b83\u5305\u542b\u4e86\u4e00\u7ec4\u6a2a\u5207\u5173\u6ce8\u70b9\u4ee5\u53ca\u5728\u4f55\u65f6\u4f55\u5904\u5e94\u7528\u8fd9\u4e9b\u5173\u6ce8\u70b9\u7684\u903b\u8f91\u3002\u901a\u5e38\uff0c\u5207\u9762\u7531\u4e00\u7ec4\u901a\u77e5\uff08Advice\uff09\u548c\u4e00\u4e2a\u5207\u70b9\uff08Pointcut\uff09\u7ec4\u6210\u3002</li> <li>\u901a\u77e5\uff08Advice\uff09\uff1a \u901a\u77e5\u662f\u5207\u9762\u4e2d\u5177\u4f53\u7684\u903b\u8f91\u5b9e\u73b0\uff0c\u5b83\u5b9a\u4e49\u4e86\u5728\u4f55\u65f6\u4f55\u5730\u6267\u884c\u6a2a\u5207\u5173\u6ce8\u70b9\u7684\u5177\u4f53\u884c\u4e3a\uff0c\u5305\u62ec\u201c\u524d\u7f6e\u901a\u77e5\u201d\uff08Before Advice\uff09\u3001\u201c\u540e\u7f6e\u901a\u77e5\u201d\uff08After Advice\uff09\u3001\u201c\u73af\u7ed5\u901a\u77e5\u201d\uff08Around Advice\uff09\u7b49\u3002</li> <li>\u5207\u70b9\uff08Pointcut\uff09\uff1a \u5207\u70b9\u662f\u5728\u7a0b\u5e8f\u4e2d\u6307\u5b9a\u7684\u67d0\u4e2a\u4f4d\u7f6e\uff0c\u901a\u77e5\u5c06\u5728\u8fd9\u4e9b\u4f4d\u7f6e\u6267\u884c\u3002\u5207\u70b9\u53ef\u4ee5\u4f7f\u7528\u8868\u8fbe\u5f0f\u6216\u5176\u4ed6\u65b9\u5f0f\u8fdb\u884c\u5b9a\u4e49\uff0c\u4ee5\u4fbf\u5339\u914d\u5230\u7a0b\u5e8f\u4e2d\u7684\u7279\u5b9a\u65b9\u6cd5\u6216\u4ee3\u7801\u5757\u3002</li> <li>\u8fde\u63a5\u70b9\uff08Join Point\uff09\uff1a \u8fde\u63a5\u70b9\u662f\u5728\u7a0b\u5e8f\u6267\u884c\u8fc7\u7a0b\u4e2d\u53ef\u4ee5\u5e94\u7528\u901a\u77e5\u7684\u5177\u4f53\u4f4d\u7f6e\uff0c\u901a\u5e38\u662f\u65b9\u6cd5\u8c03\u7528\u3001\u65b9\u6cd5\u6267\u884c\u6216\u5f02\u5e38\u629b\u51fa\u7b49\u3002</li> <li>\u7ec7\u5165\uff08Weaving\uff09\uff1a \u7ec7\u5165\u662f\u5c06\u5207\u9762\u903b\u8f91\u5e94\u7528\u5230\u76ee\u6807\u5bf9\u8c61\u4e2d\u7684\u8fc7\u7a0b\uff0c\u53ef\u4ee5\u5728\u7f16\u8bd1\u65f6\u3001\u52a0\u8f7d\u65f6\u6216\u8fd0\u884c\u65f6\u8fdb\u884c\u3002\u7ec7\u5165\u53ef\u4ee5\u901a\u8fc7\u6e90\u4ee3\u7801\u4fee\u6539\u3001\u5b57\u8282\u7801\u64cd\u4f5c\u3001\u52a8\u6001\u4ee3\u7406\u7b49\u65b9\u5f0f\u5b9e\u73b0\u3002</li> </ol> </li> <li> <p>\u00a0\u4f60\u9879\u76ee\u4e2daop\u7684\u4f8b\u5b50\u00a0</p> </li> <li>\u4e8b\u52a1\u7ba1\u7406\uff1a<code>@Transactional</code> \u6ce8\u89e3\u53ef\u4ee5\u8ba9 Spring \u4e3a\u6211\u4eec\u8fdb\u884c\u4e8b\u52a1\u7ba1\u7406\u6bd4\u5982\u56de\u6eda\u5f02\u5e38\u64cd\u4f5c\uff0c\u514d\u53bb\u4e86\u91cd\u590d\u7684\u4e8b\u52a1\u7ba1\u7406\u903b\u8f91\u3002<code>@Transactional</code>\u6ce8\u89e3\u5c31\u662f\u57fa\u4e8e AOP \u5b9e\u73b0\u7684\u3002</li> <li>\u7ebf\u5546\u5e97\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u5176\u4e2d\u6709\u4e00\u4e2a\u529f\u80fd\u662f\u201c\u4e0b\u8ba2\u5355\u201d\u3002\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u4e3b\u8981\u7684\u4e1a\u52a1\u903b\u8f91\u662f\u63a5\u6536\u7528\u6237\u7684\u8ba2\u5355\u4fe1\u606f\uff0c\u7136\u540e\u5728\u6570\u636e\u5e93\u4e2d\u521b\u5efa\u4e00\u4e2a\u8ba2\u5355\u3002\u4f46\u9664\u4e86\u8fd9\u4e2a\u4e3b\u8981\u903b\u8f91\u4e4b\u5916\uff0c\u8fd8\u6709\u5f88\u591a\u5176\u4ed6\u7684\u64cd\u4f5c\u9700\u8981\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u6267\u884c\uff0c\u4f8b\u5982\uff1a\u5b89\u5168\u68c0\u67e5\u3001\u65e5\u5fd7\u8bb0\u5f55\u3001\u6027\u80fd\u76d1\u63a7\u3001\u4e8b\u52a1\u7ba1\u7406</li> <li>\u5982\u679c\u6211\u4eec\u5c06\u6240\u6709\u8fd9\u4e9b\u529f\u80fd\u90fd\u5199\u5728\u4e0b\u8ba2\u5355\u7684\u4e1a\u52a1\u903b\u8f91\u4e2d\uff0c\u90a3\u4e48\u4ee3\u7801\u5c06\u4f1a\u975e\u5e38\u590d\u6742\u548c\u96be\u4ee5\u7ef4\u62a4\u3002\u8fd9\u4e9b\u989d\u5916\u7684\u64cd\u4f5c\uff08\u5b89\u5168\u68c0\u67e5\u3001\u65e5\u5fd7\u8bb0\u5f55\u3001\u6027\u80fd\u76d1\u63a7\u3001\u4e8b\u52a1\u7ba1\u7406\uff09\u867d\u7136\u4e0e\u4e3b\u4e1a\u52a1\u903b\u8f91\uff08\u4e0b\u8ba2\u5355\uff09\u7d27\u5bc6\u76f8\u5173\uff0c\u4f46\u5b83\u4eec\u5b9e\u9645\u4e0a\u662f\u6a2a\u5207\u5173\u6ce8\u70b9</li> <li>\u5207\u9762\uff08Aspect\uff09\uff1a\u65e5\u5fd7\u8bb0\u5f55\u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u5207\u9762\u3002\u8fd9\u662f\u56e0\u4e3a\u65e5\u5fd7\u8bb0\u5f55\u662f\u4e00\u4e2a\u8de8\u8d8a\u5e94\u7528\u7a0b\u5e8f\u591a\u4e2a\u90e8\u5206\u7684\u5173\u6ce8\u70b9\u3002\u5728\u4e0b\u8ba2\u5355\u7684\u6d41\u7a0b\u4e2d\uff0c\u6211\u4eec\u53ef\u80fd\u5728\u65b9\u6cd5\u5f00\u59cb\u65f6\u8bb0\u5f55\u4e00\u6761\u65e5\u5fd7\uff0c\u8868\u660e\u65b9\u6cd5\u88ab\u8c03\u7528\uff0c\u4ee5\u53ca\u5728\u65b9\u6cd5\u7ed3\u675f\u65f6\u8bb0\u5f55\u4e00\u6761\u65e5\u5fd7\uff0c\u8868\u660e\u65b9\u6cd5\u6267\u884c\u5b8c\u6210\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u5982\u679c\u6709\u5f02\u5e38\u53d1\u751f\u4e5f\u4f1a\u8bb0\u5f55\u76f8\u5173\u65e5\u5fd7\u3002</li> <li>\u901a\u77e5\uff08Advice\uff09\uff1a\u5728\u65e5\u5fd7\u5207\u9762\u4e2d\uff0c\u5b9e\u9645\u6267\u884c\u65e5\u5fd7\u8bb0\u5f55\u64cd\u4f5c\u7684\u4ee3\u7801\u5757\u5c31\u662f\u901a\u77e5\u3002\u8fd9\u53ef\u4ee5\u662f\u201c\u524d\u7f6e\u901a\u77e5\u201d\uff08\u5728\u65b9\u6cd5\u6267\u884c\u524d\u8fd0\u884c\uff09\u3001\u201c\u540e\u7f6e\u901a\u77e5\u201d\uff08\u5728\u65b9\u6cd5\u6267\u884c\u540e\u8fd0\u884c\uff0c\u65e0\u8bba\u662f\u6b63\u5e38\u8fd4\u56de\u8fd8\u662f\u5f02\u5e38\u9000\u51fa\uff09\u3001\u201c\u73af\u7ed5\u901a\u77e5\u201d\uff08\u5728\u65b9\u6cd5\u6267\u884c\u524d\u540e\u90fd\u8fd0\u884c\uff09\u7b49\u3002</li> <li>\u5207\u70b9\uff08Pointcuts\uff09\uff1a\u5207\u70b9\u5b9a\u4e49\u4e86\u901a\u77e5\u5e94\u8be5\u5728\u54ea\u4e9b\u8fde\u63a5\u70b9\u4e0a\u6267\u884c\u3002\u5728\u4e0b\u8ba2\u5355\u7684\u573a\u666f\u4e2d\uff0c\u5207\u70b9\u53ef\u4ee5\u6307\u5b9a\u4e3a\u201c\u4efb\u4f55\u8ba2\u5355\u670d\u52a1\u7c7b\uff08OrderService\uff09\u4e2d\u7684\u65b9\u6cd5\u8c03\u7528\u201d\u3002</li> <li>\u8fde\u63a5\u70b9\uff08Join points\uff09\uff1a\u5728\u4e0b\u8ba2\u5355\u7684\u6d41\u7a0b\u4e2d\uff0c\u6bcf\u4e00\u4e2a\u65b9\u6cd5\u7684\u8c03\u7528\u90fd\u662f\u4e00\u4e2a\u8fde\u63a5\u70b9\uff0c\u56e0\u4e3a\u5b83\u4eec\u662f\u53ef\u4ee5\u88abAOP\u6846\u67b6\u63d2\u5165\u989d\u5916\u884c\u4e3a\u7684\u70b9\u3002\u4f8b\u5982\uff0c<code>createOrder</code>\u65b9\u6cd5\u7684\u8c03\u7528\u5c31\u662f\u4e00\u4e2a\u8fde\u63a5\u70b9\u3002</li> <li> <p>\u7ec7\u5165\uff08Weaving\uff09\uff1a\u8fd9\u662fAOP\u6846\u67b6\u5c06\u5207\u9762\u903b\u8f91\uff08\u5982\u65e5\u5fd7\u8bb0\u5f55\uff09\u5e94\u7528\u5230\u76ee\u6807\u5bf9\u8c61\uff08\u5982\u8ba2\u5355\u670d\u52a1\uff09\u7684\u8fc7\u7a0b\u3002\u8fd9\u901a\u5e38\u5728\u8fd0\u884c\u65f6\u53d1\u751f\uff0c\u4f46\u4e5f\u53ef\u4ee5\u5728\u7f16\u8bd1\u65f6\u6216\u52a0\u8f7d\u65f6\u5b8c\u6210</p> </li> <li> <p>  \u9762\u5411AOP\u7f16\u7a0b\u7684\u610f\u4e49 </p> </li> <li>\u4ee5\u65e5\u5fd7\u8bb0\u5f55\u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\uff0c\u5047\u5982\u6211\u4eec\u9700\u8981\u5bf9\u67d0\u4e9b\u65b9\u6cd5\u8fdb\u884c\u7edf\u4e00\u683c\u5f0f\u7684\u65e5\u5fd7\u8bb0\u5f55\uff0c\u6ca1\u6709\u4f7f\u7528 AOP \u6280\u672f\u4e4b\u524d\uff0c\u6211\u4eec\u9700\u8981\u6328\u4e2a\u5199\u65e5\u5fd7\u8bb0\u5f55\u7684\u903b\u8f91\u4ee3\u7801\uff0c\u5168\u662f\u91cd\u590d\u7684\u7684\u903b\u8f91\u3002</li> <li> <p>\u4f7f\u7528 AOP \u6280\u672f\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u65e5\u5fd7\u8bb0\u5f55\u7684\u903b\u8f91\u5c01\u88c5\u6210\u4e00\u4e2a\u5207\u9762\uff0c\u7136\u540e\u901a\u8fc7\u5207\u5165\u70b9\u548c\u901a\u77e5\u6765\u6307\u5b9a\u5728\u54ea\u4e9b\u65b9\u6cd5\u9700\u8981\u6267\u884c\u65e5\u5fd7\u8bb0\u5f55\u7684\u64cd\u4f5c\u3002</p> </li> <li> <p>\u4ec0\u4e48\u662f IOC\uff1f </p> </li> <li>IoC\uff08Inverse of Control:\u63a7\u5236\u53cd\u8f6c\uff09\u662f\u4e00\u79cd\u8bbe\u8ba1\u601d\u60f3\u6216\u8005\u8bf4\u662f\u67d0\u79cd\u6a21\u5f0f\u3002\u8fd9\u4e2a\u8bbe\u8ba1\u601d\u60f3\u5c31\u662f \u5c06\u539f\u672c\u5728\u7a0b\u5e8f\u4e2d\u624b\u52a8\u521b\u5efa\u5bf9\u8c61\u7684\u63a7\u5236\u6743\u4ea4\u7ed9\u7b2c\u4e09\u65b9\u6bd4\u5982 IoC \u5bb9\u5668\u3002 \u4e0d\u9700\u8981\u6211\u4eec\u624b\u52a8\u53bbnew\u4e00\u4e2a\u7c7b\u4e86\uff0c \u5bf9\u4e8e\u6211\u4eec\u5e38\u7528\u7684 Spring \u6846\u67b6\u6765\u8bf4\uff0c IoC \u5bb9\u5668\u5b9e\u9645\u4e0a\u5c31\u662f\u4e2a Map\uff08key\uff0cvalue\uff09,Map \u4e2d\u5b58\u653e\u7684\u662f\u5404\u79cd\u5bf9\u8c61\u3002</li> <li> <p>IoC \u6700\u5e38\u89c1\u4ee5\u53ca\u6700\u5408\u7406\u7684\u5b9e\u73b0\u65b9\u5f0f\u53eb\u505a\u4f9d\u8d56\u6ce8\u5165\uff08Dependency Injection\uff0c\u7b80\u79f0 DI\uff09\u3002</p> </li> <li> <p>\u4ec0\u4e48\u662f\u53cd\u5c04\uff1f   \u53cd\u5c04\u662f\u4e00\u79cd\u5728\u7a0b\u5e8f\u8fd0\u884c\u65f6\u68c0\u67e5\u548c\u64cd\u4f5c\u7c7b\u7684\u673a\u5236\uff0c\u901a\u8fc7\u83b7\u53d6\u7c7b\u7684\u4fe1\u606f\u5e76\u52a8\u6001\u8c03\u7528\u65b9\u6cd5\u3001\u521b\u5efa\u5bf9\u8c61\u7b49\u3002\u8fd9\u79cd\u673a\u5236\u8ba9\u7a0b\u5e8f\u80fd\u591f\u5728\u8fd0\u884c\u65f6\u6839\u636e\u9700\u8981\u52a8\u6001\u5730\u83b7\u53d6\u548c\u64cd\u4f5c\u7c7b\u7684\u7ed3\u6784\u548c\u6210\u5458\u3002</p> </li> <li> <p>\u83b7\u53d6 Class \u5bf9\u8c61\uff1a \u7a0b\u5e8f\u901a\u8fc7\u7c7b\u7684\u5168\u9650\u5b9a\u540d\u3001\u5bf9\u8c61\u7684 getClass ()\u65b9\u6cd5\u6216. Class \u8bed\u6cd5\u6765\u83b7\u53d6\u5bf9\u5e94\u7684 Class \u5bf9\u8c61\u3002</p> </li> <li>\u67e5\u8be2\u7c7b\u4fe1\u606f\uff1a \u901a\u8fc7 Class \u5bf9\u8c61\u53ef\u4ee5\u83b7\u53d6\u7c7b\u7684\u4fe1\u606f\uff0c\u5305\u62ec\u7c7b\u540d\u3001\u5305\u540d\u3001\u7236\u7c7b\u3001\u5b9e\u73b0\u7684\u63a5\u53e3\u3001\u6784\u9020\u51fd\u6570\u3001\u65b9\u6cd5\u3001\u5b57\u6bb5\u7b49\u3002</li> <li>\u52a8\u6001\u521b\u5efa\u5bf9\u8c61\uff1a \u901a\u8fc7 Class \u5bf9\u8c61\u7684 newInstance ()\u65b9\u6cd5\u8c03\u7528\u7c7b\u7684\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\u6765\u521b\u5efa\u5bf9\u8c61\uff0c\u6216\u8005\u901a\u8fc7 Constructor \u5bf9\u8c61\u8c03\u7528\u7c7b\u7684\u5176\u4ed6\u6784\u9020\u51fd\u6570\u6765\u521b\u5efa\u5bf9\u8c61\u3002</li> <li>\u52a8\u6001\u8c03\u7528\u65b9\u6cd5\uff1a \u901a\u8fc7 Method \u5bf9\u8c61\u8c03\u7528\u7c7b\u7684\u65b9\u6cd5\uff0c\u4f20\u9012\u53c2\u6570\u5e76\u83b7\u53d6\u8fd4\u56de\u503c\u3002</li> <li>\u52a8\u6001\u8bbf\u95ee\u5b57\u6bb5\uff1a \u901a\u8fc7 Field \u5bf9\u8c61\u83b7\u53d6\u548c\u8bbe\u7f6e\u7c7b\u7684\u5b57\u6bb5\u503c\u3002      \u6574\u4e2a\u6d41\u7a0b\u5c31\u662f\u901a\u8fc7\u83b7\u53d6 Class \u5bf9\u8c61\uff0c\u7136\u540e\u6839\u636e\u9700\u8981\u52a8\u6001\u5730\u8c03\u7528\u7c7b\u7684\u65b9\u6cd5\u3001\u521b\u5efa\u5bf9\u8c61\u3001\u8bbf\u95ee\u5b57\u6bb5\u7b49\u64cd\u4f5c\uff0c\u5b9e\u73b0\u4e86\u5bf9\u7c7b\u7684\u52a8\u6001\u64cd\u4f5c\u548c\u8c03\u7528\u3002</li> </ul>"},{"location":"Problem/interview/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/#mysql","title":"mysql","text":"<ul> <li> \u600e\u4e48\u4fdd\u8bc1\u5728\u540c\u65f6\u64cd\u4f5c\u591a\u5f20\u6570\u636e\u5e93\u8868\u51fa\u73b0\u7a0b\u5e8f\u9519\u8bef\u65f6\u4fdd\u8bc1\u6570\u636e\u7684\u4e00\u81f4\u6027\uff1f \u6211\u5728\u6d89\u53ca\u591a\u8868\u64cd\u4f5c\u65f6\u4f7f\u7528\u4e86\u4e8b\u52a1\uff08Transaction\uff09\uff1a \u5c06\u6d89\u53ca\u5230\u7684\u6570\u636e\u5e93\u64cd\u4f5c\u5c01\u88c5\u5728\u4e00\u4e2a\u4e8b\u52a1\u4e2d\u3002\u5728\u4e8b\u52a1\u4e2d\uff0c\u8981\u4e48\u6240\u6709\u7684\u6570\u636e\u5e93\u64cd\u4f5c\u90fd\u6210\u529f\u63d0\u4ea4\uff0c\u8981\u4e48\u5168\u90e8\u5931\u8d25\u56de\u6eda\uff0c\u4fdd\u8bc1\u4e86\u6570\u636e\u7684\u4e00\u81f4\u6027\u3002\u5982\u679c\u53d1\u751f\u5f02\u5e38\uff0c\u53ef\u4ee5\u901a\u8fc7\u6355\u83b7\u5f02\u5e38\u5e76\u6267\u884c\u56de\u6eda\u64cd\u4f5c\u6765\u4fdd\u8bc1\u6570\u636e\u7684\u4e00\u81f4\u6027\u3002   \u5177\u4f53\u64cd\u4f5c\uff1a</li> <li>\u5728\u542f\u52a8\u7c7b\u4e0a\u65b9\u6dfb\u52a0@EnableTransactionManagement</li> <li>\u5f00\u542f\u4e8b\u52a1\u6ce8\u89e3\u4e4b\u540e\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5728\u9700\u8981\u6346\u7ed1\u6210\u4e3a\u4e00\u4e2a\u4e8b\u52a1\u7684\u65b9\u6cd5\u4e0a\u6dfb\u52a0@Transactional</li> <li> <p>\u8fd9\u6837\u5c31\u628a\u5bf9\u4e24\u5f20\u8868\u7684\u64cd\u4f5c\u6346\u7ed1\u6210\u4e3a\u4e86\u4e00\u4e2a\u4e8b\u52a1\u3002</p> </li> <li> <p> \u7d22\u5f15\u7ed3\u6784\uff1f\u4ec0\u4e48\u65f6\u5019\u521b\u5efa\u7d22\u5f15\uff1f\u4ec0\u4e48\u5b57\u6bb5\u4e0d\u9002\u5408\u4f7f\u7528\u7d22\u5f15\uff1f</p> </li> <li> <p>\u7d22\u5f15\uff08index\uff09\u662f\u5e2e\u52a9MySQL\u9ad8\u6548\u83b7\u53d6\u6570\u636e\u7684\u6570\u636e\u7ed3\u6784(\u6709\u5e8f)\u3002\u63d0\u9ad8\u6570\u636e\u68c0\u7d22\u7684\u6548\u7387\uff0c\u964d\u4f4e\u6570\u636e\u5e93\u7684IO\u6210\u672c\uff08\u4e0d\u9700\u8981\u5168\u8868\u626b\u63cf\uff09\u3002\u901a\u8fc7\u7d22\u5f15\u5217\u5bf9\u6570\u636e\u8fdb\u884c\u6392\u5e8f\uff0c\u964d\u4f4e\u6570\u636e\u6392\u5e8f\u7684\u6210\u672c\uff0c\u964d\u4f4e\u4e86CPU\u7684\u6d88\u8017</p> </li> <li> <p>MySQL\u7684\u9ed8\u8ba4\u7684\u5b58\u50a8\u5f15\u64ceInnoDB\u91c7\u7528\u7684B+\u6811\u7684\u6570\u636e\u7ed3\u6784\u6765\u5b58\u50a8\u7d22\u5f15\uff0c\u9009\u62e9B+\u6811\u7684\u4e3b\u8981\u7684\u539f\u56e0\u662f\uff1a\u7b2c\u4e00\u6bcf\u4e2a\u8282\u70b9\u6709\u591a\u4e2a\u5206\u53c9\uff0c\u9636\u6570\u66f4\u591a\uff0c\u8def\u5f84\u66f4\u77ed\uff0c\u7b2c\u4e8c\u4e2a\u78c1\u76d8\u8bfb\u5199\u4ee3\u4ef7B+\u6811\u66f4\u4f4e\uff0c\u975e\u53f6\u5b50\u8282\u70b9\u53ea\u5b58\u50a8\u6307\u9488\uff0c\u53f6\u5b50\u9636\u6bb5\u5b58\u50a8\u6570\u636e\uff0c\u7b2c\u4e09\u662fB+\u6811\u4fbf\u4e8e\u626b\u5e93\u548c\u533a\u95f4\u67e5\u8be2\uff0c\u53f6\u5b50\u8282\u70b9\u662f\u4e00\u4e2a\u53cc\u5411\u94fe\u8868</p> </li> <li> <p>\u4ec0\u4e48\u65f6\u5019\u521b\u5efa\u7d22\u5f15\uff1a1. \u9ad8\u9891\u67e5\u8be2\u5b57\u6bb5\uff1a\u7ecf\u5e38\u7528\u4e8e\u67e5\u8be2\u6761\u4ef6\u7684\u5b57\u6bb5\uff0c\u5982\u7528\u6237ID\u3001\u8ba2\u5355\u53f7\uff1b2. \u6392\u5e8f\u548c\u5206\u7ec4\u5b57\u6bb5\uff1a\u5728<code>ORDER BY</code>\u548c<code>GROUP BY</code>\u64cd\u4f5c\u4e2d\u9891\u7e41\u4f7f\u7528\u7684\u5b57\u6bb5\u4e5f\u5e94\u8003\u8651\u5efa\u7acb\u7d22\u5f15\uff1b3. \u5916\u952e\u5b57\u6bb5\uff1a\u6570\u636e\u5e93\u5916\u952e\u901a\u5e38\u4e5f\u662f\u5efa\u7acb\u7d22\u5f15\u7684\u597d\u9009\u62e9\uff0c\u56e0\u4e3a\u5b83\u4eec\u7ecf\u5e38\u7528\u4e8e\u8fde\u63a5\u67e5\u8be2\uff1b4. \u552f\u4e00\u6027\u9a8c\u8bc1\uff1a\u5bf9\u4e8e\u9700\u8981\u4fdd\u8bc1\u552f\u4e00\u6027\u7684\u5b57\u6bb5\uff08\u4f8b\u5982\uff0c\u7528\u6237\u90ae\u7bb1\u6216\u624b\u673a\u53f7\u7801\uff09\uff0c\u521b\u5efa\u552f\u4e00\u7d22\u5f15\u4e0d\u4ec5\u53ef\u4ee5\u63d0\u9ad8\u67e5\u8be2\u6548\u7387\uff0c\u8fd8\u53ef\u4ee5\u9632\u6b62\u6570\u636e\u91cd\u590d\u30025. \u8303\u56f4\u67e5\u8be2\uff1a\u5bf9\u4e8e\u7ecf\u5e38\u8fdb\u884c\u8303\u56f4\u67e5\u8be2\u7684\u5b57\u6bb5\uff08\u5982\u65e5\u671f\u533a\u95f4\u67e5\u8be2\uff09\uff0c\u7d22\u5f15\u53ef\u4ee5\u663e\u8457\u63d0\u9ad8\u67e5\u8be2\u6027\u80fd\u3002</p> </li> <li> <p>\u4ec0\u4e48\u5b57\u6bb5\u4e0d\u9002\u5408\u521b\u5efa\u7d22\u5f15\uff1a1. \u53d8\u52a8\u9891\u7e41\u7684\u5b57\u6bb5\uff1a\u5982\u679c\u4e00\u4e2a\u5b57\u6bb5\u7684\u503c\u7ecf\u5e38\u53d8\u5316\uff0c\u90a3\u4e48\u6bcf\u6b21\u53d8\u5316\u90fd\u9700\u8981\u66f4\u65b0\u7d22\u5f15\uff0c\u8fd9\u53ef\u80fd\u5bfc\u81f4\u6027\u80fd\u4e0b\u964d\uff1b2. \u4f4e\u57fa\u6570\u5b57\u6bb5\uff1a\u6240\u8c13\u4f4e\u57fa\u6570\uff0c\u662f\u6307\u5b57\u6bb5\u4e2d\u4e0d\u540c\u503c\u7684\u6bd4\u4f8b\u975e\u5e38\u4f4e\u7684\u60c5\u51b5\uff08\u5982\u6027\u522b\u5b57\u6bb5\uff09\u3002\u8fd9\u7c7b\u5b57\u6bb5\u5373\u4f7f\u5efa\u7acb\u7d22\u5f15\uff0c\u4e5f\u4e0d\u4f1a\u663e\u8457\u63d0\u9ad8\u67e5\u8be2\u6027\u80fd\uff0c\u53cd\u800c\u4f1a\u589e\u52a0\u5b58\u50a8\u7a7a\u95f4\u548c\u7ef4\u62a4\u6210\u672c\u30023. \u5927\u578b\u6587\u672c\u5b57\u6bb5\uff1a\u5927\u578b\u6587\u672c\u5b57\u6bb5\uff08\u5982\u7528\u6237\u8bc4\u8bba\uff09\u5efa\u7acb\u7d22\u5f15\u4e0d\u5b9e\u9645\uff0c\u4e00\u65b9\u9762\u56e0\u4e3a\u5b83\u4eec\u7684\u6570\u636e\u91cf\u5f88\u5927\uff0c\u53e6\u4e00\u65b9\u9762\u56e0\u4e3a\u5168\u6587\u641c\u7d22\u901a\u5e38\u9700\u8981\u4e13\u95e8\u7684\u641c\u7d22\u5f15\u64ce\uff08\u5982Elasticsearch\uff09\u6765\u4f18\u5316\u3002</p> </li> <li> <p>\u805a\u7c07\u7d22\u5f15\u4e3b\u8981\u662f\u6307\u6570\u636e\u4e0e\u7d22\u5f15\u653e\u5230\u4e00\u5757\uff0cB+\u6811\u7684\u53f6\u5b50\u8282\u70b9\u4fdd\u5b58\u4e86\u6574\u884c\u6570\u636e\uff0c\u6709\u4e14\u53ea\u6709\u4e00\u4e2a\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\u4e3b\u952e\u5728\u4f5c\u4e3a\u805a\u7c07\u7d22\u5f15\u7684</p> </li> </ul> <p>\u975e\u805a\u7c07\u7d22\u5f15\u503c\u7684\u662f\u6570\u636e\u4e0e\u7d22\u5f15\u5206\u5f00\u5b58\u50a8\uff0cB+\u6811\u7684\u53f6\u5b50\u8282\u70b9\u4fdd\u5b58\u5bf9\u5e94\u7684\u4e3b\u952e\uff0c\u53ef\u4ee5\u6709\u591a\u4e2a\uff0c\u4e00\u822c\u6211\u4eec\u81ea\u5df1\u5b9a\u4e49\u7684\u7d22\u5f15\u90fd\u662f\u975e\u805a\u7c07\u7d22\u5f15</p> <ul> <li></li> <li> <p> \u4e8b\u52a1 ACID\u4e86\u89e3\u5417\uff1f </p> </li> <li> <p>\u4e8b\u52a1\u662f\u4e00\u7ec4\u64cd\u4f5c\u7684\u96c6\u5408\uff0c\u5b83\u662f\u4e00\u4e2a\u4e0d\u53ef\u5206\u5272\u7684\u5de5\u4f5c\u5355\u4f4d\uff0c\u4e8b\u52a1\u4f1a\u628a\u6240\u6709\u7684\u64cd\u4f5c\u4f5c\u4e3a\u4e00\u4e2a\u6574\u4f53\u4e00\u8d77\u5411\u7cfb\u7edf\u63d0\u4ea4\u6216\u64a4\u9500\u64cd\u4f5c\u8bf7\u6c42\uff0c\u5373\u8fd9\u4e9b\u64cd\u4f5c\u8981\u4e48\u540c\u65f6\u6210\u529f\uff0c\u8981\u4e48\u540c\u65f6\u5931\u8d25\u3002</p> </li> <li> <p>\u539f\u5b50\u6027\uff08Atomicity\uff09\uff1a\u4e8b\u52a1\u662f\u4e0d\u53ef\u5206\u5272\u7684\u6700\u5c0f\u64cd\u4f5c\u5355\u5143\uff0c\u8981\u4e48\u5168\u90e8\u6210\u529f\uff0c\u8981\u4e48\u5168\u90e8\u5931\u8d25\u3002</p> </li> <li> <p>\u4e00\u81f4\u6027\uff08Consistency\uff09\uff1a\u4e8b\u52a1\u5b8c\u6210\u65f6\uff0c\u5fc5\u987b\u4f7f\u6240\u6709\u7684\u6570\u636e\u90fd\u4fdd\u6301\u4e00\u81f4\u72b6\u6001\u3002</p> </li> <li> <p>\u9694\u79bb\u6027\uff08Isolation\uff09\uff1a\u6570\u636e\u5e93\u7cfb\u7edf\u63d0\u4f9b\u7684\u9694\u79bb\u673a\u5236\uff0c\u4fdd\u8bc1\u4e8b\u52a1\u5728\u4e0d\u53d7\u5916\u90e8\u5e76\u53d1\u64cd\u4f5c\u5f71\u54cd\u7684\u72ec\u7acb\u73af\u5883\u4e0b\u8fd0\u884c\u3002</p> </li> <li> <p>\u6301\u4e45\u6027\uff08Durability\uff09\uff1a\u4e8b\u52a1\u4e00\u65e6\u63d0\u4ea4\u6216\u56de\u6eda\uff0c\u5b83\u5bf9\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e\u7684\u6539\u53d8\u5c31\u662f\u6c38\u4e45\u7684\u3002\u8981\u6301\u4e45\u5316\uff0c\u5c31\u662f\u4fdd\u5b58\u5230\u78c1\u76d8\u4e4b\u4e2d</p> </li> <li></li> <li> <p> \u5e76\u53d1\u4e8b\u52a1\u5e26\u6765\u54ea\u4e9b\u95ee\u9898\uff1f</p> </li> <li>\u810f\u8bfb\u3001\u4e0d\u53ef\u91cd\u590d\u8bfb\u3001\u5e7b\u8bfb</li> <li>\u7b2c\u4e00\u662f\u810f\u8bfb\uff0c \u5f53\u4e00\u4e2a\u4e8b\u52a1\u6b63\u5728\u8bbf\u95ee\u6570\u636e\u5e76\u4e14\u5bf9\u6570\u636e\u8fdb\u884c\u4e86\u4fee\u6539\uff0c\u800c\u8fd9\u79cd\u4fee\u6539\u8fd8\u6ca1\u6709\u63d0\u4ea4\u5230\u6570\u636e\u5e93\u4e2d\uff0c\u8fd9\u65f6\u53e6\u5916\u4e00\u4e2a\u4e8b\u52a1\u4e5f\u8bbf\u95ee\u4e86\u8fd9\u4e2a\u6570\u636e\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u6570\u636e\u662f\u8fd8\u6ca1\u6709\u63d0\u4ea4\u7684\u6570\u636e\uff0c\u90a3\u4e48\u53e6\u5916\u4e00\u4e2a\u4e8b\u52a1\u8bfb\u5230\u7684\u8fd9\u4e2a\u6570\u636e\u662f\u201c\u810f\u6570\u636e\u201d\uff0c\u4f9d\u636e\u201c\u810f\u6570\u636e\u201d\u6240\u505a\u7684\u64cd\u4f5c\u53ef\u80fd\u662f\u4e0d\u6b63\u786e\u7684\u3002</li> <li>\u7b2c\u4e8c\u662f\u4e0d\u53ef\u91cd\u590d\u8bfb\uff1a\u6bd4\u5982\u5728\u4e00\u4e2a\u4e8b\u52a1\u5185\u591a\u6b21\u8bfb\u540c\u4e00\u6570\u636e\u3002\u5728\u8fd9\u4e2a\u4e8b\u52a1\u8fd8\u6ca1\u6709\u7ed3\u675f\u65f6\uff0c\u53e6\u4e00\u4e2a\u4e8b\u52a1\u4e5f\u8bbf\u95ee\u8be5\u6570\u636e\u3002\u90a3\u4e48\uff0c\u5728\u7b2c\u4e00\u4e2a\u4e8b\u52a1\u4e2d\u7684\u4e24\u6b21\u8bfb\u6570\u636e\u4e4b\u95f4\uff0c\u7531\u4e8e\u7b2c\u4e8c\u4e2a\u4e8b\u52a1\u7684\u4fee\u6539\u5bfc\u81f4\u7b2c\u4e00\u4e2a\u4e8b\u52a1\u4e24\u6b21\u8bfb\u53d6\u7684\u6570\u636e\u53ef\u80fd\u4e0d\u592a\u4e00\u6837\u3002\u8fd9\u5c31\u53d1\u751f\u4e86\u5728\u4e00\u4e2a\u4e8b\u52a1\u5185\u4e24\u6b21\u8bfb\u5230\u7684\u6570\u636e\u662f\u4e0d\u4e00\u6837\u7684\u60c5\u51b5\uff0c\u56e0\u6b64\u79f0\u4e3a\u4e0d\u53ef\u91cd\u590d\u8bfb\u3002</li> <li> <p>\u7b2c\u4e09\u662f\u5e7b\u8bfb\uff08Phantom read\uff09\uff1a\u5e7b\u8bfb\u4e0e\u4e0d\u53ef\u91cd\u590d\u8bfb\u7c7b\u4f3c\u3002\u5b83\u53d1\u751f\u5728\u4e00\u4e2a\u4e8b\u52a1\uff08T1\uff09\u8bfb\u53d6\u4e86\u51e0\u884c\u6570\u636e\uff0c\u63a5\u7740\u53e6\u4e00\u4e2a\u5e76\u53d1\u4e8b\u52a1\uff08T2\uff09\u63d2\u5165\u4e86\u4e00\u4e9b\u6570\u636e\u65f6\u3002\u5728\u968f\u540e\u7684\u67e5\u8be2\u4e2d\uff0c\u7b2c\u4e00\u4e2a\u4e8b\u52a1\uff08T1\uff09\u5c31\u4f1a\u53d1\u73b0\u591a\u4e86\u4e00\u4e9b\u539f\u672c\u4e0d\u5b58\u5728\u7684\u8bb0\u5f55\uff0c\u5c31\u597d\u50cf\u53d1\u751f\u4e86\u5e7b\u89c9\u4e00\u6837\uff0c\u6240\u4ee5\u79f0\u4e3a\u5e7b\u8bfb\u3002</p> </li> <li> <p> \u6570\u636e\u5e93\u7684\u9694\u79bb\u7ea7\u522b\u6709\u54ea\u4e9b\uff1f\u89e3\u51b3\u4ec0\u4e48\u95ee\u9898\uff1f </p> </li> <li>\u7b2c\u4e00\u4e2a\u662f\uff0c\u672a\u63d0\u4ea4\u8bfb\uff08read uncommitted\uff09\u5b83\u89e3\u51b3\u4e0d\u4e86\u521a\u624d\u63d0\u51fa\u7684\u6240\u6709\u95ee\u9898\uff0c\u4e00\u822c\u9879\u76ee\u4e2d\u4e5f\u4e0d\u7528\u8fd9\u4e2a\u3002</li> <li>\u7b2c\u4e8c\u4e2a\u662f\u8bfb\u5df2\u63d0\u4ea4\uff08read committed\uff09\u5b83\u80fd\u89e3\u51b3\u810f\u8bfb\u7684\u95ee\u9898\u7684\uff0c\u4f46\u662f\u89e3\u51b3\u4e0d\u4e86\u4e0d\u53ef\u91cd\u590d\u8bfb\u548c\u5e7b\u8bfb\u3002</li> <li>\u7b2c\u4e09\u4e2a\u662f\u53ef\u91cd\u590d\u8bfb\uff08repeatable read\uff09\u5b83\u80fd\u89e3\u51b3\u810f\u8bfb\u548c\u4e0d\u53ef\u91cd\u590d\u8bfb\uff0c\u4f46\u662f\u89e3\u51b3\u4e0d\u4e86\u5e7b\u8bfb\uff0c\u8fd9\u4e2a\u4e5f\u662fmysql\u9ed8\u8ba4\u7684\u9694\u79bb\u7ea7\u522b\u3002</li> <li>\u7b2c\u56db\u4e2a\u662f\u4e32\u884c\u5316\uff08serializable\uff09\u5b83\u53ef\u4ee5\u89e3\u51b3\u521a\u624d\u63d0\u51fa\u6765\u7684\u6240\u6709\u95ee\u9898\uff0c\u4f46\u662f\u7531\u4e8e\u8ba9\u662f\u4e8b\u52a1\u4e32\u884c\u6267\u884c\u7684\uff0c\u6027\u80fd\u6bd4\u8f83\u4f4e\u3002</li> <li> <p>\u4e00\u822c\u4f7f\u7528\u7684\u90fd\u662fmysql\u9ed8\u8ba4\u7684\u9694\u79bb\u7ea7\u522b:\u53ef\u91cd\u590d\u8bfb</p> </li> <li> <p> \u5e76\u53d1\u73af\u5883\u4e0b\uff0c\u5982\u4f55\u907f\u514d\u4e0d\u540c\u4e8b\u52a1\u63d2\u5165\u91cd\u590d\u6570\u636e\uff1f\u4e8b\u52a1\u4e2d\u7684\u9694\u79bb\u6027\u662f\u5982\u4f55\u4fdd\u8bc1\u7684\u5462\uff1fMVCC\u4e86\u89e3\u5417</p> </li> <li>\u597d\u7684\uff0c\u5176\u4e2dredo log\u65e5\u5fd7\u8bb0\u5f55\u7684\u662f\u6570\u636e\u9875\u7684\u7269\u7406\u53d8\u5316\uff0c\u670d\u52a1\u5b95\u673a\u53ef\u7528\u6765\u540c\u6b65\u6570\u636e\uff0c\u800cundo log \u4e0d\u540c\uff0c\u5b83\u4e3b\u8981\u8bb0\u5f55\u7684\u662f\u903b\u8f91\u65e5\u5fd7\uff0c\u5f53\u4e8b\u52a1\u56de\u6eda\u65f6\uff0c\u901a\u8fc7\u9006\u64cd\u4f5c\u6062\u590d\u539f\u6765\u7684\u6570\u636e\uff0c\u6bd4\u5982\u6211\u4eec\u5220\u9664\u4e00\u6761\u6570\u636e\u7684\u65f6\u5019\uff0c\u5c31\u4f1a\u5728undo log\u65e5\u5fd7\u6587\u4ef6\u4e2d\u65b0\u589e\u4e00\u6761delete\u8bed\u53e5\uff0c\u5982\u679c\u53d1\u751f\u56de\u6eda\u5c31\u6267\u884c\u9006\u64cd\u4f5c\uff1b</li> <li>redo log\u4fdd\u8bc1\u4e86\u4e8b\u52a1\u7684\u6301\u4e45\u6027\uff0cundo log\u4fdd\u8bc1\u4e86\u4e8b\u52a1\u7684\u539f\u5b50\u6027\u548c\u4e00\u81f4\u6027 </li> <li>\u4e8b\u52a1\u7684\u9694\u79bb\u6027\u662f\u7531\u9501\u548cmvcc\u5b9e\u73b0\u7684\u3002</li> <li>\u5176\u4e2dmvcc\u7684\u610f\u601d\u662f\u591a\u7248\u672c\u5e76\u53d1\u63a7\u5236\u3002\u6307\u7ef4\u62a4\u4e00\u4e2a\u6570\u636e\u7684\u591a\u4e2a\u7248\u672c\uff0c\u4f7f\u5f97\u8bfb\u5199\u64cd\u4f5c\u6ca1\u6709\u51b2\u7a81\uff0c\u5b83\u7684\u5e95\u5c42\u5b9e\u73b0\u4e3b\u8981\u662f\u5206\u4e3a\u4e86\u4e09\u4e2a\u90e8\u5206\uff0c\u7b2c\u4e00\u4e2a\u662f\u9690\u85cf\u5b57\u6bb5\uff0c\u7b2c\u4e8c\u4e2a\u662fundo log\u65e5\u5fd7\uff0c\u7b2c\u4e09\u4e2a\u662freadView\u8bfb\u89c6\u56fe</li> <li>\u9690\u85cf\u5b57\u6bb5\u662f\u6307\uff1a\u5728mysql\u4e2d\u7ed9\u6bcf\u4e2a\u8868\u90fd\u8bbe\u7f6e\u4e86\u9690\u85cf\u5b57\u6bb5\uff0c\u6709\u4e00\u4e2a\u662ftrx_id(\u4e8b\u52a1id)\uff0c\u8bb0\u5f55\u6bcf\u4e00\u6b21\u64cd\u4f5c\u7684\u4e8b\u52a1id\uff0c\u662f\u81ea\u589e\u7684\uff1b\u53e6\u4e00\u4e2a\u5b57\u6bb5\u662froll_pointer(\u56de\u6eda\u6307\u9488)\uff0c\u6307\u5411\u4e0a\u4e00\u4e2a\u7248\u672c\u7684\u4e8b\u52a1\u7248\u672c\u8bb0\u5f55\u5730\u5740</li> <li>undo log\u4e3b\u8981\u7684\u4f5c\u7528\u662f\u8bb0\u5f55\u56de\u6eda\u65e5\u5fd7\uff0c\u5b58\u50a8\u8001\u7248\u672c\u6570\u636e\uff0c\u5728\u5185\u90e8\u4f1a\u5f62\u6210\u4e00\u4e2a\u7248\u672c\u94fe\uff0c\u5728\u591a\u4e2a\u4e8b\u52a1\u5e76\u884c\u64cd\u4f5c\u67d0\u4e00\u884c\u8bb0\u5f55\uff0c\u8bb0\u5f55\u4e0d\u540c\u4e8b\u52a1\u4fee\u6539\u6570\u636e\u7684\u7248\u672c\uff0c\u901a\u8fc7roll_pointer\u6307\u9488\u5f62\u6210\u4e00\u4e2a\u94fe\u8868</li> <li> <p>readView\u89e3\u51b3\u7684\u662f\u4e00\u4e2a\u4e8b\u52a1\u67e5\u8be2\u9009\u62e9\u7248\u672c\u7684\u95ee\u9898\uff0c\u5728\u5185\u90e8\u5b9a\u4e49\u4e86\u4e00\u4e9b\u5339\u914d\u89c4\u5219\u548c\u5f53\u524d\u7684\u4e00\u4e9b\u4e8b\u52a1id\u5224\u65ad\u8be5\u8bbf\u95ee\u90a3\u4e2a\u7248\u672c\u7684\u6570\u636e\uff0c\u4e0d\u540c\u7684\u9694\u79bb\u7ea7\u522b\u5feb\u7167\u8bfb\u662f\u4e0d\u4e00\u6837\u7684\uff0c\u6700\u7ec8\u7684\u8bbf\u95ee\u7684\u7ed3\u679c\u4e0d\u4e00\u6837\u3002\u5982\u679c\u662frc\u9694\u79bb\u7ea7\u522b\uff0c\u6bcf\u4e00\u6b21\u6267\u884c\u5feb\u7167\u8bfb\u65f6\u751f\u6210ReadView\uff0c\u5982\u679c\u662frr\u9694\u79bb\u7ea7\u522b\u4ec5\u5728\u4e8b\u52a1\u4e2d\u7b2c\u4e00\u6b21\u6267\u884c\u5feb\u7167\u8bfb\u65f6\u751f\u6210ReadView\uff0c\u540e\u7eed\u590d\u7528</p> </li> <li> <p> \u5206\u5e93\u5206\u8868</p> </li> <li>\u8ba2\u5355\u8868\u8ff0\u53ef\u4ee5\u7528\u5230\u5782\u76f4\u5206\u8868\uff0c\u8ba2\u5355\u592a\u591a\u53ef\u4ee5\u6c34\u5e73\u5206\u8868\uff0c\u67e5\u627e\u7684\u65f6\u5019\u6839\u636eid\u8282\u70b9\u53d6\u6a21</li> <li>\u5458\u5de5\u8868\u3001\u4ea7\u54c1\u5206\u7c7b\u8868\u3001\u5177\u4f53\u7684\u4ea7\u54c1\u8868\u3001\u4ea7\u54c1\u7279\u70b9\u8868\u3001\u5957\u9910\u8868\u683c\u3001\u7528\u6237\u8868\u3001\u5730\u5740\u8868\u3001\u8ba2\u5355\u8868\u3001\u8ba2\u5355\u8be6\u60c5\u8868</li> <li>\u4ef7\u683c\u4f7f\u7528decimal \u540d\u79f0\u4f7f\u7528varchar id\u7528\u7684\u662fbigint</li> <li>\u5782\u76f4\u5206\u5e93\uff1a\u6839\u636e\u4e1a\u52a1\u4e0d\u540c\u5c06\u4e0d\u540c\u7684\u8868\u62c6\u5206\u5230\u4e0d\u540c\u7684\u5e93\u4e2d</li> <li>\u5782\u76f4\u5206\u8868\uff1a\u5c06\u4e0d\u5e38\u7528\u7684\u5b57\u6bb5\u6216\u8005\u5927\u5b57\u6bb5\u62c6\u5206\u8fdb\u9644\u8868</li> <li>\u6c34\u5e73\u5206\u5e93\uff1a\u5c06\u4e00\u4e2a\u5e93\u7684\u6570\u636e\u62c6\u5206\u5230\u591a\u4e2a\u5e93\u4e2d</li> <li>\u6c34\u5e73\u5206\u8868\uff1a\u5c06\u4e00\u4e2a\u8868\u7684\u6570\u636e\u62c6\u5206\u5230\u591a\u4e2a\u8868\u4e2d</li> </ul>"},{"location":"Problem/interview/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/#_3","title":"\u7ebf\u7a0b\u6c60","text":"<ul> <li>\u53c2\u6570\u4ecb\u7ecd\uff1f</li> <li>corePoolSize \u6838\u5fc3\u7ebf\u7a0b\u6570\u76ee</li> <li>maximumPoolSize \u6700\u5927\u7ebf\u7a0b\u6570\u76ee = (\u6838\u5fc3\u7ebf\u7a0b+\u6551\u6025\u7ebf\u7a0b\u7684\u6700\u5927\u6570\u76ee)</li> <li>keepAliveTime \u751f\u5b58\u65f6\u95f4 - \u6551\u6025\u7ebf\u7a0b\u7684\u751f\u5b58\u65f6\u95f4\uff0c\u751f\u5b58\u65f6\u95f4\u5185\u6ca1\u6709\u65b0\u4efb\u52a1\uff0c\u6b64\u7ebf\u7a0b\u8d44\u6e90\u4f1a\u91ca\u653e</li> <li>workQueue - \u5f53\u6ca1\u6709\u7a7a\u95f2\u6838\u5fc3\u7ebf\u7a0b\u65f6\uff0c\u65b0\u6765\u4efb\u52a1\u4f1a\u52a0\u5165\u5230\u6b64\u961f\u5217\u6392\u961f\uff0c\u961f\u5217\u6ee1\u4f1a\u521b\u5efa\u6551\u6025\u7ebf\u7a0b\u6267\u884c\u4efb\u52a1</li> <li>threadFactory \u7ebf\u7a0b\u5de5\u5382 - \u53ef\u4ee5\u5b9a\u5236\u7ebf\u7a0b\u5bf9\u8c61\u7684\u521b\u5efa\uff0c\u4f8b\u5982\u8bbe\u7f6e\u7ebf\u7a0b\u540d\u5b57\u3001\u662f\u5426\u662f\u5b88\u62a4\u7ebf\u7a0b\u7b49</li> <li> <p>handler \u62d2\u7edd\u7b56\u7565 - \u5f53\u6240\u6709\u7ebf\u7a0b\u90fd\u5728\u7e41\u5fd9\uff0cworkQueue \u4e5f\u653e\u6ee1\u65f6\uff0c\u4f1a\u89e6\u53d1\u62d2\u7edd\u7b56\u7565</p> </li> <li> <p>\u62d2\u7edd\u7b56\u7565\uff1f</p> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> <ul> <li>- Swagger \u4f5c\u7528</li> <li>\u5b9a\u4e49\uff1aSwagger \u662f\u4e00\u4e2a\u7528\u4e8e\u8bbe\u8ba1\u3001\u6784\u5efa\u548c\u6587\u6863\u5316 RESTful Web \u670d\u52a1\u7684\u5de5\u5177\u96c6\u3002</li> <li>\u4f5c\u7528\uff1a\u7528\u6765\u5728\u540e\u7aef\u751f\u6210\u63a5\u53e3\u6587\u6863\uff0c\u8f85\u52a9\u524d\u7aef\u6d4b\u8bd5\u3002\u4f7f\u7528 Swagger \u53ea\u9700\u8981\u6309\u7167\u5b83\u7684\u89c4\u8303\u5b9a\u4e49\u63a5\u53e3\u4ee5\u53ca\u63a5\u53e3\u7684\u76f8\u5173\u4fe1\u606f\uff0c\u5c31\u53ef\u4ee5\u505a\u5230\u751f\u6210\u63a5\u53e3\u6587\u6863\uff0c\u4ee5\u53ca\u5728\u7ebf\u63a5\u53e3\u8c03\u8bd5\u9875\u9762\u3002</li> <li>Knife 4 j \u662f Swagger \u7684\u4e00\u4e2a\u589e\u5f3a\u5de5\u5177\uff0c\u662f\u57fa\u4e8e Swagger \u6784\u5efa\u7684\u4e00\u6b3e\u529f\u80fd\u5f3a\u5927\u7684\u6587\u6863\u5de5\u5177\u3002\u5b83\u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u6ce8\u89e3\uff0c\u7528\u4e8e\u589e\u5f3a\u5bf9 API \u6587\u6863\u7684\u63cf\u8ff0\u548c\u53ef\u89c6\u5316\u5c55\u793a\u3002\u5982\u5728\u82cd\u7a79\u5916\u5356\u9879\u76ee\u4e2d\u5e38\u7528\u7684 Knife 4 j \u6ce8\u89e3\u4ecb\u7ecd\uff1a<ul> <li>@Api \uff1a\u7528\u4e8e\u5bf9 Controller \u7c7b\u8fdb\u884c\u8bf4\u660e\u548c\u63cf\u8ff0\uff0c\u53ef\u4ee5\u6307\u5b9a Controller \u7684\u540d\u79f0\u3001\u63cf\u8ff0\u3001\u6807\u7b7e\u7b49\u4fe1\u606f\u3002</li> </ul> </li> <li>@ApiOperation\uff1a\u7528\u4e8e\u5bf9 Controller \u4e2d\u7684\u65b9\u6cd5\u8fdb\u884c\u8bf4\u660e\u548c\u63cf\u8ff0\uff0c\u53ef\u4ee5\u6307\u5b9a\u65b9\u6cd5\u7684\u540d\u79f0\u3001\u63cf\u8ff0\u3001\u8bf7\u6c42\u65b9\u6cd5\uff08GET\u3001POST \u7b49\uff09\u7b49\u4fe1\u606f\u3002</li> </ul> </li> <li> <p>Pagehelper \u5982\u4f55\u5b9e\u73b0\u5206\u9875\u67e5\u8be2\uff1f   \u901a\u8fc7\u4e00\u4e2a SetLocalPage \u65b9\u6cd5\u8c03\u7528 ThreadLocal \u5c06 Page \u5bf9\u8c61\u5c01\u88c5\u5230\u5b58\u50a8\u5230\u5f53\u524d\u7684\u7ebf\u7a0b\u5b58\u50a8\u7a7a\u95f4\u4e2d\uff0c\u5728\u540e\u9762\u5f00\u59cb\u5206\u9875\u67e5\u8be2\u65f6\uff0cMapper \u4e2d\u7684 SQL \u8bed\u53e5\u81ea\u52a8\u63a5\u4e0a limit \u5f00\u59cb\u9875\uff0c\u663e\u793a\u7684\u6570\u636e\u6570\u91cf\u3002</p> </li> <li>\u8bbe\u7f6e\u5206\u9875\u53c2\u6570\uff1a\u5728\u6267\u884c\u67e5\u8be2\u4e4b\u524d\uff0c\u9996\u5148\u901a\u8fc7 <code>PageHelper.startPage(int pageNum, int pageSize)</code> \u65b9\u6cd5\u8bbe\u7f6e\u5206\u9875\u7684\u53c2\u6570\uff0c\u8c03\u7528\u8be5\u65b9\u6cd5\u65f6\uff0c\u901a\u8fc7 ThreadLocal \u5b58\u50a8\u5206\u9875\u4fe1\u606f\u3002</li> <li>\u62e6\u622a\u67e5\u8be2\u8bed\u53e5\uff1a<code>PageHelper</code> \u5229\u7528 MyBatis \u63d0\u4f9b\u7684\u63d2\u4ef6 API\uff08<code>Interceptor</code> \u63a5\u53e3\uff09\u6765\u62e6\u622a\u539f\u59cb\u7684\u67e5\u8be2\u8bed\u53e5\u3002MyBatis \u6267\u884c\u4efb\u4f55 SQL \u8bed\u53e5\u524d\uff0c\u90fd\u4f1a\u5148\u901a\u8fc7\u5176\u63d2\u4ef6\u4f53\u7cfb\u4e2d\u7684\u62e6\u622a\u5668\u94fe\uff0c<code>PageHelper</code> \u6b63\u662f\u5728\u8fd9\u4e2a\u73af\u8282\u4ecb\u5165\u7684\u3002</li> <li>\u4fee\u6539\u539f\u59cb SQL \u8bed\u53e5\uff1a\u5728\u62e6\u622a\u539f\u59cb\u67e5\u8be2\u8bed\u53e5\u540e\uff0c<code>PageHelper</code> \u4f1a\u6839\u636e\u5206\u9875\u53c2\u6570\u52a8\u6001\u5730\u91cd\u5199\u6216\u6dfb\u52a0 SQL \u8bed\u53e5\uff0c\u4f7f\u5176\u6210\u4e3a\u4e00\u4e2a\u5206\u9875\u67e5\u8be2\u3002</li> <li>\u6267\u884c\u5206\u9875\u67e5\u8be2\uff1a\u4fee\u6539\u540e\u7684 SQL \u8bed\u53e5\u88ab\u6267\u884c\uff0c\u8fd4\u56de\u5f53\u524d\u9875\u7684\u6570\u636e\u3002</li> <li>\u67e5\u8be2\u603b\u8bb0\u5f55\u6570\uff08\u53ef\u9009\uff09\uff1a\u5982\u679c\u9700\u8981\u83b7\u53d6\u603b\u8bb0\u5f55\u6570\uff0c<code>PageHelper</code> \u4f1a\u81ea\u52a8\u6267\u884c\u4e00\u4e2a\u6d3e\u751f\u7684\u67e5\u8be2\uff0c\u4ee5\u8ba1\u7b97\u539f\u59cb\u67e5\u8be2\uff08\u4e0d\u5305\u542b\u5206\u9875\u53c2\u6570\uff09\u7684\u603b\u8bb0\u5f55\u6570\u3002\u8fd9\u901a\u5e38\u901a\u8fc7\u79fb\u9664\u539f\u59cb SQL \u7684\u6392\u5e8f\uff08<code>ORDER BY</code>\uff09\u548c\u5206\u9875\uff08<code>LIMIT</code>\u3001<code>OFFSET</code> \u7b49\uff09\u6761\u4ef6\uff0c\u52a0\u4e0a <code>COUNT(*)</code> \u7684\u5305\u88c5\u6765\u5b9e\u73b0\u3002</li> <li> <p>\u8fd4\u56de\u5206\u9875\u4fe1\u606f\uff1a\u67e5\u8be2\u7ed3\u679c\u88ab\u5c01\u88c5\u5728 <code>PageInfo</code> \u5bf9\u8c61\u4e2d\uff08\u6216\u5176\u4ed6\u5f62\u5f0f\u7684\u5206\u9875\u7ed3\u679c\u5bf9\u8c61\uff09\uff0c\u8fd9\u4e2a\u5bf9\u8c61\u9664\u4e86\u5305\u542b\u5f53\u524d\u9875\u7684\u6570\u636e\u5217\u8868\u5916\uff0c\u8fd8\u63d0\u4f9b\u4e86\u603b\u8bb0\u5f55\u6570\u3001\u603b\u9875\u6570\u3001\u5f53\u524d\u9875\u7801\u7b49\u5206\u9875\u76f8\u5173\u7684\u4fe1\u606f\uff0c\u65b9\u4fbf\u5728\u5e94\u7528\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u3002</p> </li> <li> <p>Stream \u6d41</p> </li> <li>\u6d41\u662f java 8 \u5f15\u5165\u7684\u4e00\u4e2a\u5173\u952e\u62bd\u8c61\u6982\u5ff5\uff0c\u5141\u8bb8\u4ee5\u58f0\u660e\u7684\u65b9\u5f0f\u5904\u7406\u6570\u636e\u96c6\u5408\u3002</li> <li> <p>\u6d41\u64cd\u4f5c\u5206\u4e3a\u4e2d\u95f4\u64cd\u4f5c\u548c\u7ec8\u7aef\u64cd\u4f5c\uff1a</p> <ul> <li>\u4e2d\u95f4\u64cd\u4f5c\u8fd4\u56de\u6d41\u672c\u8eab\uff0c\u53ef\u4ee5\u94fe\u63a5\u591a\u4e2a\u64cd\u4f5c\u3002<ol> <li><code>filter</code>\uff1a\u8fc7\u6ee4\u6d41\u4e2d\u7684\u5143\u7d20\uff0c\u6839\u636e\u7ed9\u5b9a\u7684\u8c13\u8bcd\u4fdd\u7559\u90a3\u4e9b\u7b26\u5408\u6761\u4ef6\u7684\u5143\u7d20\u3002</li> <li><code>map</code>\uff1a\u5c06\u6d41\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u6620\u5c04\u6210\u53e6\u4e00\u79cd\u5f62\u5f0f\u3002</li> <li><code>flatMap</code>\uff1a\u7c7b\u4f3c\u4e8e <code>map</code>\uff0c\u4f46\u662f\u6bcf\u4e2a\u8f93\u5165\u5143\u7d20\u53ef\u4ee5\u88ab\u8f6c\u6362\u6210\u96f6\u4e2a\u3001\u4e00\u4e2a\u6216\u591a\u4e2a\u8f93\u51fa\u5143\u7d20\uff08\u6bd4\u5982\uff0c\u628a\u6d41\u4e2d\u7684\u6bcf\u4e2a\u5217\u8868\u8f6c\u6362\u6210\u6d41\u4e2d\u7684\u5143\u7d20\uff09\u3002</li> <li><code>distinct</code>\uff1a\u8fd4\u56de\u4e00\u4e2a\u53bb\u9664\u91cd\u590d\u5143\u7d20\u7684\u6d41\u3002</li> <li><code>sorted</code>\uff1a\u4ea7\u751f\u4e00\u4e2a\u65b0\u6d41\uff0c\u5176\u4e2d\u6309\u81ea\u7136\u987a\u5e8f\u6216\u63d0\u4f9b\u7684 <code>Comparator</code> \u6392\u5e8f\u3002</li> <li><code>peek</code>\uff1a\u751f\u6210\u53e6\u4e00\u4e2a\u6d41\uff0c\u5176\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u5728\u88ab\u6d88\u8d39\u65f6\u90fd\u4f1a\u6267\u884c\u7ed9\u5b9a\u7684\u64cd\u4f5c\uff08\u5e38\u7528\u4e8e\u8c03\u8bd5\uff09\u3002</li> <li><code>limit</code>\uff1a\u622a\u53d6\u6d41\u4f7f\u5176\u6700\u5927\u957f\u5ea6\u4e0d\u8d85\u8fc7\u7ed9\u5b9a\u7684\u6570\u91cf\u3002</li> <li><code>skip</code>\uff1a\u8fd4\u56de\u4e00\u4e2a\u4e22\u5f03\u4e86\u524d n \u4e2a\u5143\u7d20\u7684\u6d41\u3002\u5982\u679c\u6d41\u4e2d\u5143\u7d20\u4e0d\u8db3 n \u4e2a\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u7a7a\u6d41\u3002</li> <li>\u8be5\u4e2d\u95f4\u64cd\u4f5c\u4e3a map \u63a5\u53d7\u4e00\u4e2a\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\uff0c\u8fd9\u4e2a\u51fd\u6570\u5e94\u7528\u4e8e\u6d41\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u5e76\u5c06\u5176\u6620\u5c04\u4e3a\u4e00\u4e2a\u65b0\u7684\u5143\u7d20\u3002</li> </ol> </li> <li>\u7ec8\u7aef\u64cd\u4f5c\u8fd4\u56de\u4e00\u4e2a\u7ed3\u679c\u6216\u526f\u4f5c\u7528<ol> <li><code>forEach</code>\uff1a\u5bf9\u6d41\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u6267\u884c\u7ed9\u5b9a\u7684\u64cd\u4f5c\uff0c\u901a\u5e38\u7528\u4e8e\u4ea7\u751f\u526f\u4f5c\u7528\uff08\u5982\u8f93\u51fa\uff09\u3002</li> <li><code>collect</code>\uff1a\u5df2\u8ba8\u8bba\uff0c\u901a\u8fc7\u7ed9\u5b9a\u7684\u6536\u96c6\u5668\uff0c\u5c06\u6d41\u5143\u7d20\u7d2f\u79ef\u6210\u4e00\u4e2a\u6c47\u603b\u7ed3\u679c\uff08\u5982\u5217\u8868\u3001\u96c6\u3001\u5b57\u7b26\u4e32\uff09\u3002</li> <li><code>reduce</code>\uff1a\u5c06\u6d41\u4e2d\u7684\u5143\u7d20\u7ec4\u5408\u8d77\u6765\uff0c\u4f7f\u7528\u4e00\u4e2a\u521d\u59cb\u503c\u548c\u4e00\u4e2a\u4e8c\u5143\u7d2f\u79ef\u51fd\u6570\uff0c\u8fd4\u56de\u4e00\u4e2a <code>Optional</code> \u7ed3\u679c\u3002</li> <li><code>count</code>\uff1a\u8fd4\u56de\u6d41\u4e2d\u7684\u5143\u7d20\u6570\u91cf\u3002</li> <li><code>anyMatch</code>\uff1a\u5982\u679c\u6d41\u4e2d\u81f3\u5c11\u6709\u4e00\u4e2a\u5143\u7d20\u5339\u914d\u7ed9\u5b9a\u7684\u8c13\u8bcd\uff0c\u5219\u8fd4\u56de <code>true</code>\u3002</li> <li><code>allMatch</code>\uff1a\u5982\u679c\u6d41\u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u5339\u914d\u7ed9\u5b9a\u7684\u8c13\u8bcd\uff0c\u5219\u8fd4\u56de <code>true</code>\u3002</li> <li><code>noneMatch</code>\uff1a\u5982\u679c\u6d41\u4e2d\u6ca1\u6709\u5143\u7d20\u5339\u914d\u7ed9\u5b9a\u7684\u8c13\u8bcd\uff0c\u5219\u8fd4\u56de <code>true</code>\u3002</li> <li><code>findFirst</code>\uff1a\u8fd4\u56de\u6d41\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c\u5982\u679c\u6d41\u4e3a\u7a7a\u5219\u8fd4\u56de\u4e00\u4e2a\u7a7a\u7684 <code>Optional</code>\u3002</li> <li><code>findAny</code>\uff1a\u8fd4\u56de\u6d41\u4e2d\u7684\u4efb\u610f\u5143\u7d20\uff0c\u5982\u679c\u6d41\u4e3a\u7a7a\u5219\u8fd4\u56de\u4e00\u4e2a\u7a7a\u7684 <code>Optional</code>\u3002     ![[Pasted image 20240314163615.png]]</li> </ol> </li> </ul> </li> <li> <p>\u8bb2\u8bb2\u4ec0\u4e48\u662f Httpclient\uff1a     Httpclient\u662f\u4e00\u4e2a\u670d\u52a1\u5668\u7aef\u8fdb\u884c HTTP \u901a\u4fe1\u7684\u5e93\uff0c\u4ed6\u4f7f\u5f97\u540e\u7aef\u53ef\u4ee5\u53d1\u9001\u5404\u79cd HTTP \u8bf7\u6c42\u548c\u63a5\u6536 HTTP \u54cd\u5e94\uff0c\u4f7f\u7528 HTTPClient\uff0c\u53ef\u4ee5\u8f7b\u677e\u7684\u53d1\u9001 GET, POST, PUT, DELETE \u7b49\u5404\u79cd\u7c7b\u578b\u7684\u7684\u8bf7\u6c42\u3002     \u00a0\u5728\u6211\u4eec\u7684\u9879\u76ee\u4e2d\uff0c\u5728\u8fdb\u884c\u5fae\u4fe1\u767b\u5f55\u5f00\u53d1\u65f6\uff0c\u540e\u7aef\u5728\u4f7f\u7528\u767b\u5f55\u51ed\u8bc1\u6821\u9a8c\u63a5\u53e3\u7684\u65f6\u5019\u5c31\u9700\u8981\u53d1\u9001\u6307\u5b9a\u8bf7\u6c42\u5230\u7ed9\u5b9a\u7684 URL \u4e2d\u3002\u56e0\u6b64\u6211\u4eec\u4f7f\u7528 Httpclient \u53bb\u5b8c\u6210\u8be5\u4efb\u52a1\u3002</p> </li> <li> <p>spring task \u5904\u7406\u5b9a\u65f6\u4efb\u52a1    Spring Task\uff08Spring \u4efb\u52a1\u8c03\u5ea6\uff09\u662f Spring \u6846\u67b6\u63d0\u4f9b\u7684\u4e00\u79cd\u4efb\u52a1\u8c03\u5ea6\u6846\u67b6\uff0c\u7528\u4e8e\u6267\u884c\u5b9a\u65f6\u4efb\u52a1\u3001\u5f02\u6b65\u4efb\u52a1\u3001\u4efb\u52a1\u76d1\u542c\u3001\u4efb\u52a1\u8c03\u5ea6\u7b49\u3002     \u5728\u82cd\u7a79\u5916\u5356\u9879\u76ee\u4e2d\u4f7f\u7528 Spring task \u7528\u6765\u6267\u884c\u5b9a\u65f6\u4efb\u52a1\u67e5\u770b\u6709\u6ca1\u6709\u5df2\u7ecf\u6d3e\u9001\u7ed3\u675f\u7684\u8ba2\u5355\u4f46\u72b6\u6001\u6ca1\u6709\u66f4\u6539\u4e3a\u5df2\u5b8c\u6210\uff0c\u5728\u7b2c\u4e8c\u5929\u7684\u56fa\u5b9a\u65f6\u95f4\u7edf\u4e00\u8c03\u7528\u8be5\u5b9a\u65f6\u4efb\u52a1\u53bb\u66f4\u6539\u9700\u8981\u8c03\u6574\u7684\u8ba2\u5355\u72b6\u6001\u3002</p> </li> </ul>"},{"location":"Problem/interview/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/#abortpolicyrejectedexecutionexception","title":"AbortPolicy\uff08\u9ed8\u8ba4\u7b56\u7565\uff09\u76f4\u63a5\u629b\u51fa<code>RejectedExecutionException</code>\u5f02\u5e38\u3002","text":""},{"location":"Problem/interview/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/#callerrunspolicy","title":"CallerRunsPolicy\u4e0d\u4f1a\u629b\u51fa\u5f02\u5e38\uff0c\u800c\u662f\u5c06\u4efb\u52a1\u56de\u9000\u7ed9\u8c03\u7528\u8005\u7ebf\u7a0b\u81ea\u5df1\u6765\u6267\u884c\u3002","text":""},{"location":"Problem/interview/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/#discardpolicy","title":"DiscardPolicy\u9ed8\u9ed8\u5730\u4e22\u5f03\u65e0\u6cd5\u5904\u7406\u7684\u4efb\u52a1\uff0c\u4e0d\u7ed9\u4e88\u4efb\u4f55\u5904\u7406\u4e5f\u4e0d\u629b\u51fa\u5f02\u5e38\u3002","text":""},{"location":"Problem/interview/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/#discardoldestpolicy","title":"DiscardOldestPolicy\u4e22\u5f03\u961f\u5217\u4e2d\u6700\u8001\u7684\u4e00\u4e2a\u8bf7\u6c42\uff0c\u4e5f\u5c31\u662f\u5373\u5c06\u88ab\u6267\u884c\u7684\u4e00\u4e2a\u4efb\u52a1\uff0c\u5e76\u5c1d\u8bd5\u518d\u6b21\u63d0\u4ea4\u5f53\u524d\u4efb\u52a1\u3002","text":""},{"location":"Problem/interview/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/#_4","title":"\u5907\u7528","text":"<pre><code>#### \u7528\u552f\u4e00\u7d22\u5f15\u80fd\u4e0d\u80fd\u4fdd\u8bc1\u4e00\u4eba\u4e00\u5355\uff0c\u548c\u4f60\u7684\u5206\u5e03\u5f0f\u9501\u6bd4\u8d77\u6765\u600e\u4e48\u7528\uff1f\n\n\u5728\u5904\u7406\u201c\u4e00\u4eba\u4e00\u5355\u201d\u8fd9\u7c7b\u9650\u5236\u8d2d\u4e70\u6570\u91cf\u7684\u4e1a\u52a1\u573a\u666f\u65f6\uff0c\u6211\u4eec\u5e38\u5e38\u9700\u8981\u8003\u8651\u6570\u636e\u7684\u4e00\u81f4\u6027\u548c\u7cfb\u7edf\u7684\u5e76\u53d1\u5904\u7406\u80fd\u529b\u3002\u552f\u4e00\u7d22\u5f15\u548c\u5206\u5e03\u5f0f\u9501\u662f\u4e24\u79cd\u5e38\u89c1\u7684\u6280\u672f\u65b9\u6848\uff0c\u5404\u6709\u5176\u4f18\u7f3a\u70b9\u548c\u9002\u7528\u573a\u666f\u3002\n\n### \u552f\u4e00\u7d22\u5f15\n\n\u552f\u4e00\u7d22\u5f15\u662f\u6570\u636e\u5e93\u5c42\u9762\u7684\u7ea6\u675f\uff0c\u7528\u6765\u4fdd\u8bc1\u67d0\u5217\uff08\u6216\u5217\u7684\u7ec4\u5408\uff09\u7684\u6570\u636e\u7684\u552f\u4e00\u6027\u3002\u5728\u201c\u4e00\u4eba\u4e00\u5355\u201d\u7684\u573a\u666f\u4e2d\uff0c\u53ef\u4ee5\u901a\u8fc7\u4e3a\u7528\u6237ID\u548c\u5546\u54c1ID\u7ec4\u5408\u8bbe\u7f6e\u552f\u4e00\u7d22\u5f15\u6765\u5b9e\u73b0\u3002\n\n**\u4f18\u70b9**:\n\n- **\u7b80\u5355\u9ad8\u6548**: \u76f4\u63a5\u7531\u6570\u636e\u5e93\u7ba1\u7406\uff0c\u4e0d\u9700\u8981\u989d\u5916\u7684\u4ee3\u7801\u903b\u8f91\u3002\n- **\u5f3a\u5236\u7ea6\u675f**: \u4fdd\u8bc1\u4e86\u6570\u636e\u7684\u4e00\u81f4\u6027\uff0c\u4efb\u4f55\u8fdd\u53cd\u552f\u4e00\u7ea6\u675f\u7684\u63d2\u5165\u64cd\u4f5c\u90fd\u4f1a\u88ab\u6570\u636e\u5e93\u62d2\u7edd\u3002\n\n**\u7f3a\u70b9**:\n\n- **\u7075\u6d3b\u6027\u5dee**: \u4e00\u65e6\u89c4\u5219\u53d1\u751f\u53d8\u5316\uff08\u5982\u6d3b\u52a8\u89c4\u5219\u4ece\u201c\u4e00\u4eba\u4e00\u5355\u201d\u6539\u4e3a\u201c\u4e00\u4eba\u4e24\u5355\u201d\uff09\uff0c\u53ef\u80fd\u9700\u8981\u8c03\u6574\u6570\u636e\u5e93\u7ed3\u6784\u3002\n- **\u5f02\u5e38\u5904\u7406**: \u5f53\u8fdd\u53cd\u552f\u4e00\u7ea6\u675f\u65f6\uff0c\u6570\u636e\u5e93\u4f1a\u629b\u51fa\u5f02\u5e38\uff0c\u9700\u8981\u5728\u5e94\u7528\u5c42\u9762\u8fdb\u884c\u6355\u83b7\u548c\u5904\u7406\uff0c\u53ef\u80fd\u5bfc\u81f4\u7528\u6237\u4f53\u9a8c\u4e0d\u4f73\u3002\n\n### \u5206\u5e03\u5f0f\u9501\n\n\u5206\u5e03\u5f0f\u9501\u662f\u4e00\u79cd\u8de8\u591a\u4e2a\u8fdb\u7a0b\u6216\u670d\u52a1\u5668\u7684\u540c\u6b65\u673a\u5236\uff0c\u7528\u4e8e\u4fdd\u8bc1\u5728\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\u67d0\u4e2a\u65f6\u523b\u53ea\u6709\u4e00\u4e2a\u64cd\u4f5c\u80fd\u8bbf\u95ee\u7279\u5b9a\u8d44\u6e90\u3002\n\n**\u4f18\u70b9**:\n\n- **\u9ad8\u5ea6\u7075\u6d3b**: \u53ef\u4ee5\u5728\u4ee3\u7801\u4e2d\u6839\u636e\u4e1a\u52a1\u9700\u6c42\u7075\u6d3b\u63a7\u5236\u9501\u7684\u7c92\u5ea6\u548c\u6301\u6709\u65f6\u95f4\uff0c\u9002\u5e94\u5404\u79cd\u590d\u6742\u573a\u666f\u3002\n- **\u51cf\u5c11\u6570\u636e\u5e93\u8d1f\u62c5**: \u901a\u8fc7\u5e94\u7528\u5c42\u9762\u7684\u63a7\u5236\u51cf\u5c11\u5bf9\u6570\u636e\u5e93\u7684\u538b\u529b\uff0c\u5c24\u5176\u662f\u5728\u9ad8\u5e76\u53d1\u573a\u666f\u4e0b\u3002\n\n**\u7f3a\u70b9**:\n\n- **\u5b9e\u73b0\u590d\u6742**: \u9700\u8981\u9009\u62e9\u5408\u9002\u7684\u5206\u5e03\u5f0f\u9501\u5b9e\u73b0\uff08\u5982Redis\u3001Zookeeper\u7b49\uff09\uff0c\u5e76\u6b63\u786e\u5904\u7406\u9501\u7684\u83b7\u53d6\u3001\u7eed\u671f\u548c\u91ca\u653e\u3002\n- **\u6027\u80fd\u8003\u91cf**: \u9501\u7684\u6301\u6709\u548c\u91ca\u653e\u9700\u8981\u7f51\u7edc\u901a\u4fe1\uff0c\u53ef\u80fd\u4f1a\u589e\u52a0\u7cfb\u7edf\u7684\u54cd\u5e94\u65f6\u95f4\u3002\n\n### \u552f\u4e00\u7d22\u5f15\u4e0e\u5206\u5e03\u5f0f\u9501\u7684\u5bf9\u6bd4\u4f7f\u7528\n\n- **\u552f\u4e00\u7d22\u5f15**\u9002\u5408\u6570\u636e\u4e00\u81f4\u6027\u8981\u6c42\u9ad8\u3001\u89c4\u5219\u76f8\u5bf9\u56fa\u5b9a\u7684\u573a\u666f\u3002\u7531\u4e8e\u5176\u64cd\u4f5c\u7b80\u5355\u3001\u6027\u80fd\u8f83\u597d\uff0c\u662f\u5b9e\u73b0\u201c\u4e00\u4eba\u4e00\u5355\u201d\u975e\u5e38\u76f4\u63a5\u7684\u65b9\u6cd5\u3002\n- **\u5206\u5e03\u5f0f\u9501**\u9002\u5408\u4e1a\u52a1\u89c4\u5219\u590d\u6742\u3001\u9700\u8981\u7075\u6d3b\u63a7\u5236\u5e76\u53d1\u64cd\u4f5c\u7684\u573a\u666f\u3002\u5c24\u5176\u5728\u9700\u8981\u63a7\u5236\u7c92\u5ea6\u7ec6\u3001\u4e1a\u52a1\u6d41\u7a0b\u957f\u7684\u64cd\u4f5c\u4e2d\uff0c\u5206\u5e03\u5f0f\u9501\u63d0\u4f9b\u4e86\u66f4\u591a\u7684\u63a7\u5236\u80fd\u529b\u3002\n\n\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\uff0c\u9009\u62e9\u54ea\u79cd\u65b9\u6848\u53d6\u51b3\u4e8e\u5177\u4f53\u7684\u4e1a\u52a1\u9700\u6c42\u3001\u7cfb\u7edf\u67b6\u6784\u548c\u6027\u80fd\u8981\u6c42\u3002\u6709\u65f6\uff0c\u4e3a\u4e86\u8fbe\u5230\u6700\u4f18\u7684\u6548\u679c\uff0c\u751a\u81f3\u4f1a\u7ed3\u5408\u4f7f\u7528\u552f\u4e00\u7d22\u5f15\u548c\u5206\u5e03\u5f0f\u9501\uff0c\u6bd4\u5982\u4f7f\u7528\u552f\u4e00\u7d22\u5f15\u4fdd\u8bc1\u6570\u636e\u7684\u4e00\u81f4\u6027\uff0c\u540c\u65f6\u4f7f\u7528\u5206\u5e03\u5f0f\u9501\u6765\u63a7\u5236\u590d\u6742\u7684\u4e1a\u52a1\u6d41\u7a0b\uff0c\u4ee5\u6b64\u6765\u5e73\u8861\u6027\u80fd\u548c\u4e00\u81f4\u6027\u7684\u8981\u6c42\u3002\n</code></pre> <pre><code>#### \u4e3a\u4ec0\u4e48\u8981\u7528\u5206\u5e03\u5f0f\u9501\uff1f \u5206\u5e03\u5f0f\u9501\u662f\u5728\u4e8b\u52a1\u5f00\u542f\u524d\u52a0\u8fd8\u662f\u4e8b\u52a1\u5f00\u59cb\u540e\n\n\u5206\u5e03\u5f0f\u9501\u4e3b\u8981\u7528\u4e8e\u5728\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\u4fdd\u6301\u6570\u636e\u4e00\u81f4\u6027\u548c\u9632\u6b62\u8d44\u6e90\u51b2\u7a81\uff0c\u7279\u522b\u662f\u5728\u591a\u4e2a\u8fdb\u7a0b\u6216\u670d\u52a1\u9700\u8981\u8bbf\u95ee\u5171\u4eab\u8d44\u6e90\u65f6\u3002\u5728\u5206\u5e03\u5f0f\u73af\u5883\u4e0b\uff0c\u7531\u4e8e\u7cfb\u7edf\u5206\u6563\u5728\u4e0d\u540c\u7684\u670d\u52a1\u5668\u6216\u8fdb\u7a0b\u4e2d\uff0c\u65e0\u6cd5\u76f4\u63a5\u4f7f\u7528\u4f20\u7edf\u7684\u5355\u4f53\u7cfb\u7edf\u4e2d\u7684\u9501\u673a\u5236\uff08\u5982\u6570\u636e\u5e93\u9501\u6216\u5185\u5b58\u9501\uff09\u6765\u540c\u6b65\u64cd\u4f5c\u3002\u56e0\u6b64\uff0c\u5f15\u5165\u5206\u5e03\u5f0f\u9501\u6210\u4e3a\u4e86\u4fdd\u6301\u9ad8\u5e76\u53d1\u73af\u5883\u4e0b\u6570\u636e\u4e00\u81f4\u6027\u548c\u7cfb\u7edf\u7a33\u5b9a\u6027\u7684\u5173\u952e\u6280\u672f\u3002\n\n### \u4e3a\u4ec0\u4e48\u8981\u7528\u5206\u5e03\u5f0f\u9501\uff1f\n\n1. **\u6570\u636e\u4e00\u81f4\u6027**: \u5728\u5e76\u53d1\u73af\u5883\u4e0b\uff0c\u591a\u4e2a\u8fdb\u7a0b\u6216\u670d\u52a1\u53ef\u80fd\u540c\u65f6\u64cd\u4f5c\u540c\u4e00\u6570\u636e\uff0c\u5982\u679c\u6ca1\u6709\u9002\u5f53\u7684\u540c\u6b65\u673a\u5236\uff0c\u5c31\u53ef\u80fd\u5bfc\u81f4\u6570\u636e\u4e0d\u4e00\u81f4\u3002\n2. **\u9632\u6b62\u8d44\u6e90\u51b2\u7a81**: \u5206\u5e03\u5f0f\u9501\u53ef\u4ee5\u786e\u4fdd\u540c\u4e00\u65f6\u523b\u53ea\u6709\u4e00\u4e2a\u8fdb\u7a0b\u6216\u670d\u52a1\u64cd\u4f5c\u67d0\u4e2a\u8d44\u6e90\uff0c\u907f\u514d\u4e86\u64cd\u4f5c\u51b2\u7a81\u3002\n3. **\u987a\u5e8f\u63a7\u5236**: \u5728\u9700\u8981\u6309\u7167\u7279\u5b9a\u987a\u5e8f\u6267\u884c\u64cd\u4f5c\u7684\u573a\u666f\u4e2d\uff0c\u5206\u5e03\u5f0f\u9501\u53ef\u4ee5\u786e\u4fdd\u64cd\u4f5c\u7684\u6709\u5e8f\u6027\u3002\n4. **\u4e1a\u52a1\u903b\u8f91\u4fdd\u62a4**: \u5728\u590d\u6742\u7684\u4e1a\u52a1\u903b\u8f91\u4e2d\uff0c\u901a\u8fc7\u5206\u5e03\u5f0f\u9501\u53ef\u4ee5\u4fdd\u8bc1\u67d0\u4e9b\u64cd\u4f5c\u4e0d\u4f1a\u56e0\u4e3a\u5e76\u53d1\u6267\u884c\u800c\u88ab\u6253\u65ad\uff0c\u4fdd\u969c\u4e1a\u52a1\u903b\u8f91\u7684\u5b8c\u6574\u6027\u3002\n\n### \u5206\u5e03\u5f0f\u9501\u662f\u5728\u4e8b\u52a1\u5f00\u542f\u524d\u52a0\u8fd8\u662f\u4e8b\u52a1\u5f00\u59cb\u540e\u52a0\uff1f\n\n\u5206\u5e03\u5f0f\u9501\u7684\u4f7f\u7528\u65f6\u673a\u53d6\u51b3\u4e8e\u5177\u4f53\u7684\u4e1a\u52a1\u573a\u666f\u548c\u4fdd\u62a4\u8d44\u6e90\u7684\u9700\u6c42\u3002\u7136\u800c\uff0c\u6709\u51e0\u4e2a\u8003\u8651\u56e0\u7d20\u901a\u5e38\u4f1a\u5f71\u54cd\u8fd9\u4e00\u51b3\u7b56\uff1a\n\n- **\u9501\u5b9a\u8d44\u6e90\u524d\u52a0\u9501**\uff1a\u5982\u679c\u76ee\u6807\u662f\u4fdd\u62a4\u591a\u4e2a\u64cd\u4f5c\u4f5c\u4e3a\u4e00\u4e2a\u6574\u4f53\u6267\u884c\uff08\u5373\u4e8b\u52a1\uff09\uff0c\u90a3\u4e48\u5e94\u8be5\u5728\u5f00\u542f\u4e8b\u52a1\u4e4b\u524d\u5c31\u83b7\u53d6\u5206\u5e03\u5f0f\u9501\u3002\u8fd9\u6837\u53ef\u4ee5\u786e\u4fdd\u5728\u4e8b\u52a1\u5f00\u59cb\u6267\u884c\u524d\uff0c\u6ca1\u6709\u5176\u4ed6\u8fdb\u7a0b\u6216\u670d\u52a1\u80fd\u591f\u64cd\u4f5c\u8fd9\u4e9b\u8d44\u6e90\u3002\u8fd9\u79cd\u65b9\u5f0f\u9002\u7528\u4e8e\u9700\u8981\u5728\u4e8b\u52a1\u5f00\u59cb\u4e4b\u524d\u5c31\u786e\u4fdd\u8d44\u6e90\u72ec\u5360\u7684\u573a\u666f\u3002\n- **\u9501\u5b9a\u975e\u4e8b\u52a1\u6027\u8d44\u6e90**\uff1a\u5728\u67d0\u4e9b\u573a\u666f\u4e0b\uff0c\u9700\u8981\u5728\u4e8b\u52a1\u5916\u90e8\u5bf9\u4e00\u4e9b\u975e\u4e8b\u52a1\u6027\u8d44\u6e90\uff08\u5982\u7f13\u5b58\u66f4\u65b0\u3001\u6587\u4ef6\u7cfb\u7edf\u64cd\u4f5c\u7b49\uff09\u8fdb\u884c\u63a7\u5236\uff0c\u8fd9\u65f6\u5019\u901a\u5e38\u4f1a\u5728\u64cd\u4f5c\u8fd9\u4e9b\u8d44\u6e90\u4e4b\u524d\u83b7\u53d6\u5206\u5e03\u5f0f\u9501\u3002\n- **\u6027\u80fd\u8003\u8651**\uff1a\u5728\u4e8b\u52a1\u5f00\u59cb\u4e4b\u524d\u52a0\u9501\u53ef\u80fd\u4f1a\u589e\u52a0\u9501\u6301\u6709\u7684\u65f6\u95f4\uff0c\u4ece\u800c\u5f71\u54cd\u7cfb\u7edf\u7684\u541e\u5410\u91cf\u548c\u54cd\u5e94\u65f6\u95f4\u3002\u56e0\u6b64\uff0c\u9700\u8981\u5728\u9501\u7684\u7c92\u5ea6\u548c\u6301\u6709\u65f6\u95f4\u4e0e\u4e1a\u52a1\u9700\u6c42\u4e4b\u95f4\u505a\u51fa\u5e73\u8861\u3002\n\n\u7efc\u4e0a\uff0c\u6ca1\u6709\u4e00\u4e2a\u7edf\u4e00\u7684\u89c4\u5219\u9002\u7528\u4e8e\u6240\u6709\u573a\u666f\uff0c\u5173\u952e\u662f\u6839\u636e\u5b9e\u9645\u4e1a\u52a1\u9700\u6c42\u3001\u8d44\u6e90\u7c7b\u578b\u548c\u7cfb\u7edf\u67b6\u6784\u6765\u51b3\u5b9a\u6700\u4f73\u7684\u52a0\u9501\u65f6\u673a\u3002\u5728\u8bbe\u8ba1\u7cfb\u7edf\u65f6\uff0c\u5e94\u4ed4\u7ec6\u8003\u8651\u5206\u5e03\u5f0f\u9501\u7684\u4f7f\u7528\uff0c\u4ee5\u907f\u514d\u6b7b\u9501\u3001\u964d\u4f4e\u6027\u80fd\u548c\u589e\u52a0\u7cfb\u7edf\u590d\u6742\u5ea6\u7b49\u95ee\u9898\u3002\n</code></pre> <ul> <li> <p>\u4f60\u7528\u4ec0\u4e48\u6280\u672f\u5b9e\u73b0\u6570\u636e\u5bfc\u51fa\u7684\u529f\u80fd\u7684\uff1f</p> </li> <li> <p>\u5728\u672c\u9879\u76ee\u4e2d\u4f7f\u7528 Apache POI \u6280\u672f\u5b8c\u6210\u6570\u636e\u7684\u5bfc\u51fa\u80fd\uff0c\u63d0\u4f9b\u4e00\u5f20\u521b\u5efa\u597d\u7684\u6a21\u677f\u8868\uff0c\u7136\u540e\u4f7f\u7528 ApachePOI \u6765\u5b9e\u73b0\u586b\u5145\u6570\u636e\uff0c\u6700\u540e\u5bfc\u51fa\u6570\u636e\u3002</p> </li> <li>Apache POI\uff08Poor Obfuscation Implementation\uff09\u662f\u4e00\u4e2a\u7528\u4e8e\u5904\u7406 Microsoft Office \u683c\u5f0f\u6587\u6863\u7684\u5f00\u6e90 Java \u5e93\u3002POI \u63d0\u4f9b\u4e86\u4e00\u7ec4\u53ef\u4ee5\u8bfb\u53d6\u3001\u5199\u5165\u548c\u64cd\u4f5c\u5404\u79cd Office \u6587\u4ef6\u7684 API\uff0c\u5305\u62ec Word \u6587\u6863\uff08. Doc \u548c. Docx\uff09\u3001Excel \u7535\u5b50\u8868\u683c\uff08. Xls \u548c. Xlsx\uff09\u4ee5\u53ca PowerPoint \u6f14\u793a\u6587\u7a3f\uff08. Ppt \u548c. Pptx\uff09\u3002</li> </ul> <p>\u901a\u8fc7 POI\uff0c\u5f00\u53d1\u8005\u53ef\u4ee5\u5728 Java \u5e94\u7528\u7a0b\u5e8f\u4e2d\u8bfb\u53d6\u548c\u7f16\u8f91 Office \u6587\u6863\uff0c\u5b9e\u73b0\u5bf9\u6587\u6863\u5185\u5bb9\u3001\u6837\u5f0f\u3001\u683c\u5f0f\u548c\u5143\u6570\u636e\u7684\u64cd\u4f5c\u3002\u5b83\u63d0\u4f9b\u4e86\u5411\u73b0\u6709\u6587\u6863\u6dfb\u52a0\u65b0\u5185\u5bb9\u3001\u4fee\u6539\u73b0\u6709\u5185\u5bb9\u3001\u5220\u9664\u5185\u5bb9\u4ee5\u53ca\u8fdb\u884c\u683c\u5f0f\u8bbe\u7f6e\u548c\u6837\u5f0f\u8c03\u6574\u7b49\u529f\u80fd\u3002</p> <ul> <li> <p>SpringCache </p> </li> <li> <p>SpringCache \u662f Spring \u6846\u67b6\u63d0\u4f9b\u7684\u4e00\u4e2a\u62bd\u8c61\u5c42\uff0c\u65e8\u5728\u63d0\u4f9b\u4e00\u79cd\u900f\u660e\u7684\u65b9\u5f0f\u6765\u7f13\u5b58\u5e94\u7528\u4e2d\u7684\u6570\u636e\u3002SpringCache \u4e0d\u662f\u4e00\u4e2a\u5177\u4f53\u7684\u7f13\u5b58\u5b9e\u73b0\uff0c\u800c\u662f\u4e00\u4e2a\u96c6\u6210\u4e0d\u540c\u7f13\u5b58\u89e3\u51b3\u65b9\u6848\u7684\u63a5\u53e3\uff0c\u5982 EHCache\u3001Caffeine\u3001Guava\u3001Redis \u7b49\u3002\u5b83\u5141\u8bb8\u5f00\u53d1\u8005\u901a\u8fc7\u7b80\u5355\u7684\u6ce8\u89e3\u6765\u63a7\u5236\u65b9\u6cd5\u7684\u7f13\u5b58\u884c\u4e3a\uff0c\u4f8b\u5982\uff0c\u4f7f\u7528 <code>@Cacheable</code> \u6765\u6807\u8bb0\u4e00\u4e2a\u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u5e94\u8be5\u88ab\u7f13\u5b58\uff0c\u4ee5\u53ca\u4f7f\u7528 <code>@CacheEvict</code> \u6765\u6807\u8bb0\u4f55\u65f6\u79fb\u9664\u7f13\u5b58\u3002SpringCache \u4e3a\u5e94\u7528\u63d0\u4f9b\u4e86\u4e00\u81f4\u7684\u7f13\u5b58\u89c6\u56fe\uff0c\u800c\u5f00\u53d1\u8005\u4e0d\u9700\u8981\u5173\u5fc3\u5177\u4f53\u4f7f\u7528\u54ea\u79cd\u7f13\u5b58\u6280\u672f\u3002</p> </li> <li> <p>\u7b80\u5355\u7684\u8bf4\uff1a\u5b83\u4e5f\u662f\u4e00\u79cd\u7f13\u5b58\u6280\u672f\uff0c\u4f7f\u5f97\u6240\u7528\u5de5\u5177\u4e0d\u5c40\u9650\u4e8e Redis\u3002\u76f8\u6bd4\u8f83\u4e8e\u4f7f\u7528 Redis \u7684\u65f6\u5019\u9700\u8981\u628a\u76f8\u5173\u4ee3\u7801\u5185\u5d4c\u5230\u65b9\u6cd5\u4f53\u79cd\uff0cSpring Cache \u662f\u4e00\u79cd\u57fa\u4e8e\u6ce8\u89e3\u65b9\u5f0f\u6765\u8fbe\u5230\u5185\u5d4c\u4ee3\u7801\u76f8\u540c\u7684\u6548\u679c\u3002</p> </li> </ul>"},{"location":"Problem/interview/%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95%E5%87%86%E5%A4%87/","title":"\u9762\u8bd5\u7b97\u6cd5\u51c6\u5907","text":""},{"location":"Problem/interview/%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95%E5%87%86%E5%A4%87/#codetop","title":"\u7f8e\u56e2codetop","text":""},{"location":"Problem/interview/%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95%E5%87%86%E5%A4%87/#206","title":"206. \u53cd\u8f6c\u94fe\u8868","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        ListNode *dummy = NULL;\n        ListNode *l = dummy, *r = head;\n        while (r) {\n            ListNode *tmp = r-&gt;next;\n            r-&gt;next = l;\n            l = r;\n            r = tmp;\n        }\n        return l;\n    }\n};\n</code></pre>"},{"location":"Problem/interview/%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95%E5%87%86%E5%A4%87/#88","title":"88. \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4","text":"<p>\u4ece\u540e\u5411\u524d\u7684\u53cc\u6307\u9488</p> <pre><code>class Solution {\npublic:\n// \u7c7b\u4f3c\u4e8e\u5f52\u5e76\u6392\u5e8f\u4e2d\u7684\u4e00\u4e2a\u5c0f\u90e8\u5206\n// \u8981\u4f1a\u7528\n    void merge(vector&lt;int&gt;&amp; nums1, int m, vector&lt;int&gt;&amp; nums2, int n) {\n        int l = m - 1, r = n - 1;\n        int i = m + n - 1;\n        while (l &gt;= 0 &amp;&amp; r &gt;= 0) {\n            if (nums1[l] &gt; nums2[r]) {\n                nums1[i] = nums1[l];\n                i--;\n                l--;\n            }\n            else {\n                nums1[i] = nums2[r];\n                i--;\n                r--;\n            }\n        }\n        while (l &gt;= 0) {\n            nums1[i] = nums1[l];\n            i--;\n            l--;\n        }\n        while (r &gt;= 0) {\n            nums1[i] = nums2[r];\n            i--;\n            r--;\n        }\n    }\n};\n</code></pre>"},{"location":"Problem/interview/%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95%E5%87%86%E5%A4%87/#215-k","title":"215. \u6570\u7ec4\u4e2d\u7684\u7b2cK\u4e2a\u6700\u5927\u5143\u7d20","text":"<pre><code>class Solution {\npublic:\n    // int quick_select(vector&lt;int&gt;&amp; nums, int l, int r, int k) {\n    //     if (l == r) return nums[l];\n    //     int x = nums[(l + r) &gt;&gt; 1];\n    //     int i = l - 1, j = r + 1;\n    //     while (i &lt; j) {\n    //         do i++; while (nums[i] &gt; x);\n    //         do j--; while (nums[j] &lt; x);\n    //         if (i &lt; j) swap(nums[i], nums[j]);\n    //     }\n    //     if (k &lt;= j) return quick_select(nums, l, j, k);\n    //     else return quick_select(nums, j + 1, r, k);\n    // }\n    void maxHeapify(vector&lt;int&gt;&amp; nums, int i, int heapsize) {\n        int largest = i;\n        int left = 2 * i + 1, right = 2 * i + 2;\n        if (left &lt; heapsize &amp;&amp; nums[left] &gt; nums[largest]) {\n            largest = left;\n        }\n        if (right &lt; heapsize &amp;&amp; nums[right] &gt; nums[largest]) {\n            largest = right;\n        }\n        if (i != largest) {\n            swap(nums[i], nums[largest]);\n            maxHeapify(nums, largest, heapsize);\n        }\n    }\n    void buildMaxHeap(vector&lt;int&gt;&amp; nums, int heapsize) {\n        for (int i = heapsize - -1; i &gt;= 0; i--) {\n            maxHeapify(nums, i, heapsize);\n        }\n    }\n\n    int findKthLargest(vector&lt;int&gt;&amp; nums, int k) {\n        int heapsize = nums.size();\n        buildMaxHeap(nums, heapsize);\n        for (int i = 0; i &lt; k - 1; i++) {\n            swap(nums[0], nums[heapsize - 1]);\n            heapsize--;\n            maxHeapify(nums, 0, heapsize);\n        } \n        return nums[0];\n    }\n\n};\n</code></pre>"},{"location":"Problem/interview/%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95%E5%87%86%E5%A4%87/#146-lru","title":"146. LRU \u7f13\u5b58","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nclass LRUCache {\npublic:\n    struct Node {\n        int key, value;\n        Node *left, *right;\n        Node(int key, int value) : key(key), value(value), left(nullptr), right(nullptr) {};\n    };\n    Node *R, *L;\n    int n;\n    unordered_map&lt;int, Node*&gt; hash;\n    LRUCache(int capacity) {\n        n = capacity;\n        R = new Node(-1, -1);\n        L = new Node(-1, -1);\n        L-&gt;right = R;\n        R-&gt;left = L;\n    }\n    int get(int key) {\n        // \u8fd4\u56de\u503c\n        // \u66f4\u65b0\u94fe\u8868\n        if (hash.count(key)) {\n            Node *p = hash[key];\n            remove(p);\n            insert(p);\n            return p-&gt;value;\n        }\n        else return -1;\n    }\n    void put(int key, int value) {\n        if (hash.count(key)) {\n            Node *p = hash[key];\n            p-&gt;value = value;\n            remove(p);\n            insert(p);\n        }\n        else {\n            if (hash.size() == n) {\n                Node *p = R-&gt;left;\n                // \u94fe\u8868\n                remove(p);\n                // \u54c8\u5e0c\n                hash.erase(p-&gt;key);\n                // \u5185\u5b58\n                delete(p);\n            }\n            Node *p = new Node(key, value);\n            insert(p);\n            hash[key] = p;\n        }\n    }\n    void remove(Node *p) {\n        p-&gt;left-&gt;right = p-&gt;right;\n        p-&gt;right-&gt;left = p-&gt;left;\n    }\n    void insert(Node *p) {\n        p-&gt;right = L-&gt;right;\n        p-&gt;left = L;\n        L-&gt;right = p;\n        p-&gt;right-&gt;left = p;\n    }\n\n    void check() {\n        Node *curr = L;\n        cout &lt;&lt; \"check!\" &lt;&lt; endl;\n        while (curr != nullptr) {\n            cout &lt;&lt; curr-&gt;key &lt;&lt; ' ';\n            curr = curr-&gt;right;\n        }\n        cout &lt;&lt; endl;\n    }\n};\n\nint main () {\n    LRUCache cache(2);\n    cout &lt;&lt; cache.get(1) &lt;&lt; endl;\n    cache.put(3, 3);\n    // cache.check();\n    cache.put(4, 4);\n    // cache.check();\n    cache.put(5, 5);\n    // cache.check();\n    cout &lt;&lt; cache.get(5) &lt;&lt; endl;\n    cout &lt;&lt; cache.get(3) &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"Problem/interview/%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95%E5%87%86%E5%A4%87/#141","title":"141. \u73af\u5f62\u94fe\u8868","text":"<p>\u5feb\u6162\u6307\u9488\u5efa\u8bae\u7528fast\u548cslow</p> <pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    bool hasCycle(ListNode *head) {\n        if (head == nullptr) return false;\n        ListNode *fast = head, *slow = head;\n        while (fast-&gt;next != nullptr &amp;&amp; fast-&gt;next-&gt;next != nullptr) {\n            fast = fast-&gt;next-&gt;next;\n            slow = slow-&gt;next;\n            if (fast == slow) return true;\n        }\n        return false;\n    }\n};\n</code></pre>"},{"location":"Problem/interview/%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95%E5%87%86%E5%A4%87/#102","title":"102. \u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386","text":"<pre><code>stack, \u6808\n    size()\n    empty()\n    push()  \u5411\u6808\u9876\u63d2\u5165\u4e00\u4e2a\u5143\u7d20\n    top()  \u8fd4\u56de\u6808\u9876\u5143\u7d20\n    pop()  \u5f39\u51fa\u6808\u9876\u5143\u7d20\n\nqueue, \u961f\u5217\uff0c\u5148\u8fdb\u5148\u51fa\uff0c\u6ca1\u6709clear\n    size()\n    empty()\n    push()  \u5411\u961f\u5c3e\u63d2\u5165\u4e00\u4e2a\u5143\u7d20\n    front()  \u8fd4\u56de\u961f\u5934\u5143\u7d20\n    back()  \u8fd4\u56de\u961f\u5c3e\u5143\u7d20\n    pop()  \u5f39\u51fa\u961f\u5934\u5143\u7d20\n    q = queue&lt;int&gt;(); \u80fd\u591f\u76f4\u63a5\u6e05\u7a7aq\uff0c\u800c\u4e0d\u9700\u8981\u7528\u5230clear\n</code></pre> <pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\n\n // \u8bed\u6cd5\uff01\nclass Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; levelOrder(TreeNode* root) {\n        if (!root) return {};\n        vector&lt;vector&lt;int&gt;&gt; ans;\n        queue&lt;TreeNode*&gt; q;\n        q.push(root);\n        while (!q.empty()) {\n            vector&lt;int&gt; tmp;\n            int n = q.size();\n            while (n--) {\n                TreeNode *curr = q.front();\n                tmp.push_back(curr-&gt;val);\n                if (curr-&gt;left) q.push(curr-&gt;left);\n                if (curr-&gt;right) q.push(curr-&gt;right);\n                q.pop();\n            }\n            ans.push_back(tmp);\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Problem/interview/%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95%E5%87%86%E5%A4%87/#21","title":"21. \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868","text":"<p>\uff01\uff01\uff01\uff01\u94fe\u8868\u9898\u4e0d\u8981\u5fd8\u8bb0\u9012\u5f52\uff01\uff01\uff01\uff01\uff01</p> <pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    // \u6700\u540e\u5b9e\u9645\u4e0a\u4f1a\u5408\u5e76\u6210\u4e00\u6761\u94fe\u8868\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528\u9012\u5f52\n    // \u53bb\u91cd\u65b9\u6cd5\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\n        if (!list1) return list2;\n        if (!list2) return list1;\n        if (list1-&gt;next &amp;&amp; list1-&gt;val == list1-&gt;next-&gt;val) return mergeTwoLists(list1-&gt;next, list2);\n        if (list2-&gt;next &amp;&amp; list2-&gt;val == list2-&gt;next-&gt;val) return mergeTwoLists(list2-&gt;next, list1);\n        if (list2-&gt;next &amp;&amp; list2-&gt;val == list2-&gt;next-&gt;val) list2 = list2-&gt;next;\n        if (list1-&gt;val &lt; list2-&gt;val) {\n            list1-&gt;next = mergeTwoLists(list1-&gt;next, list2);\n            return list1;\n        }\n        else if (list1-&gt;val &gt; list2-&gt;val){\n            list2-&gt;next = mergeTwoLists(list2-&gt;next, list1);\n            return list2;\n        }\n        else {\n            return mergeTwoLists(list1-&gt;next, list2);\n        }\n    }\n};\n</code></pre>"},{"location":"Problem/interview/%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95%E5%87%86%E5%A4%87/#143","title":"143. \u91cd\u6392\u94fe\u8868","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    void reorderList(ListNode* head) {\n        ListNode *fast = head, *slow = head;\n        while (fast &amp;&amp; fast-&gt;next) {\n            fast = fast-&gt;next-&gt;next;\n            slow = slow-&gt;next;\n        }\n        fast = slow;\n        slow = nullptr;\n        while (fast) {\n            ListNode* tmp = fast-&gt;next;\n            fast-&gt;next = slow;\n            slow = fast;\n            fast = tmp;\n        }\n        fast = head;\n        while (fast-&gt;next &amp;&amp; slow-&gt;next) {\n            ListNode* l = fast-&gt;next;\n            ListNode* r = slow-&gt;next;\n            fast-&gt;next = slow;\n            slow-&gt;next = l;\n            fast = l;\n            slow = r;\n        }\n    }\n};\n</code></pre>"},{"location":"Problem/interview/%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95%E5%87%86%E5%A4%87/#92-ii","title":"92. \u53cd\u8f6c\u94fe\u8868 II","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* reverseBetween(ListNode* head, int left, int right) {\n        if (!head) return head;\n        ListNode *dummy = new ListNode(-1, head);\n        ListNode *curr = dummy;\n        for (int i = 0; i &lt; left - 1; i++) curr = curr-&gt;next;\n        ListNode *l = dummy;\n        for (int i = 0; i &lt; left; i++) l = l-&gt;next;\n\n        ListNode *r = l-&gt;next;\n        for (int i = 0; i &lt; right - left; i++) {\n            ListNode *tmp = r-&gt;next;\n            r-&gt;next = l;\n            l = r;\n            r = tmp;\n        }\n        // l\u662f\u8d77\u70b9\uff0cr\u662f\u63a5\u4e0a\u53bb\u7684\u70b9\n        ListNode* tmp = curr-&gt;next;\n        curr-&gt;next = l;\n        tmp-&gt;next = r;\n        return dummy-&gt;next;\n\n\n    }\n};\n</code></pre>"},{"location":"Problem/interview/%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95%E5%87%86%E5%A4%87/#23-k","title":"23. \u5408\u5e76 K \u4e2a\u5347\u5e8f\u94fe\u8868","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    // \u4f7f\u7528\u534a\u4e2a\u5f52\u5e76\u6392\u5e8f\uff0c\u81ea\u5e95\u5411\u4e0a\u5f52\u5e76\n    ListNode* mergeTwoLists(ListNode* a, ListNode* b) {\n        if (!a) return b;\n        if (!b) return a;\n        if (a-&gt;val &lt; b-&gt;val) {\n            a-&gt;next = mergeTwoLists(a-&gt;next, b);\n            return a;\n        }\n        else {\n            b-&gt;next = mergeTwoLists(b-&gt;next, a);\n            return b;\n        }\n    }\n\n    ListNode* merge(vector&lt;ListNode*&gt;&amp; lists, int l, int r) {\n        if (l == r) return lists[l];\n        if (l &gt; r) return nullptr;\n        int mid = (l + r) &gt;&gt; 1;\n        return mergeTwoLists(merge(lists, l, mid), merge(lists, mid + 1, r));\n    }\n\n    ListNode* mergeKLists(vector&lt;ListNode*&gt;&amp; lists) {\n        int n = lists.size();\n        if (n == 0) return nullptr;\n        return merge(lists, 0, n - 1);\n    }\n};\n</code></pre>"},{"location":"Problem/interview/%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95%E5%87%86%E5%A4%87/#3","title":"3. \u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32","text":"<pre><code>class Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n        unordered_map&lt;char, int&gt; hash;\n        if (!s.size()) return 0;\n        // \u6ed1\u52a8\u7a97\u53e3\n        // vector&lt;int&gt; cnt(26);\n        int ans = 0;\n        int j = 0;\n        int len = 0;\n        for (int i = 0; i &lt; s.size(); i++) {\n            len++;\n            hash[s[i]]++;\n            while (hash[s[i]] &gt; 1) {\n                hash[s[j]] --;\n                j++;\n                len--;\n            }\n            ans = max(len, ans);\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Problem/interview/%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95%E5%87%86%E5%A4%87/#82-ii","title":"82. \u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20 II","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* deleteDuplicates(ListNode* head) {\n        ListNode *dummy = new ListNode(-1, head);\n        ListNode *curr = dummy;\n        while (curr &amp;&amp; curr-&gt;next) {\n            while (curr-&gt;next &amp;&amp; curr-&gt;next-&gt;next &amp;&amp; curr-&gt;next-&gt;val == curr-&gt;next-&gt;next-&gt;val) {\n                int a = curr-&gt;next-&gt;val;\n                while (curr-&gt;next) {\n                    if (curr-&gt;next-&gt;val == a) {\n                        curr-&gt;next = curr-&gt;next-&gt;next;\n                    }\n                    else break;\n                }\n            }\n            // if (curr-&gt;next-&gt;next &amp;&amp; curr-&gt;next-&gt;val != curr-&gt;next-&gt;next-&gt;val) {\n                curr = curr-&gt;next;\n            // }\n            // else continue;\n        }\n        return dummy-&gt;next;\n    }\n};\n</code></pre>"},{"location":"Problem/interview/%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95%E5%87%86%E5%A4%87/#142-ii","title":"142. \u73af\u5f62\u94fe\u8868 II","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode *detectCycle(ListNode *head) {\n        // x = a + b\n        // 2x = a + b + nc\n        // a  = n - 1 * c + c - b\n        if (!head || !head-&gt;next || !head-&gt;next-&gt;next) return nullptr;\n        ListNode *fast = head, *slow = head;\n        while (fast-&gt;next &amp;&amp; fast-&gt;next-&gt;next) {\n            fast = fast-&gt;next-&gt;next;\n            slow = slow-&gt;next;\n            if (slow == fast) break;\n        }\n        if (slow != fast) return nullptr;\n        slow = head;\n\n        while (slow != fast) {\n            slow = slow-&gt;next;\n            fast = fast-&gt;next;\n        }\n        return fast;\n\n    }\n};\n</code></pre>"},{"location":"Problem/interview/%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95%E5%87%86%E5%A4%87/#124","title":"124. \u4e8c\u53c9\u6811\u4e2d\u7684\u6700\u5927\u8def\u5f84\u548c","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    // \u8981\u4e48\u81ea\u5df1\u548c\u5de6\u53f3\u4e24\u8fb9\u6784\u6210\u4e00\u4e2a\u8def\u5f84\uff0c\u8981\u4e48\u5c06\u5de6\u8282\u70b9\u548c\u81ea\u5df1\u6216\u8005\u53f3\u8282\u70b9\u548c\u81ea\u5df1\u7684\u6700\u5927\u503c\u5411\u4e0a\u4f20\u9012\n    // \u6ce8\u610f\u503c\u4f1a\u6709\u8d1f\u6570\n    int ans = INT_MIN;\n    int maxPathSum(TreeNode* root) {\n        dfs(root);\n        return ans;\n    }\n    int dfs(TreeNode* root) {\n        if (!root) return 0;\n        int left = max(dfs(root-&gt;left), 0);\n        int right = max(dfs(root-&gt;right), 0);\n        ans = max(ans, left + right + root-&gt;val);\n        return max(left, right) + root-&gt;val;\n    }\n};\n</code></pre>"},{"location":"Problem/interview/%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95%E5%87%86%E5%A4%87/#15","title":"15. \u4e09\u6570\u4e4b\u548c","text":"<pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; threeSum(vector&lt;int&gt;&amp; nums) {\n        // \u9996\u5148\u8981\u4ece\u5c0f\u5230\u5927\u6392\u5217\uff0c\u7136\u540e\u518d\u8fdb\u884c\u53cc\u6307\u9488\n        // \u6700\u540e\u6ce8\u610f\u53bb\u91cd\n        vector&lt;vector&lt;int&gt;&gt; ans;\n        sort(nums.begin(), nums.end());\n        int n = nums.size();\n        for (int i = 0; i &lt; n; i++) {\n            if (i &amp;&amp; nums[i] == nums[i - 1]) continue;\n            int j = i + 1, k = n - 1;\n            for (; j &lt; k; j++) {\n                // int sum = nums[i] + nums[j] + nums[k];\n                if (j &gt;= i + 2 &amp;&amp; nums[j] == nums[j - 1]) {\n                    continue;\n                }\n                while (nums[i] + nums[j] + nums[k - 1] &gt;= 0 &amp;&amp; k - 1 &gt; j) {\n                    k--;\n                }\n                if (nums[i] + nums[j] + nums[k] == 0) {\n                    ans.push_back({nums[i], nums[j], nums[k]});\n                }\n\n            }\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Problem/interview/%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95%E5%87%86%E5%A4%87/#_1","title":"\u817e\u8baf","text":""},{"location":"Problem/interview/%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95%E5%87%86%E5%A4%87/#53","title":"53. \u6700\u5927\u5b50\u6570\u7ec4\u548c","text":"<pre><code>class Solution {\npublic:\n    int maxSubArray(vector&lt;int&gt;&amp; nums) {\n        // f[i] = f[i - 1] + nums[i] // nums[i]\n        int n = nums.size();\n        int res = INT_MIN;\n        vector&lt;int&gt; f(n + 1);\n        for (int i = 1; i &lt;= n; i++) {\n            f[i] = max(f[i - 1] + nums[i - 1], nums[i - 1]);\n            res = max(f[i], res);\n        }\n        return res;\n    }\n};\n</code></pre>"},{"location":"Problem/interview/%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95%E5%87%86%E5%A4%87/#415","title":"415. \u5b57\u7b26\u4e32\u76f8\u52a0","text":"<pre><code>class Solution {\npublic:\n    vector&lt;int&gt; add(vector&lt;int&gt;&amp; A, vector&lt;int&gt;&amp; B) {\n        vector&lt;int&gt; C;\n        for (int i = 0, t = 0; i &lt; A.size() || i &lt; B.size() || t; i ++ ) {\n            if (i &lt; A.size()) t += A[i];\n            if (i &lt; B.size()) t += B[i];\n            C.push_back(t % 10);\n            t /= 10;\n        }\n        return C;\n    }\n\n    string addStrings(string a, string b) {\n        vector&lt;int&gt; A, B;\n        for (int i = a.size() - 1; i &gt;= 0; i -- ) A.push_back(a[i] - '0');\n        for (int i = b.size() - 1; i &gt;= 0; i -- ) B.push_back(b[i] - '0');\n        auto C = add(A, B);\n        string c;\n        for (int i = C.size() - 1; i &gt;= 0; i -- ) c += to_string(C[i]);\n        return c;\n    }\n};\n</code></pre>"},{"location":"Problem/interview/%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95%E5%87%86%E5%A4%87/#_2","title":"\u817e\u8baf\u771f\u9898\uff1a\u5bfb\u627e\u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217\uff0c\u6309\u5b57\u5178\u5e8f\u8f93\u51fa","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;algorithm&gt;\n\nvoid reconstruct_print(int end, const std::vector&lt;int&gt;&amp; a, const std::vector&lt;int&gt;&amp; p) {\n    int x = end;\n    std::vector&lt;int&gt; stack;\n    for (; p[x] &gt;= 0; x = p[x]) stack.push_back(a[x]);\n    std::cout &lt;&lt; a[x];\n    for (int i = stack.size() - 1; i &gt;= 0; i--) {\n        std::cout &lt;&lt; \" \" &lt;&lt; stack[i];\n    }\n    std::cout &lt;&lt; \"\\n\";\n}\n\nint main() {\n    std::vector&lt;int&gt; a = {1, 2, 8, 6, 4};\n    int n = a.size();\n    std::vector&lt;int&gt; dp(n, 1), parent(n, -1);\n    int max_len = 0, best_end = 0;\n\n    for (int i = 0; i &lt; n; ++i) {\n        for (int j = 0; j &lt; i; ++j) {\n            if (a[j] &lt; a[i]) {\n                if (dp[j] + 1 &gt; dp[i]) {\n                    dp[i] = dp[j] + 1;\n                    parent[i] = j;\n                } else if (dp[j] + 1 == dp[i] &amp;&amp; a[j] &lt; a[parent[i]]) {\n                    // \u66f4\u65b0parent\u4e3a\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u9009\u62e9\n                    parent[i] = j;\n                }\n            }\n        }\n        if (dp[i] &gt; max_len) {\n            max_len = dp[i];\n            best_end = i;\n        } else if (dp[i] == max_len &amp;&amp; a[i] &lt; a[best_end]) {\n            // \u9009\u62e9\u4e00\u4e2a\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u7ed3\u675f\u70b9\n            best_end = i;\n        }\n    }\n\n    std::cout &lt;&lt; \"Length of LIS: \" &lt;&lt; max_len &lt;&lt; \"\\n\";\n    std::cout &lt;&lt; \"LIS: \";\n</code></pre>"},{"location":"Problem/interview/%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95%E5%87%86%E5%A4%87/#460-lfu","title":"460. LFU \u7f13\u5b58","text":"<pre><code>class LFUCache {\npublic:\n    struct Node {\n        Node *left, *right;\n        int key, val;\n        Node(int _key, int _val) {\n            key = _key, val = _val;\n            left = right = NULL;\n        }\n    };\n    struct Block {\n        Block *left, *right;\n        Node *head, *tail;\n        int cnt;\n        Block(int _cnt) {\n            cnt = _cnt;\n            left = right = NULL;\n            head = new Node(-1, -1), tail = new Node(-1, -1);\n            head-&gt;right = tail, tail-&gt;left = head;\n        }\n        ~Block() {\n            delete head;\n            delete tail;\n        }\n        void insert(Node* p) {\n            p-&gt;right = head-&gt;right;\n            head-&gt;right-&gt;left = p;\n            p-&gt;left = head;\n            head-&gt;right = p;\n        }\n        void remove(Node* p) {\n            p-&gt;left-&gt;right = p-&gt;right;\n            p-&gt;right-&gt;left = p-&gt;left;\n        }\n        bool empty() {\n            return head-&gt;right == tail;\n        }\n    }*head, *tail;\n    int n;\n    unordered_map&lt;int, Block*&gt; hash_block;\n    unordered_map&lt;int, Node*&gt; hash_node;\n\n    void insert(Block* p) {  // \u5728p\u7684\u53f3\u4fa7\u63d2\u5165\u65b0\u5757\uff0ccnt\u662fp-&gt;cnt + 1\n        auto cur = new Block(p-&gt;cnt + 1);\n        cur-&gt;right = p-&gt;right;\n        p-&gt;right-&gt;left = cur;\n        p-&gt;right = cur;\n        cur-&gt;left = p;\n    }\n\n    void remove(Block* p) {\n        p-&gt;left-&gt;right = p-&gt;right;\n        p-&gt;right-&gt;left = p-&gt;left;\n        delete p;\n    }\n\n    LFUCache(int capacity) {\n        n = capacity;\n        head = new Block(0), tail = new Block(INT_MAX);\n        head-&gt;right = tail, tail-&gt;left = head;\n    }\n\n    int get(int key) {\n        if (hash_block.count(key) == 0) return -1;\n        auto block = hash_block[key];\n        auto node = hash_node[key];\n        block-&gt;remove(node);\n        if (block-&gt;right-&gt;cnt != block-&gt;cnt + 1) insert(block);\n        block-&gt;right-&gt;insert(node);\n        hash_block[key] = block-&gt;right;\n        if (block-&gt;empty()) remove(block);\n        return node-&gt;val;\n    }\n\n    void put(int key, int value) {\n        if (!n) return;\n        if (hash_block.count(key)) {\n            hash_node[key]-&gt;val = value;\n            get(key);\n        } else {\n            if (hash_block.size() == n) {\n                auto p = head-&gt;right-&gt;tail-&gt;left;\n                head-&gt;right-&gt;remove(p);\n                if (head-&gt;right-&gt;empty()) remove(head-&gt;right);\n                hash_block.erase(p-&gt;key);\n                hash_node.erase(p-&gt;key);\n                delete p;\n            }\n            auto p = new Node(key, value);\n            if (head-&gt;right-&gt;cnt &gt; 1) insert(head);\n            head-&gt;right-&gt;insert(p);\n            hash_block[key] = head-&gt;right;\n            hash_node[key] = p;\n        }\n    }\n};\n\n/**\n * Your LFUCache object will be instantiated and called as such:\n * LFUCache* obj = new LFUCache(capacity);\n * int param_1 = obj-&gt;get(key);\n * obj-&gt;put(key,value);\n */\n\n\u4f5c\u8005\uff1ayxc\n\u94fe\u63a5\uff1ahttps://www.acwing.com/activity/content/code/content/555766/\n\u6765\u6e90\uff1aAcWing\n\u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002\n</code></pre>"},{"location":"Problem/interview/%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95%E5%87%86%E5%A4%87/#704","title":"704. \u4e8c\u5206\u67e5\u627e","text":"<pre><code>class Solution {\npublic:\n    int search(vector&lt;int&gt;&amp; nums, int target) {\n        int l = 0, r = nums.size() - 1;\n        while (l &lt; r) {\n            int mid = (l + r) &gt;&gt; 1;\n            int x = nums[mid];\n            if (x &gt;= target) {\n                r = mid;\n            }\n            else l = mid + 1;\n        }\n        if (nums[r] == target) {\n            return r;\n        }\n        else return -1;\n    }\n};\n</code></pre>"},{"location":"Problem/interview/%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95%E5%87%86%E5%A4%87/#8-atoi","title":"8. \u5b57\u7b26\u4e32\u8f6c\u6362\u6574\u6570 (atoi)","text":"<p>C++\u4e2d\u60f3\u8981\u8bfb\u53d6\u524d\u5bfc\u7a7a\u683c\uff0c\u8bfb\u53d6\u4e00\u6574\u884c\u9700\u8981\u4f7f\u7528<code>getlien(std::cin, string)</code></p> <p>\u6bd4\u5982</p> <pre><code>    string line;\n    getline(cin, line);\n    string string2;\n    cin &gt;&gt; string2;\n    cout &lt;&lt; \"answer:\" &lt;&lt; line &lt;&lt; endl;\n    cout &lt;&lt; \"answer:\" &lt;&lt; string2 &lt;&lt; endl;\n\n\u8f93\u51fa\u5206\u522b\u662f\uff1a\nanswer:     string\nanswer:string\n</code></pre> <pre><code>class Solution {\npublic:\n    int myAtoi(string s) {\n        int i = 0;\n        char f;\n        int res = 0;\n        while (s[i] == ' ') {\n            i++;\n        }\n\n        if (s[i] == '-' || s[i] == '+') {\n            f = s[i];\n            i++;\n        }\n        while (i &lt; s.size() &amp;&amp; s[i] &gt;= '0' &amp;&amp; s[i] &lt;= '9') {\n            int toAdd = s[i] - '0';\n            // res * 10 + toAdd &lt; INT_MAX\n            if (res &gt; (INT_MAX - toAdd) / 10) {\n                if (f == '-') return INT_MIN;\n                // \u65e0\u8bba\u662f\u524d\u9762\u6ca1\u6709\u7b26\u53f7\u6216\u8005\u6709+\u7684\uff0c\u90fd\u662f\u6b63\u6570\n                else return INT_MAX;\n            }\n            res = res * 10 + toAdd;\n            i++;\n        }\n        if (f == '-') return -res;\n        else return res;\n    }\n};\n</code></pre>"},{"location":"Problem/interview/%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95%E5%87%86%E5%A4%87/#300","title":"300. \u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217","text":"<pre><code>class Solution {\npublic:\n    int lengthOfLIS(vector&lt;int&gt;&amp; nums) {\n        // \u4f7f\u7528\u52a8\u6001\u89c4\u5212\u6765\u505a\uff1a\n        // dp[i]\u4ee3\u8868\u7684\u662f\u4ee5nums[i]\u4e3a\u7ed3\u5c3e\u7684\u6700\u957f\u7684\u9012\u589e\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\n        // \u6240\u4ee5\u5bf9\u4e8ei\u5c31\u8981\u53bb\u904d\u5386\u4ece0 ~ i - 1, \u6765\u786e\u5b9adp[i]\u7684\u503c\n        int res = 1;\n        int n = nums.size();\n        vector&lt;int&gt; dp(n, 1);\n        for (int i = 0; i &lt; n; i++) {\n            for (int j = 0; j &lt; i; j++) {\n                if (nums[i] &gt; nums[j]) {\n                    dp[i] = max(dp[i], dp[j] + 1);\n                    if (dp[i] &gt; res) {\n                        res = dp[i];\n                    }\n                }\n            }\n        }\n        return res;\n\n    }\n};\n</code></pre>"},{"location":"Problem/interview/%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95%E5%87%86%E5%A4%87/#46","title":"46. \u5168\u6392\u5217","text":"<pre><code>class Solution {\npublic:\n    vector&lt;bool&gt; visited;\n    vector&lt;vector&lt;int&gt;&gt; ans;\n    vector&lt;vector&lt;int&gt;&gt; permute(vector&lt;int&gt;&amp; nums) {\n        int n = nums.size();\n        visited = vector&lt;bool&gt;(n, false);\n        vector&lt;int&gt; path;\n        dfs(nums, path, 0);\n        return ans;\n    }\n    void dfs (vector&lt;int&gt;&amp; nums, vector&lt;int&gt;&amp; path, int n) {\n        if (n == nums.size()) ans.push_back(path);\n        for (int i = 0; i &lt; nums.size(); i++) {\n            if (visited[i] == false) {\n                path.push_back(nums[i]);\n                visited[i] = true;\n                dfs(nums, path, n + 1);\n                visited[i] = false;\n                path.pop_back();\n            }\n        }\n    }\n};\n</code></pre> <pre><code>class Solution {\npublic:\n    // \u7b2c\u4e8c\u79cd\u65b9\u6cd5\u7528\u6765\u4fdd\u8bc1\u4e0d\u4f1a\u518ddfs\u5df2\u7ecf\u7ecf\u8fc7\u7684\u70b9\uff1a\n    // \u65e2\u7136\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u662f\u5b9a\u7684\uff0c\u6211\u4eec\u53ea\u9700\u8981\u6bcf\u6b21dfs\u5c06\u6211\u4eec\u60f3\u8981\u7684\u90a3\u4e2a\u6570\u5b57swap\u8fc7\u6765\u5c31\u884c\u4e86\n    vector&lt;vector&lt;int&gt;&gt; ans;\n    vector&lt;vector&lt;int&gt;&gt; permute(vector&lt;int&gt;&amp; nums) {\n        dfs(nums, 0);\n        return ans;\n    }\n    void dfs(vector&lt;int&gt;&amp; nums, int n) {\n        // n\uff1a\u6b63\u5728\u786e\u5b9anums\u7684\u7b2c\u51e0\u4e2a\u4f4d\u7f6e\n        if (n == nums.size()) ans.push_back(nums);\n        for (int i = n; i &lt; nums.size(); i++) {\n            // n\u4e4b\u524d\u7684\u4f4d\u7f6e\u90fd\u5df2\u7ecf\u786e\u5b9a\u597d\u4e86\uff0c\u4e0d\u80fd\u52a8\n            swap(nums[i], nums[n]);\n            dfs(nums, n + 1);\n            // \u6ce8\u610fnums\u662f\u52a8\u6001\u7ef4\u62a4\u7684\u6570\u7ec4\n            // \u4e0d\u8981\u5fd8\u8bb0\u64a4\u9500\u6389\u52a8\u6001\u7ef4\u62a4\u7684\u6570\u7ec4\n            swap(nums[i], nums[n]);\n        }\n    }\n};\n</code></pre>"},{"location":"Problem/interview/%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95%E5%87%86%E5%A4%87/#470-rand7-rand10","title":"470. \u7528 Rand7() \u5b9e\u73b0 Rand10()","text":"<pre><code>// The rand7() API is already defined for you.\n// int rand7();\n// @return a random integer in the range 1 to 7\n\nclass Solution {\npublic:\n    int rand10() {\n        // 1234567\n        // 8910111213\n        // \u4fdd\u8bc1\u57281 ~ 49\u4e4b\u95f4\u5b8c\u5168\u662f\u5747\u5300\u7684\n        int t = rand7() + (rand7() - 1) * 7;\n        if (t &gt; 40) return rand10();\n        return t % 10  + 1;\n    }\n};\n</code></pre>"},{"location":"Problem/interview/%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95%E5%87%86%E5%A4%87/#25-k","title":"25. K \u4e2a\u4e00\u7ec4\u7ffb\u8f6c\u94fe\u8868","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* reverseKGroup(ListNode* head, int k) {\n        ListNode *dummy = new ListNode(-1, head);\n        ListNode *curr = dummy;\n        while (curr) {\n            ListNode *tmp = curr;\n            for (int i = 0; i &lt; k; i++) {\n                tmp = tmp-&gt;next;\n                if (!tmp) return dummy-&gt;next;\n            }\n\n            ListNode *left = curr-&gt;next, *right = curr-&gt;next-&gt;next;\n            for (int i = 0; i &lt; k - 1; i++) {\n                ListNode *third = right-&gt;next;\n                right-&gt;next = left;\n                left = right;\n                right = third;\n            }\n            curr-&gt;next-&gt;next = right;\n            curr-&gt;next = left;\n\n\n\n            for (int i = 0; i &lt; k; i++) {\n                curr = curr-&gt;next;\n            }\n        }\n        return dummy-&gt;next;\n    }\n};\n</code></pre>"},{"location":"Problem/interview/%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95%E5%87%86%E5%A4%87/#1","title":"1. \u4e24\u6570\u4e4b\u548c","text":"<pre><code>class Solution {\npublic:\n    vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) {\n        unordered_map&lt;int, int&gt; hash;\n        for (int i = 0; i &lt; nums.size(); i++) {\n            int aim = target - nums[i];\n            if (hash.find(aim) != hash.end()) {\n                return {hash[aim], i};\n            }\n            else hash[nums[i]] = i;\n        }\n        return {};\n    }\n};\n</code></pre>"},{"location":"Problem/interview/%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95%E5%87%86%E5%A4%87/#_3","title":"\u643a\u7a0b","text":""},{"location":"Problem/interview/%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95%E5%87%86%E5%A4%87/#5","title":"5. \u6700\u957f\u56de\u6587\u5b50\u4e32\uff08\u9700\u8981\u91cd\u65b0\u5237\uff09","text":"<p>dp\u6cd5\uff1a</p> <pre><code>class Solution {\npublic:\n    string longestPalindrome(string s) {\n        // \u52a8\u6001\u89c4\u5212f[i][j] = f[i + 1][j - 1]\n        int n = s.size();\n        if (n &lt; 2) return s;\n        vector&lt;vector&lt;bool&gt;&gt; f(n, vector&lt;bool&gt;(n));\n        for (int i = 0; i &lt; n; i++) {\n            // \u6240\u6709\u4e00\u4e2a\u5b57\u6bcd\u7684\u90fd\u662f\u56de\u6587\n            f[i][i] = true;\n        }\n        int maxLen = 1;\n        int start = 0;\n        // \u5faa\u73af\u7684\u8bdd\u4e00\u5b9a\u8981\u4ece\u957f\u5ea6\u6700\u5c0f\u7684\u5f00\u59cb\n        for (int len = 2; len &lt;= n; len++) {\n            for (int i = 0; i + len - 1 &lt; n; i++) {\n                int j = i + len - 1;\n                if (s[i] != s[j]) {\n                    f[i][j] = false;\n                }\n                else {\n                    if (len &lt;= 3) {\n                        f[i][j] = true;\n                    }\n                    else {\n                        f[i][j] = f[i + 1][j - 1];\n                    }\n                }\n                if (f[i][j] &amp;&amp; len &gt; maxLen) {\n                    maxLen = len;\n                    start = i;\n                }\n            }\n        }\n        return s.substr(start, maxLen);\n    }\n};\n</code></pre> <p>\u4e2d\u5fc3\u6269\u5c55\u6cd5\uff1a\u4e2d\u5fc3\u8981\u4e48\u662f1\u4e2a\u8981\u4e48\u662f2\u4e2a</p> <pre><code>class Solution {\npublic:\n    int palindrome(string &amp;s, int l, int r, int n) {\n        while (l &gt;= 0 &amp;&amp; r &lt; n &amp;&amp; s[l] == s[r]) l--, r++;\n        return r - l - 1;\n    }\n    string longestPalindrome(string s) {\n        int n = s.size();\n        int start = 0, len = 0;\n        int i = 0, j = 0;\n        while (i &lt; n &amp;&amp; j &lt; n) {\n            if (s[i] == s[j]) {\n                int l = palindrome(s, i, j, n);\n                if (l &gt; len) {\n                    start = i - (l - 1) / 2;\n                    len = l; \n                }\n            }\n            if (i == j) j++;\n            else i++;\n        }\n        return s.substr(start, len);\n    }\n};\n</code></pre>"},{"location":"Problem/lc/LeetCode/","title":"LeetCode","text":""},{"location":"Problem/lc/LeetCode/#about-leetcode","title":"About LeetCode","text":"<p>leetcode\u76f8\u6bd4\u4e8eoj\u9898\u5c31\u548c\u5965\u8d5b\u9898\u5bf9\u4e8e\u666e\u901a\u6570\u5b66\u9898\u4e00\u6837\uff0c\u4e3b\u8981\u9700\u8981\u575a\u6301\u4e0b\u6765</p> <p>\u6c1b\u56f4\u5f88\u91cd\u8981\uff0c\u6bcf\u5468\u8ddf\u7740\u5237</p> <p>\u5237\u56db\u4e94\u767e\u9053\u9898\u9762\u8bd5\u4e00\u822c\u95ee\u9898\u4e0d\u662f\u5f88\u5927</p>"},{"location":"Problem/lc/LeetCode/#_1","title":"\u601d\u7ef4","text":"<p>\u7b97\u6cd5\u8981\u628a\u6bcf\u4e00\u6b65\u641e\u61c2\uff0c\u8981\u77e5\u9053\u4e3a\u4ec0\u4e48\u8fd9\u4e48\u505a\uff0c\u8fd9\u4e2a\u662f\u6700\u91cd\u8981\u7684\uff0c\u9632\u6b62\u9047\u5230\u65b0\u9898\u4e0d\u4f1a\u505a</p> <p>\u5148\u770b\u601d\u8def\u518d\u770b\u4ee3\u7801\uff0c\u800c\u4e0d\u8981\u5bf9\u7740\u4ee3\u7801\u53bb\u731c\u601d\u8def</p> <p>555555</p>"},{"location":"Problem/lc/LeetCode/#_2","title":"\u5199\u4ee3\u7801","text":"<p>\u4e00\u822c\u5199\u7684\u65f6\u95f4\u548c\u8c03\u8bd5\u65f6\u95f4\u4e00\u6837\u957f</p> <p>\u8fd9\u4e2a\u8c03\u8bd5bug\u7684\u80fd\u529b\u5f88\u91cd\u8981</p>"},{"location":"Problem/lc/LeetCode/#_3","title":"\u82f1\u8bed","text":"<p>\u8fd8\u662f\u9700\u8981\u953b\u70bc\u4e00\u4e0b\u81ea\u5df1\u82f1\u8bed\u770b\u9898\u548c\u82f1\u8bed\u8bf4\u601d\u8def\u7684\u80fd\u529b\u7684</p>"},{"location":"Problem/lc/LeetCode/#debug","title":"debug","text":""},{"location":"Problem/lc/LeetCode/#1-long-long","title":"1. \u9700\u8981\u4f7f\u7528long long\u7c7b\u578b\u5b58\u50a8","text":"<p>int 4\u4e2a\u5b57\u8282 -2147483648 \u5230 2147483647</p> <p>long long 8 \u4e2a\u5b57\u8282 -9,223,372,036,854,775,808 \u5230 9,223,372,036,854,775,807</p> <pre><code>Line 8: Char 22: runtime error: signed integer overflow: 10 * 964632435 cannot be represented in type 'int' (solution.cpp)\n</code></pre>"},{"location":"Problem/lc/LeetCode/#_4","title":"\u6280\u5de7\u548c\u9700\u8981\u77e5\u9053\u7684\u77e5\u8bc6","text":""},{"location":"Problem/lc/LeetCode/#_5","title":"\u77e5\u8bc6\uff1a\u5173\u4e8e\u4e8c\u7ef4\u5e03\u5c14\u503c\u7684\u5b9a\u4e49","text":"<p>\u4f7f\u7528\u5982\u4e0b\u8bed\u53e5\u521b\u5efabool\u4e8c\u7ef4\u6570\u7ec4\u7684\u65f6\u5019,\u521d\u59cb\u5316\u7684\u503c\u662ffalse</p> <pre><code>vector&lt;vector&lt;bool&gt;&gt; f(n + 1, vector&lt;bool&gt;(m + 1));\n</code></pre> <p>\u521b\u5efa\u4e86\u4e00\u4e2a\u4e8c\u7ef4\u7684\u5e03\u5c14\u578b\uff08bool\uff09\u5411\u91cf\uff08vector\uff09\u6570\u7ec4 <code>f</code>\uff0c\u5176\u5927\u5c0f\u4e3a <code>(n+1)</code> \u884c\uff0c\u6bcf\u884c\u6709 <code>(m+1)</code> \u5217\u3002</p> <p><code>vector</code> \u662fC++\u6807\u51c6\u5e93\u4e2d\u7684\u52a8\u6001\u6570\u7ec4\u5bb9\u5668\uff0c<code>vector&lt;bool&gt;</code> \u8868\u793a\u5b58\u50a8\u5e03\u5c14\u7c7b\u578b\u7684\u52a8\u6001\u6570\u7ec4</p> <p><code>vector&lt;vector&lt;bool&gt;&gt;</code>\uff1a\u8fd9\u8868\u793a\u4e00\u4e2a\u4e8c\u7ef4\u7684\u52a8\u6001\u6570\u7ec4\u3002\u5916\u90e8\u7684 <code>vector</code> \u5305\u542b\u5185\u90e8\u7684 <code>vector&lt;bool&gt;</code>\u3002\u8fd9\u662f\u4e00\u4e2a\u5411\u91cf\u7684\u5411\u91cf\uff0c\u5176\u4e2d\u5916\u90e8 <code>vector</code> \u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a\u5185\u90e8 <code>vector&lt;bool&gt;</code>\u3002\u8fd9\u6837\u5c31\u521b\u5efa\u4e86\u4e00\u4e2a\u4e8c\u7ef4\u5e03\u5c14\u6570\u7ec4\u6216\u77e9\u9635\uff0c\u5176\u4e2d\u5916\u90e8 <code>vector</code> \u8868\u793a\u884c\uff0c\u5185\u90e8 <code>vector&lt;bool&gt;</code> \u8868\u793a\u6bcf\u4e00\u884c\u4e2d\u7684\u5217\u3002</p> <p>\u5916\u90e8\u7684 <code>f(n + 1, ...)</code> \u90e8\u5206\u7528\u4e8e\u5b9a\u4e49 <code>f</code> \u7684\u884c\u6570\uff0c\u5b83\u521b\u5efa\u4e86\u4e00\u4e2a <code>vector&lt;vector&lt;bool&gt;&gt;</code>\uff0c\u5176\u4e2d\u6709 <code>n + 1</code> \u884c\u3002\u8fd9\u662f\u4e00\u4e2a\u5916\u90e8\u5411\u91cf\uff0c\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a\u5185\u90e8\u7684\u5411\u91cf\u3002</p> <p>\u5185\u90e8\u7684 <code>vector&lt;bool&gt;(m + 1)</code> \u90e8\u5206\u7528\u4e8e\u5b9a\u4e49 <code>f</code> \u4e2d\u6bcf\u884c\u7684\u5217\u6570\uff0c\u5b83\u521b\u5efa\u4e86\u4e00\u4e2a\u5185\u90e8 <code>vector&lt;bool&gt;</code>\uff0c\u5176\u4e2d\u6709 <code>m + 1</code> \u4e2a\u5e03\u5c14\u5143\u7d20\u3002\u8fd9\u662f\u5185\u90e8\u5411\u91cf\uff0c\u7528\u4e8e\u8868\u793a\u6bcf\u4e00\u884c\u4e2d\u7684\u5217\u3002</p> <p>\u90a3\u4e48\u521b\u5efa\u4e00\u4e2a\u4e09\u4f4d\u7684\u5e03\u5c14\u6570\u7ec4:</p> <pre><code>    // \u521b\u5efa\u4e00\u4e2a\u4e09\u7ef4\u5e03\u5c14\u578b\u5411\u91cf\u6570\u7ec4\n    // \u521d\u59cb\u5316\u4e3afalse\uff0c\u53ef\u4ee5\u6839\u636e\u9700\u8981\u521d\u59cb\u5316\u4e3atrue\n    vector&lt;vector&lt;vector&lt;bool&gt;&gt;&gt; threeDArray(n, vector&lt;vector&lt;bool&gt;&gt;(m, vector&lt;bool&gt;(k, false) ));\n    threeDArray[0][1][2] = true;\n</code></pre>"},{"location":"Problem/lc/LeetCode/#_6","title":"\u77e5\u8bc6: \u6b63\u5219\u8868\u8fbe\u5f0f","text":"<ol> <li>\u5b57\u7b26\u5339\u914d\uff1a\u6b63\u5219\u8868\u8fbe\u5f0f\u7528\u4e8e\u5339\u914d\u5177\u4f53\u7684\u5b57\u7b26\u3002\u4f8b\u5982\uff0c<code>a</code> \u5339\u914d\u5b57\u7b26 \"a\"\uff0c<code>123</code> \u5339\u914d\u5b57\u7b26\u4e32 \"123\"\u3002</li> <li>\u901a\u914d\u7b26\uff1a<code>.</code> \u8868\u793a\u5339\u914d\u4efb\u610f\u5b57\u7b26\uff0c\u9664\u4e86\u6362\u884c\u7b26\u3002\u4f8b\u5982\uff0c<code>a.b</code> \u5339\u914d \"axb\"\u3001\"aab\"\u3001\"a1b\" \u7b49\u3002</li> <li>\u5b57\u7b26\u7c7b\uff1a\u7528\u65b9\u62ec\u53f7 <code>[]</code> \u6765\u5b9a\u4e49\u4e00\u4e2a\u5b57\u7b26\u7c7b\uff0c\u53ef\u4ee5\u5339\u914d\u62ec\u53f7\u5185\u7684\u4efb\u4f55\u4e00\u4e2a\u5b57\u7b26\u3002\u4f8b\u5982\uff0c<code>[abc]</code> \u5339\u914d \"a\"\u3001\"b\" \u6216 \"c\" \u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u5b57\u7b26\u3002</li> <li>\u5b57\u7b26\u8303\u56f4\uff1a\u5728\u5b57\u7b26\u7c7b\u4e2d\u53ef\u4ee5\u4f7f\u7528\u8fde\u5b57\u7b26 <code>-</code> \u6765\u8868\u793a\u4e00\u4e2a\u5b57\u7b26\u8303\u56f4\u3002\u4f8b\u5982\uff0c<code>[a-z]</code> \u5339\u914d\u4efb\u4f55\u5c0f\u5199\u5b57\u6bcd\u3002</li> <li>\u91cd\u590d\uff1a\u4f7f\u7528 <code>{}</code>\u3001<code>*</code>\u3001<code>+</code>\u3001<code>?</code> \u7b49\u6765\u8868\u793a\u5b57\u7b26\u6216\u5b50\u8868\u8fbe\u5f0f\u7684\u91cd\u590d\u6b21\u6570\u3002\u4f8b\u5982\uff0c<code>a{3}</code> \u5339\u914d \"aaa\"\uff0c<code>a*</code> \u5339\u914d\u96f6\u6b21\u6216\u591a\u6b21\u7684 \"a\"\u3002</li> <li>\u8d77\u59cb\u548c\u7ed3\u675f\uff1a<code>^</code> \u8868\u793a\u5b57\u7b26\u4e32\u7684\u5f00\u59cb\uff0c<code>$</code> \u8868\u793a\u5b57\u7b26\u4e32\u7684\u7ed3\u675f\u3002\u4f8b\u5982\uff0c<code>^abc</code> \u5339\u914d\u4ee5 \"abc\" \u5f00\u5934\u7684\u5b57\u7b26\u4e32\u3002</li> <li>\u6216\u64cd\u4f5c\uff1a\u4f7f\u7528 <code>|</code> \u6765\u8868\u793a\u6216\u64cd\u4f5c\uff0c\u5339\u914d\u591a\u4e2a\u53ef\u80fd\u7684\u6a21\u5f0f\u4e2d\u7684\u4e00\u4e2a\u3002\u4f8b\u5982\uff0c<code>cat|dog</code> \u5339\u914d \"cat\" \u6216 \"dog\"\u3002</li> <li>\u5206\u7ec4\uff1a\u4f7f\u7528 <code>()</code> \u6765\u521b\u5efa\u4e00\u4e2a\u5b50\u8868\u8fbe\u5f0f\uff0c\u53ef\u4ee5\u5bf9\u5b50\u8868\u8fbe\u5f0f\u8fdb\u884c\u91cd\u590d\u3001\u6216\u64cd\u4f5c\u7b49\u64cd\u4f5c\u3002\u4f8b\u5982\uff0c<code>(ab)+</code> \u5339\u914d \"ab\"\u3001\"abab\"\u3001\"ababab\" \u7b49\u3002</li> </ol> <p>\u9700\u8981\u6ce8\u610f\u7684\u662f<code>.*</code>\u53ef\u4ee5\u7528\u6765\u5339\u914d\u4efb\u610f\u7684\u5b57\u7b26\u4e32,\u539f\u56e0\u662f<code>*</code>\u4ee3\u8868\u7684\u662f\u91cd\u590d\u4efb\u610f\u4e2a\u6570\u7684<code>.</code>,\u4e5f\u5c31\u662f\u8fd9\u4e24\u4e2a\u7b26\u53f7\u53ef\u4ee5\u5339\u914d\u4efb\u610f\u6570\u91cf\u7684\u4efb\u610f\u5b57\u7b26\u4e32</p>"},{"location":"Problem/lc/LeetCode/#_7","title":"\u77e5\u8bc6: \u903b\u8f91\u9884\u7b97\u7b26\u7684\u4f18\u5148\u7ea7","text":"<p>\u5728c++\u4e2d\u7684&amp;&amp;\u4f18\u5148\u7ea7\u9ad8\u4e8e||</p>"},{"location":"Problem/lc/LeetCode/#_8","title":"\u77e5\u8bc6\uff1a\u6570\u7ec4\u7684\u5927\u5c0f","text":"<p>\u53ea\u6709\u6807\u51c6\u5bb9\u5668\u624d\u53ef\u4ee5\u4f7f\u7528<code>size()</code></p> <p>\u800c\u7528<code>string reps[]</code>\u5b9a\u4e49\u7684\u6570\u7ec4\u7684\u5927\u5c0f\u9700\u8981\u4f7f\u7528sizeof()\uff0c\u4e0d\u8fc7\u7531\u4e8ereps[1]\u662f\u5b57\u7b26\u4e32\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528reps[1].size()</p>"},{"location":"Problem/lc/LeetCode/#_9","title":"\u77e5\u8bc6\uff1a\u5b57\u7b26\u4e32\u7684\u5904\u7406","text":"<p>string\u4e0b\u5b57\u7b26\u4e32\u7684\u76f8\u7b49\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u7b49\u53f7\uff1a</p> <pre><code>#include &lt;vector&gt;\n#include &lt;string&gt;\n#include &lt;iostream&gt;\nusing namespace std;\nint main() {\n    string s = \"adfs;jlk\";\n    string pattern = \"d\";\n    if (s.substr(1, 1) == pattern) cout &lt;&lt; \"yes\" &lt;&lt; endl; // \u8f93\u51fayes\n    return 0;\n}\n</code></pre> <p>\u6ce8\u610fsubstr()\u7684\u4f7f\u7528\uff01\uff01\uff01</p>"},{"location":"Problem/lc/LeetCode/#pair","title":"\u77e5\u8bc6\uff1apair\u952e\u503c\u5bf9\u7684\u4f7f\u7528","text":""},{"location":"Problem/lc/LeetCode/#pair_1","title":"pair\u952e\u503c\u5bf9\u5b9a\u4e49","text":"<pre><code>pair&lt;int, int&gt; res(INT_MAX, INT_MAX);\n</code></pre> <p>\u8fd9\u91cc\u4e24\u4e2a\u521d\u59cb\u7684\u503c\u90fd\u88ab\u8bbe\u6210\u4e86INT_MAX</p>"},{"location":"Problem/lc/LeetCode/#_10","title":"\u952e\u503c\u5bf9\u7684\u6bd4\u8f83","text":"<p>\u952e\u503c\u5bf9\u7684\u6bd4\u8f83\u662f\u9010\u4e2a\u5143\u7d20\u7684\u6bd4\u8f83\uff0c\u5c31\u662f\u5148\u6bd4\u8f83\u7b2c\u4e00\u4e2a\uff0c\u5982\u679c\u76f8\u540c\u518d\u6bd4\u8f83\u7b2c\u4e8c\u4e2a</p> <pre><code>pair&lt;int, int&gt; res(INT_MAX, INT_MAX);\nres = min(res, make_pair(abs(s-target), s));\n</code></pre>"},{"location":"Problem/lc/LeetCode/#_11","title":"\u952e\u503c\u5bf9\u7b2c\u4e8c\u4e2a\u5143\u7d20\u7684\u8fd4\u56de","text":"<pre><code>return res.second;\n</code></pre>"},{"location":"Problem/lc/LeetCode/#_12","title":"\u952e\u503c\u5bf9\u6570\u7ec4\u7684\u5b9a\u4e49","text":"<p>\u6ce8\u610f\u8fd9\u91cc<code>const auto&amp;</code></p> <ul> <li><code>const</code> \u8868\u793a <code>kvp</code> \u662f\u53ea\u8bfb\u7684\uff0c\u4f60\u4e0d\u80fd\u5728\u5faa\u73af\u4e2d\u4fee\u6539\u5bb9\u5668\u4e2d\u7684\u5143\u7d20\u3002</li> <li><code>auto&amp;</code> \u58f0\u660e\u4e86\u4e00\u4e2a\u5f15\u7528\uff0c\u56e0\u6b64 <code>kvp</code> \u4f1a\u6307\u5411\u5bb9\u5668\u4e2d\u7684\u5b9e\u9645\u5143\u7d20\uff0c\u8fd9\u610f\u5473\u7740\u5728\u5faa\u73af\u4e2d\u4f7f\u7528 <code>kvp</code> \u65f6\uff0c\u4f60\u5b9e\u9645\u4e0a\u662f\u5728\u64cd\u4f5c\u5bb9\u5668\u4e2d\u7684\u5143\u7d20\uff0c\u4efb\u4f55\u4fee\u6539\u90fd\u4f1a\u53cd\u6620\u5230\u5bb9\u5668\u672c\u8eab\u3002</li> </ul> <pre><code>    vector&lt;pair&lt;string, int&gt;&gt; keyValuePairs;\n\n    keyValuePairs.push_back({\"orange\", 1});\n\n    keyValuePairs.push_back(make_pair(\"apple\", 5));\n\n    // \u8bbf\u95ee\u952e\u503c\u5bf9\n    for (const auto&amp; kvp : keyValuePairs) {\n        cout &lt;&lt; \"The value of \" &lt;&lt; kvp.first &lt;&lt; \" is: \" &lt;&lt; kvp.second &lt;&lt; endl;\n    }\n</code></pre>"},{"location":"Problem/lc/LeetCode/#unordered_map","title":"\u54c8\u5e0c\u8868\u7684\u5b9a\u4e49(unordered_map)","text":"<p><code>std::unordered_map</code> \u662f\u4e00\u4e2a\u54c8\u5e0c\u8868\u6570\u636e\u7ed3\u6784\uff0c\u5b83\u7528\u4e8e\u5b58\u50a8\u952e-\u503c\u5bf9\uff0c\u5176\u4e2d\u952e\u662f\u552f\u4e00\u7684\uff0c\u800c\u503c\u53ef\u4ee5\u91cd\u590d\u3002</p> <p><code>hash.count(k)</code> \u662f\u7528\u4e8e\u68c0\u67e5\u54c8\u5e0c\u8868\u4e2d\u662f\u5426\u5b58\u5728\u7279\u5b9a\u952e <code>k</code> \u7684\u6210\u5458\u51fd\u6570\uff0c\u5b83\u8fd4\u56de\u4e00\u4e2a\u6574\u6570\u503c\uff0c\u8868\u793a\u6307\u5b9a\u952e <code>k</code> \u5728\u54c8\u5e0c\u8868\u4e2d\u7684\u51fa\u73b0\u6b21\u6570\u3002</p> <pre><code>unordered_map&lt;int, int&gt; hash;\nhash.count(k)\n</code></pre>"},{"location":"Problem/lc/LeetCode/#leetcode_1","title":"\u77e5\u8bc6\uff1aleetcode\u4e2d\u94fe\u8868\u7ed3\u6784\u4f53\u7684\u5b9a\u4e49","text":"<pre><code> struct ListNode {\n      int val;\n      ListNode *next;\n      ListNode() : val(0), next(nullptr) {}\n      ListNode(int x) : val(x), next(nullptr) {}\n      ListNode(int x, ListNode *next) : val(x), next(next) {}\n  };\n</code></pre>"},{"location":"Problem/lc/LeetCode/#_13","title":"\u77e5\u8bc6\uff1a\u6808\u7684\u4f7f\u7528","text":"<pre><code>//\u6808\u7684\u5b9a\u4e49\nstack&lt;char&gt; stk;\n\nstack, \u6808\n    size()\n    empty()\n    push()  \u5411\u6808\u9876\u63d2\u5165\u4e00\u4e2a\u5143\u7d20\n    top()  \u8fd4\u56de\u6808\u9876\u5143\u7d20\n    pop()  \u5f39\u51fa\u6808\u9876\u5143\u7d20\n</code></pre>"},{"location":"Problem/lc/LeetCode/#_14","title":"\u9898\u578b\uff1a\u62ec\u53f7\u5e8f\u5217\u95ee\u9898","text":"123 { 125 } 91 [ 93 ] 40 ( 41 ) <p>\u53ef\u4ee5\u53d1\u73b0\u6bcf\u7ec4\u62ec\u53f7\u7684ASCII\u7801\u8868\u4e4b\u5dee&lt;2\uff0c\u53ef\u4ee5\u7528\u6765\u5224\u65ad\u6bcf\u7ec4\u62ec\u53f7\u662f\u5426\u95ed\u5408</p> <p>\u5373<code>abs(c -stk.top()) &lt; 2</code></p> <p>\u540c\u65f6\uff0c\u53ea\u6709\u4e00\u79cd\u62ec\u53f7\u7684\u62ec\u53f7\u5e8f\u5217\u5408\u6cd5\u7684\u8bdd\uff0c\u9700\u8981\u6ee1\u8db3\uff1a</p> <ol> <li>\u4efb\u610f\u524d\u7f00\u4e2d\u5de6\u62ec\u53f7\u7684\u6570\u91cf\u5927\u4e8e\u7b49\u4e8e\u53f3\u62ec\u53f7\u7684\u6570\u91cf</li> <li>\u603b\u5b57\u7b26\u4e32\u4e2d\u5de6\u53f3\u62ec\u53f7\u7684\u6570\u91cf\u76f8\u7b49</li> </ol>"},{"location":"Problem/lc/LeetCode/#vectormoveemplace_back","title":"\u77e5\u8bc6\uff1avector\u7684move\u548cemplace_back()\u7528\u6cd5","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; levelOrder(TreeNode* root) {\n        // \u5c42\u5e8f\u904d\u5386\u5c31\u662f\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\n        if (root == nullptr) return {};\n        vector&lt;vector&lt;int&gt;&gt; ans;\n        vector&lt;TreeNode*&gt; cur = {root};\n        while (cur.size()) {\n            vector&lt;TreeNode*&gt; next;\n            vector&lt;int&gt; vals;\n            for (TreeNode* node : cur) {\n                vals.push_back(node-&gt;val);\n                if (node-&gt;left) next.push_back(node-&gt;left);\n                if (node-&gt;right) next.push_back(node-&gt;right);\n            }\n            cur = move(next);\n            ans.emplace_back(vals);\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/LeetCode/#101","title":"10.1","text":""},{"location":"Problem/lc/LeetCode/#1-two-sum","title":"1. Two Sum","text":"<pre><code>class Solution {\npublic:\n    vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) {\n        unordered_map&lt;int, int&gt; hash;\n        for (int i = 0; i &lt; nums.size(); i++) {\n            int k = target - nums[i];\n            if (hash.count(k)) {\n                return {hash[k], i};\n                break;\n            }\n            hash[nums[i]] = i;\n        }\n        return {};\n    }\n};\n</code></pre> <ol> <li>\u6ce8\u610fhash.count()\u7684\u4f7f\u7528</li> <li>\u6ce8\u610fhash[nums[i]] = i;\u7684\u4f7f\u7528</li> </ol>"},{"location":"Problem/lc/LeetCode/#2-add-two-numbers","title":"2. Add Two Numbers","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n        // \u51e1\u662f\u9700\u8981\u7279\u5224\u7b2c\u4e00\u4e2a\u70b9\u7684\u5730\u65b9\uff0c\u90fd\u53ef\u4ee5\u52a0\u5165\u4e00\u4e2a\u865a\u62df\u5934\u8282\u70b9\n        ListNode* dummy = new ListNode(-1);\n        ListNode* cur = dummy;\n        int carry = 0;\n        while (l1 || l2 || carry) {\n            if (l1) carry += l1-&gt;val, l1 = l1-&gt;next;\n            if (l2) carry += l2-&gt; val, l2 = l2-&gt;next;\n            cur = cur-&gt;next = new ListNode(carry % 10);\n            carry /= 10;\n        }\n        return dummy-&gt;next;\n\n    }\n};\n</code></pre>"},{"location":"Problem/lc/LeetCode/#3-longest-substring-without-repeating-characters","title":"3. Longest Substring Without Repeating Characters","text":"<p>\u8fd9\u7c7b\u95ee\u9898\u8003\u8651\u7684\u662f\u600e\u4e48\u5c06\u6240\u6709\u7684\u60c5\u51b5\u8003\u8651\u5230</p> <pre><code>class Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n        unordered_map&lt;int, int&gt; hash;\n        int res = 0;\n        for (int i = 0, j = 0; j &lt; s.size(); j++) {\n            hash[s[j]]++;\n            while (hash[s[j]] &gt; 1) hash[s[i++]] --;\n            res = max(res, j - i + 1);\n        }\n        return res; \n    }\n\n};\n</code></pre>"},{"location":"Problem/lc/LeetCode/#102","title":"10.2","text":""},{"location":"Problem/lc/LeetCode/#4-median-of-two-sorted-arrays","title":"4. Median of Two Sorted Arrays","text":"<p>vector\u6570\u7ec4\u4e2dsize\u51fd\u6570\u7684\u8fd4\u56de\u503c\u662fsize_type \uff0c\u800c size_type \u7684\u7c7b\u578b\u662f\uff1aunsigned int\uff0cmin\u63a5\u53d7int\u578b\u53c2\u6570\uff0c\u6240\u4ee5\u9700\u8981\u5f3a\u8f6c</p> <pre><code>class Solution {\npublic:\n    double findMedianSortedArrays(vector&lt;int&gt;&amp; nums1, vector&lt;int&gt;&amp; nums2) {\n        int t = nums1.size() + nums2.size();\n        if (t % 2 == 0) {\n            int left = find(nums1, 0, nums2, 0, t / 2); // find\u627e\u7684\u662f\u7b2ct/2\u5c0f\u7684\u6570\n            int right = find (nums1, 0, nums2, 0, t / 2 + 1);\n            return (left + right) / 2.0;\n        } else return find(nums1, 0, nums2, 0, t / 2 + 1);\n    }\n\n\n    int find(vector&lt;int&gt;&amp; nums1, int i, vector&lt;int&gt;&amp; nums2, int j, int k) {\n        // \u9996\u5148\u8981\u9632\u6b62\u8d8a\u754c\u7684\u60c5\u51b5\u53d1\u751f\uff0c\u90a3\u4e48\u5c31\u8981\u628a\u5269\u4e0b\u7684\u8f83\u957f\u7684\u6570\u7ec4\u5b58\u50a8\u518dnums2\n        if (nums1.size() - i &gt; nums2.size() - j) return find(nums2, j, nums1, i, k);\n        if (nums1.size() == i) return nums2[j + k - 1];\n        if (k == 1) return min(nums1[i], nums2[j]);\n\n        // \u9012\u5f52\u903b\u8f91\n        // \u6bd4\u8f83\u6bcf\u4e2asub\u6570\u7ec4\u4e2d\u7b2ck/2\u4e2a\u7684\u6570\u7684\u5927\u5c0f\uff0c\u6ce8\u610fnums\u7684\u957f\u5ea6\u6bd4\u8f83\u77ed\n        // \u800c\u4e14\u6211\u4eec\u4e5f\u4e0d\u80fd\u786e\u5b9ak\u662f\u5947\u6570\u8fd8\u662f\u5076\u6570\uff0c\u6240\u4ee5\u5bf9\u4e8e\u53e6\u4e00\u4e2a\u6570\u7ec4\u52a0\u4e0a\uff08k - k/2\uff09\u624d\u884c\n        // vector\u6570\u7ec4\u4e2dsize\u51fd\u6570\u7684\u8fd4\u56de\u503c\u662fsize_type \uff0c\u800c size_type \u7684\u7c7b\u578b\u662f\uff1aunsigned int\uff0cmin\u63a5\u53d7int\u578b\u53c2\u6570\uff0c\u6240\u4ee5\u9700\u8981\u5f3a\u8f6c\n        int si = min((int)nums1.size(), (i + k / 2));\n        int sj = j + k - k /2;\n        // \u8fd9\u91cc\u6307\u7684\u662f\u7b2c\u51e0\u4e2a\uff0c\u6240\u4ee5\u5fc5\u987b\u8981 -1\n        if (nums1[si - 1] &gt; nums2[sj  - 1]) {\n            return find(nums1, i, nums2, sj, k - (sj - j));\n        } else return find(nums1, si, nums2, j, k - (si - i));\n    } \n};\n</code></pre>"},{"location":"Problem/lc/LeetCode/#5-longest-palindromic-substring","title":"5. Longest Palindromic Substring","text":"<p>palindromic substring \u56de\u6587\u5b57\u7b26\u4e32</p> <p>\u9047\u5230\u95ee\u9898\u5148\u7528\u66b4\u529b\u89e3\u6cd5\u8bd5\u8bd5</p> <pre><code>class Solution {\npublic:\n    string longestPalindrome(string s) {\n\n        string res;\n        for (int i = 0; i &lt; s.size(); i++) {\n            // \u56de\u6587\u5b57\u7b26\u4e32\u4e3a\u5947\u6570\u7684\u60c5\u51b5\n            // \u4f7f\u7528\u53cc\u6307\u9488\n            int m = i - 1, n = i + 1;\n            while (m &gt;= 0 &amp;&amp; n &lt;s.size() &amp;&amp; s[m] == s[n]) {\n                m--, n++;\n            }\n            if (n - m - 1 &gt; res.size()) res = s.substr(m + 1, n - m - 1);\n\n            // \u56de\u6587\u5b57\u7b26\u4e32\u4e3a\u5076\u6570\u7684\u60c5\u51b5\n            m = i, n = i + 1;\n            while (m &gt;= 0 &amp;&amp; n &lt; s.size() &amp;&amp; s[m] == s[n]) {\n                m--, n++;\n            }\n            if (n - m - 1&gt; res.size()) res = s.substr(m + 1, n - m - 1);\n        }\n\n        return res;\n    }\n\n};\n</code></pre>"},{"location":"Problem/lc/LeetCode/#6-zigzag-conversion","title":"6. Zigzag Conversion","text":"<p>zigzag pattern \u4e4b\u5b57\u5f62</p> <p>legibility \u8fa8\u8bc6\u6027</p> <pre><code>class Solution {\npublic:\n    string convert(string s, int numRows) {\n        string res;\n        if (numRows == 1) return s;\n        for (int i = 1; i &lt;= numRows; i ++) {\n            if (i == 1 || i == numRows) {\n                for (int j = i - 1; j &lt; s.size(); j =j + (2 * numRows - 2)) {\n                    res += s[j];\n                }\n            } else {\n                for (int l = i - 1, r = i - 1 + 2*(numRows - i); l &lt; s.size() || r &lt; s.size(); l += 2 * numRows - 2, r += 2 * numRows - 2) {\n                    if (l &lt; s.size()) res += s[l];\n                    if (r &lt; s.size()) res += s[r];\n                }\n            }\n        }\n\n        return res;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/LeetCode/#103","title":"10.3","text":""},{"location":"Problem/lc/LeetCode/#7-reverse-integer","title":"7. Reverse Integer","text":"<pre><code>class Solution {\npublic:\n    int reverse(int x) {\n        // \u6309\u7167\u9898\u610f\uff0cres\u8981\u88ab\u5b9a\u4e49\u6210int\u7c7b\u578b\u7684\u53d8\u91cf\n        int res = 0;\n        while (x) {\n            // \u6ce8\u610f\u770b\u9898\u610f\u8d85\u51fa32\u4f4d\u6574\u6570\u9700\u8981return0\uff01\n            // C++\u91cc\u9762\u8d1f\u6570\u6a21\u4e0a10\u662f\u8d1f\u6570\uff0c\u8fd9\u4e2a\u6027\u8d28\u53ef\u4ee5\u4f7f\u5199\u4ee3\u7801\u53d8\u5f97\u7b80\u5355\n            if (res &gt; 0 &amp;&amp; res &gt; (INT_MAX - x % 10) /10) return 0;\n            if (res &lt; 0 &amp;&amp; res &lt; (INT_MIN - x % 10) /10) return 0;\n            res = 10 * res + x % 10;\n            x /= 10;\n        }\n\n        return res;\n\n    }\n};\n</code></pre>"},{"location":"Problem/lc/LeetCode/#8-string-to-integer-atoi","title":"8. String to Integer (atoi)","text":"<p>clamp \u622a\u65ad</p> <pre><code>class Solution {\npublic:\n    int myAtoi(string s) {\n        char f;\n        int res = 0;\n        int i = 0;\n\n        while (s[i] == ' ') i++;\n        if (s[i] == '-' || s[i] == '+') {\n            f = s[i];\n            i++;\n        }\n\n        while (i &lt; s.size() &amp;&amp; s[i] &gt;= '0' &amp;&amp; s[i] &lt;= '9') {\n            if (res &gt; (INT_MAX - (s[i] - '0')) / 10 &amp;&amp; f == '-') return INT_MIN;\n            // \u65e0\u8bba\u662f\u524d\u9762\u6ca1\u6709\u7b26\u53f7\u6216\u8005\u6709+\u7684\uff0c\u90fd\u662f\u6b63\u6570\n            if (res &gt; (INT_MAX - (s[i] - '0')) / 10) return INT_MAX;\n            res = 10 * res + (s[i] - '0');\n            i ++;\n        }\n\n        // cout &lt;&lt; \"f = \" &lt;&lt; f &lt;&lt;endl;\n        if (f == '-') return -res;\n        else return res;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/LeetCode/#9-palindrome-number","title":"9. Palindrome Number","text":"<p>palindrome \u56de\u6587</p>"},{"location":"Problem/lc/LeetCode/#1","title":"1. \u8f6c\u6362\u6210\u5b57\u7b26\u4e32\u5904\u7406\u53cc\u6307\u9488\uff08\u6700\u6162\u7684\u505a\u6cd5\uff09","text":"<pre><code>class Solution {\npublic:\n    bool isPalindrome(int x) {\n\n        string s = to_string(x);\n        for (int i = 0, j = s.size() - 1; i &lt; s.size() &amp;&amp; j &gt;= 0; i++, j--) {\n            if (i == j) return true;\n            if (s[i] != s[j]) {\n                return false;\n                break;\n            }\n        }\n        return true;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/LeetCode/#2","title":"2. \u53cd\u8f6c\u5b57\u7b26\u4e32\u8fdb\u884c\u6bd4\u8f83","text":"<p>\u6ce8\u610frbegin()\u548crend()</p> <pre><code>class Solution {\npublic:\n    bool isPalindrome(int x) {\n        string s = to_string(x);\n        return s == string(s.rbegin(), s.rend());\n        return true;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/LeetCode/#3-10-1","title":"3. \u4f7f\u7528\u6574\u6570\u53cd\u8f6c\uff0c\u5012\u5e8f\u4e00\u4f4d\u4e00\u4f4d*10 + 1\uff0c\u7136\u540e\u8fdb\u884c\u6bd4\u8f83","text":"<pre><code>class Solution {\npublic:\n    bool isPalindrome(int x) {\n        // \u521d\u59cb\u5316\u7684\u65f6\u5019\u4e00\u5b9a\u8981\u7ed9\u4e00\u4e2a\u503c\uff01\uff01\uff01\n        long long res = 0;\n        int y = x;\n        if (x &lt; 0) return false;\n        while (x) {\n            res = res * 10 + x % 10;\n            x /= 10;\n        }\n        return res == y;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/LeetCode/#1022","title":"10.22","text":""},{"location":"Problem/lc/LeetCode/#10-regular-expression-matching","title":"10. Regular Expression Matching","text":"<p>\u600e\u4e48\u770b\u51fa\u6765\u662f\u7684dp\u7684\uff1a\u7ed9\u4e24\u4e2a\u5b57\u7b26\u4e32\u6c42\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217\uff0c\u7ed9\u4e24\u4e2a\u5b57\u7b26\u4e32\u8ba9\u6211\u4eec\u6c42\u8fb9\u9645\u8ddd\u79bb\uff0c\u7ed9\u4e24\u4e2a\u5b57\u7b26\u4e32\u95ee\u4f1a\u4e0d\u4f1a\u5339\u914d\uff08\u6765\u81ea\u7ecf\u9a8c\uff09</p> <p>\u901a\u7528\u7684\u5206\u6790\u8fc7\u7a0b\uff0c\u964d\u4f4e\u5206\u6790\u96be\u5ea6</p> <p>\u4ece\u96c6\u5408\u89d2\u5ea6\u6765\u770b\u95ee\u9898</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6\u662fn^2</p> <p>\u8981\u4e48\u5faa\u73af\u8981\u4e48\u9012\u5f52\uff0c\u9012\u5f52\u66f4\u5bb9\u6613\u7406\u89e3\uff0c\u4f46\u662f\u65f6\u95f4\u4f1a\u957f\u4e00\u4e9b</p> <p>\u4e00\u770b\u662f\u4e00\u4e2a\u5e8f\u5217\u6a21\u578b</p> <p>\u72b6\u6001\u8868\u793a\uff08\u9760\u7ecf\u9a8c\uff09\uff1a\u4e24\u4e2a\u5e8f\u5217\u4e00\u822c\u4f7f\u7528\u4e24\u7ef4\u6765\u8868\u793a\uff0c</p> <p>\u96c6\u5408f(i, j) \u5728\u6240\u6709\u65b9\u5f0f\u91cc\u9762\u662f\u5426\u5b58\u5728\u4e00\u4e2a\u5408\u6cd5\u7684\u65b9\u6848,\u8868\u793a\u7684\u96c6\u5408\u662f\u6240\u6709s[1-i]\u548c[1-j]\u7684\u5339\u914d\u65b9\u6848</p> <p>\u5c5e\u6027:bool\u662f\u5426\u5b58\u5728\u4e00\u4e2a\u5408\u6cd5\u65b9\u6848</p> <p>\u6b63\u5e38\u6765\u8bf4\u5c31\u9700\u8981\u66b4\u529b\u641c\u7d22\u4e86</p> <p>\u72b6\u6001\u8ba1\u7b97\uff1a</p> <ol> <li> <p>\u5982\u679cp[j]\u4e0d\u662fx*(\u8981\u628a<code>*</code>\u548c\u5b83\u524d\u9762\u7684\u90a3\u4e2a\u5b57\u7b26\u770b\u6210\u4e00\u4e2a\u6574\u4f53),\u90a3\u4e48\u76f4\u63a5\u5339\u914d\u5c31\u53ef\u4ee5\u4e86s[i]p[j]  ||  p[j]'.' &amp;&amp; f(i - 1, j - 1) (\u8be6\u7ec6\u7684\u6765\u8bb2\u5c31\u662f,\u6700\u540e\u6bd4\u8f83\u7684\u90a3\u4e24\u4e2a\u5b57\u7b26\u76f8\u7b49,\u6216\u8005p\u7684\u6700\u540e\u4e00\u4f4d\u662f\u901a\u914d\u7b26,\u5e76\u4e14\u8fd9\u4e24\u4e2a\u6700\u540e\u5b57\u7b26\u4e4b\u524d\u7684\u5e8f\u5217\u90fd\u662f\u5339\u914d\u7684)</p> </li> <li> <p>\u5982\u679cp[j]\u662fx*,\u90a3\u4e48\u5c31\u8981\u5f00\u59cb\u8003\u8651<code>x*</code>\u4ee3\u8868\u7684\u662f\u591a\u5c11\u4e2a\u5b57\u7b26,\u5343\u4e07\u6ce8\u610f\u662f\u628a<code>*</code>\u548c\u4ed6\u524d\u9762\u7684\u90a3\u4e2a\u5b57\u7b26\u770b\u6210\u4e00\u4e2a\u6574\u4f53!</p> </li> </ol> <p>\u5982\u679c\u8fd9\u4e2a\u6574\u4f53\u4ee3\u88680\u4e2a\u5b57\u7b26\u90a3\u4e48\u5c31\u9700\u8981f(i, j - 2)</p> <p>\u5982\u679c\u4ee3\u88681\u4e2a\u5b57\u7b26:f(i - 1, j - 2) &amp;&amp; si\u548cpj\u4e5f\u8981\u5339\u914d</p> <p>\u5982\u679c\u4ee3\u88682\u4e2a\u5b57\u7b26:f(i - 2, j - 2) &amp;&amp; si &amp;&amp; si -1</p> <p>\u6240\u4ee5:</p> <p>f(i, j) = f(i , j- 2) || f(i - 1, j - 2) &amp; si || f(i -2, j - 2) &amp; si &amp; si -1</p> <p>f(i - 1, j) = f(i - 1, j -2) || f(i -2, j -2) &amp; si-1...</p> <p>\u6240\u4ee5f(i, j) =f(i, j - 2) ||  f(i - 1, j) &amp;si\u4e0ep[j]\u5339\u914d</p> <p>leetcode\u7684\u6d4b\u8bd5\u6837\u4f8b\u7ecf\u8fc7\u52a0\u5f3a\u4e4b\u540e\u5df2\u7ecf\u4e0d\u7528\u8003\u8651\u7565\u8fc7p[j + 1]\u662f*\u7684\u8fd9\u79cd\u60c5\u51b5\u4e86,\u539f\u56e0\u662f\u4f1a\u51fa\u73b0<code>a***b</code></p> <pre><code>class Solution {\npublic:\n    bool isMatch(string s, string p) {\n        int n = s.size(), m = p.size();\n        // \u9700\u8981\u5efa\u7acb\u4e8c\u7ef4\u5e03\u5c14\u6570\u7ec4\u6765\u5b58\u50a8\u5230\u73b0\u5728\u4e3a\u6b62\uff0c\u6240\u6709s\u4e2d\u7684\u5b57\u7b26\u662f\u5426\u5df2\u7ecf\u88abp\u4e2d\u7684\u5b57\u7b26\u5339\u914d\n        s = ' ' + s, p = ' ' + p;\n        vector&lt;vector&lt;bool&gt;&gt; f(n + 1, vector&lt;bool&gt;(m + 1));\n        // \u4e0d\u8981\u5fd8\u8bb0\u7ed9\u521d\u59cb\u7684\u8d4b\u503c\n        f[0][0] = true;\n        // \u56e0\u4e3a\u662f\u5faa\u73af\uff0c\u90a3\u4e48p\u4e2d\u7684\u5b57\u7b26\u6570\u91cf\u5f88\u6709\u53ef\u80fd\u4f1a\u8d85\u8fc7s\u4e2d\u73b0\u5728\u5faa\u73af\u5230\u7684\u5b57\u7b26\u6570\u91cf\n        for (int i = 0; i &lt;= n; i++) {\n            for (int j = 1; j &lt;= m; j++) {\n                if (i &amp;&amp; p[j] != '*') {\n                    f[i][j] = f[i - 1][j - 1] &amp;&amp; (s[i] == p[j] || p[j] == '.');\n                } else if (p[j] == '*') {\n                    f[i][j] = f[i][j - 2] || i &amp;&amp; f[i - 1][j] &amp;&amp; (s[i] == p[j - 1] || p[j - 1] == '.');\n                }\n            }\n        }\n        return f[n][m];\n    }\n};\n</code></pre>"},{"location":"Problem/lc/LeetCode/#11","title":"11. \u76db\u6700\u591a\u6c34\u7684\u5bb9\u5668","text":"<pre><code>class Solution {\npublic:\n    int maxArea(vector&lt;int&gt;&amp; height) {\n        // \u66b4\u529b\u505a\u6cd5\u8d85\u51fa\u65f6\u95f4\u9650\u5236\u4e86\n        // \u90a3\u4e48\u6709\u4e24\u6761\u8fb9\u7684\u95ee\u9898\u5c31\u53ef\u4ee5\u7528\u53cc\u6307\u9488\u8fdb\u884c\u4f18\u5316\n        // \u53ea\u6709\u79fb\u52a8\u77ed\u8fb9\u624d\u6709\u53ef\u80fd\u4f7f\u6c34\u9762\u4e0a\u5347\n        // \u6728\u6876\u5bb9\u91cf\u7531\u77ed\u677f\u51b3\u5b9a, \u79fb\u52a8\u957f\u677f\u7684\u8bdd, \u6c34\u9762\u9ad8\u5ea6\u4e0d\u53ef\u80fd\u518d\u4e0a\u5347, \u800c\u5bbd\u5ea6\u53d8\u5c0f\u4e86, \u6240\u4ee5\u53ea\u6709\u901a\u8fc7\u79fb\u52a8\u77ed\u677f, \u624d\u6709\u53ef\u80fd\u4f7f\u6c34\u4f4d\u4e0a\u5347.\n        int res = 0;\n        for (int i = 0, j = height.size() - 1; i &lt; j;) {\n            res = max(res, (j - i) * min(height[i], height[j]));\n            if (height[j] &lt; height[i]) j--;\n            else i++;\n        }\n        return res;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/LeetCode/#12","title":"12. \u6574\u6570\u8f6c\u7f57\u9a6c\u6570\u5b57","text":"<pre><code>class Solution {\npublic:\n    string intToRoman(int num) {\n        string res;\n        int values[] = {\n            1000,\n            900, 500, 400, 100,\n            90, 50, 40, 10,\n            9, 5, 4, 1\n        };\n        string reps[] = {\n            \"M\",\n            \"CM\", \"D\", \"CD\", \"C\",\n            \"XC\", \"L\", \"XL\", \"X\",\n            \"IX\", \"V\", \"IV\", \"I\"\n        };\n        for (int i = 0; i &lt; 13; i++) {\n            while (num &gt;= values[i]) {\n                num -= values[i];\n                res += reps[i];\n            }\n        }\n        return res;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/LeetCode/#1023","title":"10.23","text":""},{"location":"Problem/lc/LeetCode/#13","title":"13. \u7f57\u9a6c\u6570\u5b57\u8f6c\u6574\u6570","text":"<p>\u4e00\u9053\u7eaf\u7cb9\u7684string \u8bed\u6cd5\u9898\uff0c\u7528\u5230\u4e86substr()\u548cempty()</p> <p>\u4e5f\u53ef\u4ee5\u4f7f\u7528\u54c8\u5e0c\u8868\u6765\u505a\uff0c\u8bed\u6cd5\u4e0a\u66f4\u52a0\u6f02\u4eae</p> <pre><code>class Solution {\npublic:\n    int romanToInt(string s) {\n        int res = 0;\n        int value[] = {\n            1000,\n            900, 500, 400, 100,\n            90, 50, 40, 10,\n            9, 5, 4, 1\n        };\n        string reps[] = {\n            \"M\",\n            \"CM\", \"D\", \"CD\", \"C\",\n            \"XC\", \"L\", \"XL\", \"X\",\n            \"IX\", \"V\", \"IV\", \"I\"\n        };\n        for (int i = 0; i &lt; 13 &amp;&amp; !s.empty(); i++) {\n            while (!s.empty() &amp;&amp; s.substr(0, reps[i].size()) == reps[i]) {\n                res += value[i];\n                s = s.substr(reps[i].size(), s.size() - reps[i].size());\n            }\n        }\n        return res;\n    }\n};\n</code></pre> <pre><code>class Solution {\npublic:\n    int romanToInt(string s) {\n        unordered_map&lt;char, int&gt; hash;\n        hash['I'] = 1, hash['V'] = 5;\n        hash['X'] = 10, hash['L'] = 50;\n        hash['C'] = 100, hash['D'] = 500;\n        hash['M'] = 1000;\n        int res = 0;\n        for (int i = 0; i &lt; s.size(); i++) {\n            if (i &lt; s.size() - 1 &amp;&amp; hash[s[i]] &lt; hash[s[i + 1]]) {\n                res -= hash[s[i]];\n            } else res += hash[s[i]];\n        }\n        return res;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/LeetCode/#14","title":"14. \u6700\u957f\u516c\u5171\u524d\u7f00","text":"<p>\u524d\u7f00\u7684\u610f\u601d\u662f\u4e0b\u6807\u8fde\u7eed\uff0c\u4e0d\u7136\u5c31\u53d8\u6210dp\u95ee\u9898\u4e86</p> <pre><code>class Solution {\npublic:\n    string longestCommonPrefix(vector&lt;string&gt;&amp; strs) {\n        string res = \"\";\n        for (int i = 0; i &lt; strs[0].size(); i++) {\n            char pattern = strs[0][i];\n            for (int j = 0; j &lt; strs.size(); j++) {\n                if (i &lt; strs[j].size() &amp;&amp; strs[j][i] == pattern) continue;\n                else return res;\n            }\n            res += pattern;\n        }\n        return res;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/LeetCode/#15","title":"15. \u4e09\u6570\u4e4b\u548c","text":"<p>\u53cc\u6307\u9488\u505a\u6cd5\u4e00\u5b9a\u8981\u6709\u5e8f</p> <p>\u8fd9\u9053\u9898\u76ee\u6700\u91cd\u8981\u7684\u4e00\u70b9\u5c31\u662f\u5c06n^3\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u964d\u4e0b\u6765</p> <p>\u5728i\u56fa\u5b9a\u7684\u60c5\u51b5\u4e0b\uff0c\u5e76\u4e14\u4fdd\u8bc1j&lt;k\uff0c\u5982\u679c\u6211\u4eec\u627e\u5230\u4e86\u7b2c\u4e00\u7ec4=0\u7684\u4e09\u4e2a\u6570</p> <p>\u90a3\u4e48\u679a\u4e3ej\u53d8\u5927\u65f6\uff0ck\u53ea\u80fd\u53d8\u5c0f</p> <p>\u8fd9\u6837\u6211\u4eec\u5c31\u505a\u5230\u4e86\u5728i\u4e0d\u53d8\u7684\u60c5\u51b5\u4e0b\uff0cj\u548ck\u4e00\u5171\u6700\u591a\u53ea\u679a\u4e3en\u4e2a\u6570\u800c\u4e0d\u662fn^2</p> <pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; threeSum(vector&lt;int&gt;&amp; nums) {\n        vector&lt;vector&lt;int&gt;&gt; res;\n        sort(nums.begin(), nums.end());\n        for (int i = 0; i &lt; nums.size() - 2; i++) {\n            if (i &amp;&amp; nums[i] == nums[i - 1]) continue;\n            for (int j = i + 1, k = nums.size() - 1; j &lt; k; j++) {\n                if (j &gt; i + 1 &amp;&amp; nums[j] == nums[j - 1]) continue;\n                while (j &lt; k - 1 &amp;&amp; nums[i] + nums[j] + nums[k - 1] &gt;= 0) k--;\n                if (nums[i] + nums[j] + nums[k] == 0) res.push_back({nums[i], nums[j], nums[k]});  \n            }\n        }\n        return res;\n\n    }\n};\n</code></pre>"},{"location":"Problem/lc/LeetCode/#1024","title":"10.24","text":""},{"location":"Problem/lc/LeetCode/#16","title":"16. \u6700\u63a5\u8fd1\u7684\u4e09\u6570\u4e4b\u548c","text":"<ul> <li>\u952e\u503c\u5bf9pair\u7684\u5e94\u7528,<code>make_pair</code>\u4ee5\u53ca<code>return res.second</code></li> <li>\u627e\u5230\u4e86&gt;= target\u7684\u6700\u5c0f\u503c\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6570\u7684\u524d\u4e00\u4f4d\u5fc5\u5b9a\u662f&lt;target\u7684\u6700\u5927\u503c</li> </ul> <pre><code>class Solution {\npublic:\n    int threeSumClosest(vector&lt;int&gt;&amp; nums, int target) {\n        sort(nums.begin(), nums.end());\n        pair&lt;int, int&gt; res(INT_MAX, INT_MAX);\n        for (int i = 0; i &lt; nums.size() - 2; i++) {\n            for (int j = i + 1, k = nums.size() - 1; j &lt; k; j++) {\n                while (j &lt; k - 1 &amp;&amp; nums[i] + nums[j] + nums[k - 1] &gt;= target) k--;\n                int sum = nums[i] + nums[j] + nums[k];\n                res = min(res, make_pair(abs(sum - target), sum));\n                if (k - 1 &gt; j) {\n                    sum = nums[i] + nums[j] + nums[k - 1];\n                    res = min(res, make_pair(abs(target - sum), sum));\n                }\n            }\n        }\n        return res.second;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/LeetCode/#17","title":"17. \u7535\u8bdd\u53f7\u7801\u7684\u5b57\u6bcd\u7ec4\u5408","text":"<ul> <li>\u6ce8\u610f\u5230dfs\u7684\u5f62\u5f0f</li> <li>\u4f7f\u7528digits.empty()</li> <li>auto c : strs[digits[u] - '0']</li> </ul> <pre><code>class Solution {\npublic:\n    vector&lt;string&gt; ans;\n    string strs[10] = {\n        \"\", \"\", \"abc\", \"def\",\n        \"ghi\", \"jkl\", \"mno\",\n        \"pqrs\", \"tuv\", \"wxyz\"\n    };\n    vector&lt;string&gt; letterCombinations(string digits) {\n        if (digits.empty()) return ans;\n        dfs(digits, 0, \"\");\n        return ans;\n    }\n    void dfs(string&amp; digits, int u, string path) {\n        if (u == digits.size()) ans.push_back(path);\n        else {\n            for (auto c : strs[digits[u] - '0']) {\n                dfs(digits, u + 1, path + c);\n            }\n        }\n    }\n};\n</code></pre>"},{"location":"Problem/lc/LeetCode/#18","title":"18. \u56db\u6570\u4e4b\u548c","text":"<p>10.27\u505a\u9898\u5fc3\u5f97\uff1a</p> <ol> <li>\u5982\u679c\u51fa\u73b0\u6ea2\u51fa\u7684\u60c5\u51b5\uff0c\u5148\u7279\u5224\u4e00\u4e0b\u8f93\u5165  if (nums.size() &lt; 4) return ans;</li> <li>\u6ce8\u610f\u770b\u8f93\u5165\u7684\u5927\u5c0f\uff0c\u6ce8\u610f\u5f00long long </li> </ol> <pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; fourSum(vector&lt;int&gt;&amp; nums, int target) {\n        vector&lt;vector&lt;int&gt;&gt; ans;\n        if (nums.size() &lt; 4) return ans;\n        sort(nums.begin(), nums.end());\n        for (int i = 0; i &lt; nums.size() - 3; i++) {\n            if (i &amp;&amp; nums[i] == nums[i - 1]) continue;\n            for (int j = i + 1; j &lt; nums.size() -2; j++) {\n                if (j &gt;= i + 2 &amp;&amp; nums[j] == nums[j -1]) continue;\n                for (int m = j + 1, n = nums.size() - 1; m &lt; n; m++) {\n                    if (m &gt;= j + 2 &amp;&amp; m &lt; n &amp;&amp; nums[m] == nums[m - 1]) continue;\n                    while((long long) nums[i] + nums[j] + nums[m] + nums[n - 1] &gt;= target &amp;&amp; m &lt; n- 1) n--;\n                    if ((long long)nums[i] + nums[j] + nums[m] + nums[n] == target) ans.push_back({nums[i], nums[j], nums[m], nums[n]});\n                }\n            }\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/LeetCode/#1025","title":"10.25","text":""},{"location":"Problem/lc/LeetCode/#19-n","title":"19. \u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2c N \u4e2a\u7ed3\u70b9","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* removeNthFromEnd(ListNode* head, int n) {\n        // \u5728\u6240\u6709\u6709\u53ef\u80fd\u4f1a\u5220\u9664\u5934\u8282\u70b9\u7684\u94fe\u8868\u9898\u76ee\u4e2d\uff0c\u9700\u8981\u6dfb\u52a0\u865a\u62df\u5934\u8282\u70b9\n        ListNode* dummy = new ListNode(-1);\n        dummy-&gt;next = head;\n        // \u5148\u904d\u5386\u4e00\u904d\u6574\u4e2a\u94fe\u8868\uff0ck\u8bb0\u5f55\u7684\u662f\u5305\u542b\u865a\u62df\u5934\u8282\u70b9dummy\u7684\u603b\u94fe\u8868\u7684\u957f\u5ea6\n        int k = 0;\n        for (auto ptr = dummy; ptr; ptr = ptr-&gt;next) k++;\n\n        auto ptr = dummy;\n        for (int i = 0; i &lt; k - n - 1; i++) ptr = ptr-&gt;next;\n\n        ptr-&gt;next = ptr-&gt;next-&gt;next;\n        return dummy-&gt;next;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/LeetCode/#20","title":"20. \u6709\u6548\u7684\u62ec\u53f7","text":"<pre><code>class Solution {\npublic:\n    bool isValid(string s) {\n        // \u5148\u8fdb\u540e\u51fa\u7684\u6570\u636e\u7ed3\u6784\u662fstack\n        stack&lt;char&gt; stk;\n        for (char c : s) {\n            if (c == '(' || c == '{' || c == '[') {\n                stk.push(c);\n            } else {\n                if (stk.size() &amp;&amp; abs(c - stk.top()) &lt;= 2) stk.pop();\n                else return false;\n            }\n        }\n        return stk.empty();\n    }\n};\n</code></pre>"},{"location":"Problem/lc/LeetCode/#21","title":"21. \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\n        auto dummy = new ListNode(-1), tail = dummy;\n        while (list1 &amp;&amp; list2) {\n            if (list1-&gt;val &lt;= list2-&gt;val) {\n                tail = tail-&gt;next = list1;\n                list1 = list1-&gt;next;\n            } else {\n                tail = tail-&gt;next = list2;\n                list2 = list2-&gt;next;\n            }\n        }\n        if (list1 == NULL) tail-&gt;next = list2;\n        else tail-&gt;next = list1;\n        return dummy-&gt;next;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/LeetCode/#1026","title":"10.26","text":""},{"location":"Problem/lc/LeetCode/#22","title":"22. \u62ec\u53f7\u751f\u6210","text":"<pre><code>class Solution {\npublic:\n    vector&lt;string&gt; res;\n    vector&lt;string&gt; generateParenthesis(int n) {\n        dfs(n, 0, 0, \"\");\n        return res;\n    }\n    void dfs (int n, int l, int r, string seq) {\n        if (l == n &amp;&amp; r == n) res.push_back(seq);\n        else {\n            if (l &lt; n) dfs(n, l + 1, r, seq + '(');\n            if (r &lt; n &amp;&amp; l &gt; r) dfs(n, l, r + 1, seq + ')');\n        }\n    }\n};\n</code></pre>"},{"location":"Problem/lc/LeetCode/#23-k","title":"23. \u5408\u5e76 K \u4e2a\u5347\u5e8f\u94fe\u8868","text":"<p>\u4f7f\u7528\u5806\u6765\u7ef4\u62a4\u7b2ck\u4e2a\u6307\u9488</p> <p>\u7528\u5806\u5c06\u65f6\u95f4\u590d\u6742\u5ea6\u4ece\u4f18\u5316\u6210nlogk</p> <p>\u4f18\u5148\u961f\u5217\u5c31\u662f\u5806</p> <p>\u4f18\u5148\u961f\u5217\u81ea\u5b9a\u4e49\u6bd4\u8f83\u51fd\u6570</p> <p>\u4f18\u5148\u961f\u5217\u662f\u5927\u6839\u5806\uff0c\u6240\u4ee5\u4f1a\u628a\u5927\u7684\u653e\u5728\u524d\u9762</p> <pre><code>std::priority_queue&lt;T, Container, Compare&gt;\n</code></pre> <p><code>Compare</code>\uff1a\u8fd9\u662f\u4e00\u4e2a\u6bd4\u8f83\u51fd\u6570\u6216\u8005\u51fd\u6570\u5bf9\u8c61\uff0c\u7528\u4e8e\u5b9a\u4e49\u5143\u7d20\u4e4b\u95f4\u7684\u4f18\u5148\u7ea7\u6bd4\u8f83\u89c4\u5219\u3002<code>std::greater&lt;int&gt;</code> \u662f\u4e00\u4e2a\u6807\u51c6\u5e93\u63d0\u4f9b\u7684\u51fd\u6570\u5bf9\u8c61\uff0c\u5b83\u7528\u4e8e\u521b\u5efa\u4e00\u4e2a\u6700\u5c0f\u5806\u3002</p>"},{"location":"Problem/lc/LeetCode/#_15","title":"\u5173\u4e8e\u6bd4\u8f83\u89c4\u5219\u7684\u5b9e\u73b0","text":"<p>\u4f18\u5148\u961f\u5217cmp\u548csort\u7684\u6548\u679c\u662f\u76f8\u53cd</p> <p>\u6240\u6709STL\u5bb9\u5668\u548c\u5e93\u51fd\u6570\u9ed8\u8ba4\u4f7f\u7528\u7684\u662f\u5c0f\u4e8e\u53f7\uff0c\u5982\u679c\u52a0\u4e0agreater&lt;&gt;\u53c2\u6570\uff0c\u90a3\u4e48\u4f1a\u9ed8\u8ba4\u4f7f\u7528\u5927\u4e8e\u53f7\u3002\u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\u4f18\u5148\u961f\u5217\u4f1a\u9ed8\u8ba4\u7528\u4e00\u5bf9\u5c0f\u62ec\u53f7\u8868\u793a\u5c0f\u4e8e\u53f7\uff0c\u5e76\u4e14\u9ed8\u8ba4\u4f1a\u6784\u9020\u4e00\u4e2a\u5927\u6839\u5806\uff0c\u6240\u4ee5\u6211\u4eec\u628a\u5c0f\u62ec\u53f7\u91cc\u7684\u5173\u7cfb\u53d8\u4e00\u4e0b\uff0c\u6700\u540e\u5c31\u53ef\u4ee5\u5f97\u5230\u5c0f\u6839\u5806\u4e86\u3002</p> <p>\u4e00\u4e0b\u662fC++\u4e2d\uff0c<code>std::greater&lt;int&gt;</code>\u7684\u5177\u4f53\u5b9e\u73b0\uff1a</p> <pre><code>template &lt;class T&gt;\nstruct greater {\n    bool operator() (const T&amp; x, const T&amp; y) const {\n        return x &gt; y;\n    }\n};\n</code></pre> <p>\u91cd\u8f7d()\u7684\u539f\u56e0\u662f<code>operator()</code> \u7684\u91cd\u8f7d\u4f7f\u5bf9\u8c61\u53ef\u4ee5\u50cf\u51fd\u6570\u4e00\u6837\u88ab\u8c03\u7528\uff0c\u56e0\u4e3a\u5b83\u662f\u51fd\u6570\u8c03\u7528\u8fd0\u7b97\u7b26\u3002\u8fd9\u4f7f\u5f97\u51fd\u6570\u5bf9\u8c61\u53ef\u4ee5\u7075\u6d3b\u5730\u5c01\u88c5\u64cd\u4f5c\uff0c\u53ef\u4ee5\u5728\u5176\u4e2d\u5305\u542b\u72b6\u6001\uff0c\u5b9e\u73b0\u81ea\u5b9a\u4e49\u7684\u884c\u4e3a\uff0c\u5e76\u4e14\u53ef\u4ee5\u7528\u4e8e\u6cdb\u578b\u7f16\u7a0b\u3002</p> <p>\u6bd4\u5982\uff1a</p> <pre><code>#include &lt;iostream&gt;\n\nstruct MyComparator {\n    bool operator()(int a, int b) const {\n        return a &gt; b;\n    }\n};\n\nint main() {\n    MyComparator cmp;\n    bool result = cmp(5, 3); // \u4f7f\u7528\u51fd\u6570\u5bf9\u8c61\u8c03\u7528\uff0c\u6bd4\u8f835\u548c3\n    std::cout &lt;&lt; result &lt;&lt; std::endl; // \u8f93\u51fa1\uff0c\u56e0\u4e3a5 &gt; 3\n    return 0;\n}\n</code></pre>"},{"location":"Problem/lc/LeetCode/#okn-logk-ok","title":"\u4f18\u5148\u961f\u5217\u5408\u5e76\u4ee3\u7801\uff1a\u65f6\u95f4 O(kn * logk), \u7a7a\u95f4 O(k)","text":"<p>\u6ce8\u610f\uff1a<code>auto dummy = new ListNode(-1), tail = dummy;(return dummy-&gt;next)</code>\u7684\u5b9e\u73b0\u8fd8\u80fd\u662f<code>ListNode dummy, *cur = &amp;dummy;(return dummy.next)</code></p> <p>\u53ef\u4ee5\u4e0d\u628a head \u8bbe\u4e3a ListNode * \u6307\u9488\u7c7b\u578b, \u800c\u662f\u628a head \u8bbe\u4e3a ListNode \u7c7b\u578b\uff0c\u8fd9\u6837 \u5c31\u4e0d\u7528 \u8003\u8651 \u5185\u5b58\u7684\u95ee\u9898\u4e86\u3002\u4e0d\u628a head\u4f5c\u4e3a\u6307\u9488 new\u51fa\u6765 \u786e\u5b9e\u4f1a \u8282\u7701\u5185\u5b58\uff0c\u5185\u5b58\u6d88\u8017 \u7531 22.1MB \u53d8\u4e3a 12.7MB\u3002</p> <pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    struct Cmp {\n        bool operator() (ListNode* a, ListNode* b) {\n            return a-&gt;val &gt; b-&gt;val;\n        }\n    };\n    ListNode* mergeKLists(vector&lt;ListNode*&gt;&amp; lists) {\n        priority_queue&lt;ListNode*, vector&lt;ListNode*&gt;, Cmp&gt; heap;\n        auto dummy = new ListNode(-1), tail = dummy;\n        for (auto l : lists) if (l) heap.push(l);\n\n        while (heap.size()) {\n            auto t = heap.top();\n            heap.pop();\n            tail-&gt;next = t;\n            tail = tail-&gt;next;\n            if (t-&gt;next) heap.push(t-&gt;next);\n        }\n        return dummy-&gt;next;\n    }\n\n};\n</code></pre>"},{"location":"Problem/lc/LeetCode/#okn-logk-ologk","title":"\u5206\u6cbb\u5408\u5e76\u4ee3\u7801\uff1a O(kn * logk), \u9012\u5f52\u6808\u7a7a\u95f4 O(logk)","text":"<p><code>cur-&gt;next = a ? a : b;</code></p> <ul> <li>\u5982\u679c <code>a</code> \u975e\u7a7a\uff08\u5373 <code>a</code> \u8fd8\u6709\u5269\u4f59\u8282\u70b9\uff09\uff0c\u90a3\u4e48\u5c06 <code>cur-&gt;next</code> \u6307\u5411 <code>a</code>\uff0c\u5e76\u5c06 <code>a</code> \u5411\u540e\u79fb\u52a8\u4e00\u4e2a\u8282\u70b9\uff0c\u540c\u65f6 <code>cur</code> \u4e5f\u5411\u540e\u79fb\u52a8\u4e00\u4e2a\u8282\u70b9\u3002</li> <li>\u5982\u679c <code>a</code> \u4e3a\u7a7a\uff0c\u90a3\u4e48\u5c06 <code>cur-&gt;next</code> \u6307\u5411 <code>b</code>\uff0c\u5e76\u5c06 <code>b</code> \u5411\u540e\u79fb\u52a8\u4e00\u4e2a\u8282\u70b9\uff0c\u540c\u65f6 <code>cur</code> \u4e5f\u5411\u540e\u79fb\u52a8\u4e00\u4e2a\u8282\u70b9\u3002</li> </ul>"},{"location":"Problem/lc/LeetCode/#_16","title":"\u56de\u5fc6\u5f52\u5e76\u6392\u5e8f\u7b97\u6cd5\u6a21\u677f\u9898","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nconst int N = 1e5+10;\nint q[N], tmp[N];\n\nvoid merge_sort (int q[], int l, int r) {\n    if (l &gt;= r) return;\n    int mid = l + r &gt;&gt; 1;\n    merge_sort(q, l, mid);\n    merge_sort(q, mid + 1, r);\n    int i = 0, j = l, k = mid + 1;\n    while (j &lt;= mid &amp;&amp; k &lt;= r) {\n        if (q[j] &lt;= q[r]) tmp[i++] = q[j++];\n        else tmp[i++] = q[k++];\n    }\n    while (j &lt;= mid) tmp[i++] = q[j++];\n    while (k &lt;= r) tmp[i++] = q[k++];\n    for (int i = l, j = 0; i &lt;= r; i++, j++) q[i] = tmp[j];\n} \n\nint main () {\n    int n;\n\n    cin &gt;&gt; n;\n    for (int i = 0; i &lt; n; i++) cin &gt;&gt; q[i];\n    merge_sort(q, 0, n - 1);\n    for (int i = 0; i &lt; n; i++) cout &lt;&lt; q[i] &lt;&lt; \" \" &lt;&lt; endl;\n    return 0;\n}\n</code></pre> <p>\u6ce8\u610f\u7531\u4e8e\u8fd4\u56de\u7684\u4ecd\u7136\u662f\u539f\u6765\u94fe\u8868\u7684\u5934\u8282\u70b9\u5730\u5740\uff0c\u6240\u4ee5\u4e0d\u4f1a\u9020\u6210\u60ac\u7a7a\u6307\u9488</p> <pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode * a, ListNode * b) {\n        ListNode dummy, *cur = &amp;dummy;\n        while (a &amp;&amp; b) {\n            if (a-&gt;val &lt; b-&gt;val) cur = cur-&gt;next = a, a = a-&gt;next;\n            else cur = cur-&gt;next = b, b = b-&gt;next;\n        }\n        cur-&gt;next = a ? a : b;\n        return dummy.next;\n    }\n    ListNode* merge(vector&lt;ListNode*&gt;&amp; lists, int l, int r) {\n        if (l == r) return lists[l];\n        if (l &gt; r) return nullptr;\n        int mid = (l + r) &gt;&gt; 1;\n        return mergeTwoLists(merge(lists, l, mid), merge(lists, mid + 1, r));\n\n    }\n    ListNode* mergeKLists(vector&lt;ListNode*&gt;&amp; lists) {\n        int n = lists.size();\n        if (!n) return nullptr;\n        return merge(lists, 0, n - 1);\n    }\n};\n</code></pre>"},{"location":"Problem/lc/LeetCode/#24","title":"24. \u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9","text":"<p>\u4e0d\u7528\u5bb3\u6015\u591a\u5efa\u51e0\u4e2a\u6307\u9488\u6ca1\u6709\u5173\u7cfb</p> <pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* swapPairs(ListNode* head) {\n        ListNode* dummy = new ListNode(-1);\n        dummy-&gt;next = head;\n        ListNode* cur = dummy;\n        while (cur-&gt;next &amp;&amp; cur-&gt;next-&gt;next) {\n            ListNode* p1 = cur-&gt;next;\n            ListNode* p2 = cur-&gt;next-&gt;next;\n            p1-&gt;next = p2-&gt;next;\n            cur-&gt;next = p2;\n            p2-&gt;next =  p1;\n            cur = p1;\n        }\n        return dummy-&gt;next;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/LeetCode/#25-k","title":"25. K \u4e2a\u4e00\u7ec4\u7ffb\u8f6c\u94fe\u8868","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* reverseKGroup(ListNode* head, int k) {\n        ListNode *dummy = new ListNode(-1, head);\n        dummy-&gt;next = head;\n        for (auto p = dummy; ;) {\n            auto q = p;\n            for (int i = 0; i &lt; k &amp;&amp; q; i++) q = q-&gt;next;\n            if (!q) break;\n            auto a = p-&gt;next, b = a-&gt;next;\n            for (int i = 0; i &lt; k - 1; i++) {\n                auto c = b-&gt;next;\n                b-&gt;next = a;\n                a = b, b = c;\n            }\n            auto c = p-&gt;next;\n            p-&gt;next = a;\n            c-&gt;next = b;\n            p = c; // \u6ce8\u610f\u7ffb\u8f6c\u4e86\u4e4b\u540e\uff0c\u524dk\u4e2a\u8282\u70b9\u4e2d\u7684\u7b2c\u4e00\u4e2a\u53d8\u6210\u4e86\u6700\u540e\u4e00\u4e2a\uff0c\u4e5f\u53d8\u6210\u4e86\u4e0b\u4e00\u4e2ak\u8282\u70b9\u7684\u524d\u4e00\u4e2a\u8282\u70b9\uff01\n        }\n        return dummy-&gt;next;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/LeetCode/#26","title":"26. \u5220\u9664\u6709\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879","text":"<p>\u6ce8\u610f\u9898\u76ee\u4e2d\u6307\u51fa\u4e86\u6570\u7ec4\u4e2d\u7ed3\u5c3e\u7684\u6570\u5e76\u4e0d\u91cd\u8981\uff01</p> <p>\u6240\u4ee5\u76f4\u63a5\u5c06\u540e\u9762\u7b26\u5408\u8981\u6c42\u7684\u6570\u5b57\u586b\u5728\u524d\u9762\u5c31\u53ef\u4ee5\u4e86\uff01\uff01\uff01</p> <pre><code>class Solution {\npublic:\n    int removeDuplicates(vector&lt;int&gt;&amp; nums) {\n        // \u7b2c\u4e00\u4e2a\u6307\u9488\u904d\u5386\u6240\u6709\u7684\u6570\n        // \u7b2c\u4e8c\u4e2a\u6307\u9488\u5b58\u4e0b\u6240\u6709\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u6570\n        int j = 0;\n        for (int i = 0; i &lt; nums.size(); i++) {\n            if (i == 0 || (nums[i] != nums[i - 1])){\n                nums[j++] = nums[i];\n            }\n        }\n        return j;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/LeetCode/#27","title":"27. \u79fb\u9664\u5143\u7d20","text":"<pre><code>class Solution {\npublic:\n    int removeElement(vector&lt;int&gt;&amp; nums, int val) {\n        int j = 0;\n        for (int i = 0; i &lt; nums.size(); i++) {\n            if (nums[i] != val) {\n                nums[j++] = nums[i];\n            }\n        }\n        return j;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/LeetCode/#28","title":"28. \u627e\u51fa\u5b57\u7b26\u4e32\u4e2d\u7b2c\u4e00\u4e2a\u5339\u914d\u9879\u7684\u4e0b\u6807","text":""},{"location":"Problem/lc/LeetCode/#kmp","title":"\u7eaf\u66b4\u529b\u505a\u6cd5\uff08\u7528\u6765\u7406\u89e3\u601d\u8def\u7684\u7ec3\u624b\uff0c\u6b63\u5f0f\u505a\u9898\u8bf7\u4f7f\u7528KMP\uff09","text":"<pre><code>class Solution {\npublic:\n    int strStr(string haystack, string needle) {\n        // \u7eaf\u66b4\u529b\u4e24\u91cd\u505a\u6cd5\n        for (int i = 0; i &lt; haystack.size(); i++) {\n            bool flag = true;\n            for (int j = 0; j &lt; needle.size(); j++) {\n                if (haystack[i + j] != needle[j]) {\n                    flag = false;\n                    break;\n                }\n            }\n            if (flag == true) return i;\n        } \n        return -1;\n    }\n};\n</code></pre> <p>\u5efa\u8bae\u753b\u56fe\uff01</p> <p>\u6ce8\u610fkmp\u7b97\u6cd5\u4e00\u70b9\u8981\u4ece1\u5f00\u59cb\u6bd4\u8f83\u8f7b\u677e\uff01\uff01</p> <p>ne[i]\u8868\u793a\u7684\u662f\u6240\u6709\u4ee51\u4e3a\u9996\u7684\u524d\u7f00\u548c\u4ee5i\u7ed3\u5c3e\u7684\u540e\u7f00\u4e2d\u76f8\u540c\u7684\u957f\u5ea6\u7684 \u6700\u5927\u503c</p>"},{"location":"Problem/lc/LeetCode/#kmp_1","title":"KMP\u505a\u6cd5","text":"<pre><code>class Solution {\npublic:\n    int strStr(string haystack, string needle) {\n        int n = haystack.size(), m = needle.size();\n        haystack = ' ' + haystack, needle = ' ' + needle;\n        vector&lt;int&gt; ne(m + 1);\n        for (int i = 2, j = 0; i &lt;= m; i++) {\n            while (j &amp;&amp; needle[i] != needle[j + 1]) j = ne[j];\n            if (needle[i] == needle[j + 1]) j++;\n            ne[i] = j; \n        }\n        for (int i = 1, j = 0; i &lt;= n; i++) {\n            while (j &amp;&amp; haystack[i] != needle[j + 1]) j = ne[j];\n            if (haystack[i] == needle[j + 1]) j++;\n            if (j == m) return i - m;\n        }\n        return -1;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/LeetCode/#_17","title":"\u4e8c\u8fdb\u5236\u500d\u589e\u3001\u5feb\u901f\u5e42\u7684\u601d\u60f3\uff01\uff01\uff01","text":"<p>2\u7684n\u6b21\u5e42</p> <p>\u4e00\u5b9a\u8981\u52a0long long \uff0c\u539f\u56e0\u662f\u5982\u679c\u662f-2^31 \u53d6\u7edd\u5bf9\u503c\u7684\u8bdd\u4f1a\u8d85\u8fc7\u6b63Int\u7684\u6700\u5927\u503c</p> <pre><code>class Solution {\npublic:\n    int divide(int dividend, int divisor) {\n        typedef long long LL;\n        LL res = 0;\n        vector&lt;LL&gt; exp;\n        bool is_minus = false;\n        if (dividend &lt; 0 &amp;&amp; divisor &gt; 0 || dividend &gt; 0 &amp;&amp; divisor &lt; 0) is_minus = true;\n        LL a = abs((LL)dividend), b = abs((LL)divisor);\n\n        for (LL i = b; i &lt;= a; i = i + i){\n            exp.push_back(i);\n        }\n\n        for (int i = exp.size() - 1; i &gt;= 0; i--) {\n            if (a &gt;= exp[i]) {\n                a -= exp[i];\n                res += 1ll &lt;&lt; i;\n                // cout &lt;&lt; \"a = \" &lt;&lt; a &lt;&lt; \"res = \" &lt;&lt; res &lt;&lt; endl;\n            }\n        }\n        if (is_minus) res = -res;\n        if (res &gt; INT_MAX) res = INT_MAX;\n\n        return res;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/LeetCode/#58","title":"58. \u6700\u540e\u4e00\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6","text":"<pre><code>class Solution {\npublic:\n    int lengthOfLastWord(string s) {\n        int i = s.size() - 1;\n        while(s[i] == ' ') {\n            i--;\n        }\n        int word = 0;\n        while (i &gt;= 0 &amp;&amp; s[i] != ' ') {\n            word ++;\n            i--;\n        }\n        return word;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/","title":"Leetcode hot 100","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#_1","title":"\u54c8\u5e0c","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#1","title":"1. \u4e24\u6570\u4e4b\u548c","text":"<pre><code>class Solution {\npublic:\n    vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) {\n        unordered_map&lt;int, int&gt; hash;\n        for (int i = 0; i &lt; nums.size(); i++) {\n            int aim = target - nums[i];\n            if (hash.find(aim) != hash.end()) {\n                return {hash[aim], i};\n            }2 1 5 3 6 4 8 9 7\n            else hash[nums[i]] = i;\n        }\n        return {};\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#49","title":"49. \u5b57\u6bcd\u5f02\u4f4d\u8bcd\u5206\u7ec4","text":"<pre><code>const int P = 131;\n\nclass Solution {\npublic:\n    vector&lt;vector&lt;string&gt;&gt; groupAnagrams(vector&lt;string&gt;&amp; strs) {\n        // \u5bf9\u6bcf\u4e2a\u5b57\u7b26\u4e32\u8fdb\u884csort\u540e\u54c8\u5e0c\n        unordered_map&lt;string, int&gt; hash;\n        vector&lt;vector&lt;string&gt;&gt; ans;\n        for (int i = 0; i &lt; strs.size(); i++) {\n            string temp = strs[i];\n            sort(temp.begin(), temp.end());\n            if (hash.find(temp) != hash.end()) {\n                ans[hash[temp]].push_back(strs[i]);\n            }\n            else {\n                ans.push_back({});\n                hash[temp] = ans.size() - 1;\n                ans[ans.size() - 1].push_back(strs[i]);\n            }\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#128","title":"128. \u6700\u957f\u8fde\u7eed\u5e8f\u5217","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#216","title":"2.16\u7b2c\u4e00\u6b21\u505a","text":"<pre><code>class Solution {\npublic:\n    int longestConsecutive(vector&lt;int&gt;&amp; nums) {\n        // \u5982\u679c\u9700\u8981\u5728O(n)\u7684\u65f6\u95f4\u5185\u89e3\u51b3\n        // \u90a3\u4e48\u5927\u6982\u7387\u53ea\u9700\u8981\u904d\u5386\u4e00\u904d\n        // \u7531\u4e8eunordered_set\u5185\u90e8\u57fa\u4e8e\u54c8\u5e0c\u8868\u5b9e\u73b0\uff0c\u67e5\u627e\u3001\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\u7684\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u5e38\u6570\u65f6\u95f4\uff08O(1)\uff09\n        int ans = 0;\n        unordered_set&lt;int&gt; hash;\n        for (auto i : nums) hash.insert(i);\n        for (auto x : nums) {\n            if (hash.count(x) &amp;&amp; !hash.count(x - 1)) {\n                int y = x;\n                hash.erase(x);\n                while (hash.count(y + 1)) {\n                    y++;\n                    hash.erase(y);\n                }\n                ans = max(y - x + 1, ans);\n            }\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#217","title":"2.17\u590d\u4e60","text":"<pre><code>class Solution {\npublic:\n    int longestConsecutive(vector&lt;int&gt;&amp; nums) {\n        // \u7531\u4e8e\u6211\u4eec\u60f3\u8981\u5f97\u5230\u7684\u662f\u8fde\u7eed\u7684\u6570\u5b57\u4e32\n        // \u90a3\u4e48\u5b9e\u9645\u4e0a\u6211\u4eec\u60f3\u8981\u5f97\u5230\u7684\u662f\u8fd9\u4e2a\u5b57\u7b26\u4e32\u7684\u6700\u5c0f\u503c\n        // \u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u904d\u5386\u4ece\u8fd9\u4e2a\u6700\u5c0f\u503c\u5f00\u59cb\u7684\u5b57\u7b26\u4e32\u5f97\u5230\u6700\u957f\u7684\u957f\u5ea6\n\n        // \u9700\u8981\u6ce8\u610f\u7684\u662f\u539f\u5b57\u7b26\u4e32\u4e2d\u53ef\u80fd\u662f\u6709\u91cd\u590d\u7684\u6570\u5b57\u7684\n        int res = 0;\n        unordered_set&lt;int&gt; hash;\n        if (nums.size() == 0) return 0;\n        for (auto i : nums) hash.insert(i);\n        for (auto i : nums) {\n            int temp = 0;\n            if (hash.count(i - 1)) {\n                continue;\n            }\n            else {\n                temp++;\n                int x = i;\n                while (hash.count(x + 1)) {\n                    temp++;\n                    x++;\n                }\n                res = max(temp, res);\n            }\n        }\n        return res;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#_2","title":"\u53cc\u6307\u9488","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#283-move-zeroes","title":"283. Move Zeroes","text":"<pre><code>class Solution {\npublic:\n    void moveZeroes(vector&lt;int&gt;&amp; nums) {\n        int j = 0;\n        for (int i = 0; i &lt; nums.size(); i++) {\n            if (nums[i] != 0) nums[j++] = nums[i];\n        }\n        for (; j &lt; nums.size(); j++) nums[j] = 0;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#217_1","title":"2.17\u7b2c\u4e00\u6b21\u505a","text":"<pre><code>class Solution {\npublic:\n    void moveZeroes(vector&lt;int&gt;&amp; nums) {\n        // \u8fd9\u662f\u4e00\u9053\u5178\u578b\u7684\u53cc\u6307\u9488\u9898\u76ee\n        int i = 0, j = 0;\n        for (; i &lt; nums.size(); i++) {\n            if (nums[i] == 0) {\n                continue;\n            }\n            nums[j++] = nums[i];\n        }\n        while (j &lt; nums.size()) {\n            nums[j++] = 0;\n        }\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#11-container-with-most-water","title":"11. Container With Most Water","text":"<pre><code>class Solution {\npublic:\n    int maxArea(vector&lt;int&gt;&amp; height) {\n        int res = 0;\n        int l = 0, r = height.size() - 1;\n        while (l &lt; r) {\n            int hl = height[l], hr = height[r];\n            res = max(res, (r - l) * min(hl, hr));\n            printf(\"r: %d; l: %d; res: %d\\n\", r, l, res);\n            if (height[l] &lt; height[r] &amp;&amp; l &lt; r) l++;\n            else if (height[l] &gt;= height[r] &amp;&amp; l &lt; r) r--;\n        }\n        return res;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#217_2","title":"2.17\u7b2c\u4e00\u6b21\u505a","text":"<pre><code>class Solution {\npublic:\n    int maxArea(vector&lt;int&gt;&amp; height) {\n        // \u7b2c\u4e00\u53cd\u5e94\u662f\u4e24\u5c42\u5faa\u73af\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u662f0(n^2)\n        // \u4f18\u5316\uff1a\u8fd9\u662f\u4e00\u4e2a\u5bb9\u5668\uff0c\u6240\u4ee5\u53ef\u4ee5\u662f\u7528\u53cc\u6307\u9488\u6307\u5411\u4ed6\u7684\u5de6\u53f3\u4e24\u8fb9\n        // \u800c\u6307\u9488\u5982\u679c\u9700\u8981\u5411\u4e2d\u95f4\u79fb\u52a8\u7684\u8bdd\uff0c\u5e76\u4e14\u8fd8\u60f3\u8981\u5bb9\u79ef\u53d8\u5927\uff0c\u90a3\u4e48\u79fb\u52a8\u4e4b\u540e\u7684height\u5fc5\u987b\u8981\u6bd4\u79fb\u52a8\u4e4b\u524d\u7684height\u9ad8\n\n        // \u6709\u5de6\u53f3\u4e24\u4e2a\u5bb9\u5668\u58c1\uff0c\u90a3\u4e48\u5e94\u8be5\u79fb\u52a8\u54ea\u4e00\u4e2a\u5462\uff1f\n        // \u79fb\u52a8\u8f83\u77ed\u7684\u90a3\u6839\uff0c\u624d\u6709\u53ef\u80fd\u63d0\u5347\u5bb9\u79ef\u7684\u5927\u5c0f\n        // \u8fd9\u6837\u5c31\u80fd\u628a\u6240\u6709\u7684\u60c5\u51b5\u4ee5O(n)\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u904d\u5386\u4e00\u904d\n        int res = 0;\n        int i = 0, j = height.size() - 1;\n        while (i &lt; j) {\n            int m = height[i], n = height[j];\n            res = max(res, min(m, n) * abs(j - i));\n            if (i &lt; j &amp;&amp; m &lt; n) i++;\n            else if (i &lt; j &amp;&amp; m &gt;= n) j--;\n        }\n        return res;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#15-3sum","title":"15. 3Sum","text":"<pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; threeSum(vector&lt;int&gt;&amp; nums) {\n        vector&lt;vector&lt;int&gt;&gt; ans;\n        sort(nums.begin(), nums.end());\n        for (int i = 0; i &lt; nums.size() - 2; i++) {\n            if (i &gt; 0 &amp;&amp; nums[i] == nums[i - 1]) continue;\n            int j = i + 1, k = nums.size() - 1;\n            for (; j &lt; nums.size() - 1 &amp;&amp; j &lt; k; j++) {\n                if (j &gt; i + 1 &amp;&amp; nums[j] == nums[j - 1]) continue;\n                int sum = nums[i] + nums[j];\n                while (nums[k] &gt; -sum &amp;&amp; k &gt; j + 1) k--;\n                if (nums[k] == -sum) ans.push_back({nums[i], nums[j], nums[k]});\n            }\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#15-3sum_1","title":"15. 3Sum","text":"<pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; threeSum(vector&lt;int&gt;&amp; nums) {\n        vector&lt;vector&lt;int&gt;&gt; ans;\n        sort(nums.begin(), nums.end());\n        int size = nums.size();\n        for (int i = 0; i &lt; size - 2; i++) {\n            if (i &gt; 0 &amp;&amp; nums[i - 1] == nums[i]) continue;\n            for (int j = i + 1, k = size - 1; j &lt; k; j++) {\n                if (j &gt; i + 1 &amp;&amp; nums[j] == nums[j - 1]) continue;\n                while (j &lt; k - 1 &amp;&amp; nums[i] + nums[j] + nums[k - 1] &gt;= 0) k--;\n                if (nums[i] + nums[j] + nums[k] == 0) {\n                    ans.push_back({nums[i], nums[j], nums[k]});\n                }\n            }\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#42-trapping-rain-water","title":"42. Trapping Rain Water","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#220","title":"2.20 \u524d\u540e\u7f00\u5206\u89e3","text":"<pre><code>class Solution {\npublic:\n    int trap(vector&lt;int&gt;&amp; height) {\n        int ans = 0;\n        int size = height.size();\n        vector&lt;int&gt; left(size);\n        vector&lt;int&gt; right(size);\n        left[0] = height[0];\n        right[size - 1] = height[size - 1];\n        for (int i = 1; i &lt; size; i++) {\n            left[i] = max(height[i], left[i - 1]);\n        }\n        for (int i = size - 2; i &gt;= 0; i--) {\n            right[i] = max(height[i], right[i + 1]);\n        }\n        for (int i = 0; i &lt; size; i++) {\n            ans += min(left[i], right[i]) - height[i];\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#220_1","title":"2.20 \u5355\u8c03\u6808","text":"<pre><code>class Solution {\npublic:\n    int trap(vector&lt;int&gt;&amp; height) {\n        // \u5c06\u63a5\u4f4f\u96e8\u6c34\u7684\u9762\u79ef\u6a2a\u7740\u770b\n        // \u7136\u540e\u4ece\u5de6\u5f80\u53f3\u904d\u5386\uff0c\u5bf9\u4e8e\u6bcf\u6839\u67f1\u5b50\u53f3\u8fb9\u80fd\u63a5\u4f4f\u6c34\u7684\u9762\u79ef\uff0c\u53d6\u51b3\u4e8e\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8e\u5b83\u7684x\u7684\u5dee\u503c\uff0c\u4ee5\u53ca\u5b83\u548c\u6bd4\u4ed6\u4f4e\u7684\u67f1\u5b50y\u7684\u5dee\u503c\n        // \u601d\u8def\uff1a\u5bf9\u4e8e\u6bcf\u6b21\u904d\u5386\u5230\u7684\u503c\uff0c\u8981\u548c\u4ed6\u5de6\u8fb9\u7b2c\u4e8c\u5c0f\u7684\u6570\u53bb\u6bd4\n        stack&lt;int&gt; st;\n        int ans = 0;\n        for (int i = 0; i &lt; height.size(); i++) {\n            while (!st.empty() &amp;&amp; height[i] &gt; height[st.top()]) {\n                int bottom = height[st.top()];\n                st.pop();\n                if (st.empty()) {\n                    break;\n                }\n                int left = st.top();\n                int dh = min(height[left], height[i]) - bottom;\n                ans += dh * (i - left - 1);\n            }\n            st.push(i);\n        }\n        return ans;\n\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#_3","title":"\u6ed1\u52a8\u7a97\u53e3","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#3-longest-substring-without-repeating-characters","title":"3. Longest Substring Without Repeating Characters","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#220_2","title":"2.20\u7b2c\u4e00\u6b21\u5c1d\u8bd5","text":"<pre><code>class Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n        if (s.size() == 0) return 0;\n        // vector&lt;int&gt; record(26);\n        unordered_map&lt;char, int&gt; hash;\n\n        int left = 0, right = 0;\n\n        int res = 1;\n        for (; left &lt;= right &amp;&amp; right &lt; s.size(); right++) {\n            hash[s[right]]++;\n            while (hash[s[right]] &gt; 1 &amp;&amp; left &lt; right) {\n                hash[s[left]]--;\n                left++;\n            }\n            cout &lt;&lt; right &lt;&lt; \" \" &lt;&lt; left &lt;&lt; endl;\n            res = max(res, right - left + 1);\n        }\n        return res;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#438-find-all-anagrams-in-a-string","title":"438. Find All Anagrams in a String","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#220_3","title":"2.20\u7b2c\u4e00\u6b21\u5c1d\u8bd5","text":"<pre><code>class Solution {\npublic:\n    vector&lt;int&gt; findAnagrams(string s, string p) {\n        vector&lt;int&gt; ans;\n        vector&lt;int&gt; record(26);\n        if (s.size() == 0 || p.size() == 0) return ans;\n        for (int i = 0; i &lt; p.size(); i++) {\n            record[p[i] - 'a']++;\n        }\n        int left = 0, right = 0;\n        for (; left &lt;= right &amp;&amp; right &lt; s.size(); right++) {\n            record[s[right] - 'a']--;\n            while (record[s[right] - 'a']  &lt; 0 &amp;&amp; left &lt;= right) {\n                record[s[left] - 'a']++;\n                left++;\n            }\n            if (right - left + 1 == p.size()) ans.push_back(left);\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#_4","title":"\u5b50\u4e32","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#560-subarray-sum-equals-k","title":"560. Subarray Sum Equals K","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#220_4","title":"2.20\u66b4\u529b\u505a\u6cd5\uff0c\u7b54\u6848\u6b63\u786e\u4f46\u662f\u65e0\u6cd5\u901a\u8fc7","text":"<pre><code>class Solution {\npublic:\n    int subarraySum(vector&lt;int&gt;&amp; nums, int k) {\n        // \u4e00\u5f00\u59cb\u7684\u60f3\u6cd5\u662f\u6ed1\u52a8\u7a97\u53e3\uff0c\u4f46\u662f\u53d1\u73b0nums\u4e2d\u53ef\u4ee5\u6709\u8d1f\u6570\uff0c\u90a3\u4e48\u5c31\u4e0d\u80fd\u4f7f\u7528\u6ed1\u52a8\u7a97\u53e3\u4e86\n        // \u662f\u5178\u578b\u7684\u524d\u7f00\u548c\u95ee\u9898\n        // \u9996\u5148\u4f7f\u7528\u66b4\u529b\u505a\u6cd5\uff0c\u6bcf\u4e2a\u5b57\u6bcd\u4f5c\u4e3a\u5f00\u5934\u8fdb\u884c\u904d\u5386\n        // \u8d85\u65f6\u4e86...\n        int res = 0;\n        for (int i = 0; i &lt; nums.size(); i++) {\n            int sum = 0;\n            for (int j = i; j &lt; nums.size(); j++) {\n                sum += nums[j];\n                if (sum == k) res++;\n            }\n        }\n        return res;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#220_5","title":"2.20\u7b2c\u4e00\u6b21\u505a\uff0c\u503c\u5f97\u91cd\u65b0\u505a","text":"<pre><code>class Solution {\npublic:\n    int subarraySum(vector&lt;int&gt;&amp; nums, int k) {\n        // \u5173\u952e\u5728\u4e8e\u4f7f\u7528\u524d\u7f00\u548c\uff0c\u5e76\u4e14\u60f3\u5230\u7528sum[i] - k\u5728\u54c8\u5e0c\u8868\u4e2d\u8fdb\u884c\u67e5\u627e\n        int res = 0;\n        int n = nums.size();\n        vector&lt;int&gt; sum(n + 1);\n        unordered_map&lt;int, int&gt; hash;\n        hash[0] = 1;\n        for (int i = 1; i &lt;= n; i++) {\n            sum[i] = sum[i - 1] + nums[i - 1];\n        }\n        for (int i = 1; i &lt;= n; i++) {\n            if (hash.count(sum[i] - k)) {\n                res += hash[sum[i] - k];\n            }\n            hash[sum[i]]++;\n        }\n        return res;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#239-sliding-window-maximum","title":"239. Sliding Window Maximum","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#220_6","title":"2.20\u7b2c\u4e00\u6b21\u505a\uff0c\u503c\u5f97\u91cd\u505a","text":"<pre><code>class Solution {\npublic:\n    vector&lt;int&gt; maxSlidingWindow(vector&lt;int&gt;&amp; nums, int k) {\n        // \u5206\u6790\u6ed1\u52a8\u7a97\u53e3\u7684\u601d\u8def\n        // \u6ed1\u52a8\u7a97\u53e3\u5206\u4e3a\u52a0\u5165\u65b0\u7684\uff0c\u7136\u540e\u5220\u9664\u65e7\u7684\n        // \u65b0\u7684\u52a0\u8fdb\u6765\u5982\u679c\u662f\u5c0f\u6570\uff0c\u90a3\u4e48\u5b83\u672a\u6765\u4ecd\u7136\u6709\u53ef\u80fd\u6210\u4e3a\u6700\u5927\u503c\n        // \u65b0\u52a0\u8fdb\u6765\u7684\u5982\u679c\u662f\u5927\u6570\uff0c\u90a3\u4e48\u65e2\u7136\u4ed6\u5df2\u7ecf\u5728k\u4e2a\u91cc\u9762\u4e86\uff0c\u90a3\u4e48\u5b83\u5de6\u4fa7\u7684\u6240\u6709\u6bd4\u4ed6\u5c0f\u7684\u6570\u5e94\u8be5\u5220\u9664\n        // \u6ed1\u52a8\u7a97\u53e3\u5410\u51fa\u7684\u5fc5\u987b\u662f\u4e00\u4e2a\u6700\u5927\u503c\n\n        // \u5728\u6211\u4eec\u7684\u961f\u5217\u91cc\u9762\u5fc5\u987b\u8981\u4fdd\u8bc1\u662f\u5355\u8c03\u9012\u51cf\u7684\n        vector&lt;int&gt; res;\n        deque&lt;int&gt; q;\n        for (int i = 0; i &lt; nums.size(); i++) {\n            // \u5148\u51fa\u961f\u5217\n            if (q.size() &amp;&amp; q.front() + k - 1 &lt; i) q.pop_front();\n            // \u7136\u540e\u8fdb\u961f\u5217\u524d\uff0c\u5c06\u5de6\u8fb9\u5c0f\u4e8e\u65b0\u7684\u6570\u7684\u6240\u6709\u6570\u90fd\u5220\u9664\n            while (q.size() &amp;&amp; nums[q.back()] &lt;= nums[i]) q.pop_back();\n            // \u52a0\u5165\u65b0\u7684\u6570\n            q.push_back(i);\n            // \u8bb0\u5f55\u6700\u5927\u503c\n            if (i &gt;= k - 1) res.push_back(nums[q.front()]);\n        }\n        return res;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#76-minimum-window-substring","title":"76. Minimum Window Substring","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#221","title":"2.21 \u7b2c\u4e00\u6b21\u5c1d\u8bd5\uff0c\u9ebb\u70e6\uff0c\u503c\u5f97\u505a\u7b2c\u4e8c\u6b21","text":"<pre><code>class Solution {\npublic:\n    string minWindow(string s, string t) {\n        unordered_map &lt;char, int&gt; hash;\n        for (char c : t) {\n            hash[c]++;\n        }\n        int total = hash.size();\n        int l = 0, r = INT_MAX;\n        for (int left = 0, right = 0; right &lt; s.size(); right++) {\n            if (--hash[s[right]] == 0) {\n                total--;\n            }\n            // // \u5f53\u524d\u7a97\u53e3\u5df2\u5305\u542b\u6240\u6709\u5b57\u7b26,\u627e\u51fa\u7b26\u5408\u6761\u4ef6\u7684\u6700\u5c0f\u503c\n            while (total == 0) {\n                if ((right - left) &lt; (r - l)) {\n                    r = right;\n                    l = left;\n                }\n                if (hash.count(s[left]) &amp;&amp; ++hash[s[left]] &gt; 0) {\n                    total++;  // \u7f29\u5c0f\u7a97\u53e3\u76f4\u5230\u4e0d\u518d\u6ee1\u8db3\u6761\u4ef6\n                }\n                left++;\n            }\n        }\n        if (r - l == INT_MAX) return \"\";\n        else return s.substr(l, r - l + 1);\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#_5","title":"\u539f\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    string minWindow(string s, string t) {\n        // \u9700\u8981\u4f7f\u7528total \u6765\u8bb0\u5f55\u8fd8\u9700\u8981\u5339\u914d\u7684\u5b57\u7b26\u79cd\u7c7b\u6570\n        // vector&lt;int&gt; c1(60), c2(60);\n        // \u540c\u6837\u7684\u5b57\u6bcd\u53ea\u8981c1\u4e2d\u7684\u6bd4c2\u4e2d\u7684\u5927\uff0c\u90a3\u4e48\u6307\u9488\u5c31\u53ef\u4ee5\u66f4\u65b0\n        // a-z\u5bf9\u5e940-25\uff0cA-Z\u5bf9\u5e9426-51\n        int m = s.size(), n = t.size();\n        vector&lt;int&gt; c1(60), c2(60);\n        int total = 0;\n        int min = INT_MAX;\n        string ans;\n        for (char ch : t) {\n            if (++c2[getId(ch)] == 1) {\n                total++;\n            }\n        }\n        for (int i = 0, j = 0; i &lt; m; i++) {\n            if (++c1[getId(s[i])] == c2[getId(s[i])]) {\n                total--;\n            }\n            while (j &lt; i) {\n                int idx2 = getId(s[j]);\n                if (c1[idx2] &gt; c2[idx2]) {\n                    --c1[idx2];\n                    j++;\n                }\n                else break;\n            }\n            if (total == 0 &amp;&amp; (ans.empty() || ans.length() &gt; i - j + 1)) ans = s.substr(j, i - j + 1);\n\n        }\n        return ans;\n\n    }\n    int getId(char ch) {\n        return ch &gt;= 'A' &amp;&amp; ch &lt;= 'Z' ? ch - 'A' + 26 : ch - 'a';\n    }\n\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#_6","title":"\u666e\u901a\u6570\u7ec4","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#53-maximum-subarray","title":"53. Maximum Subarray","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#221_1","title":"2.21\u7b2c\u4e00\u6b21\u505a\uff0c \u524d\u7f00\u548c\u505a\u6cd5","text":"<pre><code>class Solution {\npublic:\n    int maxSubArray(vector&lt;int&gt;&amp; nums) {\n        // \u5b50\u6570\u7ec4\u7684\u548c\u60f3\u5230\u4f7f\u7528\u524d\u7f00\u548c\u6765\u505a\n        int pre_sum = 0;\n        int ans = INT_MIN;\n        int min_pre_sum = 0;\n        for (int i = 0; i &lt; nums.size(); i++) {\n            pre_sum += nums[i];\n            ans = max(ans, pre_sum - min_pre_sum);\n            min_pre_sum = min(min_pre_sum, pre_sum);\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#221_2","title":"2.21\u7b2c\u4e00\u6b21\u505a\uff0c\u52a8\u6001\u89c4\u5212\u505a\u6cd5","text":"<pre><code>class Solution {\npublic:\n    int maxSubArray(vector&lt;int&gt;&amp; nums) {\n        // \u8fd9\u4e2a\u5b50\u4e32\u95ee\u9898\u5b9e\u9645\u4e0a\u4e5f\u662f\u9009\u6216\u8005\u4e0d\u9009\u7684\u95ee\u9898\uff0c\u9009nums[i - 1]\u7ed3\u5c3e\u7684\u6700\u5927\u7684\u503c\u6216\u8005\u90090\n        // dp[i]\u8868\u793a\u4ee5nums[i]\u7ed3\u5c3e\u7684\u6700\u5927\u7684\u503c\n        // dp[i] = max(dp[i - 1], 0) + nums[i]\n        // \u7531\u4e8e\u662f\u4e00\u7ef4dp\uff0c\u5982\u679c\u9009dp[i - 1]\u5c31\u662f\u8fde\u7eed\u7684\u5b50\u4e32\uff0c\u90090\u5c31\u662f\u4e0d\u8981\u524d\u9762\u7684\u5b50\u4e32\n        vector&lt;int&gt; dp(nums.size());\n        dp[0] = nums[0];\n        int res = dp[0];\n        for (int i = 1; i &lt; nums.size(); i++) {\n            dp[i] = max(dp[i - 1], 0) + nums[i];\n            if (dp[i] &gt; res) res = dp[i];\n        }\n        return res;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#221_3","title":"2.21\u7b2c\u4e00\u6b21\u505a\u4f7f\u7528\u4e86\u5206\u6cbb\u7684\u601d\u60f3+\u7ebf\u6bb5\u6811","text":"<pre><code>class Solution {\npublic:\n    struct Status {\n        int lSum, rSum, mSum, iSum;\n    };\n\n    Status pushUp(Status l, Status r) {\n        int iSum = l.iSum + r.iSum;\n        int lSum = max(l.lSum, l.iSum + r.lSum);\n        int rSum = max(r.rSum, r.iSum + l.rSum);\n        int mSum = max(max(l.mSum, r.mSum), l.rSum + r.lSum);\n        return (Status) {lSum, rSum, mSum, iSum};\n    }\n\n    Status get(vector&lt;int&gt; &amp;a, int l, int r) {\n        if (l == r) {\n            return (Status) {a[l], a[l], a[l], a[l]};\n        }\n        int m = (l + r) &gt;&gt; 1;\n        Status lSub = get(a, l, m);\n        Status rSub = get(a, m + 1, r);\n        return pushUp(lSub, rSub); \n    }\n    int maxSubArray(vector&lt;int&gt;&amp; nums) {\n        // \u4f7f\u7528\u5206\u6cbb\u505a\u6cd5\n        // lsum\u8868\u793a[l, r]\u5185\u4ee5l\u4e3a\u5de6\u7aef\u70b9\u7684\u6700\u5927\u5b50\u6bb5\u548c\n        // rsum\u8868\u793a[l, r]\u5185\u4ee5r\u4e3a\u53f3\u7aef\u70b9\u7684\u6700\u5927\u5b50\u6bb5\u548c\n        // msum\u8868\u793a[l, r]\u5185\u6700\u5927\u7684\u5b50\u6bb5\u548c\n        // isum\u8868\u793a[l, r]\u7684\u533a\u95f4\u548c\n\n        // ---------------------------------------------\n        // lsum\uff1a1. \u5de6\u5b50\u533a\u95f4\u7684lsum 2. \u5de6\u5b50\u533a\u95f4\u7684isum + \u53f3\u5b50\u533a\u95f4\u7684lsum\n        // rsum: 2. \u53f3\u5b50\u533a\u95f4\u7684rsum 2. \u53f3\u5b50\u533a\u95f4\u7684isum + \u5de6\u5b50\u533a\u95f4\u7684rsum\n        // isum: \u5de6\u5b50\u533a\u95f4\u7684isum+\u53f3\u5b50\u533a\u95f4\u7684isum\n        // msum\uff1a1. \u5de6\u5b50\u533a\u95f4\u7684msum 2. \u53f3\u5b50\u533a\u95f4\u7684msum 3. \u5de6\u5b50\u533a\u95f4\u7684rsum + \u53f3\u5b50\u533a\u95f4\u7684lsum\n        return get(nums, 0, nums.size() - 1).mSum;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#56-merge-intervals","title":"56. Merge Intervals","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#222-sortvectorintemptyvectorvectorint-back","title":"2.22 \u7b2c\u4e00\u6b21\u505a\uff0c\u6ce8\u610fsort\u7684\u7528\u6cd5\uff0c\u5e76\u4e14<code>vector&lt;int&gt;</code>\u7528empty(),<code>vector&lt;vector&lt;int&gt;&gt;</code> \u53ef\u4ee5\u7528.back()","text":"<pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; merge(vector&lt;vector&lt;int&gt;&gt;&amp; intervals) {\n        if (intervals.empty()) return {};\n        sort(intervals.begin(), intervals.end());\n        vector&lt;vector&lt;int&gt;&gt; ans;\n        for (auto&amp; i : intervals) {\n            if (ans.empty() || ans.back()[1] &lt; i[0]) {\n                ans.push_back(i);\n            }\n            else {\n                ans.back()[1] = max(ans.back()[1], i[1]);\n            }\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#89-rotate-array","title":"89. Rotate Array","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#222-reversevectorreverse","title":"2.22\u7b2c\u4e00\u6b21\u505a reverse\u65b9\u6cd5\uff0c\u6ce8\u610f\u5bf9vector\u5b9e\u9645\u4e0a\u662f\u53ef\u4ee5\u76f4\u63a5reverse\u7684","text":"<pre><code>class Solution {\npublic:\n    void reverse(vector&lt;int&gt;&amp; nums, int l, int r) {\n        int m = l, n = r;\n        while (m &lt; n) {\n            int temp = nums[m];\n            nums[m] = nums[n];\n            nums[n] = temp;\n            m++;\n            n--;\n        }\n    }\n    void rotate(vector&lt;int&gt;&amp; nums, int k) {\n        int n = nums.size();\n        k = k % n;\n        reverse(nums, 0, n - 1);        \n        reverse(nums, 0, k - 1);\n        reverse(nums, k, n - 1);\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#222","title":"2.22 \u7b2c\u4e00\u6b21\u505a\u9700\u8981\u989d\u5916\u7a7a\u95f4\u7684\u65b9\u6cd5\uff0c\u4e0d\u63a8\u8350","text":"<pre><code>class Solution {\npublic:\n    void rotate(vector&lt;int&gt;&amp; nums, int k) {\n        vector&lt;int&gt; ans(nums.size());\n        for (int i = 0; i &lt; nums.size(); i++) {\n            ans[(i + k) % nums.size()] = nums[i];\n        }\n        for (int i = 0; i &lt; nums.size(); i++) {\n            nums[i] = ans[i];\n        }\n\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#238-product-of-array-except-self","title":"238. Product of Array Except Self","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#224","title":"2.24 \u7b2c\u4e00\u6b21\u505a\uff0c\u4f7f\u7528\u524d\u540e\u7f00\u5206\u89e3\uff0c\u4e00\u5f00\u59cb\u6ca1\u6709\u60f3\u5230","text":"<pre><code>class Solution {\npublic:\n    vector&lt;int&gt; productExceptSelf(vector&lt;int&gt;&amp; nums) {\n        // \u4f7f\u7528\u524d\u540e\u7f00\u5206\u89e3\n        // \u9700\u8981\u60f3\u5230\u8fd9\u9053\u9898\u76ee\u5b9e\u9645\u4e0a\u5c31\u662f\u5de6\u8fb9\u7684\u4e58\u79ef\u4e58\u4e0a\u53f3\u8fb9\u7684\u4e58\u79ef\n        // \u90a3\u4e48\u5206\u522b\u4ece\u5de6\u5f80\u53f3\u548c\u4ece\u53f3\u5f80\u5de6\u7ef4\u62a4\u4e24\u4e2a\u4e58\u79ef\u6570\u7ec4\u5373\u53ef\n        int n = nums.size();\n        vector&lt;int&gt; left(n), right(n);\n        left[0] = nums[0];\n        right[n - 1] = nums[n - 1];\n        for (int i = 1; i &lt; n; i++) {\n            left[i] = left[i - 1] * nums[i];\n        }\n        for (int i = n - 2; i &gt;= 0; i--) {\n            right[i] = right[i + 1] * nums[i];\n        }\n        vector&lt;int&gt; ans(n);\n        ans[0] = right[1];\n        ans[n - 1] = left[n -2];\n        for (int i = 1; i &lt;= n - 2; i++) {\n            ans[i] = left[i - 1] * right[i + 1];\n        }\n        return ans;\n\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#222_1","title":"2.22 \u7b2c\u4e00\u6b21\u505a\uff0c\u4f18\u5316\u7a7a\u95f4\u590d\u6742\u5ea6","text":"<pre><code>class Solution {\npublic:\n    vector&lt;int&gt; productExceptSelf(vector&lt;int&gt;&amp; nums) {\n        // \u4e3a\u4ec0\u4e48\u8bf4\u53ef\u4ee5\u4f18\u5316\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a\u8fd4\u56de\u7684\u6570\u7ec4\u662f\u4e0d\u7b97\u5728\u7a7a\u95f4\u590d\u6742\u5ea6\u91cc\u9762\u7684\n        // \u6240\u4ee5\u9700\u8981\u5c06left\u548cright\u6570\u7ec4\u7ed9\u4f18\u5316\u6389\n        int n = nums.size();\n        vector&lt;int&gt; ans(n);\n        ans[0] = 1;\n        for (int i = 1; i &lt; n; i++) {\n            // \u7528ans\u6765\u4f5c\u4e3aleft\u6570\u7ec4\n            ans[i] = ans[i - 1] * nums[i - 1];\n        }\n        // \u7528\u4e00\u4e2a\u53d8\u91cf\u6765\u5730\u5e26\u5b58\u50a8right\u6570\u7ec4\n        int right = 1;\n        for (int i = n - 1; i &gt;= 0; i--) {\n            ans[i] = ans[i] * right;\n            right *= nums[i];\n        }\n        return ans;\n\n\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#41-first-missing-positive","title":"41. First Missing Positive","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#222_2","title":"2.22 \u7b2c\u4e00\u6b21\u505a\uff0c\u56f0\u96be\u9898\u7684\u96be\u70b9\u5728\u4e8e\u601d\u8003","text":"<pre><code>class Solution {\npublic:\n    int firstMissingPositive(vector&lt;int&gt;&amp; nums) {\n        // \u7b2c\u4e00\u53cd\u5e94\u662f\u5c06\u6240\u6709\u6570\u5168\u90e8\u63d2\u5165\u5230\u54c8\u5e0c\u8868\u4e2d\uff0c\u7136\u540e\u4ece\u5934\u8fdb\u884c\u67e5\u8be2\u5373\u53ef\n        // unordered_set&lt;int&gt; hash;\n        // for (auto n : nums) hash.insert(n);\n        // int res = 1;\n        // while (hash.find(res) != hash.end()) res++;\n        // return res;\n        // ---------------------------------------------------\n\n        // \u8fd9\u9053\u9898\u76ee\u4f7f\u7528O(1)\u7a7a\u95f4\u590d\u6742\u5ea6\u7684\u5173\u952e\u70b9\u5728\u4e8e\u53ea\u4f7f\u7528\u539f\u6570\u7ec4\u7684\u4f4d\u7f6e\n        // \u6700\u91cd\u8981\u7684\u662f\u770b\u51fa\u957f\u5ea6\u4e3an\u7684\u6570\u7ec4\u4e2d\u7f3a\u5931\u7684\u6700\u5c0f\u7684\u6b63\u6574\u6570\u5fc5\u7136\u57281-n+1\u4e4b\u95f4\n        // \u65e2\u7136\u5982\u6b64\uff0c\u6211\u4eec\u5c06nums[0]~nums[n - 1]\u5206\u522b\u5bf9\u5e941~n\u5373\u53ef\uff0c\u7136\u540e\u4ece\u5934\u904d\u5386\uff0c\u7b2c\u4e00\u4e2anums[i] != i + 1\u7684\u6570\u5c31\u662f\u7b54\u6848\n        int n = nums.size();\n        for (int i = 0; i &lt; n; i++) {\n            while (nums[i] &gt;= 1 &amp;&amp; nums[i] &lt; n &amp;&amp; nums[i] != i + 1 &amp;&amp; nums[i] != nums[nums[i] - 1]) {\n                swap(nums[i], nums[nums[i] - 1]);\n            }\n        }\n        for (int i = 0; i &lt; n; i++) {\n            if (nums[i] != i + 1) {\n                return i + 1;\n            }\n        }\n        return n + 1;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#_7","title":"\u77e9\u9635","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#73-set-matrix-zeroes","title":"73. Set Matrix Zeroes","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#223","title":"2.23\u7b2c\u4e00\u6b21\u505a \u771f\u65e0\u804a\u7684\u9898\u76ee","text":"<pre><code>class Solution {\npublic:\n    void setZeroes(vector&lt;vector&lt;int&gt;&gt;&amp; matrix) {\n        vector&lt;int&gt; row(matrix.size(), 1);\n        vector&lt;int&gt; col(matrix[0].size(), 1);\n        for (int i = 0; i &lt; matrix.size(); i++) {\n            for (int j = 0; j &lt; matrix[0].size(); j++) {\n                if (matrix[i][j] == 0) {\n                    row[i] = 0;\n                    col[j] = 0;\n                }\n\n            }\n        }\n        for (int i = 0; i &lt; matrix.size(); i++) {\n            for (int j = 0; j &lt; matrix[0].size(); j++) {\n                if (row[i] == 0 || col[j] == 0) matrix[i][j] = 0;\n            }\n        }\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#223-o1","title":"2.23 \u7b2c\u4e00\u6b21\u505a \u4f18\u5316\u4e86\u7a7a\u95f4\u5230O(1)","text":"<pre><code>class Solution {\npublic:\n    void setZeroes(vector&lt;vector&lt;int&gt;&gt;&amp; matrix) {\n        // \u4f18\u5316\u5230\u6bcf\u4e00\u884c\u6bcf\u4e00\u5217\u7684\u7b2c\u4e00\u4e2a\u6570\u5b57\u7528\u6765\u8bb0\u5f55\u8fd9\u884c\u662f\u5426\u9700\u8981\u88ab\u5237\u62100\n        // \u7531\u4e8e\u7b2c\u4e00\u884c\u548c\u7b2c\u4e00\u5217\u672c\u8eab\u53ef\u80fd\u6ca1\u67090\u5e76\u4e0d\u9700\u8981\u6574\u884c\u6574\u5217\u88ab\u5237\u62100\n        // \u6240\u4ee5\u9700\u8981\u989d\u5916\u7684\u4e24\u4e2abool\u53d8\u91cf\u6765\u8bb0\u5f55\u7b2c\u4e00\u884c\u548c\u7b2c\u4e00\u5217\u662f\u5426\u9700\u8981\u88ab\u5237\u62100\n        bool row0 = false, col0 = false;\n        int m = matrix.size(), n = matrix[0].size();\n        for (int i = 0; i &lt; n; i++) {\n            if (matrix[0][i] == 0) row0 = true;\n        }\n        for (int i = 0; i &lt; m; i++) {\n            if (matrix[i][0] == 0) col0 = true;\n        }\n\n        for (int i = 1; i &lt; m; i++) {\n            for (int j = 1; j &lt; n; j++) {\n                if (matrix[i][j] == 0) {\n                    matrix[0][j] = 0;\n                    matrix[i][0] = 0;\n                }\n            }\n        }\n        for (int i = 1; i &lt; m; i++) {\n            for (int j = 1; j &lt; n; j++) {\n                if (matrix[0][j] == 0 || matrix[i][0] == 0) {\n                    matrix[i][j] = 0;\n                }\n            }\n        }\n\n        if (row0) {\n            for (int i = 0; i &lt; n; i++) {\n                matrix[0][i] = 0;\n            }\n        }\n        if (col0) {\n            for (int i = 0; i &lt; m; i++) {\n                matrix[i][0] = 0;\n            }\n        }\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#54-spiral-matrix","title":"54. Spiral Matrix","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#223_1","title":"2.23 \u7b2c\u4e00\u6b21\u505a\uff0c\u6ce8\u610f\u5c06\u590d\u6742\u7684\u8868\u8fbe\u5f0f\u5148\u7528\u53d8\u91cf\u8bb0\u5f55\u4e0b\u6765","text":"<pre><code>class Solution {\npublic:\n    vector&lt;int&gt; spiralOrder(vector&lt;vector&lt;int&gt;&gt;&amp; matrix) {\n        vector&lt;int&gt; ans;\n        int dx[4] = {1, 0, -1, 0}, dy[4] = {0, 1, 0, -1};  // Direction vectors for right, down, left, up\n        int dimension = 0;  // To keep track of the current direction\n        int m = matrix.size(), n = matrix[0].size();  // Dimensions of the matrix\n        vector&lt;vector&lt;int&gt;&gt; visited(m, vector&lt;int&gt;(n, 0));  // To keep track of visited elements\n\n        for (int i = 0, x = 0, y = 0; i &lt; m * n; i++) {\n            ans.push_back(matrix[y][x]);  // Add the current element to the answer\n            visited[y][x] = 1;  // Mark the current element as visited\n\n            // Calculate the next position\n            int nx = x + dx[dimension];\n            int ny = y + dy[dimension];\n\n            // Check if the next position is within bounds and not visited\n            if (nx &gt;= 0 &amp;&amp; nx &lt; n &amp;&amp; ny &gt;= 0 &amp;&amp; ny &lt; m &amp;&amp; visited[ny][nx] == 0) {\n                x = nx;\n                y = ny;\n            } else {\n                // Change direction\n                dimension = (dimension + 1) % 4;\n                x += dx[dimension];\n                y += dy[dimension];\n            }\n        }\n\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#48-rotate-image","title":"48. Rotate Image","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#22390","title":"2.23\u7b2c\u4e00\u6b21\u505a\u9700\u8981\u60f3\u5230\u987a\u65f6\u948890\u5ea6\u65cb\u8f6c = \u5148\u6cbf\u7740\u5de6\u4e0a\u53f3\u4e0b\u5bf9\u79f0\u4e00\u6b21 + \u5de6\u53f3\u6cbf\u4e2d\u8f74\u7ebf\u5bf9\u79f0\u4e00\u6b21","text":"<pre><code>class Solution {\npublic:\n    void rotate(vector&lt;vector&lt;int&gt;&gt;&amp; matrix) {\n        // \u5982\u679c\u53ef\u4ee5allocate another 2D matrix\uff0c\u76f4\u63a5\u65b0\u5efa\u4e00\u4e2a\u626b\u63cf\u5373\u53ef\n        // \u987a\u65f6\u948890\u5ea6\u65cb\u8f6c = \u5148\u6cbf\u7740\u5de6\u4e0a\u53f3\u4e0b\u5bf9\u79f0\u4e00\u6b21 + \u5de6\u53f3\u6cbf\u4e2d\u8f74\u7ebf\u5bf9\u79f0\u4e00\u6b21\n        int n = matrix.size();\n        for (int i = 0; i &lt; n; i++) {\n            for (int j = i + 1; j &lt; n; j++) {\n                swap(matrix[i][j], matrix[j][i]);\n            }\n        }\n        for (int i = 0; i &lt; n; i++) {\n            for (int j = 0; j &lt; n / 2; j++) {\n                swap(matrix[i][j], matrix[i][n - j - 1]);\n            }\n        }\n\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#240-search-a-2d-matrix-ii","title":"240. Search a 2D Matrix II","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#223-z","title":"2.23 \u7b2c\u4e00\u6b21\u505a,Z\u5b57\u641c\u7d22","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#_8","title":"\u94fe\u8868","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#160-intersection-of-two-linked-lists","title":"160. Intersection of Two Linked Lists","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#224_1","title":"2.24\u7b2c\u4e00\u6b21\u505a\uff0c\u4f46\u662f\u5e94\u8be5\u4e0d\u662f\u9898\u610f\u7684\u610f\u601d","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {\n        // \u5047\u8bbe\u6709\u4ea4\u96c6\uff0c\u90a3\u4e48\u540e\u534a\u6bb5\u4e00\u5b9a\u662f\u4e00\u6837\u7684\n        // \u7b2c\u4e00\u6b21\u5c06\u957f\u5ea6\u8dd1\u51fa\u6765m, n\n        // \u7136\u540e\u8ba9\u957f\u7684\u5148\u8d70(m - n)\u4e2a\uff0c\u7136\u540e\u518d\u4e00\u8d77\u5f80\u524d\u8d70\u5373\u53ef\n        ListNode *a = headA, *b = headB;\n        int ca = 1, cb = 1;\n        while (a != NULL &amp;&amp; a-&gt;next != NULL) {\n            ca++;\n            a = a-&gt;next;\n        }\n        while (b != NULL &amp;&amp; b-&gt;next != NULL) {\n            cb++;\n            b = b-&gt;next;\n        }\n        if (cb &gt; ca) {\n            ListNode *temp = headA;\n            headA = headB;\n            headB = temp;\n        }\n        int count = abs(ca - cb);\n        a = headA, b = headB;\n        while (count) {\n            a = a-&gt;next;\n            count--;\n        }\n        while (a != b) {\n            a = a-&gt;next;\n            b = b-&gt;next;\n        }\n        return a;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#224_2","title":"2.24\u7b2c\u4e00\u6b21\u505a\uff0c\u54c8\u5e0c\u8868\u65b9\u6cd5\u4e0d\u591f\u7b80\u6d01","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {\n        // \u54c8\u5e0c\u8868\n        unordered_set&lt;ListNode *&gt; visited;\n        ListNode *temp = headA;\n        while (temp != NULL) {\n            visited.insert(temp);\n            temp = temp-&gt;next;\n        }\n        temp = headB;\n        while (temp != NULL) {\n            if (visited.count(temp)) {\n                return temp;\n            }\n            temp = temp-&gt;next;\n        }\n        return nullptr;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#224m-n","title":"2.24\u7b2c\u4e00\u6b21\u505a\uff0c\u53cc\u6307\u9488\u6cd5+\u4e24\u4e2a\u6307\u9488\u540c\u65f6\u8d70\u8fc7m + n\u7684\u957f\u5ea6\u601d\u8def","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {\n        // \u65e2\u7136\u4e24\u4e2a\u5934\u8d70\u8fc7\u7684\u8def\u5206\u522b\u662fm\u548cn\uff0c\u6240\u4ee5\u4f1a\u4e0d\u76f8\u4ea4\n        // \u90a3\u4e48\u8ba9\u4e24\u4e2a\u5934\u90fd\u8d70\u8fc7m + n\uff0c\u90a3\u4ed6\u4eec\u5728\u540e\u534a\u6bb5\u5fc5\u7136\u76f8\u4ea4\n\n        // \u8fd9\u4e2a\u65b9\u6cd5\u5b9e\u9645\u4e0a\u662f\u53cc\u6307\u9488\n        if (headA == nullptr &amp;&amp; headB == nullptr) return nullptr;\n        ListNode *pa = headA, *pb = headB;\n        while (pa != pb) {\n            pa = pa == nullptr ? headB : pa-&gt;next;\n            pb = pb == nullptr ? headA : pb-&gt;next;\n        }\n        return pa;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#206-reverse-linked-list","title":"206. Reverse Linked List","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#224_3","title":"2.24\u7b2c\u4e00\u6b21\u505a\uff0c\u5f88\u5e38\u89c4\u5f88\u7b80\u5355","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        // 1-&gt;2-&gt;3\n        if (head == nullptr) return head;\n        ListNode *tmp = head, *prev = nullptr;\n        while (tmp != nullptr) {\n            ListNode *next = tmp-&gt;next;\n            tmp-&gt;next = prev;\n            prev = tmp;\n            tmp = next;\n        }\n        head = prev;\n        return head;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#_9","title":"\u539f\u7b54\u6848","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        ListNode* prev = NULL;\n        ListNode* curr = head;\n        while (curr != nullptr) {\n            ListNode* tmp = curr-&gt;next;\n            curr-&gt;next = prev;\n            prev = curr;\n            curr = tmp;\n        }\n        return prev;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#234-palindrome-linked-list","title":"234. Palindrome Linked List","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#224_4","title":"2.24\u7b2c\u4e00\u6b21\u505a\uff0c\u9012\u5f52\u662f\u6700\u597d\u7684\u65b9\u6cd5\uff0c\u503c\u5f97\u591a\u6b21\u505a","text":"<p>\u5982\u679c\u4f7f\u7528\u9012\u5f52\u53cd\u5411\u8fed\u4ee3\u8282\u70b9\uff0c\u540c\u65f6\u4f7f\u7528\u9012\u5f52\u51fd\u6570\u5916\u7684\u53d8\u91cf\u5411\u524d\u8fed\u4ee3\uff0c\u5c31\u53ef\u4ee5\u5224\u65ad\u94fe\u8868\u662f\u5426\u4e3a\u56de\u6587\u3002</p> <pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\n    ListNode *frontPointer;\npublic:\n    bool recursivelyCheck(ListNode* curr) {\n        if (curr != nullptr) {\n            if (!recursivelyCheck(curr-&gt;next)) {\n                return false;\n            }\n            if (curr-&gt;val != frontPointer-&gt;val) {\n                return false;\n            }\n            frontPointer = frontPointer-&gt;next;\n        }\n        return true;\n    }\n    bool isPalindrome(ListNode* head) {\n        frontPointer = head;\n        return recursivelyCheck(head);\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#224_5","title":"2.24 \u7b2c\u4e00\u6b21\u505a\uff0c\u5feb\u6162\u6307\u9488\u8fd8\u884c","text":"<pre><code>class Solution {\npublic:\n    bool isPalindrome(ListNode* head) {\n        if (head == nullptr) {\n            return true;\n        }\n\n        // \u627e\u5230\u524d\u534a\u90e8\u5206\u94fe\u8868\u7684\u5c3e\u8282\u70b9\u5e76\u53cd\u8f6c\u540e\u534a\u90e8\u5206\u94fe\u8868\n        ListNode* firstHalfEnd = endOfFirstHalf(head);\n        ListNode* secondHalfStart = reverseList(firstHalfEnd-&gt;next);\n\n        // \u5224\u65ad\u662f\u5426\u56de\u6587\n        ListNode* p1 = head;\n        ListNode* p2 = secondHalfStart;\n        bool result = true;\n        while (result &amp;&amp; p2 != nullptr) {\n            if (p1-&gt;val != p2-&gt;val) {\n                result = false;\n            }\n            p1 = p1-&gt;next;\n            p2 = p2-&gt;next;\n        }        \n\n        // \u8fd8\u539f\u94fe\u8868\u5e76\u8fd4\u56de\u7ed3\u679c\n        firstHalfEnd-&gt;next = reverseList(secondHalfStart);\n        return result;\n    }\n\n    ListNode* reverseList(ListNode* head) {\n        ListNode* prev = nullptr;\n        ListNode* curr = head;\n        while (curr != nullptr) {\n            ListNode* nextTemp = curr-&gt;next;\n            curr-&gt;next = prev;\n            prev = curr;\n            curr = nextTemp;\n        }\n        return prev;\n    }\n\n    ListNode* endOfFirstHalf(ListNode* head) {\n        ListNode* fast = head;\n        ListNode* slow = head;\n        while (fast-&gt;next != nullptr &amp;&amp; fast-&gt;next-&gt;next != nullptr) {\n            fast = fast-&gt;next-&gt;next;\n            slow = slow-&gt;next;\n        }\n        return slow;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#224_6","title":"2.24\u7b2c\u4e00\u6b21\u505a\uff0c\u5efa\u4e00\u4e2a\u6570\u7ec4\u5f97\u65b9\u6cd5\uff0c\u4e0d\u63a8\u8350","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    bool isPalindrome(ListNode* head) {\n        vector&lt;int&gt; val;\n        ListNode* tmp = head;\n        while (tmp != nullptr) {\n            val.push_back(tmp-&gt;val);\n            tmp = tmp-&gt;next;\n        }\n        for (int i = 0, j = val.size() - 1; i &lt; j; i++, j--) {\n            if (val[i] != val[j]) return false;\n        }\n        return true;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#141-linked-list-cycle","title":"141. Linked List Cycle","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    bool hasCycle(ListNode *head) {\n        if (head == nullptr) return false;\n        ListNode *fast = head, *slow = head;\n        while (fast-&gt;next != nullptr &amp;&amp; fast-&gt;next-&gt;next != nullptr) {\n            fast = fast-&gt;next-&gt;next;\n            slow = slow-&gt;next;\n            if (fast == slow) return true;\n        }\n        return false;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#_10","title":"\u539f\u7b54\u6848","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    bool hasCycle(ListNode *head) {\n        ListNode *fast = head;\n        ListNode *slow = head;\n        // \u4f7f\u7528\u5feb\u6162\u6307\u9488\u7684\u65f6\u5019\uff0c\u5982\u679cfast+2,slow+1\uff0c\u90a3\u4e48\u5b9e\u9645\u4e0a\u6bcf\u6b21\u8ffd\u53ca\u7684\u8ddd\u79bb\u5c31\u662f1\uff0c\u4e0d\u7528\u62c5\u5fc3fast\u4f1a\u8d85\u8fc7slow\n        while (fast != NULL &amp;&amp; fast-&gt;next != NULL) {\n            fast = fast-&gt;next-&gt;next;\n            slow = slow-&gt;next;\n            if (fast == slow) return true; // \u8981\u5728\u6bcf\u6b21\u79fb\u52a8\u6307\u9488\u540e\u6bd4\u8f83\u662f\u5426\u8ffd\u53ca\u6210\u529f\n        }\n        return false;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#142-linked-list-cycle-ii","title":"142. Linked List Cycle II","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#224_7","title":"2.24\u7b2c\u4e00\u6b21\u505a\uff0c\u5df2\u7ecf\u597d\u591a\u6b21\u4e86\u4e0d\u96be\uff0c\u4e3b\u8981\u662f\u5206\u6790","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#_11","title":"\u539f\u7b54\u6848","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode *detectCycle(ListNode *head) {\n        // \u5982\u679c\u53ea\u6709\u4e00\u4e2a\u73af\uff0c\u90a3\u4e48\u5feb\u6307\u9488\u662f\u6162\u6307\u9488\u4e24\u500d\u7684\u8bdd\uff0c\u4f1a\u76f8\u9047\u5728\u6700\u521d\u7684\u8d77\u70b9\n        // \u800c\u6709\u4e86\u975e\u73af\u7684\u90e8\u5206\uff0c\u4f1a\u76f8\u9047\u5728\u6162\u6307\u9488\u8fd8\u6ca1\u8d70\u5b8c\u4e00\u5708\u7684\u65f6\u5019\n        // \u5feb\u6307\u9488\u8d70\u8fc7\u7684\u8def= a + n(b + c) +b\n        // \u6162\u6307\u9488\u8d70\u8fc7\u7684\u8def= a + b\n        // 2a + 2b = a + (n + 1) b + nc\n        // a = (n - 1)b + (n - 1)c + c\n        // \u5982\u679chead\u548c\u6162\u6307\u9488\u540c\u65f6\u8d70a\u7684\u8def\uff0c\u90a3\u4e48head\u4f1a\u5230\u5165\u73af\u70b9\uff0c\u800c\u6162\u6307\u9488\u4f1a\u5728\u8f6c\u4e86(k - 1)\u5708\u4e4b\u540e\u5230\u5165\u73af\u70b9\n        ListNode *fast = head, *slow = head;\n        while (true) {\n            if (fast == nullptr || fast-&gt;next == nullptr) return nullptr;\n            fast = fast-&gt;next-&gt;next;\n            slow = slow-&gt;next;\n            if (fast == slow) break;\n        }\n        ListNode *curr = head;\n        while (curr != fast) {\n            fast = fast-&gt;next;\n            curr = curr-&gt;next;\n        }\n        return curr;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#21-merge-two-sorted-lists","title":"21. Merge Two Sorted Lists","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#224_8","title":"2.24\u7b2c\u4e00\u6b21\u505a\uff0c\u9012\u5f52\uff0c\u6700\u597d\u7684\u505a\u6cd5\uff0c\u6700\u7cbe\u5999\u7684\u505a\u6cd5","text":"<p>\u94fe\u8868\u95ee\u9898\u4e0d\u8981\u5fd8\u8bb0\u9012\u5f52</p> <pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\n        if (list1 == nullptr) return list2;\n        if (list2 == nullptr) return list1;\n        if (list1-&gt;val &lt;= list2-&gt;val) {\n            list1-&gt;next = mergeTwoLists(list1-&gt;next, list2);\n            return list1;\n        }\n        list2-&gt;next = mergeTwoLists(list1, list2-&gt;next);\n        return list2;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#224_9","title":"2.24\u7b2c\u4e00\u6b21\u505a\u8fed\u4ee3\uff0c\u8fed\u4ee3\u5e76\u4e0d\u662f\u8fd9\u9053\u9898\u6700\u7cbe\u5999\u7684\u601d\u8003\u65b9\u5f0f","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\n        ListNode* dummy = new ListNode(-1);\n        ListNode* curr = dummy;\n        while (list1 != nullptr &amp;&amp; list2 != nullptr) {\n            if (list1-&gt;val &lt; list2-&gt;val) {\n                curr-&gt;next = list1;\n                list1 = list1-&gt;next;\n                curr = curr-&gt;next;\n            }\n            else {\n                curr-&gt;next = list2;\n                list2 = list2-&gt;next;\n                curr = curr-&gt;next;\n            }\n        }\n        if (list1 != nullptr) curr-&gt;next = list1;\n        if (list2 != nullptr) curr-&gt;next = list2;\n        return dummy-&gt;next;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#2-add-two-numbers","title":"2. Add Two Numbers","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#224_10","title":"2.24\u7b2c\u4e00\u6b21\u505a\u4f1a\u505a","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n        ListNode *dummy = new ListNode(-1), *curr = dummy;\n        int add = 0;\n        while (l1 || l2 || add) {\n            int sum = add;\n            if (l1) sum += l1-&gt;val;\n            if (l2) sum += l2-&gt;val;\n            curr-&gt;next = new ListNode(sum % 10, nullptr);\n            add = sum / 10;\n            curr = curr-&gt;next;\n            if (l1) l1 = l1-&gt;next;\n            if (l2) l2 = l2-&gt;next;\n        }\n        return dummy-&gt;next;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#_12","title":"\u539f\u7b54\u6848","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n        // \u51e1\u662f\u9700\u8981\u7279\u5224\u7b2c\u4e00\u4e2a\u70b9\u7684\u5730\u65b9\uff0c\u90fd\u53ef\u4ee5\u52a0\u5165\u4e00\u4e2a\u865a\u62df\u5934\u8282\u70b9\n        ListNode* dummy = new ListNode(-1);\n        ListNode* cur = dummy;\n        int carry = 0;\n        while (l1 || l2 || carry) {\n            if (l1) carry += l1-&gt;val, l1 = l1-&gt;next;\n            if (l2) carry += l2-&gt; val, l2 = l2-&gt;next;\n            cur = cur-&gt;next = new ListNode(carry % 10);\n            carry /= 10;\n        }\n        return dummy-&gt;next;\n\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#19-remove-nth-node-from-end-of-list","title":"19. Remove Nth Node From End of List","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#225","title":"2.25\u7b2c\u4e00\u6b21\u505a\uff0c\u5f88\u7b80\u5355","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* removeNthFromEnd(ListNode* head, int n) {\n        // \u65e2\u7136\u8981\u53bb\u6389\u5c3e\u90e8\u7684\u7b2cn\u4e2a\uff0c\u90a3\u4e48\u53ef\u4ee5\u4f7f\u7528\u53cc\u6307\u9488\n        // \u8ba9\u5feb\u6307\u9488\u5148\u8fd0\u884cn\u6b65\n        if (!head) return head;\n        ListNode *dummy = new ListNode(-1, head);\n        ListNode *fast = dummy, *slow = dummy;\n        for (int i = 0; i &lt; n; i++) {\n            fast = fast-&gt;next;\n        }\n        while (fast &amp;&amp; fast-&gt;next) {\n            fast = fast-&gt;next;\n            slow = slow-&gt;next;\n        }\n        slow-&gt;next = slow-&gt;next-&gt;next;\n        return dummy-&gt;next;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#_13","title":"\u539f\u7b54\u6848","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* removeNthFromEnd(ListNode* head, int n) {\n        ListNode* dummy = new ListNode(-1, head);\n        ListNode *right = dummy, *left = dummy;\n        for (int i = 0; i &lt; n; i++) {\n            right = right-&gt;next;\n        }\n        while (right-&gt;next != nullptr) {\n            right = right-&gt;next;\n            left = left-&gt;next;\n        }\n        left-&gt;next = left-&gt;next-&gt;next;\n        return dummy-&gt;next;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#24-swap-nodes-in-pairs","title":"24. Swap Nodes in Pairs","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#225listnodelistnode","title":"2.25\u7b2c\u4e00\u6b21\u5c1d\u8bd5\uff0c\u7528\u4e86\u4e09\u4e2aListNode\u66b4\u529b\u89e3\u4e86\uff0c\u53ef\u4ee5\u6709\u4e00\u4e2aListNode\u7684\u65b9\u6cd5","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* swapPairs(ListNode* head) {\n        if (!head) return head;\n        ListNode *dummy = new ListNode(-1, head);\n        ListNode *curr = dummy;\n        while (curr &amp;&amp; curr-&gt;next &amp;&amp; curr-&gt;next-&gt;next) {\n            ListNode *first = curr-&gt;next;\n            ListNode *second = curr-&gt;next-&gt;next;\n            ListNode *third = curr-&gt;next-&gt;next-&gt;next;\n            curr-&gt;next = second;\n            second-&gt;next = first;\n            first-&gt;next = third;\n            curr = curr-&gt;next-&gt;next;\n        }\n        return dummy-&gt;next;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#225listnode","title":"2.25\u7b2c\u4e00\u6b21\u505a\uff0c\u53ea\u7528\u4e00\u4e2a\u989d\u5916ListNode \u7684\u65b9\u6cd5","text":"<p>\u601d\u8003\u65b9\u6cd5\uff1a\u80fd\u548c\u7b2c\u4e00\u4e2anode\u4ee5\u53ca\u540e\u9762\u8fde\u4e0a\u7684node\u90fd\u53ef\u4ee5\u4ea7\u751f\u76f4\u63a5\u8054\u7cfb\u7684\u662f\u7b2c\u4e8c\u4e2anode</p> <pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* swapPairs(ListNode* head) {\n        if (!head) return head;\n        ListNode *dummy = new ListNode(-1, head);\n        ListNode *curr = dummy;\n        while (curr &amp;&amp; curr-&gt;next &amp;&amp; curr-&gt;next-&gt;next) {\n            ListNode *tmp = curr-&gt;next-&gt;next;\n            curr-&gt;next-&gt;next = tmp-&gt;next;\n            tmp-&gt;next = curr-&gt;next;\n            curr-&gt;next = tmp;\n            curr = curr-&gt;next-&gt;next;\n        }\n        return dummy-&gt;next;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#_14","title":"\u539f\u7b54\u6848","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* swapPairs(ListNode* head) {\n        ListNode* dummy = new ListNode(-1, head);\n        ListNode* curr = dummy;\n        while (curr &amp;&amp; curr-&gt;next &amp;&amp; curr-&gt;next-&gt;next) {\n            ListNode* tmp = curr-&gt;next-&gt;next;\n            curr-&gt;next-&gt;next = tmp-&gt;next;\n            tmp-&gt;next = curr-&gt;next;\n            curr-&gt;next = tmp;\n            curr = curr-&gt;next-&gt;next;\n        }\n        return dummy-&gt;next;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#25-reverse-nodes-in-k-group","title":"25. Reverse Nodes in k-Group","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#225_1","title":"2.25\u7b2c\u4e00\u6b21\u505a\uff0c\u7eaf\u66b4\u529b\u505a\u6cd5\uff0c\u548c\u539f\u7b54\u6848\u51e0\u4e4e\u4e00\u4e2a\u610f\u601d","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* reverseKGroup(ListNode* head, int k) {\n        ListNode *dummy = new ListNode(-1, head);\n        ListNode *curr = dummy;\n        while (curr) {\n            ListNode *tmp = curr;\n            for (int i = 0; i &lt; k; i++) {\n                tmp = tmp-&gt;next;\n                if (!tmp) return dummy-&gt;next;\n            }\n\n            ListNode *left = curr-&gt;next, *right = curr-&gt;next-&gt;next;\n            for (int i = 0; i &lt; k - 1; i++) {\n                ListNode *third = right-&gt;next;\n                right-&gt;next = left;\n                left = right;\n                right = third;\n            }\n            curr-&gt;next-&gt;next = right;\n            curr-&gt;next = left;\n\n\n\n            for (int i = 0; i &lt; k; i++) {\n                curr = curr-&gt;next;\n            }\n        }\n        return dummy-&gt;next;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#_15","title":"\u539f\u7b54\u6848","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* reverseKGroup(ListNode* head, int k) {\n        ListNode *dummy = new ListNode(-1, head);\n        dummy-&gt;next = head;\n        for (auto p = dummy; ;) {\n            auto q = p;\n            for (int i = 0; i &lt; k &amp;&amp; q; i++) q = q-&gt;next;\n            if (!q) break;\n            auto a = p-&gt;next, b = a-&gt;next;\n            for (int i = 0; i &lt; k - 1; i++) {\n                auto c = b-&gt;next;\n                b-&gt;next = a;\n                a = b, b = c;\n            }\n            auto c = p-&gt;next;\n            p-&gt;next = a;\n            c-&gt;next = b;\n            p = c; // \u6ce8\u610f\u7ffb\u8f6c\u4e86\u4e4b\u540e\uff0c\u524dk\u4e2a\u8282\u70b9\u4e2d\u7684\u7b2c\u4e00\u4e2a\u53d8\u6210\u4e86\u6700\u540e\u4e00\u4e2a\uff0c\u4e5f\u53d8\u6210\u4e86\u4e0b\u4e00\u4e2ak\u8282\u70b9\u7684\u524d\u4e00\u4e2a\u8282\u70b9\uff01\n        }\n        return dummy-&gt;next;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#138-copy-list-with-random-pointer","title":"138. Copy List with Random Pointer","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#226","title":"2.26\u7b2c\u4e00\u6b21\u505a\uff0c\u56de\u6eaf+\u54c8\u5e0c\u8868","text":"<pre><code>/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    Node* next;\n    Node* random;\n\n    Node(int _val) {\n        val = _val;\n        next = NULL;\n        random = NULL;\n    }\n};\n*/\n\nclass Solution {\n    // \u4f7f\u7528\u56de\u6eaf+\u54c8\u5e0c\u8868\npublic:\n    unordered_map&lt;Node*, Node*&gt; cacheNode;\n    Node* copyRandomList(Node* head) {\n        if (head == NULL) return NULL;\n        else if (cacheNode.count(head)) {\n            return cacheNode[head];\n        }\n        else {\n            Node* newNode = new Node(head-&gt;val);\n            cacheNode[head] = newNode;\n            newNode-&gt;next = copyRandomList(head-a&gt;next);\n            newNode-&gt;random = copyRandomList(head-&gt;random);\n            return newNode;\n        }\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#226_1","title":"2.26 \u7b2c\u4e00\u6b21\u505a\u7eaf\u66b4\u529b\uff0c\u8fc7\u4e8e\u4e11\u964b\u4e86","text":"<pre><code>/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    Node* next;\n    Node* random;\n\n    Node(int _val) {\n        val = _val;\n        next = NULL;\n        random = NULL;\n    }\n};\n*/\n\nclass Solution {\npublic:\n    Node* copyRandomList(Node* head) {\n        unordered_map&lt;Node*, int&gt; hash;\n        vector&lt;Node*&gt; nodeList;\n        Node* dummy = new Node(-1);\n        Node* curr = head;\n        Node* currCopy = dummy;\n        int i = 0;\n        while (curr) {\n            Node* tmp = new Node(curr-&gt;val);\n            hash[curr] = i;\n            nodeList.push_back(tmp);\n            currCopy-&gt;next = tmp;\n            currCopy = currCopy-&gt;next;\n            curr = curr-&gt;next;\n            i++;\n        }\n\n        currCopy-&gt;next = NULL;\n        currCopy = dummy-&gt;next;\n        curr = head;\n        while (curr) {;\n            if (curr-&gt;random == NULL) {\n                currCopy-&gt;random = NULL;\n            }\n            else {\n                int i = hash[curr-&gt;random];\n                currCopy-&gt;random = nodeList[i];\n            }\n            curr = curr-&gt;next;\n            currCopy = currCopy-&gt;next;\n        }\n        return dummy-&gt;next;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#148","title":"148. \u6392\u5e8f\u94fe\u8868","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#33","title":"3.3\u7b2c\u4e00\u6b21\u505a,\u975e\u5e38\u597d\u4e5f\u975e\u5e38\u96be\u7684\u9898\u76ee\uff0c\u53ef\u4ee5\u591a\u6b21\u505a","text":"<p>\u53ea\u80fd\u4f7f\u7528\u5f52\u5e76\u6392\u5e8f\u81ea\u5e95\u5411\u4e0a\u505a</p> <pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* sortList(ListNode* head) {\n        int n = 0;\n        for (auto p = head; p; p = p-&gt;next) n++;\n        auto dummy = new ListNode(-1);\n        dummy-&gt;next = head;\n\n        for (int i = 1; i &lt; n; i *= 2) {\n            auto curr = dummy;\n            for (int j = i; j &lt;= n; j += 2 * i) {\n                auto p = curr-&gt;next;\n                auto q = p;\n                for (int k = 0; k &lt; i; k++) q = q-&gt;next;\n                int x = 0, y = 0;\n                while (x &lt; i &amp;&amp; y &lt; i &amp;&amp; p &amp;&amp; q) {\n                    if (p-&gt;val &lt;= q-&gt;val) {\n                        curr-&gt;next = p;\n                        curr = curr-&gt;next;\n                        p = p-&gt;next;\n                        x++;\n                    }\n                    else {\n                        curr-&gt;next = q;\n                        curr = curr-&gt;next;\n                        q = q-&gt;next;\n                        y++;\n                    }\n                }\n                while (x &lt; i &amp;&amp; p) {\n                    curr-&gt;next = p;\n                    curr = curr-&gt;next;\n                    p = p-&gt;next;\n                    x++;\n                }\n                while (y &lt; i &amp;&amp; q) {\n                    curr-&gt;next = q;\n                    curr = curr-&gt;next;\n                    q = q-&gt;next;\n                    y++;\n                }\n                curr-&gt;next = q;\n            }\n\n        }\n        return dummy-&gt;next;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#_16","title":"\u5feb\u901f\u6392\u5e8f\u6a21\u677f","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint n;\n\nvoid quick_sort(int q[], int l, int r) {\n    if (r &lt;= l) return;\n    int i = l - 1, j = r + 1;\n    int x = q[l + r &gt;&gt; 1];\n    while (i  &lt; j) {\n        do i++; while (q[i] &lt; x);\n        do j--; while (q[j] &gt; x);\n        if (i &lt; j) swap(q[i], q[j]);\n    }\n    quick_sort(q, l, j);\n    quick_sort(q, j + 1, r);\n}\n\nint main () {\n    scanf(\"%d\", &amp;n);\n    int q[n];\n    for (int i = 0; i &lt; n; i++) scanf(\"%d\", &amp;q[i]);\n    quick_sort(q, 0, n - 1);\n    for (int i = 0; i &lt; n; i++) printf(\"%d \", q[i]);\n    return 0;\n}\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#23-k","title":"23. \u5408\u5e76 K \u4e2a\u5347\u5e8f\u94fe\u8868","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#33_1","title":"3.3 \u7b2c\u4e00\u6b21\u505a\uff0c\u5f88\u597d\u7684\u9898\u76ee","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* a, ListNode* b) {\n        ListNode* dummy = new ListNode(-1), *curr = dummy;\n        while (a &amp;&amp; b) {\n            if (a-&gt;val &lt; b-&gt;val) {\n                curr-&gt;next = a;\n                curr = curr-&gt;next;\n                a = a-&gt;next;\n            }\n            else {\n                curr-&gt;next = b;\n                curr = curr-&gt;next;\n                b = b-&gt;next;\n            }\n        }\n        curr-&gt;next = a ? a : b;\n        return dummy-&gt;next;\n    }\n    ListNode* merge(vector&lt;ListNode *&gt;&amp; lists, int l, int r) {\n        if (l == r) return lists[l];\n        if (l &gt; r) return nullptr; \n        int mid = l + r &gt;&gt; 1;\n        return mergeTwoLists(merge(lists, l, mid), merge(lists, mid + 1, r));\n    }\n\n    ListNode* mergeKLists(vector&lt;ListNode*&gt;&amp; lists) {\n        // \u5f52\u5e76\u6392\u5e8f\uff0c\u81ea\u5e95\u5411\u4e0a\u8fed\u4ee3\u5f52\u5e76\n        // \u5e76\u4e14\u9700\u8981\u5c06\u6570\u7ec4\u548c\u94fe\u8868\u7684\u5f52\u5e76\u6392\u5e8f\u5206\u5f00\u6765\n        int n = lists.size();\n        if (n == 0) return nullptr;\n        return merge(lists, 0, n - 1);\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#_17","title":"\u539f\u7b54\u6848","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode * a, ListNode * b) {\n        ListNode dummy, *cur = &amp;dummy;\n        while (a &amp;&amp; b) {\n            if (a-&gt;val &lt; b-&gt;val) cur = cur-&gt;next = a, a = a-&gt;next;\n            else cur = cur-&gt;next = b, b = b-&gt;next;\n        }\n        cur-&gt;next = a ? a : b;\n        return dummy.next;\n    }\n    ListNode* merge(vector&lt;ListNode*&gt;&amp; lists, int l, int r) {\n        if (l == r) return lists[l];\n        if (l &gt; r) return nullptr;\n        int mid = (l + r) &gt;&gt; 1;\n        return mergeTwoLists(merge(lists, l, mid), merge(lists, mid + 1, r));\n\n    }\n    ListNode* mergeKLists(vector&lt;ListNode*&gt;&amp; lists) {\n        int n = lists.size();\n        if (!n) return nullptr;\n        return merge(lists, 0, n - 1);\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#146-lru","title":"146. LRU \u7f13\u5b58","text":"<p>\u5feb\u901f\u63d2\u5165\u4e00\u4e2a\u8282\u70b9</p> <p>\u5feb\u901f\u5220\u9664\u4e00\u4e2a\u8282\u70b9</p> <p>\u5e76\u4f7f\u5f97\u8fd9\u4e24\u4e2a\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u4e3aO(1)</p> <p>\u5355\u94fe\u8868\u4e0d\u80fd\u518dO(1)\u7684\u65f6\u95f4\u5220\u9664,\u6240\u4ee5\u9700\u8981\u53cc\u94fe\u8868</p> <p>\u53cc\u94fe\u8868\u518d\u5b9a\u4e49\u7684\u65f6\u5019\u9700\u8981\u7528\u5230\u5de6\u53f3\u4e24\u4e2a\u7aef\u70b9</p>"},{"location":"Problem/lc/Leetcode%20hot%20100/#33lru","title":"3.3\u7b2c\u4e00\u6b21\u505a,\u5f88\u597d\u7684LRU\u9898\u76ee","text":"<pre><code>class LRUCache {\npublic:\n    // \u53cc\u94fe\u8868\n    struct Node {\n        int key, value;\n        Node* left, *right;\n        Node(int key, int value) : key(key), value(value), left(nullptr), right(nullptr) {}\n    } *L, *R;\n    // \u54c8\u5e0c\u8868\n    unordered_map&lt;int, Node*&gt; hash;\n    //  \u7f13\u5b58\u5927\u5c0f\n    int n = 0;\n    LRUCache(int capacity) {\n        n = capacity;\n        // \u521d\u59cb\u5316\u53cc\u94fe\u8868\n        L = new Node(-1, -1), R = new Node(-1, -1);\n        L-&gt;right = R;\n        R-&gt;left = L;\n    }\n\n    int get(int key) {\n        // \u67e5\u8be2\u54c8\u5e0c\u8868\n        // \u5728\n        if (hash.count(key) == 1) {\n            Node* p = hash[key];\n            remove(p);\n            insert(p);\n            return p-&gt;value;\n        }\n        // \u4e0d\u5728\n        return -1;\n    }\n\n    void put(int key, int value) {\n        // \u5728\n        if (hash.count(key) == 1) {\n            Node* p = hash[key];\n            p-&gt;value = value;\n            remove(p);\n            insert(p);\n        }\n        // \u4e0d\u5728\n        else {\n            if (hash.size() == n) {\n                Node* p = R-&gt;left;\n                // \u5220\u9664\u53cc\u94fe\u8868\n                remove(p);\n                // \u5220\u9664\u54c8\u5e0c\u8868\n                hash.erase(p-&gt;key);\n                // \u5220\u9664\u5185\u5b58\n                delete(p);\n            }\n            Node* p = new Node(key, value);\n            insert(p);\n            hash[key] = p;\n        }\n    }\n\n    void remove(Node* p) {\n        p-&gt;left-&gt;right = p-&gt;right;\n        p-&gt;right-&gt;left = p-&gt;left;\n    }\n\n    void insert(Node* p) {\n        p-&gt;right = L-&gt;right;\n        p-&gt;left = L;\n        L-&gt;right = p;\n        p-&gt;right-&gt;left = p;\n    }\n};\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * LRUCache* obj = new LRUCache(capacity);\n * int param_1 = obj-&gt;get(key);\n * obj-&gt;put(key,value);\n */\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#_18","title":"\u4e8c\u53c9\u6811","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#94","title":"94. \u4e8c\u53c9\u6811\u7684\u4e2d\u5e8f\u904d\u5386","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#34","title":"\u00be\u7b2c\u4e00\u6b21\u505a\uff0c\u5fd8\u8bb0\u4e2d\u5e8f\u904d\u5386\u662f\u4ec0\u4e48\u4e86","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector&lt;int&gt; inorderTraversal(TreeNode* root) {\n        vector&lt;int&gt; res;\n        inorder(root, res);\n        return res;\n    }\n    void inorder(TreeNode* root, vector&lt;int&gt; &amp; res) {\n        if (!root) return;\n        inorder(root-&gt;left, res);\n        res.push_back(root-&gt;val);\n        inorder(root-&gt;right, res);\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#104","title":"104. \u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#34_1","title":"\u00be\u7b2c\u4e00\u6b21\u505a","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int res = 0;\n    int maxDepth(TreeNode* root) {\n        inorder(root, 1);\n        return res;\n    }\n    void inorder(TreeNode* root, int depth) {\n        if (!root) return;\n        inorder(root-&gt;left, depth + 1);\n        res = max(depth, res);\n        inorder(root-&gt;right, depth + 1);\n    }\n\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#_19","title":"\u539f\u7b54\u6848","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\n    // ans\u8fd9\u91cc\u662fSolution\u8fd9\u4e2a\u7c7b\u7684\u6210\u5458\u53d8\u91cf\uff0c\u5728\u6574\u4e2aSolution\u7684\u751f\u547d\u5468\u671f\u4e2d\u4e00\u76f4\u5b58\u5728\n    // \u6240\u4ee5ans\u8fd9\u91cc\u76f8\u5f53\u4e8eSolution\u4e2d\u7684\u5168\u5c40\u53d8\u91cf\n    // \u5b9e\u73b0\u4e86\u591a\u6b21\u8c03\u7528 dfs \u51fd\u6570\u7684\u8fc7\u7a0b\u4e2d\u7d2f\u79ef\u5e76\u7ef4\u62a4\u4e00\u4e2a\u5168\u5c40\u7684\u6700\u5927\u6df1\u5ea6\u503c\n    int ans = 0;\n    void dfs(TreeNode *node, int count) {\n        if (node == nullptr) return;\n        count++;\n        ans = max(ans, count);\n        dfs(node-&gt;left, count);\n        dfs(node-&gt;right, count);\n    }\npublic:\n    int maxDepth(TreeNode* root) {\n        dfs(root, 0);\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#226_2","title":"226. \u7ffb\u8f6c\u4e8c\u53c9\u6811","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#34_2","title":"\u00be\u7b2c\u4e00\u6b21\u505a\u60f3\u4e0d\u51fa\u6765\u9012\u5f52\u7684\u505a\u6cd5","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* invertTree(TreeNode* root) {\n        // \u4f7f\u7528\u7684\u662f\u9012\u5f52\u7684\u601d\u60f3\n        if (!root) return nullptr;\n        TreeNode* left = invertTree(root-&gt;left);\n        TreeNode* right = invertTree(root-&gt;right);\n        root-&gt;left = right;\n        root-&gt;right = left;\n        return root;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#101","title":"101. \u5bf9\u79f0\u4e8c\u53c9\u6811","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#34_3","title":"\u00be\u7b2c\u4e00\u6b21\u503c\u5f97\u7b2c\u4e8c\u6b21\u505a","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool checkSymmetric(TreeNode* a, TreeNode* b) {\n        if (a == nullptr || b == nullptr) return a == b;\n        return (a-&gt;val == b-&gt;val) &amp;&amp; (checkSymmetric(a-&gt;left, b-&gt;right)) &amp;&amp; (checkSymmetric(a-&gt;right, b-&gt;left));\n    }\n    bool isSymmetric(TreeNode* root) {\n        return checkSymmetric(root-&gt;left, root-&gt;right);\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#_20","title":"\u539f\u7b54\u6848","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\n    bool check(TreeNode *a, TreeNode *b) {\n        if (a == nullptr || b == nullptr) return a == b;\n        return (a-&gt;val == b-&gt;val) &amp;&amp; check(a-&gt;left, b-&gt;right) &amp;&amp; check(a-&gt;right, b-&gt;left);\n    }\npublic:\n\n    bool isSymmetric(TreeNode* root) {\n        return check(root-&gt;left, root-&gt;right);\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#543","title":"543. \u4e8c\u53c9\u6811\u7684\u76f4\u5f84","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#34_4","title":"\u00be\u7b2c\u4e00\u6b21\u505a","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int res = 0;\n    int diameterOfBinaryTree(TreeNode* root) {\n        maxDepth(root);\n        return res;\n    }\n    int maxDepth(TreeNode* root) {\n        // \u6bcf\u6b21\u8fd4\u56de\u63a5\u6536\u5230\u7684\u90fd\u662f\u6700\u5927\u6df1\u5ea6\n        if (!root) return 0;\n        int left = maxDepth(root-&gt;left);\n        int right = maxDepth(root-&gt;right);\n        int sum = left + right;\n        res = max(sum, res);\n        return max(left, right) + 1;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#102","title":"102. \u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#34_5","title":"\u00be\u4f18\u96c5\u4f7f\u7528\u961f\u5217","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; levelOrder(TreeNode* root) {\n        if (!root) return {};\n        vector&lt;vector&lt;int&gt;&gt; ans;\n        queue&lt;TreeNode*&gt; q;\n        q.push(root);\n        while (!q.empty()) {\n            vector&lt;int&gt; vals;\n            int n = q.size();\n            while (n--) {\n                auto node = q.front();\n                q.pop();\n                vals.push_back(node-&gt;val);\n                if (node-&gt;left) q.push(node-&gt;left);\n                if (node-&gt;right) q.push(node-&gt;right);\n            }\n            ans.emplace_back(vals);\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#34_6","title":"\u00be\u81ea\u5df1\u7684\u505a\u6cd5\uff0c\u4e24\u4e2a\u6570\u7ec4\uff0c\u4e0d\u591f\u4f18\u96c5","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; ans;\n    vector&lt;vector&lt;int&gt;&gt; levelOrder(TreeNode* root) {\n        if (!root) return {};\n        vector&lt;TreeNode*&gt; level;\n        level.push_back(root);\n        while (!level.empty()) {\n            vector&lt;int&gt; tmp;\n            for (int i = 0; i &lt; level.size(); i++) tmp.push_back(level[i]-&gt;val);\n            ans.push_back(tmp);\n            lOrder(level);\n        }\n        return ans;\n    }\n    void lOrder(vector&lt;TreeNode*&gt;&amp; level) {\n        vector&lt;TreeNode*&gt; tmp;\n        for (auto n : level) {\n            if (n-&gt;left) tmp.push_back(n-&gt;left);\n            if (n-&gt;right) tmp.push_back(n-&gt;right);\n        }\n        level = tmp;\n    }\n\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#108","title":"108. \u5c06\u6709\u5e8f\u6570\u7ec4\u8f6c\u6362\u4e3a\u4e8c\u53c9\u641c\u7d22\u6811","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#34_7","title":"\u00be\u7b2c\u4e00\u6b21\u505a\uff0c\u6ca1\u6709\u505a\u9519\u4e00\u6b21\u8fc7","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* sortedArrayToBST(vector&lt;int&gt;&amp; nums) {\n        // \u4e8c\u5206\u641c\u7d22\u5373\u53ef\n        return binarySearchBST(nums, 0, nums.size() - 1);\n    }\n\n    TreeNode* binarySearchBST(vector&lt;int&gt;&amp; nums, int l, int r) {\n        if (l &gt; r) return nullptr;\n        int mid = l + r &gt;&gt; 1;\n        TreeNode* newNode = new TreeNode(nums[mid]);\n        if (l == r) return newNode;\n        newNode-&gt;left = binarySearchBST(nums, l, mid - 1);\n        newNode-&gt;right = binarySearchBST(nums, mid + 1, r);\n        return newNode;\n    }\n\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#_21","title":"\u539f\u7b54\u6848","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* sortedArrayToBST(vector&lt;int&gt;&amp; nums) {\n        TreeNode* res = build(nums, 0, nums.size() - 1);\n        return res;\n    }\n    TreeNode* build(vector&lt;int&gt;&amp; nums, int l, int r) {\n        if (l &gt; r) return NULL;\n        int mid = (l + r) &gt;&gt; 1;\n        TreeNode* root = new TreeNode(nums[mid]);\n        root-&gt;left = build(nums, l, mid - 1);\n        root-&gt;right = build(nums, mid + 1, r);\n        return root;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#98","title":"98. \u9a8c\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#34_8","title":"\u00be\u7b2c\u4e00\u6b21\u505a\uff0c\u4f7f\u7528\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6027\u8d28\uff0c\u5efa\u8bae\u591a\u505a","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\n    // \u4e00\u5b9a\u8981\u6ce8\u610f\u4f7f\u7528\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6027\u8d28\uff1a\u4e2d\u5e8f\u904d\u5386\u662f\u9012\u589e\u6570\u5217\npublic:\n    TreeNode* pre;\n    bool isValidBST(TreeNode* root) {\n        if (!root) return true;\n        bool left = isValidBST(root-&gt;left);\n        if (pre &amp;&amp; pre-&gt;val &gt;= root-&gt;val) return false;\n        pre = root;\n        bool right = isValidBST(root-&gt;right);\n        return left &amp;&amp; right;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#34_9","title":"\u00be\u7b2c\u4e00\u6b21\u505a\uff0c\u4e0d\u591f\u4f18\u96c5","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool isValidBST(TreeNode* root) {\n        // \u4ec5\u9a8c\u8bc1\u6bcf\u4e2a\u8282\u70b9\u5927\u4e8e\u5b83\u7684\u4e24\u4e2a\u5b50\u8282\u70b9\u662f\u4e0d\u5b8c\u5907\u7684\n        return checkBST(root, LLONG_MIN, LLONG_MAX);\n    }\n    bool checkBST(TreeNode* root, long long l, long long r) {\n        if (!root) return true;\n        int value = root-&gt;val;\n        if (value &lt;= l || value &gt;= r) return false;\n        return checkBST(root-&gt;left, l, value) &amp;&amp; checkBST(root-&gt;right, value, r);\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#230-k","title":"230. \u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7b2cK\u5c0f\u7684\u5143\u7d20","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#34ok","title":"\u00be\u7b2c\u4e00\u6b21\u505a\uff0c\u7cbe\u5de7\u7684\u4e2d\u5e8f\u904d\u5386\uff0c\u5e76\u4e14\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(k)","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int kthSmallest(TreeNode* root, int k) {\n        // \u4e2d\u5e8f\u904d\u5386\n        stack&lt;TreeNode *&gt; stack;\n        while (root != nullptr || stack.size() &gt; 0) {\n            while (root != nullptr) {\n                stack.push(root);\n                root = root-&gt;left;\n            }\n            root = stack.top();\n            stack.pop();\n            --k;\n            if (k == 0) break;\n            root = root-&gt;right;\n        }\n        return root-&gt;val;\n\n\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#34acwing","title":"\u00be\u7b2c\u4e00\u6b21\u505a\u4e5f\u662f\u4e2d\u5e8f\u904d\u5386\uff0cacwing\u5199\u6cd5","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int k, ans;\n    int kthSmallest(TreeNode* root, int _k) {\n        k = _k;\n        dfs(root);\n        return ans;\n    }\n    void dfs(TreeNode* root) {\n        if (!root) return;\n        dfs(root-&gt;left);\n        if (k == 0) return;\n        if (--k == 0) {\n            ans = root-&gt;val;\n            return;\n        }\n        dfs(root-&gt;right);\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#34_10","title":"\u00be\u8bb0\u5f55\u5b50\u6811\u8282\u70b9\u6570\u7684\u505a\u6cd5\uff0c\u9700\u8981\u8bb0\u5f97\u80fd\u8bf4\u601d\u8def","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\n\nclass MyBst {\npublic:\n    MyBst(TreeNode *root) {\n        this-&gt;root = root;\n        countNodeNum(root);\n    }\n    int kthSmallest(int k) {\n        TreeNode *node = root;\n        while (node != nullptr) {\n            int left = getNodeNum(node-&gt;left);\n            if (left &lt; k - 1) {\n                node = node-&gt;right;\n                k -= left + 1;\n            } else if (left == k - 1) {\n                break;\n            } else {\n                node = node-&gt;left;\n            }\n        }\n        return node-&gt;val;\n    }\nprivate:\n    TreeNode* root;\n    unordered_map&lt;TreeNode *, int&gt; nodeNum;\n    int countNodeNum(TreeNode *node) {\n        if (node == nullptr) {\n            return 0;\n        }\n        nodeNum[node] = 1 + countNodeNum(node-&gt;left) + countNodeNum(node-&gt;right);\n        return nodeNum[node];\n    }\n    int getNodeNum(TreeNode* node) {\n        if (node != nullptr &amp;&amp; nodeNum.count(node)) {\n            return nodeNum[node];\n        }\n        else return 0;\n    }\n};\n\nclass Solution {\npublic:\n    int kthSmallest(TreeNode* root, int k) {\n        MyBst bst(root);\n        return bst.kthSmallest(k);\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#34_11","title":"\u00be\u7b2c\u4e00\u6b21\u505a\uff0c\u4e2d\u5e8f\u904d\u5386\u7684\u505a\u6cd5\uff0c\u4e0d\u591f\u7cbe\u5de7","text":"<pre><code>    /**\n    * Definition for a binary tree node.\n    * struct TreeNode {\n    *     int val;\n    *     TreeNode *left;\n    *     TreeNode *right;\n    *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n    *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n    *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n    * };\n    */\n    class Solution {\n    public:\n        // \u60f3\u8981\u627e\u51fa\u67d0\u4e2a\u7b2ck\u5c0f\u7684\u6570\u5b57\uff0c\u5c31\u8981\u7528\u5230\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u5e8f\u904d\u5386\u4e3a\u9012\u589e\u6570\u5217\u7684\u6027\u8d28\n        vector&lt;int&gt; res;\n        int kthSmallest(TreeNode* root, int k) {\n            inorderTraverse(root);\n            return res[k - 1];\n        }\n        void inorderTraverse(TreeNode* root) {\n            if (!root) return;\n            inorderTraverse(root-&gt;left);\n            res.push_back(root-&gt;val);\n            inorderTraverse(root-&gt;right);\n        }\n    };\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#_22","title":"\u539f\u7b54\u6848","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* pre = NULL;\n    bool isValidBST(TreeNode* root) {\n        if (root == NULL) return true;\n        bool left = isValidBST(root-&gt;left);\n        if (pre &amp;&amp; pre-&gt;val &gt;= root-&gt;val) return false;\n        pre = root;\n        bool right = isValidBST(root-&gt;right);\n        return left &amp;&amp; right;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#199","title":"199. \u4e8c\u53c9\u6811\u7684\u53f3\u89c6\u56fe","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#35","title":"\u2157\u7b2c\u4e00\u6b21\u505a\uff0c\u7075\u8336\u5c71\u827e\u5e9c\u505a\u6cd5\uff0c\u5b9e\u9645\u4e0a\u662f\u4ece\u53f3\u4fa7\u5f00\u59cb\u7684\u6df1\u5ea6\u4f18\u5148\u904d\u5386","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector&lt;int&gt; ans;\n    void find(TreeNode* root, int d) {\n        if (!root) return;\n        if (d == ans.size()) ans.push_back(root-&gt;val);\n        find(root-&gt;right, d + 1);\n        find(root-&gt;left, d + 1);\n    }\n    vector&lt;int&gt; rightSideView(TreeNode* root) {\n        // \u9700\u8981\u53d1\u73b0\u6bcf\u5c42\u53ea\u4f1a\u6709\u4e00\u4e2a\n        // \u6240\u4ee5\u6df1\u5ea6depth\u548cans.size()\u7684\u5927\u5c0f\u662f\u4e00\u81f4\u7684\n        // \u800c\u6211\u4eec\u9700\u8981\u8bb0\u5f55\u7684\u662f\u6bcf\u4e00\u5c42\u6700\u53f3\u8fb9\u7684\u90a3\u4e2a\u503c\n        // \u6240\u4ee5\u8981\u5148\u9012\u5f52\u53f3\u5b50\u6811\uff0c\u904d\u5386\u5b8c\u53f3\u5b50\u6811\u518d\u8003\u8651\u5de6\u5b50\u6811\n        find(root, 0);\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#35_1","title":"\u2157\u7b2c\u4e00\u6b21\u505a \u7528\u7684\u5c42\u5e8f\u904d\u5386\uff0c\u65f6\u95f4\u4e0a\u4f1a\u590d\u6742\u4e00\u4e9b\uff0c\u5b9e\u9645\u4e0a\u662f\u5e7f\u5ea6\u4f18\u5148\u904d\u5386","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector&lt;int&gt; rightSideView(TreeNode* root) {\n        // \u5e76\u4e0d\u662f\u4e00\u8defroot-&gt;right\n        // \u4f7f\u7528\u5c42\u5e8f\u904d\u5386\u7684\u6700\u540e\u4e00\u4e2a\n        // \u5c42\u5e8f\u904d\u5386\u4f7f\u7528queue\n        if (!root) return {};\n        vector&lt;int&gt; ans;\n        queue&lt;TreeNode*&gt; visited;\n        visited.push(root);\n        while (!visited.empty()) {\n            int n = visited.size();\n            while (n--) {\n                TreeNode* node = visited.front();\n                if (n == 0) ans.push_back(node-&gt;val);\n                visited.pop();\n                if (node-&gt;left) visited.push(node-&gt;left);\n                if (node-&gt;right) visited.push(node-&gt;right);\n            }\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#_23","title":"\u539f\u7b54\u6848","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\n    vector&lt;int&gt; ans;\n    void find(TreeNode *root, int d) {\n        if (root == nullptr) return;\n        if (d == ans.size()) ans.push_back(root-&gt;val);\n        find(root-&gt;right, d + 1);\n        find(root-&gt;left, d + 1);\n    }\npublic:\n    vector&lt;int&gt; rightSideView(TreeNode* root) {\n        find(root, 0);\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#114","title":"114. \u4e8c\u53c9\u6811\u5c55\u5f00\u4e3a\u94fe\u8868","text":"<p>\u524d\u5e8f\u904d\u5386\u7528vector\u548cstack\u4e5f\u80fd\u505a</p>"},{"location":"Problem/lc/Leetcode%20hot%20100/#35_2","title":"\u2157\u7b2c\u4e00\u6b21\u505a\uff0c\u627e\u89c4\u5f8b\uff0c\u5f88\u5f00\u5fc3\u80fd\u505a\u51fa\u8fd9\u4e48\u4f18\u96c5\u7684\u65b9\u6cd5","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    void flatten(TreeNode* root) {\n        // \u4ed4\u7ec6\u89c2\u5bdf\u5c31\u80fd\u53d1\u73b0\uff0c\u5b9e\u9645\u4e0a\u8fd9\u4e2a\u5148\u5e8f\u904d\u5386\u5c31\u662f\u5c06\u6240\u6709\u7684\u5de6\u5b50\u6811\u90fd\u63d2\u5230root\u548c\u53f3\u5b50\u6811\u4e4b\u95f4\n        if (!root) return;\n        TreeNode* curr = root;\n        while (curr) {\n            if (curr-&gt;left) {\n                TreeNode* next = curr-&gt;right;\n                TreeNode* tmp = curr-&gt;left;\n                while (tmp-&gt;right) {\n                    tmp = tmp-&gt;right;\n                }\n                curr-&gt;right = curr-&gt;left;\n                tmp-&gt;right = next;\n                // \u5343\u4e07\u6ce8\u610f\u5728\u5c06curr\u7684\u5de6\u5b50\u6811\u79fb\u5230\u53f3\u8fb9\u540e\uff0c\u5c06\u5de6\u5b50\u6811\u8981\u8bbe\u7f6e\u6210nullptr\n                // \u4e0d\u7136\u5de6\u53f3\u5b50\u6811\u90fd\u662f\u4e00\u6a21\u4e00\u6837\u7684\n                curr-&gt;left = nullptr;\n            }\n            curr = curr-&gt;right;\n        }\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#105","title":"105. \u4ece\u524d\u5e8f\u4e0e\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811","text":"<p>\u6ce8\u610f\u6570\u7ec4\u4e2d\u88c5\u7684\u6ca1\u6709nullptr\uff0c\u4e5f\u5c31\u662f\u8bf4\u524d\u5e8f\u904d\u5386\u5982\u679c\u662f{3, 9, 20}\uff0c\u90a3\u4e48\u6211\u4eec\u662f\u4e0d\u77e5\u90539\u548c20\u662f\u57283\u7684\u5de6\u8fb9\u8fd8\u662f\u53f3\u8fb9\u7684</p> <p>\u6839\u8282\u70b9\u4e00\u5b9a\u662f\u524d\u5e8f\u904d\u5386\u7684\u7b2c\u4e00\u4e2a\u70b9</p> <p>\u627e\u4e00\u4e2a\u6570\u7684\u4f4d\u7f6e\u53ef\u4ee5\u7528\u54c8\u5e0c\u8868\u6765\u505a</p> <p>\u6839\u636e\u4e2d\u5e8f\u904d\u5386\u6839\u8282\u70b9\u5de6\u8fb9\u7684\u957f\u5ea6\u5728\u524d\u5e8f\u904d\u5386\u4e2d\u6570\u4e00\u6837\u957f\u7684\u6570\u6bb5\uff0c\u5c31\u662f\u5de6\u5b50\u6811</p> <pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    unordered_map&lt;int, int&gt; hash;\n    TreeNode* buildTree(vector&lt;int&gt;&amp; preorder, vector&lt;int&gt;&amp; inorder) {\n        int n = inorder.size();\n        for (int i = 0; i &lt; n; i++) hash[inorder[i]] = i;\n        return build(preorder, inorder, 0, preorder.size() - 1, 0, inorder.size() - 1);\n    }\n    TreeNode* build(vector&lt;int&gt;&amp; preorder, vector&lt;int&gt;&amp; inorder, int pl, int pr, int il, int ir) {\n        if (pl &gt; pr) return nullptr;\n        TreeNode* root = new TreeNode(preorder[pl]);\n        int k = hash[root-&gt;val];\n        // \u901a\u8fc7\u524d\u5e8f\u904d\u5386\u786e\u5b9a\u4e0b\u4e00\u4e2a\u6839\u8282\u70b9\n        // \u901a\u8fc7\u4e2d\u5e8f\u904d\u5386\u786e\u5b9a\u6839\u8282\u70b9\u7684\u5de6\u53f3\u513f\u5b50\n        root-&gt;left = build(preorder, inorder, pl + 1, pl + 1 + k - 1 - il, il, k - 1);\n        root-&gt;right = build(preorder, inorder, pl + 1 + k - 1 - il + 1, pr, k + 1, ir);\n        return root;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#437-iii","title":"437. \u8def\u5f84\u603b\u548c III","text":"<p>\u6c42\u4e00\u4e2a\u533a\u95f4\u5185\u662f\u5426\u6709\u8fde\u7eed\u7684\u6570\u6bb5\u7684\u548c\u4e3a\u4e00\u4e2a\u7279\u5b9a\u503c\uff1a\u4f7f\u7528\u524d\u7f00\u548c</p> <p>\u7528\u54c8\u5e0c\u8868\u5b58\u4e00\u4e0b\u524d\u9762\u51fa\u73b0\u8fc7\u7684\u524d\u7f00\u548c\u5c31\u884c\u4e86</p>"},{"location":"Problem/lc/Leetcode%20hot%20100/#_24","title":"\u524d\u7f00\u548c\u4f8b\u9898","text":"<p>560. \u548c\u4e3a K \u7684\u5b50\u6570\u7ec4</p> <pre><code>class Solution {\npublic:\n    int subarraySum(vector&lt;int&gt;&amp; nums, int k) {\n        // \u5b58\u7684\u662f\u5404\u4e2a\u524d\u7f00\u548c\u51fa\u73b0\u7684\u6b21\u6570\n        unordered_map&lt;int, int&gt; hash;\n        hash[0] = 1;\n        int sum = 0;\n        int ans = 0;\n        for (int i = 0; i &lt; nums.size(); i++) {\n            // cout &lt;&lt; \"i\" &lt;&lt; i &lt;&lt; \"sum\" &lt;&lt; sum &lt;&lt; endl;\n            sum += nums[i];\n            ans += hash[sum - k];\n            hash[sum]++;\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#38","title":"\u215c  \u7b2c\u4e00\u6b21\u505a","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    unordered_map&lt;long long, int&gt; hash;\n    int ans = 0;\n    int pathSum(TreeNode* root, int targetSum) {\n        // \u770b\u63cf\u8ff0\u611f\u89c9\u662fdfs\n        // \u8981\u7ef4\u62a4\u4e00\u4e2a\u5168\u5c40\u7684\u54c8\u5e0c\u8868\uff0c\u53ea\u8981\u5728\u4e00\u8def\u5411\u4e0b\uff0c\u5728\u8fd4\u56de\u7684\u65f6\u5019\u5220\u53bb\u8fd9\u4e2a\u8282\u70b9\u7684\u548c\u7684\u6b21\u6570\u5373\u53ef\n        // \u8def\u5f84\u65b9\u5411\u5411\u4e0b\u5373\u53ef\uff0c\u4e5f\u5c31\u662f\u53ef\u4ee5\u8f6c\u6298\uff0c\u5c31\u662f\u5148\u5411\u5de6\u518d\u5411\u53f3\n        hash[0] = 1;\n        dfs(root, targetSum, 0);\n        return ans;\n    }\n    void dfs(TreeNode* root, long long sum, long long curr) {\n        if (!root) return;\n        curr += root-&gt;val;\n        ans += hash[curr - sum];\n        hash[curr]++;\n        dfs(root-&gt;left, sum, curr), dfs(root-&gt;right, sum, curr);\n        hash[curr]--;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#236","title":"236. \u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#38_1","title":"\u215c \u590d\u4e60","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n        // \u4e00\u5171\u53ea\u6709\u4e09\u79cd\u60c5\u51b5\n        // 1. \u5728root\u7684\u5de6\u53f3\u5b50\u6811\u4e2d\n        // 2. p\u4e3aroot\n        // 3. q\u4e3aroot\n\n        // \u60c5\u51b52\u548c\u60c5\u51b53\uff0c\u7b2c\u4e00\u884c\u4ee3\u7801\u5c31\u89e3\u51b3\u4e86\n        if (root == p || root == q || root == nullptr) return root;\n        TreeNode* left = lowestCommonAncestor(root-&gt;left, p, q);\n        TreeNode* right = lowestCommonAncestor(root-&gt;right, p, q);\n        if (left &amp;&amp; right) return root;\n        if (left) return left;\n        if (right) return right;\n        return nullptr;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#_25","title":"\u539f\u7b54\u6848","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n        // \u5047\u8bbe\u8282\u70b9\u662fp\uff0c\u5982\u679cq\u5728p\u7684\u5b50\u6811\u4e2d\uff0c\u90a3\u4e48\u76f4\u63a5\u8fd4\u56dep\n        // \u5982\u679cq\u4e0d\u5728p\u7684\u5b50\u6811\u4e2d\uff0c\u8fd8\u662f\u9700\u8981\u8fd4\u56deq\uff0c\u4f7f\u5f97\u4e0a\u9762\u7684\u8282\u70b9\u80fd\u591f\u540c\u65f6\u6536\u5230p\u548cq\n        if (root == p || root == q || root == NULL) return root;\n        TreeNode* left = lowestCommonAncestor(root-&gt;left, p, q);\n        TreeNode* right = lowestCommonAncestor(root-&gt;right, p, q);\n        if (left &amp;&amp; right) return root;\n        if (left) return left;\n        if (right) return right;\n        return NULL;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#124","title":"124. \u4e8c\u53c9\u6811\u4e2d\u7684\u6700\u5927\u8def\u5f84\u548c","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#38acwing","title":"\u215cacwing\u505a\u6cd5\uff0c\u66f4\u52a0\u7b80\u6d01","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int ans;\n    int maxPathSum(TreeNode* root) {\n        ans = INT_MIN;\n        dfs(root);\n        return ans;\n    }\n    // \u6bcf\u6b21\u5411\u4e0a\u4f20\u9012\u7684\u90fd\u662f\u7ecf\u8fc7\u8fd9\u4e2a\u70b9\u7684\u6700\u5927\u503c\n    int dfs(TreeNode* root) {\n        if (!root) return 0;\n        int left = max(0, dfs(root-&gt;left));\n        int right = max(0, dfs(root-&gt;right));\n        // \u6bcf\u4e2a\u8282\u70b9\u6700\u591a\u53ea\u80fd\u8fde\u63a5\u4e24\u6761\u8fb9\n        // 1. \u4e0d\u518d\u5411\u4e0a\u4f20\u9012\uff0c\u4e24\u6761\u8fb9\u8fde\u63a5\u5de6\u53f3\u5b50\u6811\n        ans = max(ans, left + right + root-&gt;val);\n        // 2. \u7ee7\u7eed\u5411\u4e0a\u4f20\u9012\uff0c\u4e00\u6761\u8fb9\u5411\u4e0a\u8fde\u63a5\uff0c\u53e6\u5916\u4e00\u6761\u8fb9\u8fde\u63a5\u5927\u7684\u5b50\u6811\n        return root-&gt;val + max(left, right);\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#38_2","title":"\u215c\u7b2c\u4e00\u6b21\u81ea\u5df1\u5c1d\u8bd5\uff0c\u6210\u529f\u505a\u51fa\uff0c\u53ef\u4ee5\u66f4\u7b80\u6d01","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int ans = INT_MIN;\n    int maxPathSum(TreeNode* root) {\n        maxPathSumImpl( root);\n        return ans;\n    }\n    int maxPathSumImpl(TreeNode* root) {\n        if (!root) return INT_MIN;\n        int left = maxPathSumImpl(root-&gt;left);\n        int right = maxPathSumImpl(root-&gt;right);\n        int k = max(left, right);\n\n        // \u6bcf\u4e2a\u8282\u70b9\u6700\u591a\u53ea\u80fd\u8fde\u63a5\u4e24\u6761\u8fb9\n        // 1. \u4e0d\u518d\u5411\u4e0a\u4f20\u9012\uff0c\u4e24\u6761\u8fb9\u8fde\u63a5\u5de6\u53f3\u5b50\u6811\n        if (left &gt; 0 &amp;&amp; right &gt; 0) ans = max(ans, left + right + root-&gt;val);\n\n        // 2. \u7ee7\u7eed\u5411\u4e0a\u4f20\u9012\uff0c\u4e00\u6761\u8fb9\u5411\u4e0a\u8fde\u63a5\uff0c\u53e6\u5916\u4e00\u6761\u8fb9\u8fde\u63a5\u5927\u7684\u5b50\u6811\n        if (k &gt; 0) {\n            int n = root-&gt;val + k;\n            ans = max(n, ans);\n            return n;\n        }\n        else {\n            ans = max(root-&gt;val, ans);\n            return root-&gt;val;\n        }\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#_26","title":"\u56fe\u8bba","text":"<p>bfs\u8bb0\u5f97\u4f7f\u7528\u961f\u5217</p>"},{"location":"Problem/lc/Leetcode%20hot%20100/#200-number-of-islands","title":"200. Number of Islands","text":"<p>dfs\u662f\u770b\u4e00\u4e0b\u4e0a\u4e0b\u5de6\u53f3\u56db\u4e2a\u683c\u5b50\u5982\u679c\uff0c\u67d0\u4e2a\u683c\u5b50\u6ca1\u6709\u8d70\u8fc7\u7684\u8bdd\uff0c\u90a3\u4e48\u5c31\u4f1a\u9012\u5f52\u7ee7\u7eed\u641c\uff0c\u76f4\u5230\u628a\u6240\u6709\u76f8\u8fde\u901a\u76841\u627e\u51fa\u6765\u4e3a\u6b62</p> <p>\u5982\u679c\u8bf4\u662fbfs\u7684\u8bdd\uff0c\u5c31\u662f\u5c06\u4e0a\u4e0b\u5de6\u53f3\u56db\u4e2a\u5404\u81ea\u6ca1\u6709\u6269\u5c55\u8fc7\u7684\u683c\u5b50\u653e\u5728\u961f\u5217\u91cc\u9762</p>"},{"location":"Problem/lc/Leetcode%20hot%20100/#310dfs","title":"3/10\u7b2c\u4e00\u6b21\u505a\uff0cdfs\u505a\u6cd5","text":"<pre><code>class Solution {\npublic:\n    // flood-fill\u7b97\u6cd5\uff1abfs\u548cdfs\u90fd\u53ef\u4ee5\u89e3\u51b3\n    // dfs\u6bd4bfs\u65b9\u4fbf\u7684\u5730\u65b9\u5728\u4e8e\u53ef\u4ee5\u4e0d\u7528\u5199\u961f\u5217\n    int dx[4] = {0, 1, 0, -1}, dy[4] = {1, 0, -1, 0};\n    int numIslands(vector&lt;vector&lt;char&gt;&gt;&amp; grid) {\n        int ans = 0;\n        int m = grid.size(), n = grid[0].size();\n        vector&lt;vector&lt;bool&gt;&gt; visited(m, vector&lt;bool&gt;(n, false));\n        for (int i = 0; i &lt; m; i++) {\n            for (int j = 0; j &lt; n; j++) {\n                if (grid[i][j] == '1' &amp;&amp; visited[i][j] == false) {\n                    ans++;\n                    dfs(grid, visited, i, j);\n                }\n            }\n        }\n        return ans;\n    }\n    void dfs(vector&lt;vector&lt;char&gt;&gt;&amp; grid, vector&lt;vector&lt;bool&gt;&gt;&amp; visited, int a, int b) {\n        visited[a][b] = true;\n        for (int i = 0; i &lt; 4; i++) {\n            int x = a + dx[i], y = b + dy[i];\n            if (x &lt; 0 || x &gt;= grid.size() || y &lt; 0 || y &gt;= grid[a].size()) continue;\n            if (grid[x][y] == '1' &amp;&amp; visited[x][y] == false) {\n                dfs(grid, visited, x, y);\n            }\n        }\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#310bfs","title":"3/10\u7b2c\u4e00\u6b21\u505a\uff0cbfs\u505a\u6cd5","text":"<pre><code>class Solution {\npublic:\n    int number = 0;\n    int dx[4] = {0, 1, 0, -1};\n    int dy[4] = {1, 0, -1, 0};\n    int numIslands(vector&lt;vector&lt;char&gt;&gt;&amp; grid) {\n        int m = grid.size();\n        int n = grid[0].size();\n        vector&lt;vector&lt;bool&gt;&gt; visited(m, vector&lt;bool&gt;(n, false));\n        for (int i = 0; i &lt; m; i++) {\n            for (int j = 0; j &lt; n; j++) {\n                if (grid[i][j] == '1' &amp;&amp; visited[i][j] == false) {\n                    number++;\n                    bfs(grid, i, j, visited);\n                }\n            }\n        }\n        return number;\n    }\n    void bfs(vector&lt;vector&lt;char&gt;&gt;&amp; grid, int i, int j, vector&lt;vector&lt;bool&gt;&gt;&amp; visited) {\n        queue&lt;pair&lt;int, int&gt;&gt; q;\n        q.push(make_pair(i, j));\n        visited[i][j] = true;\n\n        while (!q.empty()) {\n            pair&lt;int, int&gt; p = q.front();\n            int a = p.first;\n            int b = p.second;\n            q.pop();\n            for (int i = 0; i &lt; 4; i++) {\n                int nx = a + dx[i], ny = b + dy[i];\n                if (nx &lt; 0 || nx &gt;= grid.size() || ny &lt; 0 || ny &gt;= grid[0].size()) continue;\n                if (grid[nx][ny] == '1' &amp;&amp; visited[nx][ny] == false) {\n                    q.push(make_pair(nx, ny));\n                    visited[nx][ny] = true;\n                }\n            }\n        }\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#_27","title":"\u539f\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int dx[4] = {0, 1, 0, -1}, dy[4] = {-1, 0, 1, 0};\n    void bfs(vector&lt;vector&lt;char&gt;&gt; &amp; grid, vector&lt;vector&lt;bool&gt;&gt; &amp; visited, int x, int y) {\n        queue&lt;pair&lt;int, int&gt;&gt; que;\n        que.push({x, y});\n        visited[x][y] = true;\n        while (!que.empty()) {\n            pair&lt;int, int&gt; cur = que.front();\n            que.pop();\n            int a = cur.first;\n            int b = cur.second;\n            for (int i = 0; i &lt; 4; i++) {\n                int netx = a + dx[i];\n                int nety = b + dy[i];\n                if (netx &lt; 0 || nety &lt; 0 || netx &gt;= grid.size() || nety &gt;= grid[0].size()) continue;\n                if (!visited[netx][nety] &amp;&amp; grid[netx][nety] == '1') {\n                    que.push({netx, nety});\n                    visited[netx][nety] = true;\n                }\n            }\n        }\n    }\n    int numIslands(vector&lt;vector&lt;char&gt;&gt;&amp; grid) {\n        int n = grid.size(), m = grid[0].size();\n        vector&lt;vector&lt;bool&gt;&gt; visited = vector&lt;vector&lt;bool&gt;&gt;(n, vector&lt;bool&gt;(m, false));\n        int result = 0;\n        for (int i = 0; i &lt; n; i++) {\n            for (int j = 0; j &lt; m; j++) {\n                if (!visited[i][j] &amp;&amp; grid[i][j] == '1') {\n                    result++;\n                    bfs(grid, visited, i, j);\n                }\n            }\n        }\n        return result;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#994","title":"994. \u8150\u70c2\u7684\u6a58\u5b50","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#310bfs_1","title":"3/10\u7b2c\u4e00\u6b21\u505a\u6bd4\u8f83\u7b80\u5355\u7684bfs\u505a\u6cd5\uff0c\u9650\u5236\u7684\u6761\u4ef6\u6709\u4e9b\u591a\uff0c\u8981\u60f3\u6e05\u695a","text":"<pre><code>class Solution {\npublic:\n    int dx[4] = {0, 1, 0, -1}, dy[4] = {-1, 0, 1, 0};\n    int orangesRotting(vector&lt;vector&lt;int&gt;&gt;&amp; grid) {\n        int ans = -1;\n        // \u7528\u6765\u8bb0\u5f55\u65b0\u9c9c\u6a58\u5b50\u7684\u6570\u91cf\n        int newOrange = 0;\n        int m = grid.size(), n = grid[0].size();\n        // \u6beb\u65e0\u7591\u95ee\uff0c\u4f7f\u7528bfs\u7b97\u6cd5\n        queue&lt;pair&lt;int, int&gt;&gt; visited;\n        for (int i = 0; i &lt; m; i++) {\n            for (int j = 0; j &lt; n; j++) {\n                if (grid[i][j] == 2) visited.push(make_pair(i, j));\n                if (grid[i][j] == 1) newOrange++;\n            }\n        }\n        // \u5982\u679c\u6ca1\u6709\u65b0\u9c9c\u6a58\u5b50\uff0c\u76f4\u63a5\u8fd4\u56de\n        if (newOrange == 0) return 0;\n        // \u5982\u679c\u6ca1\u6709\u90a3\u5c31\u76f4\u63a5\u8fd4\u56de\n        // \u5982\u679c\u6709\u8150\u70c2\u7684\u6a58\u5b50\uff0c\u6bcf\u5206\u949fbfs\u4e00\u5708\n        while (!visited.empty()) {\n            ans++;\n            int size = visited.size();\n            for (int i = 0; i &lt; size; i++) {\n                pair&lt;int, int&gt; p = visited.front();\n                int a = p.first, b = p.second;\n                visited.pop();\n                // grid[a][b] = 2;\n                for (int j = 0; j &lt; 4; j++) {\n                    int x = a + dx[j], y = b + dy[j];\n                    if (x &lt; 0 || x &gt;= grid.size() || y &lt; 0 || y &gt;= grid[0].size()) continue;\n                    if (grid[x][y] == 1) {\n                        newOrange--;\n                        grid[x][y] = 2;\n                        visited.push(make_pair(x, y));\n                    } \n                }\n            }\n        }\n        // \u5982\u679c\u8fd8\u6709\u65b0\u9c9c\u6a58\u5b50\u6ca1\u6709\u8150\u70c2\uff0c\u8bf4\u660e\u662f\u4e00\u5ea7\u5b64\u5c9b\uff0c\u4e0d\u53ef\u80fd\u88ab\u8150\u70c2\u5230\u4e86\n        if (newOrange &gt; 0) return -1;\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#207","title":"207. \u8bfe\u7a0b\u8868","text":"<p>\u8fd9\u662f\u4e00\u9053\u6709\u5411\u56fe\u6c42\u62d3\u6251\u6392\u5e8f\u7684\u95ee\u9898\uff1a\u56fe\u7684bfs\u7684\u5e94\u7528</p> <p>\u6216\u8005\u8bf4\u8fd9\u4e2a\u6c42\u8fd9\u4e2a\u6709\u5411\u56fe\u4e2d\u662f\u5426\u6709\u73af</p> <p>\u6709\u5411\u56fe\u624d\u6709\u62d3\u6251\u5e8f\u5217\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u56fe\u4e2d\uff0c\u5bf9\u4e8e\u6bcf\u6761\u6709\u5411\u8fb9xy\uff0cx\u6c38\u8fdc\u5728y\u524d\u9762\uff0c\u90a3\u4e48\u5c31\u662f\u4e00\u4e2a\u62d3\u6251\u5e8f\u5217</p> <p>\u4e0d\u662f\u6240\u6709\u56fe\u90fd\u6709\u62d3\u6251\u5e8f\uff0c\u4f46\u662f\u6709\u5411\u65e0\u73af\u56fe\u5fc5\u5b9a\u6709\u62d3\u6251\u5e8f\u5217 </p> <p>\u4e00\u4e2a\u6709\u5411\u65e0\u73af\u56fe\u4e00\u5b9a\u81f3\u5c11\u5b58\u5728\u4e00\u4e2a\u5165\u5ea6\u4e3a0\u7684\u70b9\uff08\u8bc1\u660e\uff1a\u62bd\u5c49\u539f\u7406\uff09</p> <p>\u5165\u5ea6\uff1a\u6307\u5411\u81ea\u5df1\u7684\u8fb9\u6570\uff1b\u51fa\u5ea6\uff1a\u6307\u5411\u522b\u4eba\u7684\u8fb9\u6570</p> <p>\u6240\u6709\u5165\u5ea6\u4e3a0\u7684\u90fd\u80fd\u6392\u5728\u524d\u9762\u6307\u5411\u522b\u4eba</p> <p>\u5c06\u6240\u6709\u5165\u5ea6\u4e3a0\u7684\u70b9\u5165\u961f\uff0c\u7136\u540e\u5f53\u961f\u5217\u4e0d\u662f\u7a7a\u7684\u65f6\u5019\uff0c\u5c06\u6240\u6709\u7684\u51fa\u8fb9\u5220\u6389\uff0c\u53ea\u5f71\u54cdj\u7684\u5165\u5ea6\u51cf\u4e00</p> <ol> <li>\u7edf\u8ba1\u6240\u6709\u70b9\u7684\u5165\u5ea6\uff0c\u5c31\u662f\u6709\u591a\u5c11\u6761\u8fb9\u6307\u5411\u5b83</li> <li>\u5c06\u6240\u6709\u5165\u5ea6\u4e3a0\u7684\u70b9\u52a0\u5165\u961f\u5217\uff0c\u961f\u5217\u7ef4\u62a4\u7684\u5c31\u662f\u6240\u6709\u5f53\u524d\u5165\u5ea6\u4e3a0\u7684\u70b9</li> <li>\u7136\u540e\u4ece\u5165\u5ea6\u4e3a0\u7684\u70b9\u51fa\u53d1\uff0c\u5411\u5916\u6269\u6563\uff0c\u6bcf\u5230\u4e00\u4e2a\u70b9\uff0c\u5b83\u7684\u5165\u5ea6\u5c31\u51cf\u4e00\uff0c\u5982\u679c\u521a\u597d\u4ed6\u7684\u5165\u5ea6\u51cf\u4e3a0\uff0c\u90a3\u4e48\u4e5f\u52a0\u5165\u961f\u5217</li> <li>\u6700\u540e\u5224\u65ad\u662f\u4e0d\u662f\u6240\u6709\u70b9\u90fd\u5df2\u7ecf\u88ab\u904d\u5386\u8fc7\u4e86</li> </ol>"},{"location":"Problem/lc/Leetcode%20hot%20100/#310","title":"3/10\u975e\u5e38\u6a21\u677f\u975e\u5e38\u7ecf\u5178\u7684\u4e00\u9053\u62d3\u6251\u6392\u5e8f\u95ee\u9898\uff0c\u591a\u505a\u51e0\u904d\uff01","text":"<pre><code>class Solution {\npublic:\n    bool canFinish(int numCourses, vector&lt;vector&lt;int&gt;&gt;&amp; prerequisites) {\n        // \u62d3\u6251\u6392\u5e8f\u95ee\u9898\u7684\u7279\u6b8a\u89e3\u6cd5:\u662f\u56fe\u7684bfs\u5e94\u7528\n        // \u8bb0\u5f55\u6bcf\u4e2a\u70b9\u7684\u5165\u5ea6\n        vector&lt;int&gt; d(numCourses);\n        // \u5bf9\u4e8e[x, y],\u5fc5\u987b\u8981\u5148\u5b66\u8fc7y\u624d\u80fd\u5b66\u4e60x\n        // g\u4e2d\u8bb0\u5f55\u7684\u662f\u6bcf\u4e2a\u70b9\u7684\u51fa\u8fb9\uff0c\u8fd9\u6837\u5f53a\u7684\u5165\u5ea6 == 0\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u80fd\u5c06g[a]\u4e2d\u6240\u6709\u7684\u51fa\u8fb9\u7ed9\u5220\u9664\n        vector&lt;vector&lt;int&gt;&gt; g(numCourses);\n        for (auto&amp; p : prerequisites) {\n            int a = p[0], b = p[1];\n            d[a]++;\n            g[b].push_back(a);\n        }\n\n        queue&lt;int&gt; q;\n        for (int i = 0; i &lt; numCourses; i++) {\n            if (d[i] == 0) q.push(i);\n        }\n        int count = 0;\n        while (!q.empty()) {\n            count++;\n            int x = q.front();\n            q.pop();\n            for (int i = 0; i &lt; g[x].size(); i++) {\n                if (--d[g[x][i]] == 0) {\n                    q.push(g[x][i]);\n                }\n            }\n        }\n        return count == numCourses;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#208-trie","title":"208. \u5b9e\u73b0 Trie (\u524d\u7f00\u6811)","text":"<p>\u5728 C++ \u4e2d\uff0c<code>this</code> \u5173\u952e\u5b57\u662f\u4e00\u4e2a\u6307\u9488\uff0c\u6307\u5411\u5bf9\u8c61\u672c\u8eab\u7684\u5185\u5b58\u5730\u5740</p>"},{"location":"Problem/lc/Leetcode%20hot%20100/#310_1","title":"3/10\u7b2c\u4e00\u6b21\u505a\uff0c\u975e\u5e38\u7ecf\u5178\u503c\u5f97\u505a\u5f88\u591a\u6b21\uff0c\u603b\u662f\u5fd8\u8bb0","text":"<pre><code>class Trie {\n    vector&lt;Trie*&gt; children;\n    bool isEnd;\n    Trie* searchPrefix (string word) {\n        Trie* node = this;\n        for (char ch : word) {\n            ch = ch - 'a';\n            if (node-&gt;children[ch] == nullptr) {\n                return nullptr;\n            }\n            else {\n                node = node-&gt;children[ch];\n\n            }\n        }\n        return node;\n    }\n\npublic:\n    Trie() : children(26), isEnd(false) {}\n\n    void insert(string word) {\n        Trie* node = this;\n        for (char ch : word) {\n            ch = ch - 'a';\n            if (node-&gt;children[ch] == nullptr) {\n                node-&gt;children[ch] = new Trie();\n                node = node-&gt;children[ch];\n            }\n            else node = node-&gt;children[ch];\n        }\n        node-&gt;isEnd = true;\n    }\n\n    bool search(string word) {\n        Trie* node = searchPrefix(word);\n        return node != nullptr &amp;&amp; node-&gt;isEnd == true;\n    }\n\n    bool startsWith(string prefix) {\n        Trie* node = searchPrefix(prefix);\n        return node != nullptr;\n    }\n};\n\n/**\n * Your Trie object will be instantiated and called as such:\n * Trie* obj = new Trie();\n * obj-&gt;insert(word);\n * bool param_2 = obj-&gt;search(word);\n * bool param_3 = obj-&gt;startsWith(prefix);\n */\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#_28","title":"\u539f\u7b54\u6848","text":"<pre><code>class Trie {\nprivate:\n    vector&lt;Trie*&gt; children;\n    bool isEnd;\n    Trie* searchPrefix(string word) {\n        Trie* node = this;\n        for (char ch : word) {\n            ch -= 'a';\n            if (node-&gt;children[ch] == nullptr) {\n                return nullptr;\n            }\n            node = node-&gt;children[ch];\n        }\n        return node;\n    }\n\npublic:\n    Trie() : children(26), isEnd(false) {}\n\n    void insert(string word) {\n        Trie* node = this;\n        for (char ch : word) {\n            ch -= 'a';\n            if (node-&gt;children[ch] == nullptr) {\n                node-&gt;children[ch] = new Trie();\n            }\n            node = node-&gt;children[ch];\n\n        }\n        node-&gt;isEnd = true;\n    }\n\n    bool search(string word) {\n        Trie* node = searchPrefix(word);\n        return node != nullptr &amp;&amp; node-&gt;isEnd == true;\n    }\n\n    bool startsWith(string prefix) {\n        Trie* node = searchPrefix(prefix);\n        return node != nullptr;\n    }\n};\n\n/**\n * Your Trie object will be instantiated and called as such:\n * Trie* obj = new Trie();\n * obj-&gt;insert(word);\n * bool param_2 = obj-&gt;search(word);\n * bool param_3 = obj-&gt;startsWith(prefix);\n */\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#_29","title":"\u56de\u6eaf","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#46","title":"46. \u5168\u6392\u5217","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#311swap","title":"3/11\u7b2c\u4e00\u6b21\u505a\u7528swap\uff0c\u611f\u89c9\u66f4\u52a0\u4f18\u96c5\u4e00\u4e9b","text":"<pre><code>class Solution {\npublic:\n    // \u7b2c\u4e8c\u79cd\u65b9\u6cd5\u7528\u6765\u4fdd\u8bc1\u4e0d\u4f1a\u518ddfs\u5df2\u7ecf\u7ecf\u8fc7\u7684\u70b9\uff1a\n    // \u65e2\u7136\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u662f\u5b9a\u7684\uff0c\u6211\u4eec\u53ea\u9700\u8981\u6bcf\u6b21dfs\u5c06\u6211\u4eec\u60f3\u8981\u7684\u90a3\u4e2a\u6570\u5b57swap\u8fc7\u6765\u5c31\u884c\u4e86\n    vector&lt;vector&lt;int&gt;&gt; ans;\n    vector&lt;vector&lt;int&gt;&gt; permute(vector&lt;int&gt;&amp; nums) {\n        dfs(nums, 0);\n        return ans;\n    }\n    void dfs(vector&lt;int&gt;&amp; nums, int n) {\n        // n\uff1a\u6b63\u5728\u786e\u5b9anums\u7684\u7b2c\u51e0\u4e2a\u4f4d\u7f6e\n        if (n == nums.size()) ans.push_back(nums);\n        for (int i = n; i &lt; nums.size(); i++) {\n            // n\u4e4b\u524d\u7684\u4f4d\u7f6e\u90fd\u5df2\u7ecf\u786e\u5b9a\u597d\u4e86\uff0c\u4e0d\u80fd\u52a8\n            swap(nums[i], nums[n]);\n            dfs(nums, n + 1);\n            // \u6ce8\u610fnums\u662f\u52a8\u6001\u7ef4\u62a4\u7684\u6570\u7ec4\n            // \u4e0d\u8981\u5fd8\u8bb0\u64a4\u9500\u6389\u52a8\u6001\u7ef4\u62a4\u7684\u6570\u7ec4\n            swap(nums[i], nums[n]);\n        }\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#311","title":"3/11\u7b2c\u4e00\u6b21\u505a\uff0c\u7b2c\u4e00\u79cd\u5b9e\u73b0\u65b9\u5f0f","text":"<pre><code>class Solution {\npublic:\n    // \u4e24\u79cd\u65b9\u6cd5\u6765\u4fdd\u8bc1\u6211\u4eec\u4e0d\u4f1a\u518ddfs\u5df2\u7ecf\u7ecf\u8fc7\u7684\u70b9\n    // \u7b2c\u4e00\u79cd\u662f\u901a\u8fc7\u4e00\u4e2a\u5168\u5c40\u7684vector&lt;bool&gt; visited\u6570\u7ec4\u6765\u786e\u4fdd\u6ca1\u6709\u91cd\u590d\u8bbf\u95ee\n    // \u7b2c\u4e8c\u79cd\u5de7\u5999\u7684\u529e\u6cd5\u662f\u5728dfs\u7b2cn\u4f4d\u6570\u65f6\uff0c\u5c06dfs\u5230\u7684\u90a3\u4e2a\u6570\u6362\u5230\u7b2cn\u4f4d\u4e0a\u6765\uff0c\u90a3\u4e48\u4ece0~n-1\u5c31\u662fpath\n    vector&lt;bool&gt; visited;\n    vector&lt;vector&lt;int&gt;&gt; ans;\n    vector&lt;vector&lt;int&gt;&gt; permute(vector&lt;int&gt;&amp; nums) {\n        int n = nums.size();\n        visited = vector&lt;bool&gt;(n, false);\n        vector&lt;int&gt; path;\n        dfs(nums, path, 0);\n        return ans;\n    }\n    void dfs(vector&lt;int&gt;&amp; nums, vector&lt;int&gt;&amp; path, int n) {\n        if (n == nums.size()) ans.push_back(path);\n        for (int i = 0; i &lt; nums.size(); i++) {\n            if (visited[i] == false) {\n                path.push_back(nums[i]);\n                visited[i] = true;\n                dfs(nums, path, n+1);\n                visited[i] = false;\n                path.pop_back();\n            }\n        }\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#_30","title":"\u539f\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; permute(vector&lt;int&gt;&amp; nums) {\n        vector&lt;vector&lt;int&gt;&gt; ans;\n        vector&lt;int&gt; path(nums.size());\n        vector&lt;bool&gt; mark(nums.size(), false);\n        function&lt;void(int)&gt; dfs = [&amp;] (int i) {\n            if (i == nums.size()) {\n                ans.emplace_back(path);\n                return;\n            }\n            for (int j = 0; j &lt; nums.size(); j++) {\n                if (mark[j] == false) {\n                    path[i] = nums[j];\n                    mark[j] = true;\n                    dfs(i + 1);\n                    mark[j] = false;\n                }\n            }\n        };\n        dfs(0);\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#78","title":"78. \u5b50\u96c6","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#311return","title":"3/11\u7b2c\u4e00\u6b21\u505a\uff0c\u4e0d\u96be\uff0c\u4f46\u662f\u4e0d\u8981\u5fd8\u8bb0return","text":"<pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; ans;\n    vector&lt;vector&lt;int&gt;&gt; subsets(vector&lt;int&gt;&amp; nums) {\n        // \u6ce8\u610f\u8fd9\u9053\u9898\u4e0d\u9700\u8981\u6709\u987a\u5e8f\n        vector&lt;int&gt; path;\n        dfs(nums, 0, path);\n        return ans;\n    }\n    void dfs(vector&lt;int&gt;&amp; nums, int n, vector&lt;int&gt;&amp; path) {\n        if (n == nums.size()) {\n            ans.push_back(path);\n            // \u5343\u4e07\u4e0d\u8981\u5fd8\u8bb0\u8fd9\u4e2areturn!\n            return;\n        }\n        // \u4e0d\u8981\u7b2cn\u4f4d\u4e0a\u7684\u6570\u5b57\n        dfs(nums, n + 1, path);\n        // \u8981\u7b2cn\u4f4d\u4e0a\u7684\u6570\u5b57\n        path.push_back(nums[n]);\n        dfs(nums, n + 1, path);\n        path.pop_back();\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#17","title":"17. \u7535\u8bdd\u53f7\u7801\u7684\u5b57\u6bcd\u7ec4\u5408","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#311_1","title":"3/11\u7b2c\u4e00\u6b21\u505a\uff0c\u8f93\u5165\u77e9\u9635\u7684\u65f6\u5019\u4e0d\u8981\u5fd8\u8bb0\u6253\u9017\u53f7","text":"<pre><code>class Solution {\npublic:\n    // \u5343\u4e07\u6ce8\u610f\u8fd9\u4e2a\u800c\u77e9\u9635\u4e0d\u8981\u8f93\u9519\uff0c\u6f0f\u6253\u9017\u53f7\uff01\n    vector&lt;string&gt; tel = {\"\", \"\", \"abc\", \"def\",\n                        \"ghi\", \"jkl\", \"mno\",\n                        \"pqrs\", \"tuv\", \"wxyz\"};\n    vector&lt;string&gt; ans;\n    vector&lt;string&gt; letterCombinations(string digits) {\n        string path;\n        dfs(digits, path, 0);\n        return ans;\n    }\n    void dfs(string&amp; digits, string&amp; path, int n) {\n        if (n == digits.size()) {\n            if (path.size() != 0) ans.push_back(path);\n            return;\n        }\n\n        for (int i = 0; i &lt; tel[digits[n] - '0'].size(); i++) {\n            path += tel[digits[n] - '0'][i];\n            dfs(digits, path, n+1);\n            path.pop_back();\n        }\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#_31","title":"\u539f\u7b54\u6848","text":"<pre><code>class Solution {\n    string map[10] = {\"\", \"\", \"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqrs\", \"tuv\", \"wxyz\"};\npublic:\n    vector&lt;string&gt; letterCombinations(string digits) {\n        int n = digits.length();\n        if (n == 0) return {};\n        vector&lt;string&gt; ans;\n        // \u521d\u59cb\u5316n\u4e2a\u5b57\u7b26\uff0c\u7136\u540e\u521d\u59cb\u5316\u6240\u6709\u5b57\u6bcd\u4e3a0\n        string path(n, 0);\n        // function&lt;void(int)&gt;\u8868\u793a\u662f\u4e00\u4e2a\u51fd\u6570\u6a21\u677f\n        // \u8fd4\u56de\u7684\u662fvoid \u8f93\u5165\u7684\u662fint\n        // [&amp;]\u8868\u793a\u51fd\u6570\u5185\u80fd\u591f\u8c03\u7528\u6240\u6709\u5916\u90e8\u53d8\u91cf\u7684\u5f15\u7528\n        // int i \u8868\u793a\u8f93\u5165\u7684\u53d8\u91cf\u662fi\n        function&lt;void(int)&gt; dfs = [&amp;] (int i) {\n            if (i == n) {\n                ans.emplace_back(path);\n                return;\n            }\n            for (char c : map[digits[i] - '0']) {\n                path[i] = c;\n                dfs(i + 1);\n            }\n        };\n        dfs(0);\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#39","title":"39. \u7ec4\u5408\u603b\u548c","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#311acwing","title":"3/11acwing\u5199\u6cd5\u975e\u5e38\u7b80\u6d01\uff0c\u503c\u5f97\u5b66\u4e60","text":"<pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; ans;\n    vector&lt;vector&lt;int&gt;&gt; combinationSum(vector&lt;int&gt;&amp; candidates, int target) {\n        vector&lt;int&gt; path;\n        dfs(candidates, path, target, 0);\n        return ans;\n    }\n    void dfs(vector&lt;int&gt;&amp; candidates, vector&lt;int&gt;&amp; path, int target, int n) {\n        if (target == 0) {\n            ans.push_back(path);\n            return;\n        }\n        if (n == candidates.size()) return;\n        for (int i = 0; candidates[n] * i &lt;= target; i++) {\n            // \u5148\u8fdb\u884cdfs\uff0c\u56e0\u4e3a\u9700\u8981\u6709i = 0\u7684\u60c5\u51b5\n            dfs(candidates, path, target - candidates[n] * i, n + 1);\n            path.push_back(candidates[n]);\n        }\n        for (int i = 0; candidates[n] * i &lt;= target; i++) {\n            path.pop_back();\n        }\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#311_2","title":"3/11\u7b2c\u4e00\u6b21\u505a\uff0c\u4e0d\u7b80\u6d01\uff0c\u4f46\u662f\u526a\u679d\u5f97\u597d","text":"<p>\u56e0\u4e3a\u662f\u6240\u6709\u65b9\u6848\uff0c\u6240\u4ee5\u5f88\u96be\u6709\u4ec0\u4e48\u4f18\u5316\uff0c\u76f4\u63a5\u66b4\u641c\u5c31\u884c</p> <pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; ans;\n    vector&lt;vector&lt;int&gt;&gt; combinationSum(vector&lt;int&gt;&amp; candidates, int target) {\n        // \u5178\u578b\u7684\u7ec4\u5408\u6c42\u548c\u95ee\u9898\uff0c\u662f\u4f7f\u7528\u56de\u6eaf\u6765\u505a\u7684\uff0c\u800c\u4e14\u66f4\u52a0\u5bb9\u6613\u5b9e\u73b0\u526a\u679d\n        vector&lt;int&gt; path;\n        dfs(candidates, path, 0, 0, target);\n        return ans;\n    }\n    void dfs(vector&lt;int&gt;&amp; candidates, vector&lt;int&gt;&amp; path, int n, int sum, int target) {\n        if (n == candidates.size() - 1) {\n            if ((target - sum) % candidates[n] == 0) {\n                int m = (target - sum) / candidates[n];\n                int m2 = m;\n                // cout &lt;&lt; m &lt;&lt; endl;\n                while (m--) path.push_back(candidates[n]);\n                ans.push_back(path);\n                while (m2--) path.pop_back();\n                return;\n            }\n            else return;\n        }\n\n        int m = (target - sum) / candidates[n];\n        for (int i = 0; i &lt;= m; i++) {\n            int x1 = i, x2 = i;\n            while (x1--) {\n                path.push_back(candidates[n]);\n                sum += candidates[n];\n            }\n            dfs(candidates, path, n + 1, sum, target);\n            while(x2--) {\n                path.pop_back();\n                sum -= candidates[n];\n            }\n        }\n    }\n\n\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#22","title":"22. \u62ec\u53f7\u751f\u6210","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#311_3","title":"3/11\u7b2c\u4e00\u6b21\u505a\uff0c\u8fd8\u662f\u6bd4\u8f83\u7b80\u5355\u7684\u601d\u8003","text":"<pre><code>class Solution {\npublic:\n    // \u5f88\u660e\u663e1. \u8981\u7ed9\u51fa\u6240\u6709\u7684\u6392\u5217\u7ec4\u5408\uff0c\u90a3\u4e48\u66b4\u641c\u65e0\u6cd5\u907f\u514d\uff1b2. \u8fd9\u9053\u9898\u7684\u6027\u8d28\u662f\u4efb\u4f55\u65f6\u5019\u53f3\u62ec\u53f7\u7684\u6570\u91cf\u8981\u5c0f\u4e8e\u7b49\u4e8e\u5de6\u62ec\u53f7\u7684\u6570\u91cf \n    // 3.\u90a3\u4e48\u5c31\u662f\u8fd8\u9700\u8981\u6dfb\u52a0\u7684\u53f3\u62ec\u53f7\u7684\u6570\u91cf\u8981\u5927\u4e8e\u5de6\u62ec\u53f7\u7684\u6570\u91cf\n    vector&lt;string&gt; ans;\n    vector&lt;string&gt; generateParenthesis(int n) {\n        string path;\n        dfs(path, n, n);\n        return ans;\n    }\n    void dfs(string&amp; path, int left, int right) {\n        if (left == 0) {\n            int x = right;\n            while (x--) path += ')';\n            ans.push_back(path);\n            while (right--) path.pop_back();\n            return;\n        }\n        // \u5bf9\u4e8e\u6bcf\u4e00\u6b21dfs\u8981\u4e48\u52a0\u5de6\u62ec\u53f7\n        path += '(';\n        dfs(path, left - 1, right);\n        path.pop_back();\n        // \u8981\u4e48\u52a0\u53f3\u62ec\u53f7\n        if (right &gt; left) {\n            path += ')';\n            dfs(path, left, right - 1);\n            path.pop_back();\n        }\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#_32","title":"\u539f\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    vector&lt;string&gt; generateParenthesis(int n) {\n        vector&lt;string&gt; ans;\n        string path;\n        function&lt;void(int, int)&gt; dfs = [&amp;] (int l, int r) {\n            if (l == 0 &amp;&amp; r == 0) {\n                ans.emplace_back(path);\n                return;\n            }\n            if (r &gt; l) {\n                path.push_back(')');\n                dfs(l, r - 1);\n                path.pop_back();\n            }\n            if (l &gt; 0) {\n                path.push_back('(');\n                dfs(l - 1, r);\n                path.pop_back();\n            }\n        };\n        dfs(n, n);\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#79","title":"79. \u5355\u8bcd\u641c\u7d22","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#311-dfs","title":"3/11 \u7b2c\u4e00\u6b21\u505a\uff0c\u81ea\u5df1\u7684dfs\u65b9\u6cd5\uff0c\u4f46\u662f\u80fd\u505a\u51fa\u6765","text":"<pre><code>class Solution {\npublic:\n    int dx[4] = {0, 1, 0, -1}, dy[4] = {1, 0, -1, 0};\n    bool exist(vector&lt;vector&lt;char&gt;&gt;&amp; board, string word) {\n        // \u9700\u8981\u627e\u51fa\u6240\u6709\u7684\u53ef\u80fd\u60c5\u51b5\uff0c\u4f7f\u7528\u66b4\u641c\n        int m = board.size(), n = board[0].size();\n        vector&lt;vector&lt;bool&gt;&gt; visited(m, vector&lt;bool&gt;(n, false));\n        for (int i = 0; i &lt; m; i++) {\n            for (int j = 0; j &lt; n; j++) {\n                if (board[i][j] == word[0]) {\n                    if (dfs(board, visited, word, i, j, 1)) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n    bool dfs(vector&lt;vector&lt;char&gt;&gt;&amp; board, vector&lt;vector&lt;bool&gt;&gt;&amp; visited, string&amp; word, int a, int b, int n) {\n        if (n == word.size()) return true;\n        visited[a][b] = true;\n        for (int i = 0; i &lt; 4; i++) {\n            int x = a + dx[i], y = b + dy[i];\n            if (x &lt; 0 || y &lt; 0 || x &gt;= board.size() || y &gt;= board[0].size()) continue;\n            if (board[x][y] == word[n] &amp;&amp; visited[x][y] == false) {\n                if (dfs(board, visited, word, x, y, n + 1)){\n                    return true;\n                }\n            }\n        }\n        visited[a][b] = false;\n        return false;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#131","title":"131. \u5206\u5272\u56de\u6587\u4e32","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#311dfs","title":"3/11\u7b2c\u4e00\u6b21\u505a\uff0c\u4e0d\u8981\u601d\u8003\u7684\u592a\u8fc7\u590d\u6742\uff0c\u5bf9\u4e8e\u56de\u6587\u4e32\u7684\u5904\u7406\u4ee5\u53cadfs\u7684\u60c5\u51b5\u5904\u7406\uff0c\u5efa\u8bae\u591a\u505a\u51e0\u904d","text":"<pre><code>class Solution {\npublic:\n    // 1. \u5224\u65ad\u662f\u5426\u4e3a\u56de\u6587\u4e32\n    // 2. dfs\u5206\u5272\u66b4\u641c\n\n    // \u6ce8\u610f\u68c0\u67e5\u56de\u6587\u4e00\u822c\u56de\u76f4\u63a5\u901a\u8fc7\u5b57\u7b26\u4e32\u7684\u7d22\u5f15\u6765\u8fdb\u884c\uff0c\u800c\u4e0d\u9700\u8981\u989d\u5916\u7684\u7ed3\u6784\n    vector&lt;vector&lt;string&gt;&gt; ans;\n    vector&lt;vector&lt;string&gt;&gt; partition(string s) {\n        vector&lt;string&gt; path;\n        dfs(s, 0, path);\n        return ans;\n    }\n\n    void dfs(string&amp; s, int start, vector&lt;string&gt;&amp; path) {\n        if (start == s.size()) {\n            ans.push_back(path);\n            return;\n        }\n        for (int end = start; end &lt; s.size(); end++) {\n            if (isPalindrome(s, start, end)) {\n                path.push_back(s.substr(start, end - start + 1));\n                dfs(s, end + 1, path);\n                path.pop_back();\n            }\n\n        }\n    }\n\n    bool isPalindrome(string&amp; s, int start, int end) {\n        while (start &lt; end) {\n            if (s[start++] != s[end--]) {\n                return false;\n            }\n        }\n        return true;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#51-n","title":"51. N \u7687\u540e","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#311n","title":"3/11\u7b2c\u4e00\u6b21\u505a\uff0cN\u7687\u540e\u95ee\u9898\u7684\u601d\u8003\u503c\u5f97\u591a\u505a\u51e0\u6b21","text":"<pre><code>class Solution {\npublic:\n    // \u7b2c\u4e00\u70b9\u6bcf\u4e00\u884c\u53ea\u80fd\u653e\u4e00\u4e2a\n    // \u5982\u4f55\u5b58\u50a8\u5df2\u7ecf\u88ab\u5360\u9886\u7684\u5217\n\n    // \u540c\u4e00\u4e2a\u659c\u8fb9\u5e94\u8be5\u5982\u4f55\u8868\u793a:(i, j)\n    // \u5de6\u4e0a\u53f3\u4e0b\uff1aj = i -&gt; j - i + n \u53d6\u503c\u8303\u56f4\u662f0 - (n - 1) + n = 1 ~2n -1\n    // \u53f3\u4e0a\u5de6\u4e0b: j = -i-&gt; j + i \u53d6\u503c\u8303\u56f4\u662f0~2n-2\n    // \u5bf9\u89d2\u7ebf\u7684\uff1adiagonal\n\n    vector&lt;bool&gt; dg;\n    vector&lt;bool&gt; udg;\n    vector&lt;bool&gt; col;\n    vector&lt;string&gt; path;\n    vector&lt;vector&lt;string&gt;&gt; ans;\n    vector&lt;vector&lt;string&gt;&gt; solveNQueens(int n) {\n        dg = vector&lt;bool&gt;(2 * n, false);\n        udg = vector&lt;bool&gt; (2 * n, false);\n        col = vector&lt;bool&gt;(n, false);\n        path = vector&lt;string&gt;(n, string(n, '.'));\n        dfs(0);\n        return ans;\n    }\n    // i\u4ee3\u8868\u5904\u7406\u7b2ci\u884c\u653e\u7f6e\u7684\u4e1c\u897f\n    void dfs(int i) {\n        int n = path.size();\n        if (i == n) {\n            ans.push_back(path);\n            return;\n        }\n        for (int j = 0; j &lt; path.size(); j++) {\n            if (!col[j] &amp;&amp; !dg[j + i] &amp;&amp; !udg[j - i + n]) {\n                path[i][j] = 'Q';\n                col[j] = dg[j + i] = udg[j - i + n] = true;\n                dfs(i + 1);\n                path[i][j] = '.';\n                col[j] = dg[j + i] = udg[j - i + n] = false;\n            }\n        }\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#_33","title":"\u539f\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;string&gt;&gt; solveNQueens(int n) {\n        // \u601d\u8003\uff1a\u5982\u4f55\u53ea\u67e5\u8be2\u4e00\u6b21\u5c31\u80fd\u8868\u793a\u5bf9\u89d2\u7ebf\u4e0a\u51fa\u73b0\u8fc7Q\n        // \u5de6\u4e0a\u53f3\u4e0b\u5982\u4f55\u5bf9\u89d2\u7ebf\u5982\u4f55\u8868\u793a\uff1f\n\n        // \u4ee5\u7b2c0\u884c\uff0c\u7b2c2\u683c\u4e0a\u653eQ\u4e3a\u4f8b (i, j)\n        // \u5de6\u4e0a\u53f3\u4e0b\uff1a j - i + n (\u8fd9\u91cc+n\u662f\u56e0\u4e3aj - i)\n        // \u53f3\u4e0a\u5de6\u4e0b j + i\n\n        vector&lt;vector&lt;string&gt;&gt; ans;\n        vector&lt;int&gt; tmp;\n        // \u8bf7\u4e00\u5b9a\u4e0d\u8981\u5fd8\u8bb0\u4f7f\u7528\u4e0b\u9762\u8fd9\u79cdstring\u6570\u7ec4\u7684\u58f0\u660e\u65b9\u6cd5\n        // vector&lt;string&gt; path(n, string(n, '.'));\n\n        // vector&lt;string&gt; path;\n        // for (int i = 0; i &lt; n; i++ ) {\n        //     for (int j =0;j &lt; n ;j++) {\n        //         path[i][j] ='.';\n        //     }\n        // }\n        vector&lt;string&gt; path(n);\n        for (int i = 0; i &lt; n; i++) {\n                path[i] = string(n, '.');\n        }\n        vector&lt;bool&gt; col(n, false), dg(2 * n, false), udg(2 * n, false);\n\n        function&lt;void(int)&gt; dfs = [&amp;] (int i) {\n            if (i == n) {\n                ans.emplace_back(path);\n                return;\n            }\n            for (int j = 0; j &lt; n; j++) {\n                if (!col[j] &amp;&amp; !dg[j + i] &amp;&amp; !udg[j - i + n]) {\n                    path[i][j] = 'Q';\n                    col[j] = dg[j + i] = udg[j - i + n] = true;\n                    dfs(i + 1);\n                    col[j] = dg[j + i] = udg[j - i + n] = false;\n                    path[i][j] = '.';\n                }\n            }\n        };\n        dfs(0);\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#_34","title":"\u4e8c\u5206\u67e5\u627e","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#35_3","title":"35. \u641c\u7d22\u63d2\u5165\u4f4d\u7f6e","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#319","title":"3/19\u7b2c\u4e00\u6b21\u505a","text":"<pre><code>class Solution {\npublic:\n    int searchInsert(vector&lt;int&gt;&amp; nums, int target) {\n        int l = 0, r = nums.size() - 1;\n        while (l &lt; r) {\n            int mid = (l + r) &gt;&gt; 1;\n            int x = nums[mid];\n            // \u627e\u5927\u4e8e\u7b49\u4e8etarget\u7684\u6700\u5c0f\u503c\n            if (x &lt; target) {\n                l = mid + 1;\n            }\n            else {\n                r = mid;\n            }\n        }\n        if (nums[l] == target) return l;\n        else if (l == nums.size() - 1 &amp;&amp; target &gt; nums[l]) return l + 1;\n        return l;\n    }\n};\n</code></pre> <pre><code>class Solution {\npublic:\n    int searchInsert(vector&lt;int&gt;&amp; nums, int target) {\n        int l = 0, r = nums.size() - 1;\n        while (l &lt; r) {\n            int mid = (l + r) &gt;&gt; 1;\n            if (nums[mid] &gt;= target) r = mid;\n            else l = mid + 1; \n        }\n        printf(\"%d %d\", l, r);\n        if (nums[l] == target) return l;\n        else if (l == nums.size() - 1 &amp;&amp; target &gt; nums[l]) return l + 1;\n        else return l;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#74","title":"74. \u641c\u7d22\u4e8c\u7ef4\u77e9\u9635","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#319_1","title":"3/19\u7b2c\u4e00\u6b21\u505a","text":"<pre><code>class Solution {\npublic:\n    bool searchMatrix(vector&lt;vector&lt;int&gt;&gt;&amp; matrix, int target) {\n        int m = matrix.size(), n = matrix[0].size();\n        int l = 0, r = m * n - 1;\n        while (l &lt; r) {\n            int mid = (l + r) &gt;&gt; 1;\n            int rm = mid / n;\n            int rn = mid - (n * rm);\n            // if (rm &lt; 0 || rm &gt;= m || rn &lt; 0 || rn &gt;= n) {\n            //     cout &lt;&lt; mid &lt;&lt; ' ' &lt;&lt; rm &lt;&lt; ' ' &lt;&lt; rn &lt;&lt; endl;\n            //     return false;\n            // }\n            int x = matrix[rm][rn];\n            if (x &lt; target) {\n                l = mid + 1;\n            }\n            else r = mid;\n        }\n        int rm = l / n;\n        int rn = l- (n * rm);\n        if (matrix[rm][rn] == target) return true;\n        else return false;\n\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#34_12","title":"34. \u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u67e5\u627e\u5143\u7d20\u7684\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#319_2","title":"3/19\u7b2c\u4e00\u6b21\u505a\uff0c\u4e8c\u5206\u771f\u7684\u4e0d\u96be","text":"<pre><code>class Solution {\npublic:\n    int searchLeft(vector&lt;int&gt;&amp; nums, int target) {\n        int l = 0, r = nums.size() - 1;\n        while (l &lt; r) {\n            int mid = (l + r) &gt;&gt; 1;\n            int x = nums[mid];\n            if (x &gt;= target) {\n                r = mid;\n            }\n            else l = mid + 1;\n        }\n        return l;\n    }\n\n    int searchRight(vector&lt;int&gt;&amp; nums, int target) {\n\n        int l = 0, r = nums.size() - 1;\n        while (l &lt; r) {\n            int mid = (l + r + 1)&gt;&gt; 1;\n            int x = nums[mid];\n            if (x &lt;= target) {\n                l = mid;\n            }\n            else r = mid - 1;\n        }\n        return l;\n    }\n\n    vector&lt;int&gt; searchRange(vector&lt;int&gt;&amp; nums, int target) {\n        if (!nums.size()) return {-1, -1};\n        // \u9700\u8981\u627e\u51fa\u5927\u4e8e\u7b49\u4e8et\u7684\u6700\u5c0f\u503c\uff0c\u4ee5\u53ca\u5c0f\u4e8e\u7b49\u4e8et\u7684\u6700\u5927\u503c\n        // \u4e24\u6b21\u4e8c\u5206\u5373\u53ef\n        int l = searchLeft(nums, target);\n        int r = searchRight(nums, target);\n        if (nums[l] == target &amp;&amp; nums[r] == target) return {l, r};\n        else return {-1, -1};\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#_35","title":"\u539f\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int searchLeft(vector&lt;int&gt;&amp; nums, int target) {\n       int l = 0, r = nums.size() - 1;\n       // \u5bfb\u627e\u5de6\u8fb9\u754c\uff08\u5373\u5927\u4e8e\u7b49\u4e8e\uff09\uff0c\u5bf9\u4e8er\u6765\u8bf4\u5c31\u662f\u7cca\u6d82\u8d26\uff0c\u4f46\u662fl\u975e\u5e38\u6e05\u695a\uff0c\u5c31\u662f\u5f53\u5c0f\u4e8e\u65f6\uff0cl\u5fc5\u5b9a\u9700\u8981+1\n       while (l &lt; r) {\n           int mid = (l + r) &gt;&gt; 1;\n           if (nums[mid] &lt; target) l = mid + 1;\n           else r = mid;\n       }\n       return l;\n    }\n    int searchRight(vector&lt;int&gt;&amp; nums, int target) {\n        int l = 0, r = nums.size() - 1;\n        while (l &lt; r) {\n            int mid = (l + r + 1) &gt;&gt; 1;\n            // \u5bfb\u627e\u53f3\u8fb9\u754c\uff08\u5c0f\u4e8e\u7b49\u4e8e\uff09\uff0c\u90a3\u4e48\u76f4\u63a5\u770b\u5927\u4e8e\u7684\u60c5\u51b5\n            if (nums[mid] &gt; target) r = mid - 1;\n            else l = mid;\n        }\n        return l;\n    }\n    vector&lt;int&gt; searchRange(vector&lt;int&gt;&amp; nums, int target) {\n        if (!nums.size()) return {-1, -1};\n        int l = searchLeft(nums, target);\n        int r = searchRight(nums, target);\n        if (nums[l] == target &amp;&amp; nums[r] == target) return {l, r};\n        else return {-1, -1};\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#33_2","title":"33. \u641c\u7d22\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#319_3","title":"3/19 \u7b2c\u4e00\u6b21\u505a\u8111\u5b50\u8981\u6e05\u695a\u4e00\u70b9\uff0c\u6709\u597d\u591a\u8fb9\u754c\u6761\u4ef6\uff0c\u5efa\u8bae\u91cd\u505a","text":"<pre><code>class Solution {\npublic:\n    int search(vector&lt;int&gt;&amp; nums, int target) {\n        // \u5982\u679c\u8981\u4e8c\u5206\u524d\u534a\u6bb5\u7684\u6700\u9ad8\u70b9\u5c31\u8981\u548cnums[0]\u6bd4\u8f83\uff0c\u5982\u679c\u60f3\u4e8c\u5206\u540e\u534a\u6bb5\u7684\u6700\u4f4e\u70b9\u5c31\u8981\u548cnums[nums.size() - 1]\u6bd4\u8f83\n        int l = 0, r = nums.size() - 1;\n        while (l &lt; r) {\n            int mid = (l + r + 1) &gt;&gt; 1;\n            int x = nums[mid];\n            if (x &gt;= nums[0]) l = mid;\n            else r = mid - 1;\n        }\n        if (target &gt;= nums[0]) r = l, l = 0;\n        else l = r + 1, r = nums.size() - 1;\n        while (l &lt; r) {\n            int mid = (l + r) &gt;&gt; 1;\n            int x = nums[mid];\n            if (x &gt;= target) r = mid;\n            // \u6ce8\u610f\u5982\u679cnums\u53ea\u6709\u4e00\u4e2a\u6570\u7684\u65f6\u5019\u5e76\u4e14x&lt; target\uff0c\u90a3\u4e48\u4f1a\u5bfc\u81f4l = 1, r  =0,l\u6709\u51fa\u754c\u7684\u98ce\u9669\uff0c\u6240\u4ee5return\u7684\u65f6\u5019\u9700\u8981return r\n            else l = mid + 1;\n\n        }\n        cout &lt;&lt; l &lt;&lt; \" \" &lt;&lt; r &lt;&lt; endl;\n        if (nums[r] == target) return r;\n        else return -1; \n\n\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#_36","title":"\u539f\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int search(vector&lt;int&gt;&amp; nums, int target) {\n        int l = 0, r = nums.size() - 1;\n        while (l &lt; r) {\n            int mid = (l + r + 1) &gt;&gt; 1;\n            if (nums[mid] &gt;= nums[0]) l = mid;\n            else r = mid - 1;\n        }\n        if (target &gt;= nums[0]) l = 0;\n        else l = r + 1, r = nums.size() - 1;\n        while (l &lt; r) {\n            int mid = (l + r) &gt;&gt; 1;\n            if (nums[mid] &gt;= target) r = mid;\n            else l = mid + 1; // \u8fd9\u91ccl\u6709\u51fa\u754c\u7684\u98ce\u9669\uff0c\u6240\u4ee5return\u7684\u65f6\u5019\u9700\u8981return\u7684\u662fr\uff0c\u800c\u4e0d\u80fd\u662fl\n        }\n        if (nums[r] == target) return r;\n        else return -1;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#153","title":"153. \u5bfb\u627e\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u6700\u5c0f\u503c","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#319_4","title":"3/19 \u7b2c\u4e00\u6b21\u505a\u5f88\u7b80\u5355","text":"<pre><code>class Solution {\npublic:\n    int findMin(vector&lt;int&gt;&amp; nums) {\n        // \u6240\u6709\u6574\u6570\u4e92\u4e0d\u76f8\u540c\uff0c\u7ee7\u7eed\u4f7f\u7528\u4e8c\u5206\u5373\u53ef\n        // \u8fd9\u6b21\u4e8c\u5206\u540e\u534a\u6bb5\u7684\u6700\u5c0f\u503c\u5427\n        int l = 0, r = nums.size() - 1;\n        while (l &lt; r) {\n            int mid = (l + r) &gt;&gt; 1;\n            int x = nums[mid];\n            if (x &lt;= nums[nums.size() - 1]) r = mid;\n            else l = mid + 1;\n        }\n        return nums[l];\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#_37","title":"\u539f\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int findMin(vector&lt;int&gt;&amp; nums) {\n        // \u76f4\u63a5\u5206\u7c7b\u8ba8\u8bba\u753b\u56fe\uff0c\u4e3b\u8981\u5c31\u662f\u4e09\u79cd\u60c5\u51b5\uff0c\u5de6\u8fb9\u957f\uff0c\u53f3\u8fb9\u957f\uff0c\u4ee5\u53ca\u6ca1\u6709\u65cb\u8f6c\n        int l = 0, r = nums.size() - 1;\n        while (l &lt; r) {\n            int mid = (l + r) &gt;&gt; 1;\n            if (nums[mid] &gt; nums[nums.size() - 1]) l = mid + 1;\n            else r = mid;\n        }\n        return nums[l];\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#_38","title":"\u539f\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    double findMedianSortedArrays(vector&lt;int&gt;&amp; nums1, vector&lt;int&gt;&amp; nums2) {\n        int t = nums1.size() + nums2.size();\n        if (t % 2 == 0) {\n            int left = find(nums1, 0, nums2, 0, t / 2); // find\u627e\u7684\u662f\u7b2ct/2\u5c0f\u7684\u6570\n            int right = find (nums1, 0, nums2, 0, t / 2 + 1);\n            return (left + right) / 2.0;\n        } else return find(nums1, 0, nums2, 0, t / 2 + 1);\n    }\n\n\n    int find(vector&lt;int&gt;&amp; nums1, int i, vector&lt;int&gt;&amp; nums2, int j, int k) {\n        // \u9996\u5148\u8981\u9632\u6b62\u8d8a\u754c\u7684\u60c5\u51b5\u53d1\u751f\uff0c\u90a3\u4e48\u5c31\u8981\u628a\u5269\u4e0b\u7684\u8f83\u957f\u7684\u6570\u7ec4\u5b58\u50a8\u518dnums2\n        if (nums1.size() - i &gt; nums2.size() - j) return find(nums2, j, nums1, i, k);\n        if (nums1.size() == i) return nums2[j + k - 1];\n        if (k == 1) return min(nums1[i], nums2[j]);\n\n        // \u9012\u5f52\u903b\u8f91\n        // \u6bd4\u8f83\u6bcf\u4e2asub\u6570\u7ec4\u4e2d\u7b2ck/2\u4e2a\u7684\u6570\u7684\u5927\u5c0f\uff0c\u6ce8\u610fnums\u7684\u957f\u5ea6\u6bd4\u8f83\u77ed\n        // \u800c\u4e14\u6211\u4eec\u4e5f\u4e0d\u80fd\u786e\u5b9ak\u662f\u5947\u6570\u8fd8\u662f\u5076\u6570\uff0c\u6240\u4ee5\u5bf9\u4e8e\u53e6\u4e00\u4e2a\u6570\u7ec4\u52a0\u4e0a\uff08k - k/2\uff09\u624d\u884c\n        int si = min((int)nums1.size(), (i + k / 2));\n        int sj = j + k - k /2;\n        // \u8fd9\u91cc\u6307\u7684\u662f\u7b2c\u51e0\u4e2a\uff0c\u6240\u4ee5\u5fc5\u987b\u8981 -1\n        if (nums1[si - 1] &gt; nums2[sj  - 1]) {\n            return find(nums1, i, nums2, sj, k - (sj - j));\n        } else return find(nums1, si, nums2, j, k - (si - i));\n    } \n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#_39","title":"\u6808","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#20","title":"20. \u6709\u6548\u7684\u62ec\u53f7","text":"<pre><code>class Solution {\npublic:\n    bool isValid(string s) {\n        stack&lt;char&gt; stk;\n        for (int i = 0; i &lt; s.size(); i++) {\n            if (!stk.empty()) {\n                char c = stk.top();\n                if ((c == '{' &amp;&amp; s[i] == '}') ||\n                    (c == '[' &amp;&amp; s[i] == ']') ||\n                    (c == '(' &amp;&amp; s[i] == ')')) {\n                        stk.pop();\n                    }\n                    else stk.push(s[i]);\n            }\n            else stk.push(s[i]);\n        }\n        return stk.empty();\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#_40","title":"\u539f\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    bool isValid(string s) {\n        stack&lt;char&gt; tmp;\n        for (int i = 0; i &lt; s.size(); i++) {\n            char ch = s[i];\n            if (!tmp.empty()) {\n                char chStack = tmp.top();\n                if ((ch == '}' &amp;&amp; chStack == '{') ||\n                (ch == ']' &amp;&amp; chStack == '[') ||\n                (ch == ')' &amp;&amp; chStack == '(')) tmp.pop();\n                else tmp.push(ch);\n            }\n            else {\n                tmp.push(s[i]);\n            }\n        }\n        return tmp.empty();\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#155","title":"155. \u6700\u5c0f\u6808","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#319_5","title":"3/19\u7b2c\u4e00\u6b21\u505a\u6709\u8da3\u7684\u6700\u5c0f\u6808\uff0c\u8981\u8bfb\u660e\u767d\u9898\u610f\uff0c\u8010\u5fc3\u4e00\u70b9","text":"<pre><code>class MinStack {\npublic:\n// \u76f8\u5f53\u4e8e\u53bb\u7ef4\u62a4\u4e00\u4e2a\u524d\u7f00\u6700\u5c0f\u503c\u7684\u6808\n// \u7528\u624b\u753b\u4e00\u904d\u5c31\u80fd\u61c2\u89c4\u5f8b\u4e86\n    stack&lt;int&gt; stk;\n    stack&lt;int&gt; min_stk;\n    MinStack() {\n        min_stk.push(INT_MAX);\n    }\n\n    void push(int val) {\n        stk.push(val);\n        min_stk.push(min(min_stk.top(), val));\n    }\n\n    void pop() {\n        int val = stk.top();\n        stk.pop();\n        min_stk.pop();\n    }\n\n    int top() {\n        return stk.top();\n    }\n\n    int getMin() {\n        return min_stk.top();\n    }\n};\n\n/**\n * Your MinStack object will be instantiated and called as such:\n * MinStack* obj = new MinStack();\n * obj-&gt;push(val);\n * obj-&gt;pop();\n * int param_3 = obj-&gt;top();\n * int param_4 = obj-&gt;getMin();\n */\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#_41","title":"\u5806","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#215-kth-largest-element-in-an-array","title":"215. Kth Largest Element in an Array","text":"<p>\u591a\u79cd\u89e3\u6cd5\uff0c\u4e09\u79cd\u89e3\u6cd5\u90fd\u5fc5\u987b\u8981\u638c\u63e1\uff01\u5efa\u8bae\u591a\u505a</p>"},{"location":"Problem/lc/Leetcode%20hot%20100/#39_1","title":"3/9\u7b2c\u4e00\u6b21\u505a\uff0c\u5feb\u901f\u9009\u62e9\u7b97\u6cd5\u6a21\u677f\u9898\u76ee\uff0c\u5efa\u8bae\u5c06\u4e09\u79cd\u89e3\u6cd5\u591a\u505a\u51e0\u904d","text":"<pre><code>class Solution {\npublic:\n    // \u5feb\u901f\u9009\u62e9\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(2n)\n    int quick_select(vector&lt;int&gt;&amp; nums, int l, int r, int k) {\n        if (l == r) return nums[k];\n        int x = nums[l + r &gt;&gt; 1];\n        int i = l - 1, j = r + 1;\n        while (i &lt; j) {\n            do i++; while(nums[i] &gt; x);\n            do j--; while (nums[j] &lt; x);\n            if (i &lt; j) swap(nums[i], nums[j]);\n        }\n        // \u662f\u5728\u539f\u6570\u7ec4\u57fa\u7840\u4e0a\u7684k\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528k\n        if (k &lt;= j) return quick_select(nums, l, j, k);\n        else return quick_select(nums, j + 1, r, k);\n    }\n    int findKthLargest(vector&lt;int&gt;&amp; nums, int k) {\n        int n = nums.size();\n        return quick_select(nums, 0, n - 1, k - 1);\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#39_2","title":"3/9 \u7b2c\u4e00\u6b21\u505a\uff0c\u5927\u6839\u5806\u505a\u6cd5\uff0c\u624b\u5199\u5927\u6839\u5806\uff0c\u5efa\u8bae\u591a\u5199\u51e0\u6b21","text":"<pre><code>class Solution {\npublic:\n    void maxHeapify(vector&lt;int&gt;&amp; nums, int i, int heapsize) {\n        int largest = i;\n        // \u6ce8\u610f\u662f2*i+1\u548c2*i+2\n        int left = 2 * i + 1, right = 2 * i + 2;\n        if (left &lt; heapsize &amp;&amp; nums[left] &gt; nums[largest]) {\n            largest = left;\n        }\n        // \u6ce8\u610f\u8fd9\u91cc\u4ecd\u7136\u662fif\uff0c\u4e0d\u662felse if\uff01\n        if (right &lt; heapsize &amp;&amp; nums[right] &gt; nums[largest]) {\n            largest = right;\n        }\n        if (i != largest) {\n            swap(nums[i], nums[largest]);\n            maxHeapify(nums, largest, heapsize);\n        }\n    }\n    void buildMaxHeap(vector&lt;int&gt;&amp; nums, int heapsize) {\n        // \u4ece\u6700\u540e\u4e00\u4e2a\u975e\u53f6\u5b50\u8282\u70b9\u5411\u524d\u4e0d\u65ad\u5411\u4e0bdown\u6765\u7ef4\u62a4\u5806\n        for (int i = heapsize; i &gt;= 0; i--) maxHeapify(nums, i, heapsize);\n    }\n    int findKthLargest(vector&lt;int&gt;&amp; nums, int k) {\n        // \u5982\u679c\u4f7f\u7528\u5927\u6839\u5806\n        // \u90a3\u4e48\u5c06\u6240\u6709\u5143\u7d20\u63d2\u5165\u5927\u6839\u5806\uff0c\u7136\u540e\u5c06\u6700\u5927\u7684k-1\u4e2a\u5143\u7d20\u5f39\u51fa\uff0c\u90a3\u4e48\u5806\u9876\u5c31\u662f\u7b2ck\u5927\u7684\u5143\u7d20\n\n        // \u9700\u8981\u624b\u5199\u5927\u6839\u5806\n        int heapsize = nums.size();\n        buildMaxHeap(nums, heapsize);\n        // \u5982\u4f55\u5f39\u51fak - 1\u4e2a\u5143\u7d20\uff1f\n        // \u5c06\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u8986\u76d6\u5230\u5927\u6839\u5806\u7684\u9876\u90e8\uff0c\u7136\u540edown\u5b83\n        for (int i = 0; i &lt; k - 1; i++) {\n            swap(nums[0], nums[heapsize - 1]);\n            heapsize--;\n            maxHeapify(nums, 0, heapsize);\n        }\n        return nums[0];\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#39stl","title":"3/9\u7b2c\u4e00\u6b21\u505a\u5c0f\u6839\u5806stl\u505a\u6cd5","text":"<pre><code>class Solution {\npublic:\n    int findKthLargest(vector&lt;int&gt;&amp; nums, int k) {\n        // \u4f7f\u7528\u5c0f\u6839\u5806\u53ef\u4ee5\u505a\n        // \u53ef\u4ee5\u7528\u6765\u8054\u7cfb\u5c0f\u6839\u5806\u7684stl\u5199\u6cd5\uff0cC++\u9ed8\u8ba4\u7684priority_queue\u662f\u5927\u6839\u5806\n\n        // \u5c0f\u6839\u5806\u7684\u601d\u8def\u662f\u7ef4\u62a4\u4e00\u4e2a\u7531\u6700\u5927\u7684k\u4e2a\u5143\u7d20\u7ec4\u6210\u7684\u5806\uff0c\u90a3\u4e48\u5806\u9876\u7684\u5143\u7d20\u5c31\u662f\u6211\u4eec\u7684\u7b54\u6848\n        // \u6240\u4ee5\u5728\u4e0d\u65ad\u63d2\u5165\u7684\u65f6\u5019\uff0c\u5982\u679c\u51fa\u73b0\u6bd4\u5806\u9876\u5143\u7d20\u5927\u7684\u6570\uff0c\u5c31\u8981\u628a\u5806\u9876\u5143\u7d20\u5f39\u51fa\uff0c\u7136\u540e\u63d2\u5165\u8fd9\u4e2a\u6570\n        // \u800c\u5982\u679c\u63d2\u5165\u7684\u6570\u6bd4\u5806\u9876\u7684\u5143\u7d20\u8981\u5c0f\uff0c\u90a3\u4e48\u5c31\u4e0d\u7528\u505a\u4efb\u4f55\u64cd\u4f5c\n\n        // \u65f6\u95f4\u590d\u6742\u5ea6\u662fnlongk, \u7a7a\u95f4\u590d\u6742\u5ea6\u662fk\n\n        priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; min_heap;\n        for (int  i = 0; i &lt; nums.size(); i++) {\n            if (min_heap.size() &lt; k) {\n                min_heap.push(nums[i]);\n            }\n            else if (nums[i] &gt; min_heap.top()) {\n                min_heap.pop();\n                min_heap.push(nums[i]);\n            }\n        }\n        return min_heap.top();\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#347-k","title":"347. \u524d K \u4e2a\u9ad8\u9891\u5143\u7d20","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#319-nlogk","title":"3/19 \u4f7f\u7528\u5927\u6839\u5806\u505a\uff0c\u6b63\u89c4\u7684\u505a\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u662fnlogk","text":"<pre><code>class Solution {\npublic:\n    static bool cmp(pair&lt;int, int&gt;&amp; m, pair&lt;int, int&gt;&amp; n) {\n        return m.second &gt; n.second;\n    }\n    vector&lt;int&gt; topKFrequent(vector&lt;int&gt;&amp; nums, int k) {\n        unordered_map&lt;int, int&gt; hash;\n        for (auto a : nums) {\n            hash[a]++;\n        }\n        priority_queue&lt;pair&lt;int, int&gt;, vector&lt;pair&lt;int, int&gt;&gt;, decltype(&amp;cmp)&gt; q(cmp);\n        for (auto [x, c] : hash) {\n            q.push(make_pair(x, c));\n            if (q.size() &gt; k) {\n                q.pop();\n            }\n        }\n        vector&lt;int&gt; res;\n        while (!q.empty()) {\n            res.push_back(q.top().first);\n            q.pop();\n        }\n        return res;\n\n\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#319_6","title":"3/19\u7b2c\u4e00\u6b21\u505a\u8ba1\u6570\u6392\u5e8f\u505a\u6cd5\uff0c\u6709\u70b9\u5c0f\u5e7d\u9ed8","text":"<pre><code>class Solution {\npublic:\n    vector&lt;int&gt; topKFrequent(vector&lt;int&gt;&amp; nums, int k) {\n        unordered_map&lt;int, int&gt; hash;\n        for (auto a : nums) hash[a]++;\n        int n = nums.size();\n        vector&lt;int&gt; s(n + 1);\n        for (auto [x, c] : hash) s[c]++;\n        int i = n, sum = 0;\n        while (sum &lt; k) {\n            sum += s[i];\n            i--;\n        }\n        vector&lt;int&gt; ans;\n        for (auto [x, c] : hash) {\n            if (c &gt; i) ans.push_back(x);\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#_42","title":"\u8d2a\u5fc3\u7b97\u6cd5","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#_43","title":"\u52a8\u6001\u89c4\u5212","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#70","title":"70. \u722c\u697c\u68af","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#322","title":"3/22\u7b2c\u4e00\u6b21\u505a","text":"<pre><code>class Solution {\npublic:\n    int climbStairs(int n) {\n        // \u600e\u4e48\u601d\u8003\n        // f[n] \u4ee3\u8868\u7684\u662f\u7b2cn\u9636\u6709\u591a\u5c11\u79cd\u5230\u8fbe\u7684\u65b9\u6cd5\n        vector&lt;int&gt; f(n + 1);\n\n        // \u4e24\u79cd\u60c5\u51b5\u4e0b\u4e00\u4e2a\u9636\u68af\n        // \u7b2c\u4e00\u79cd\u662f\u4ece\u4e0b\u9762\u4e00\u4e2a\u9636\u68af\u4e0a\u6765\uff0c\u53ea\u8d70\u4e00\u683c\n        // \u7b2c\u4e8c\u79cd\u662f\u4ece\u4e0b\u9762\u4e24\u4e2a\u9636\u68af\u4e0a\u6765\uff0c\u76f4\u8d70\u4e24\u683c\n        // f[n] = f[n - 1] + f[n - 2];\n        f[0] = 1;\n        f[1] = 1;\n        for (int i = 2; i &lt;= n; i++) {\n            f[i] = f[i - 1] + f[i - 2];\n        }\n        return f[n];\n\n    }\n};\n</code></pre> <pre><code>class Solution {\npublic:\n    int climbStairs(int n) {\n        if (n &lt;= 2) return n;\n        // f[i] = f[i - 1] + f[i - 2]\n        // int f[n + 1];\n        int f1 = 1;\n        int f2 = 2;\n        for (int i = 3; i &lt;= n; i++) {\n            int f3 = f2 + f1;\n            f1 = f2;\n            f2 = f3;\n        }\n        return f2;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#118","title":"118. \u6768\u8f89\u4e09\u89d2","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#322_1","title":"3/22\u7b2c\u4e00\u6b21\u505a\uff0c\u8981\u770b\u6e05\u9898\u76ee\uff01\uff01\uff01","text":"<pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; generate(int n) {\n        // \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\n        // f[n][m] = f[n - 1][m - 1] + f[n - 1][m]\n        vector&lt;vector&lt;int&gt;&gt; f;\n        for (int i = 0; i &lt; n; i++) {\n            f.push_back(vector&lt;int&gt;(i + 1));\n        }\n        f[0][0] = 1;\n        for (int i = 1; i &lt; n; i++) {\n            for (int j = 0; j &lt; i + 1; j++) {\n                if (j - 1 &gt;= 0 &amp;&amp; j - 1 &lt; (i - 1) + 1) {\n                    f[i][j] += f[i - 1][j - 1];\n                }\n                if (j &gt;= 0 &amp;&amp; j &lt; (i - 1) + 1) {\n                    f[i][j] += f[i - 1][j];\n                }\n            }\n        }\n        return f;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#198","title":"198. \u6253\u5bb6\u52ab\u820d","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#322i","title":"3/22\u7b2c\u4e00\u6b21\u505a\uff0c\u6ce8\u610f\u6ce8\u610f\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u4e00\u5b9a\u8981\u7528i\u6765\u5199\uff01\uff01\uff01\uff01","text":"<pre><code>class Solution {\npublic:\n    int rob(vector&lt;int&gt;&amp; nums) {\n        // f[i] = max(f[i - 1], f[i - 2] + nums[i])\n        // f[i + 2] = max(f[i + 1], f[i] + nums[i + 2]);\n        // vector&lt;int&gt; f(nums.size() + 2);\n        int f0 = 0, f1 = 0;\n        for (int i = 0; i &lt; nums.size(); i++) {\n            // f[i + 2] = max(f[i + 1], f[i] + nums[i]);\n            int new_f = max(f1, f0 + nums[i]);\n            f0 = f1;\n            f1 = new_f;\n        }\n        return f1;\n    } \n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#_44","title":"\u539f\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int rob(vector&lt;int&gt;&amp; nums) {\n        // f[i] = max(f[i - 1], f[i - 2] + nums[i])\n        // f[i + 2] = max(f[i + 1], f[i] + nums[i + 2]);\n        // vector&lt;int&gt; f(nums.size() + 2);\n        int f0 = 0, f1 = 0;\n        for (int i = 0; i &lt; nums.size(); i++) {\n            // f[i + 2] = max(f[i + 1], f[i] + nums[i]);\n            int new_f = max(f1, f0 + nums[i]);\n            f0 = f1;\n            f1 = new_f;\n        }\n        return f1;\n    } \n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#_45","title":"\u591a\u7ef4\u52a8\u6001\u89c4\u5212","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#_46","title":"\u6280\u5de7","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#136","title":"136. \u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57","text":"<p>\u5f02\u6216\u6709\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b</p> <p>\u5f02\u6216\uff08\u76f8\u5f53\u4e8e\u76f8\u51cf\uff09\uff1a\u6240\u6709\u76f8\u540c\u7684\u6570\u4e92\u76f8\u5f02\u6216\u5c31\u662f0 </p> <p>0^0 = 0</p> <p>1^1 = 0</p> <p>1^0 = 1</p>"},{"location":"Problem/lc/Leetcode%20hot%20100/#36","title":"3/6\u7b2c\u4e00\u6b21\u505a","text":"<pre><code>class Solution {\npublic:\n    int singleNumber(vector&lt;int&gt;&amp; nums) {\n        // \u51fa\u73b0\u4e24\u6b21\u8fd9\u4e2a\u6761\u4ef6\u5e94\u8be5\u600e\u4e48\u4f7f\u7528\uff1f\n        // \u800c\u4e14\u53ea\u80fd\u4f7f\u7528\u5e38\u91cf\u7684\u989d\u5916\u7a7a\u95f4\n        // hash\u8868\uff0c\u7136\u540e\u6bcf\u6b21\u90fd\u5220\u9664\n        // \u4f7f\u7528\u5f02\u6216\uff0c\u6240\u6709\u76f8\u540c\u7684\u6570\u4e92\u76f8\u914d\u5bf9\u5f97\u52300\uff0c0\u548c\u4efb\u4f55\u6570n\u5f02\u6216\u5f97\u5230\u7684\u5c31\u662fn\n        int res = 0;\n        for (int i = 0; i &lt; nums.size(); i++) res ^= nums[i];\n        return res;\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#169","title":"169. \u591a\u6570\u5143\u7d20","text":""},{"location":"Problem/lc/Leetcode%20hot%20100/#36_1","title":"3/6\u7b2c\u4e00\u6b21\u505a\uff0c\u4f7f\u7528\u6392\u5e8f\uff0c\u4f46\u4e0d\u662f\u6700\u4f18\u89e3\uff0c\u91cd\u65b0\u5199\u4e86\u4e00\u904d\u5feb\u6392","text":"<pre><code>class Solution {\npublic:\n    int majorityElement(vector&lt;int&gt;&amp; nums) {\n        // \u65e2\u7136\u51fa\u73b0\u6b21\u6570\u4f1a\u5927\u4e8en/2\u6b21\uff0c\u90a3\u4e48\u5bf9nums\u8fdb\u884c\u6392\u5e8f\uff0c\u5728nums\u4e2d\u7b2cn/2\u7684\u4f4d\u7f6e\u7684\u6570\u5fc5\u7136\u662f\u9891\u7387\u6700\u9ad8\u7684\u6570\n        quick_sort(nums, 0, nums.size() - 1);\n        return nums[nums.size() / 2];\n    }\n    void quick_sort(vector&lt;int&gt;&amp; nums, int l, int r) {\n        if (l &gt;= r) return;\n        int x = nums[l + r &gt;&gt; 1];\n        int i = l - 1, j = r + 1;\n        while (i &lt; j) {\n            do i++; while (nums[i] &lt; x);\n            do j--; while (nums[j] &gt; x);\n            if (i &lt; j) swap(nums[i], nums[j]);\n        }\n        // \u4e00\u5b9a\u53ea\u80fd\u4f7f\u7528j \u548c j + 1\uff01\uff01\uff01\n        quick_sort(nums, l, j);\n        quick_sort(nums, j + 1, r);\n    }\n};\n</code></pre>"},{"location":"Problem/lc/Leetcode%20hot%20100/#36_2","title":"3/6 \u7b2c\u4e00\u6b21\u505a\u4f7f\u7528\u6295\u7968\u7b97\u6cd5\u975e\u5e38\u5de7\u5999","text":"<pre><code>class Solution {\npublic:\n    int majorityElement(vector&lt;int&gt;&amp; nums) {\n        int ans, freq = 0;\n        for (int i = 0; i &lt; nums.size(); i++) {\n            if (freq == 0) {\n                ans = nums[i];\n                freq++;\n            }\n            else if (nums[i] != ans) {\n                freq--;\n            }\n            else {\n                freq++;\n            }\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Problem/luogu/%E5%85%A5%E9%97%A81%E9%A1%BA%E5%BA%8F%E7%BB%93%E6%9E%84/","title":"\u5165\u95e81\u987a\u5e8f\u7ed3\u6784","text":""},{"location":"Problem/luogu/%E5%85%A5%E9%97%A81%E9%A1%BA%E5%BA%8F%E7%BB%93%E6%9E%84/#1","title":"\u5165\u95e81\u3010\u987a\u5e8f\u7ed3\u6784\u3011","text":""},{"location":"Problem/luogu/%E5%85%A5%E9%97%A81%E9%A1%BA%E5%BA%8F%E7%BB%93%E6%9E%84/#b2002-hello-world","title":"B2002 hello, world!","text":"<pre><code>#include &lt;cstdio&gt;\n#include &lt;iostream&gt;\n\nusing namespace std;\nint main () {\n    printf(\"Hello,World!\");\n    return 0;\n}\n</code></pre>"},{"location":"Problem/luogu/%E5%85%A5%E9%97%A81%E9%A1%BA%E5%BA%8F%E7%BB%93%E6%9E%84/#b2025","title":"B2025 \u8f93\u51fa\u5b57\u7b26\u83f1\u5f62","text":"<pre><code>#include &lt;cstdio&gt;\n#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main () {\n    printf(\"  *  \\n *** \\n*****\\n *** \\n  *  \\n\");\n    return 0;\n}\n</code></pre>"},{"location":"Problem/luogu/%E5%85%A5%E9%97%A81%E9%A1%BA%E5%BA%8F%E7%BB%93%E6%9E%84/#p1000","title":"P1000 \u8d85\u7ea7\u739b\u4e3d\u6e38\u620f","text":"<pre><code>#include &lt;cstdio&gt;\n#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main () {\n    printf(\"                ********\\n\"\n           \"               ************\\n\"\n           \"               ####....#.\\n\"\n           \"             #..###.....##....\\n\"\n           \"             ###.......######              ###            ###\\n\"\n           \"                ...........               #...#          #...#\\n\"\n           \"               ##*#######                 #.#.#          #.#.#\\n\"\n           \"            ####*******######             #.#.#          #.#.#\\n\"\n           \"           ...#***.****.*###....          #...#          #...#\\n\"\n           \"           ....**********##.....           ###            ###\\n\"\n           \"           ....****    *****....\\n\"\n           \"             ####        ####\\n\"\n           \"           ######        ######\\n\"\n           \"##############################################################\\n\"\n           \"#...#......#.##...#......#.##...#......#.##------------------#\\n\"\n           \"###########################################------------------#\\n\"\n           \"#..#....#....##..#....#....##..#....#....#####################\\n\"\n           \"##########################################    #----------#\\n\"\n           \"#.....#......##.....#......##.....#......#    #----------#\\n\"\n           \"##########################################    #----------#\\n\"\n           \"#.#..#....#..##.#..#....#..##.#..#....#..#    #----------#\\n\"\n           \"##########################################    ############\");\n    return 0;\n}\n</code></pre>"},{"location":"Problem/luogu/%E5%85%A5%E9%97%A81%E9%A1%BA%E5%BA%8F%E7%BB%93%E6%9E%84/#p1001-ab-problem","title":"P1001 A+B Problem","text":"<pre><code>#include &lt;cstdio&gt;\n#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main () {\n    int a, b;\n    scanf(\"%d%d\", &amp;a, &amp;b);\n    printf(\"%d\", a + b);\n    return 0;\n}\n</code></pre>"},{"location":"Problem/luogu/%E5%85%A5%E9%97%A81%E9%A1%BA%E5%BA%8F%E7%BB%93%E6%9E%84/#b2005","title":"B2005 \u5b57\u7b26\u4e09\u89d2\u5f62","text":"<pre><code>#include &lt;cstdio&gt;\n#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main () {\n    char a;\n    scanf(\"%c\", &amp;a);\n    printf(\"  %c  \\n %c%c%c \\n%c%c%c%c%c\", a, a, a, a, a, a, a, a, a);\n    return 0;\n}\n</code></pre>"},{"location":"Problem/luogu/%E5%85%A5%E9%97%A81%E9%A1%BA%E5%BA%8F%E7%BB%93%E6%9E%84/#p5703-25","title":"P5703 \u3010\u6df1\u57fa2.\u4f8b5\u3011\u82f9\u679c\u91c7\u8d2d","text":"<pre><code>#include &lt;cstdio&gt;\n#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main () {\n    int a, b;\n    cin &gt;&gt; a &gt;&gt; b;\n    cout &lt;&lt; a * b &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"Problem/luogu/%E5%85%A5%E9%97%A81%E9%A1%BA%E5%BA%8F%E7%BB%93%E6%9E%84/#p5704-26","title":"P5704 \u3010\u6df1\u57fa2.\u4f8b6\u3011\u5b57\u6bcd\u8f6c\u6362","text":"<pre><code>#include &lt;cstdio&gt;\n#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main () {\n    char a;\n    cin &gt;&gt; a;\n    printf(\"%c\", a - 32);\n    return 0;\n}\n</code></pre>"},{"location":"Problem/luogu/%E5%85%A5%E9%97%A81%E9%A1%BA%E5%BA%8F%E7%BB%93%E6%9E%84/#1221","title":"12/21","text":""},{"location":"Problem/luogu/%E5%85%A5%E9%97%A81%E9%A1%BA%E5%BA%8F%E7%BB%93%E6%9E%84/#p5705-27","title":"P5705 \u3010\u6df1\u57fa2.\u4f8b7\u3011\u6570\u5b57\u53cd\u8f6c (*)","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nusing namespace std;\n\nint main () {\n    string a;\n    cin &gt;&gt; a;\n    for (int i = a.size() - 1; i &gt;= 0; i--) cout &lt;&lt; a[i];\n   return 0;\n}\n</code></pre>"},{"location":"Problem/luogu/%E5%85%A5%E9%97%A81%E9%A1%BA%E5%BA%8F%E7%BB%93%E6%9E%84/#p5706-28","title":"P5706 \u3010\u6df1\u57fa2.\u4f8b8\u3011\u518d\u5206\u80a5\u5b85\u6c34","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n\nusing namespace std;\n\nint main () {\n    float a;\n    int b;\n    cin &gt;&gt; a &gt;&gt; b;\n    printf(\"%.3f\\n\", a / b);\n    printf(\"%d\", b * 2);\n    return 0;\n}\n</code></pre>"},{"location":"Problem/luogu/%E5%85%A5%E9%97%A81%E9%A1%BA%E5%BA%8F%E7%BB%93%E6%9E%84/#p5708-22","title":"P5708 \u3010\u6df1\u57fa2.\u4e602\u3011\u4e09\u89d2\u5f62\u9762\u79ef","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;cmath&gt;\nusing namespace std;\n\nint main () {\n    double a, b, c;\n    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;\n    double p = (a + b + c) / 2;\n    double s = sqrt(p * (p - a) * (p - b) * (p - c));\n    printf(\"%.1f\", s);\n    return 0;\n}\n</code></pre>"},{"location":"Problem/luogu/%E5%85%A5%E9%97%A81%E9%A1%BA%E5%BA%8F%E7%BB%93%E6%9E%84/#p5707-212","title":"P5707 \u3010\u6df1\u57fa2.\u4f8b12\u3011\u4e0a\u5b66\u8fdf\u5230 (*)","text":"<p>\u6ce8\u610fceil()\u662f\u5411\u4e0a\u53d6\u6574</p> <p>\u6ce8\u610f\u8981\u52a0<code>#include &lt;cmath&gt;</code>\u7684\u5934\u6587\u4ef6</p> function \u6548\u679c floor() \u4e0d\u5927\u4e8e\u81ea\u53d8\u91cf\u7684\u6700\u5927\u6574\u6570 ceil() \u4e0d\u5c0f\u4e8e\u81ea\u53d8\u91cf\u7684\u6700\u5927\u6574\u6570 round() \u56db\u820d\u4e94\u5165\u5230\u6700\u90bb\u8fd1\u7684\u6574\u6570 fix() \u671d\u96f6\u65b9\u5411\u53d6\u6574 <p>%02d\u5c31\u80fd\u8f93\u51fa2\u4f4d\u8865\u8db3\u7684\u6570\u5b57</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cmath&gt;\nusing namespace std;\n\nint main () {\n    float s, v;\n    cin &gt;&gt; s &gt;&gt; v;\n    int duration = ceil(s / v);\n    int time = 24 * 60 + 8 * 60 - duration - 10;\n    if (time &gt;= 24 * 60) time -= 24 * 60;\n    int hour = time / 60;\n    int minute = time % 60;\n    printf(\"%02d:%02d\", hour, minute);\n    return 0;\n}\n</code></pre>"},{"location":"Problem/luogu/%E5%85%A5%E9%97%A81%E9%A1%BA%E5%BA%8F%E7%BB%93%E6%9E%84/#b2029","title":"B2029 \u5927\u8c61\u559d\u6c34","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;cmath&gt;\n\nusing namespace std;\n\nint main () {\n    double h, r;\n    cin &gt;&gt; h &gt;&gt; r;\n    double v = (3.14159 * r * r) * h;\n    cout &lt;&lt; ceil(20000 / v);\n    return 0;\n}\n</code></pre>"},{"location":"Problem/luogu/%E5%85%A5%E9%97%A81%E9%A1%BA%E5%BA%8F%E7%BB%93%E6%9E%84/#p1425","title":"P1425 \u5c0f\u9c7c\u7684\u6e38\u6cf3\u65f6\u95f4","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main () {\n    int a, b, c, d;\n    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d;\n    int duration = (c * 60 + d) - (a * 60 + b);\n    cout &lt;&lt; duration / 60;\n    cout &lt;&lt; \" \" &lt;&lt; duration % 60;\n    return 0;\n}\n</code></pre>"},{"location":"Problem/luogu/%E5%85%A5%E9%97%A81%E9%A1%BA%E5%BA%8F%E7%BB%93%E6%9E%84/#p1421","title":"P1421 \u5c0f\u7389\u4e70\u6587\u5177","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\nusing namespace std;\nint main () {\n    int a, b;\n    cin &gt;&gt; a &gt;&gt; b;\n    cout &lt;&lt; (10 * a + b) / (10 + 9);\n    return 0;\n}\n</code></pre>"},{"location":"Problem/luogu/%E5%85%A5%E9%97%A81%E9%A1%BA%E5%BA%8F%E7%BB%93%E6%9E%84/#p3954-noip2017","title":"P3954 [NOIP2017 \u666e\u53ca\u7ec4] \u6210\u7ee9","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main () {\n    int a, b, c;\n    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;\n    cout &lt;&lt; (int) (0.2 * a + 0.3 * b + 0.5 * c);\n    return 0;\n}\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/","title":"\u4ee3\u7801\u968f\u60f3\u5f55\u7b14\u8bb0","text":""},{"location":"Problem/programmercarl/algorithm/#1","title":"1. \u4e8c\u5206\u67e5\u627e","text":"<p>\u4e8c\u5206\u67e5\u627e\u7684\u6570\u5b66\u7406\u89e3\u662f\u5355\u8c03\u51fd\u6570\u7684\u6709\u89e3\u95ee\u9898</p> <p>\u6ce8\u610f\u70b9\uff1a</p> <ol> <li> <p>\u5728C++\u4e2dSTL\u7684\u5bb9\u5668\u548c\u7b97\u6cd5\u4e2d\u7528\u7684\u90fd\u662f\u5de6\u95ed\u53f3\u5f00\u533a\u95f4\uff0c\u6240\u4ee5\u5c3d\u91cf\u4f7f\u7528\u5de6\u95ed\u53f3\u5f00\u7684\u533a\u95f4\u6765\u5199\u4e8c\u5206\u67e5\u627e</p> </li> <li> <p>\u5728\u5237\u9898\u65f6\u601d\u8003\u5982\u679c\u6700\u540e\u533a\u95f4\u53ea\u5269\u4e0b\u4e00\u4e2a\u6570\u6216\u8005\u4e24\u4e2a\u6570\uff0c\u81ea\u5df1\u7684\u5199 \u6cd5\u662f\u5426\u4f1a\u9677\u5165\u6b7b\u5faa\u73af\uff0c\u5982\u679c\u67d0\u79cd\u5199\u6cd5\u65e0\u6cd5\u8df3\u51fa\u6b7b\u5faa\u73af\uff0c\u5219\u8003\u8651\u5c1d\u8bd5\u53e6\u4e00\u79cd\u5199\u6cd5\u3002</p> </li> </ol>"},{"location":"Problem/programmercarl/algorithm/#34","title":"34. \u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u67e5\u627e\u5143\u7d20\u7684\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e","text":"<pre><code>class Solution {\npublic:\n    int searchLeft(vector&lt;int&gt;&amp; nums, int target) {\n        int l = 0, r = nums.size() - 1;\n        while (l &lt; r) {\n            int mid = (l + r) &gt;&gt; 1;\n            if (nums[mid] &lt; target) l = mid + 1;\n            else r = mid;\n        }\n        return l;\n    }\n    int searchRight(vector&lt;int&gt;&amp;nums, int target) {\n        int l = 0, r = nums.size() - 1;\n        while (l &lt; r) {\n            int mid = (l + r + 1) &gt;&gt; 1;\n            if (nums[mid] &gt; target) r = mid - 1;\n            else l = mid;\n        }\n        return l;\n    }\n    vector&lt;int&gt; searchRange(vector&lt;int&gt;&amp; nums, int target) {\n        if (nums.size() == 0) return vector&lt;int&gt;{-1, -1};\n        // \u5206\u522b\u5199\u4e24\u4e2afunction\u6765\u641c\u7d22\u5de6\u8fb9\u754c\u548c\u53f3\u8fb9\u754c\n        int left = searchLeft(nums, target);\n        int right = searchRight(nums, target);\n        if (nums[left] == target &amp;&amp; nums[right] == target) return vector&lt;int&gt;{left, right};\n        else return vector&lt;int&gt;{-1, -1};\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#844","title":"844. \u6bd4\u8f83\u542b\u9000\u683c\u7684\u5b57\u7b26\u4e32","text":"<pre><code>class Solution {\npublic:\n    bool backspaceCompare(string s, string t) {\n        return get(s) == get(t);\n    }\n    string get(string&amp; s) {\n        string res;\n        for (auto c : s) {\n            if (c == '#') {\n                if (res.size()) res.pop_back();\n            }\n            else res+= c;\n        }\n        return res;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#o1","title":"O1\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a","text":"<pre><code>class Solution {\npublic:\n    bool backspaceCompare(string s, string t) {\n        changestring(s);\n        changestring(t);\n        return s==t;\n    }\n    void changestring(string &amp;s)\n    {\n        int slow=0;\n        for(int fast=0;fast&lt;s.size();fast++)\n        {\n            if(s[fast]!='#')\n            s[slow++]=s[fast];\n            else if(slow!=0)\n                slow--;\n        }\n        s.resize(slow);\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#977","title":"977. \u6709\u5e8f\u6570\u7ec4\u7684\u5e73\u65b9","text":"<pre><code>class Solution {\npublic:\n    vector&lt;int&gt; sortedSquares(vector&lt;int&gt;&amp; nums) {\n        // \u4e0d\u8981\u5fd8\u8bb0\u5b9a\u4e49vector&lt;int&gt;\u7684\u65f6\u5019\u8fdb\u884c\u5b9a\u4e49\u6570\u7ec4\u5927\u5c0f\n        vector&lt;int&gt; res(nums.size(), 0);\n        int l = 0, r = nums.size() -1, i = nums.size() -1 ;\n        while (l &lt;= r &amp;&amp; i &gt;= 0) {\n            if (nums[l] + nums[r] &lt;= 0) {\n                res[i--] = nums[l] * nums[l];\n                l++;\n            } else {\n                res[i--] = nums[r] * nums[r];\n                r--;\n            }\n        }\n        return res;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#209","title":"209. \u957f\u5ea6\u6700\u5c0f\u7684\u5b50\u6570\u7ec4","text":"<pre><code>class Solution {\npublic:\n    int minSubArrayLen(int target, vector&lt;int&gt;&amp; nums) {\n        int i = 0, j = 0, ans = INT_MAX, res = 0;\n        while (j &lt; nums.size()) {\n            res += nums[j];\n            while (res &gt;= target) {\n                ans = min(ans, j - i + 1);\n                res -= nums[i];\n                i++;\n            }\n            j++;\n        }\n        return (ans == INT_MAX) ? 0 : ans;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#_2","title":"\u4e8c\u53c9\u6811\u7684\u9012\u5f52\u904d\u5386","text":""},{"location":"Problem/programmercarl/algorithm/#144","title":"144. \u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u904d\u5386","text":""},{"location":"Problem/programmercarl/algorithm/#22","title":"22. \u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u641c\u7d22\uff08\u89c6\u9891\u770b\u8fc7\uff09","text":""},{"location":"Problem/programmercarl/algorithm/#700","title":"700. \u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u641c\u7d22","text":"<p>\u4f7f\u7528\u9012\u5f52\u7684\u5173\u952e\uff1a\u9012\u5f52\u662f\u9700\u8981\u8fd4\u56de\u53d8\u91cf\u7684</p>"},{"location":"Problem/programmercarl/algorithm/#_3","title":"\u9012\u5f52\u6cd5","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* searchBST(TreeNode* root, int val) {\n        if (root == NULL || root-&gt;val == val) return root;\n        TreeNode* res;\n        if (root-&gt;val &lt; val) res = searchBST(root-&gt;right, val);\n        if (root-&gt;val &gt; val) res = searchBST(root-&gt;left, val);\n        return res;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#_4","title":"\u8fed\u4ee3\u6cd5","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* searchBST(TreeNode* root, int val) {\n        if (root == NULL) return NULL;\n        while (root) {\n            if (root-&gt;val == val) return root;\n            else if (root-&gt;val &gt; val) root = root-&gt;left;\n            else root = root-&gt;right;\n        }\n        return NULL;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#23","title":"23.\u9a8c\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811\uff08\u89c6\u9891\u770b\u8fc7\uff09","text":""},{"location":"Problem/programmercarl/algorithm/#98","title":"98. \u9a8c\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811","text":""},{"location":"Problem/programmercarl/algorithm/#preorder-traversal","title":"\u524d\u5e8f\u904d\u5386(preorder traversal)","text":"<p>\u5728\u6bcf\u6b21\u9012\u5f52\u7684\u65f6\u5019\u90fd\u662f\u5148\u8bbf\u95ee\u6839\u8282\u70b9\u7684\u503c\uff0c\u786e\u4fdd\u6839\u8282\u70b9\u7b26\u5408\u4e0a\u9762\u4f20\u8fc7\u6765\u7684\u67d0\u79cd\u6027\u8d28\uff0c\u7136\u540e\u518d\u9012\u5f52\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811</p> <p>\u6ce8\u610f\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u53f3\u8fb9\u7684\u6240\u6709\u7684\u8282\u70b9\u90fd\u9700\u8981\u5927\u4e8e\u6839\u8282\u70b9</p> <p>\u6bd4\u59825\uff0c4\uff0c6\uff0cnull,null, 3, 7\u5c31\u662f\u4e0d\u5408\u6cd5\u7684\uff0c\u56e0\u4e3a3\u867d\u7136\u6bd46\u5c0f\uff0c\u4f46\u662f\u9700\u8981\u6bd45\u5927\u624d\u884c</p> <p>\u6240\u4ee5\u6211\u7684\u601d\u8def\u662f\uff1a\uff08\u9700\u8981\u624b\u52a8\u6a21\u62df\uff01\uff01\uff01\uff09</p> <p>\u5728\u5411\u4e0b\u7684\u8fc7\u7a0b\u4e2d\uff0c\u8981\u7ef4\u6301\u4f4f\u4e0a\u65b9\u4f20\u9012\u8fc7\u6765\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c</p> <p>\u5728root\u5411\u5de6\u8d70\uff0cmax\u9700\u8981\u4e0d\u65ad\u66f4\u65b0</p> <p>\u5728root\u5411\u53f3\u8d70\uff0cmin\u9700\u8981\u4e0d\u65ad\u66f4\u65b0</p> <p></p> <pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool isValidBST(TreeNode* root) {\n        bool res = dfs(root, LONG_MIN, LONG_MAX);\n        return res;\n    }\n    bool dfs(TreeNode* root, long min, long max) {\n        if (root == NULL) return true;\n        long x = root-&gt;val;\n        return x &gt; min &amp;&amp; x &lt; max &amp;&amp; dfs(root-&gt;left, min, x) &amp;&amp; dfs(root-&gt;right, x, max);\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#inorder-traversal","title":"\u4e2d\u5e8f\u904d\u5386(inorder traversal)","text":"<p>\u5148\u904d\u5386\u5de6\u5b50\u6811\uff0c\u7136\u540e\u8bbf\u95ee\u6839\u8282\u70b9\uff0c\u7136\u540e\u518d\u904d\u5386\u53f3\u5b50\u6811</p> <p>\u5728\u6574\u4e2a\u904d\u5386\u987a\u5e8f\u4e2d\uff0c\u6839\u8282\u70b9\u7684\u8bbf\u95ee\u603b\u662f\u5728\u5176\u5de6\u53f3\u5b50\u8282\u70b9\u4e4b\u540e\u88ab\u8bbf\u95ee\uff0c\u6240\u4ee5\u53eb\u4e2d\u5e8f\u904d\u5386 </p> <p>\u5728\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\uff0c\u5982\u679c\u5728\u6bcf\u4e2a\u8282\u70b9\uff0c\u90fd\u5148\u904d\u5386\u5de6\u5b50\u6811\uff0c\u7136\u540e\u518d\u904d\u5386\u53f3\u5b50\u6811\uff0c\u90a3\u4e48\u5c31\u80fd\u5f97\u5230\u4e00\u4e2a\u4e25\u683c\u9012\u589e\u7684\u6570\u7ec4</p>"},{"location":"Problem/programmercarl/algorithm/#_5","title":"\u4e2d\u5e8f\u904d\u5386\u7684\u7b2c\u4e00\u79cd\u5199\u6cd5\uff1a\u7ef4\u62a4\u4e00\u4e2a\u6570\u7ec4","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector&lt;int&gt; vec;\n    bool isValidBST(TreeNode* root) {\n        traseversal(root);\n        for (int i = 0; i &lt; vec.size() - 1; i++) {\n            if (vec[i] &gt;= vec[i + 1]) return false;\n        }\n        return true;\n    }\n    void traseversal(TreeNode* root) {\n        if (root == NULL) return;\n        traseversal(root-&gt;left);\n        vec.push_back(root-&gt;val);\n        traseversal(root-&gt;right);\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#_6","title":"\u4e2d\u5e8f\u904d\u5386\u7684\u7b2c\u4e8c\u79cd\u5199\u6cd5\uff1a\u7ef4\u62a4\u4e0a\u4e00\u4e2a\u8bbf\u95ee\u8fc7\u7684\u503c","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\n    long pre = LONG_MIN;\npublic:\n    bool isValidBST(TreeNode* root) {\n        if (root == NULL) return true;\n        if (!isValidBST(root-&gt;left) || root-&gt;val &lt;= pre) return false;\n        pre = root-&gt;val;\n        return isValidBST(root-&gt;right);\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#_7","title":"\u4e2d\u5e8f\u904d\u5386\u7684\u7b2c\u4e09\u79cd\u5199\u6cd5\uff1a\u6700\u76f4\u89c2\u7684\u5199\u6cd5\uff0c\u5e76\u7528\u53cc\u6307\u9488\u8fdb\u884c\u4e86\u4f18\u5316\uff0c\u6700\u63a8\u8350\u7684\u5199\u6cd5\uff01\uff01\uff01","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* pre = NULL;\n    bool isValidBST(TreeNode* root) {\n        if (root == NULL) return true;\n        bool left = isValidBST(root-&gt;left);\n        if (pre &amp;&amp; pre-&gt;val &gt;= root-&gt;val) return false;\n        pre = root;\n        bool right = isValidBST(root-&gt;right);\n        return left &amp;&amp; right;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#_8","title":"\u540e\u5e8f\u904d\u5386","text":"<p>\u540e\u5e8f\u904d\u5386\u5c31\u662f\u5148\u904d\u5386\u5de6\u5b50\u6811\uff0c\u7136\u540e\u904d\u5386\u53f3\u5b50\u6811\uff0c\u7136\u540e\u5f97\u51fa\u4e00\u4e2a\u6761\u4ef6\uff0c\u6700\u540e\u8bbf\u95ee\u6839\u8282\u70b9\uff0c\u770b\u6839\u8282\u70b9\u662f\u5426\u7b26\u5408\u8fd9\u4e2a\u5f97\u51fa\u7684\u6761\u4ef6</p> <pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    pair&lt;long, long&gt; dfs(TreeNode* root) {\n        if (root == NULL) return {LONG_MAX, LONG_MIN};\n        auto[l_min, l_max] = dfs(root-&gt;left);\n        auto[r_min, r_max] = dfs(root-&gt;right);\n        if (root-&gt;val &lt;= l_max || root-&gt;val &gt;= r_min) return {LONG_MIN, LONG_MAX};\n        long x = root-&gt;val;\n        return {min(x, l_min), max(x, r_max)};\n    }\n    bool isValidBST(TreeNode* root) {\n        return dfs(root).second != LONG_MAX;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#24","title":"24. \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6700\u5c0f\u7edd\u5bf9\u5dee\uff08\u89c6\u9891\u770b\u8fc7\uff09","text":""},{"location":"Problem/programmercarl/algorithm/#530","title":"530. \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6700\u5c0f\u7edd\u5bf9\u5dee","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\n    int difference = INT_MAX;\n    TreeNode* pre = NULL;\npublic:\n    int getMinimumDifference(TreeNode* root) {\n        traseversal(root);\n        return difference;\n    }\n    void traseversal(TreeNode* root) {\n        if (root == NULL) return;\n        traseversal(root-&gt;left);\n        if (pre) {\n            difference = min(difference, root-&gt;val - pre-&gt;val);\n        } \n        pre = root;\n        traseversal(root-&gt;right);\n\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#25","title":"25. \u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u4f17\u6570","text":""},{"location":"Problem/programmercarl/algorithm/#501","title":"501. \u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u4f17\u6570","text":"<p>\u5373\u4f7f\u662f\u5728\u6709\u91cd\u590d\u6570\u5b57\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\uff0c\u4e2d\u5e8f\u904d\u5386\u4ecd\u7136\u662f\u9012\u589e\u7684\u6570\u7ec4\uff01\uff01\uff01</p> <p>mode\u662f\u4f17\u6570\u7684\u610f\u601d</p>"},{"location":"Problem/programmercarl/algorithm/#_9","title":"\u4e2d\u5e8f\u904d\u5386\uff0c\u53ea\u904d\u5386\u4e00\u904d\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u5c31\u6c42\u51fa\u4f17\u6570\u7684\u96c6\u5408","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* pre = NULL;\n    int count = 0;\n    int maxCount = 0;\n    vector&lt;int&gt; ans;\n    void searchBST(TreeNode* root) {\n        if (root == NULL) return;\n        searchBST(root-&gt;left);\n\n        if (pre == NULL) {\n            count = 1;\n        } else if (pre-&gt;val == root-&gt;val) {\n            count++;\n        } else {\n            count = 1;\n        }\n\n\n        pre = root;\n\n\n        if (count == maxCount) {\n            ans.push_back(root-&gt;val);\n        }\n\n        if (count &gt; maxCount) {\n            maxCount = count;\n            ans.clear();\n            ans.push_back(root-&gt;val);\n        }\n\n        searchBST(root-&gt;right);\n    }\n    vector&lt;int&gt; findMode(TreeNode* root) {\n        searchBST(root);\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#_10","title":"\u7eaf\u66b4\u529b\uff0c\u5f00\u54c8\u5e0c\u8868\u8bb0\u5f55\uff08\u6ce8\u610f\u4e00\u4e0b\u54c8\u5e0c\u8868\u7684\u8bed\u6cd5\uff09\uff0c\u4e0d\u63a8\u8350\u56e0\u4e3a\u662f\u7b97\u6cd5\u9898","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\n    unordered_map&lt;int, int&gt; hash;\n    int maxCount = 0;\n    vector&lt;int&gt; ans;\npublic:\n    vector&lt;int&gt; findMode(TreeNode* root) {\n        dfs(root);\n        for (unordered_map&lt;int, int&gt;::iterator it = hash.begin(); it != hash.end(); it++) {\n            if (it-&gt;second == maxCount){\n                ans.push_back(it-&gt;first);\n            }\n        }\n        return ans;\n    }\n    void dfs(TreeNode* root) {\n        if (root == NULL) return;\n        maxCount = max(maxCount, ++hash[root-&gt;val]);\n        dfs(root-&gt;left);\n        dfs(root-&gt;right);\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#26","title":"26. \u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148","text":""},{"location":"Problem/programmercarl/algorithm/#236","title":"236. \u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n        // \u5047\u8bbe\u8282\u70b9\u662fp\uff0c\u5982\u679cq\u5728p\u7684\u5b50\u6811\u4e2d\uff0c\u90a3\u4e48\u76f4\u63a5\u8fd4\u56dep\n        // \u5982\u679cq\u4e0d\u5728p\u7684\u5b50\u6811\u4e2d\uff0c\u8fd8\u662f\u9700\u8981\u8fd4\u56deq\uff0c\u4f7f\u5f97\u4e0a\u9762\u7684\u8282\u70b9\u80fd\u591f\u540c\u65f6\u6536\u5230p\u548cq\n        if (root == p || root == q || root == NULL) return root;\n        TreeNode* left = lowestCommonAncestor(root-&gt;left, p, q);\n        TreeNode* right = lowestCommonAncestor(root-&gt;right, p, q);\n        if (left &amp;&amp; right) return root;\n        if (left) return left;\n        if (right) return right;\n        return NULL;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#28","title":"28. \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148","text":""},{"location":"Problem/programmercarl/algorithm/#235","title":"235. \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\n\nclass Solution {\npublic:\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n        // \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u516c\u5171\u7956\u5148\u76f8\u8f83\u4e8e\u4e8c\u53c9\u6811\u7684\u516c\u5171\u7956\u5148\u591a\u4e86\u4e00\u4e2a\u987a\u5e8f\n        // \u53ef\u4ee5\u76f4\u63a5\u63d0\u53d6p\u548cq\u7684value\u4e86\n\n        // \u53ea\u8981p\u548cq\u5728root\u4e24\u8fb9\uff0c\u90a3\u4e48\u6700\u8fd1\u516c\u5171\u7956\u5148\u5c31\u5fc5\u5b9a\u662froot\n        if (p-&gt;val &lt; root-&gt;val &amp;&amp; q-&gt;val &lt; root-&gt;val) return lowestCommonAncestor(root-&gt;left, p, q);\n        if (p-&gt;val &gt; root-&gt;val &amp;&amp; q-&gt;val &gt; root-&gt;val) return lowestCommonAncestor(root-&gt;right, p, q);\n        return root;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#29","title":"29. \u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u63d2\u5165\u64cd\u4f5c","text":""},{"location":"Problem/programmercarl/algorithm/#701","title":"701. \u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u63d2\u5165\u64cd\u4f5c","text":"<p>\u6ce8\u610f\u5199\u6cd5\u7684\u9519\u8bef\u4e4b\u5904\uff1a</p> <p>\u5982\u679c\u8981\u63d2\u5728temp-&gt;left\u90a3\u91cc\uff0c\u5e76\u4e14temp-&gt;left == NULL</p> <p>\u5343\u4e07\u4e0d\u80fd:</p> <pre><code>temp = temp-&gt;left;\ntemp = new TreeNode(val);\n</code></pre> <p>\u8fd9\u6837\u7684\u8bddtemp-&gt;left\u5e76\u6ca1\u6709\u6307\u5411\u65b0\u7684\u8282\u70b9</p> <p>\u800c\u5fc5\u987b\u8981\uff1a</p> <pre><code>temp-&gt;left = new TreeNode(val);\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#_11","title":"\u9700\u8981\u638c\u63e1\u7684\u9012\u5f52\u5199\u6cd5","text":"<p>\u800c\u9700\u8981\u4e00\u4e2a\u51fd\u6570\u5c31\u641e\u5b9a\u9012\u5f52\u7684\u8bdd\uff0c\u5c31\u9700\u8981\u5728\u9700\u8981\u63d2\u5165\u7684\u5730\u65b9\u8fd4\u56de\u65b0\u5efa\u7684TreeNode\uff0c\u800c\u5728\u4e0d\u9700\u8981\u63d2\u5165\u7684\u65f6\u5019\u8fd4\u56de\u539f\u6765\u7684\u6839\u8282\u70b9</p> <pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* insertIntoBST(TreeNode* root, int val) {\n        if (root == NULL) return new TreeNode(val);\n        if (root-&gt;val &lt; val) root-&gt;right = insertIntoBST(root-&gt;right, val);\n        if (root-&gt;val &gt; val) root-&gt;left = insertIntoBST(root-&gt;left, val);\n        return root;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#_12","title":"\u6700\u76f4\u767d\u7684\u8fed\u4ee3\u5199\u6cd5\uff0c\u4e0d\u63a8\u8350","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* insertIntoBST(TreeNode* root, int val) {\n        if (root == NULL) return new TreeNode(val);\n        TreeNode* temp = root;\n        TreeNode* parent = root; // \u8fd9\u4e2a\u5f88\u91cd\u8981\uff0c\u9700\u8981\u8bb0\u5f55\u4e0a\u4e00\u4e2a\u8282\u70b9\uff0c\u5426\u5219\u65e0\u6cd5\u8d4b\u503c\u65b0\u8282\u70b9\n        while (temp) {\n            parent = temp;\n            if (val &gt; temp-&gt;val) temp = temp-&gt;right;\n            else temp = temp-&gt;left;\n        }\n        if (val &gt; parent-&gt;val) parent-&gt;right = new TreeNode(val); // \u6b64\u65f6\u662f\u7528parent\u8282\u70b9\u7684\u8fdb\u884c\u8d4b\u503c\n        else parent-&gt;left = new TreeNode(val);\n        return root;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#30","title":"30. \u5220\u9664\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u8282\u70b9","text":""},{"location":"Problem/programmercarl/algorithm/#450","title":"450. \u5220\u9664\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u8282\u70b9","text":"<p>\u5bf9\u4e8e\u4e8c\u53c9\u6811\u4e2d\u5404\u79cd\u64cd\u4f5c\uff0c\u8fd4\u56de<code>TreeNode*</code>\u7684\u7406\u89e3\u662f\u8fd4\u56de\u7684\u662f\u4e0b\u9762\u5df2\u7ecf\u5904\u7406\u597d\u7684\u8282\u70b9</p> <p>\u8fd4\u56de\u7684\u8282\u70b9\u76f8\u5f53\u4e8e\u5728\u544a\u8bc9\u4e0a\u9762\u4e00\u5c42\uff1a\u201c\u4ece\u6211\u4e0b\u9762\u5f00\u59cb\u7684\u4e1c\u897f\u90fd\u5df2\u7ecf\u5904\u7406\u597d\u4e86\uff01\u201d</p> <pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* deleteNode(TreeNode* root, int key) {\n        if (root == NULL) return NULL;\n        if (root-&gt;val == key) {\n            if (root-&gt;left == NULL &amp;&amp; root-&gt;right == NULL) {\n                delete root;\n                // \u76f8\u5f53\u4e8e\u5220\u9664\u4e86\u8282\u70b9\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5730\u65b9\u4f1a\u53d8\u6210null\n                return NULL;\n            } \n            else if (root-&gt;left == NULL) {\n                TreeNode* returnNode = root-&gt;right;\n                delete root;\n                return returnNode;\n            }\n            else if (root-&gt;right == NULL) {\n                TreeNode* returnNode = root-&gt;left;\n                delete root;\n                return returnNode;\n            }\n            else {\n                // \u5982\u679c\u6211\u4eec\u8981\u5220\u9664\u4e00\u4e2a\u5de6\u53f3\u90fd\u6709\u513f\u5b50\u7684\u8282\u70b9\uff08\u5305\u62ec\u6839\u8282\u70b9\uff09\n                // \u6211\u4eec\u7684\u7b56\u7565\u662f\u8fd4\u56deroot-&gt;right\n                // \u800croot-&gt;left\u5e94\u8be5\u6bd4root-&gt;left\u91cc\u9762\u7684\u6700\u5c0f\u503c\u8fd8\u8981\u5c0f\n                TreeNode* returnNode = root-&gt;right;\n                TreeNode* curr = root-&gt;right;\n                while (curr-&gt;left != NULL) {\n                    curr = curr-&gt;left;\n                }\n                curr-&gt;left = root-&gt;left;\n                delete root;\n                return returnNode;\n            }\n        }\n        // \u5982\u679croot\u5e76\u4e0d\u7b49\u4e8ekey\uff0c\u90a3\u4e48\u80af\u5b9a\u4e0d\u80fd\u76f4\u63a5\u8fd4\u56deroot\n        // \u800c\u662f\u8981\u5bf9root\u7684left\u548cright\u8fdb\u884c\u5904\u7406\u4e00\u4e0b\uff0c\u5904\u7406\u597d\u4e86\u4e4b\u540e\u624d\u80fd\u8fd4\u56deroot\u7ed9\u4e0a\u9762\u4e00\u5c42\n        if (root-&gt;val &gt; key) root-&gt;left = deleteNode(root-&gt;left, key);\n        if (root-&gt;val &lt; key) root-&gt;right = deleteNode(root-&gt;right, key);\n\n        return root;\n\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#31","title":"31. \u4fee\u526a\u4e8c\u53c9\u641c\u7d22\u6811","text":""},{"location":"Problem/programmercarl/algorithm/#669","title":"669. \u4fee\u526a\u4e8c\u53c9\u641c\u7d22\u6811","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* trimBST(TreeNode* root, int low, int high) {\n        // \u5047\u8bbe\u4e00\u4e2aroot\u5c0f\u4e8elow\uff0c\u90a3\u4e48\u4ed6\u7684\u5de6\u513f\u5b50\u53ef\u4ee5\u653e\u5f03\uff0c\u800c\u53f3\u513f\u5b50\u9700\u8981\u88ab\u7ee7\u627f\n        // \u5047\u8bbe\u4e00\u4e2aroot\u5927\u4e8ehigh\uff0c\u90a3\u4e48\u4ed6\u7684\u53f3\u513f\u5b50\u53ef\u4ee5\u653e\u5f03\uff0c\u53ea\u5269\u4e0b\u5de6\u513f\u5b50\n        // \u5bf9\u4e8e\u4fee\u526a\u4e8c\u53c9\u6811\u6765\u8bf4\uff0c\u53ea\u8981\u7565\u8fc7\u90a3\u4e9b\u4e0d\u9700\u8981\u7684\u5b50\u6811\u5c31\u884c\u4e86\uff0c\u5e76\u6ca1\u6709\u5bf9\u5404\u4e2a\u8282\u70b9\u505a\u4ec0\u4e48\u64cd\u4f5c\uff0c\u6700\u540e\u8fd4\u56de\u7684\u4e5f\u662f\u6839\u8282\u70b9\u7684\u503c\n        if (root == NULL) return NULL;\n        if (root-&gt;val &lt; low) return trimBST(root-&gt;right, low, high);\n        if (root-&gt;val &gt; high) return trimBST(root-&gt;left, low, high);\n        root-&gt;left = trimBST(root-&gt;left, low, high);\n        root-&gt;right = trimBST(root-&gt;right, low, high);\n        return root;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#32","title":"32. \u5c06\u6709\u5e8f\u6570\u7ec4\u8f6c\u6362\u4e3a\u4e8c\u53c9\u641c\u7d22\u6811","text":""},{"location":"Problem/programmercarl/algorithm/#108","title":"108. \u5c06\u6709\u5e8f\u6570\u7ec4\u8f6c\u6362\u4e3a\u4e8c\u53c9\u641c\u7d22\u6811","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* sortedArrayToBST(vector&lt;int&gt;&amp; nums) {\n        TreeNode* res = build(nums, 0, nums.size() - 1);\n        return res;\n    }\n    TreeNode* build(vector&lt;int&gt;&amp; nums, int l, int r) {\n        if (l &gt; r) return NULL;\n        int mid = (l + r) &gt;&gt; 1;\n        TreeNode* root = new TreeNode(nums[mid]);\n        root-&gt;left = build(nums, l, mid - 1);\n        root-&gt;right = build(nums, mid + 1, r);\n        return root;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#1382","title":"1382. \u5c06\u4e8c\u53c9\u641c\u7d22\u6811\u53d8\u5e73\u8861","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* balanceBST(TreeNode* root) {\n        vector&lt;int&gt; order;\n        function&lt;void(TreeNode*)&gt; inOrderTras = [&amp;] (TreeNode* root) {\n            if (root == NULL) return;\n            inOrderTras(root-&gt;left);\n            order.emplace_back(root-&gt;val);\n            inOrderTras(root-&gt;right);\n        };\n        inOrderTras(root);\n        function&lt;TreeNode* (int, int)&gt; heightBalance = [&amp;] (int l, int r) -&gt; TreeNode* {\n            if (l &gt; r) return NULL;  \n            int mid = (l + r) &gt;&gt; 1;\n            TreeNode* node = new TreeNode(order[mid]);\n            node-&gt;left = heightBalance(l, mid - 1);\n            node-&gt;right = heightBalance(mid + 1, r);\n            return node;\n        };\n        return heightBalance(0, order.size() - 1);\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#200","title":"200. \u5c9b\u5c7f\u6570\u91cf","text":""},{"location":"Problem/programmercarl/algorithm/#dfs","title":"dfs\u89e3\u6cd5","text":"<pre><code>class Solution {\nprivate:\n    int dx[4] = {0, 1, 0, -1}, dy[4] = {-1, 0, 1, 0};\n    void dfs(vector&lt;vector&lt;char&gt;&gt;&amp; g, vector&lt;vector&lt;bool&gt;&gt;&amp; visited, int x, int y) {\n        for (int i = 0; i &lt; 4; i++) {\n            int a = x + dx[i];\n            int b = y + dy[i];\n            if (a &lt; 0 || a &gt;= g.size() || b &lt; 0 || b &gt;= g[0].size()) continue;\n            if (!visited[a][b] &amp;&amp; g[a][b] == '1') {\n                visited[a][b] = true;\n                dfs(g, visited, a, b);\n            }\n        }\n    }\npublic:\n    int numIslands(vector&lt;vector&lt;char&gt;&gt;&amp; grid) {\n        int n = grid.size(), m = grid[0].size();\n        vector&lt;vector&lt;bool&gt;&gt; visited = vector&lt;vector&lt;bool&gt;&gt;(n, vector&lt;bool&gt;(m, false));\n        int result = 0;\n        for (int i = 0; i &lt; n; i++) {\n            for (int j = 0; j &lt; m; j++) {\n                if (!visited[i][j] &amp;&amp; grid[i][j] == '1') {\n                    visited[i][j] = true;\n                    result++;\n                    dfs(grid, visited, i, j);\n                }\n            }\n        }\n        return result;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#bfs","title":"bfs\u89e3\u6cd5","text":"<pre><code>class Solution {\npublic:\n    int dx[4] = {0, 1, 0, -1}, dy[4] = {-1, 0, 1, 0};\n    void bfs(vector&lt;vector&lt;char&gt;&gt; &amp; grid, vector&lt;vector&lt;bool&gt;&gt; &amp; visited, int x, int y) {\n        queue&lt;pair&lt;int, int&gt;&gt; que;\n        que.push({x, y});\n        visited[x][y] = true;\n        while (!que.empty()) {\n            pair&lt;int, int&gt; cur = que.front();\n            que.pop();\n            int a = cur.first;\n            int b = cur.second;\n            for (int i = 0; i &lt; 4; i++) {\n                int netx = a + dx[i];\n                int nety = b + dy[i];\n                if (netx &lt; 0 || nety &lt; 0 || netx &gt;= grid.size() || nety &gt;= grid[0].size()) continue;\n                if (!visited[netx][nety] &amp;&amp; grid[netx][nety] == '1') {\n                    que.push({netx, nety});\n                    visited[netx][nety] = true;\n                }\n            }\n        }\n    }\n    int numIslands(vector&lt;vector&lt;char&gt;&gt;&amp; grid) {\n        int n = grid.size(), m = grid[0].size();\n        vector&lt;vector&lt;bool&gt;&gt; visited = vector&lt;vector&lt;bool&gt;&gt;(n, vector&lt;bool&gt;(m, false));\n        int result = 0;\n        for (int i = 0; i &lt; n; i++) {\n            for (int j = 0; j &lt; m; j++) {\n                if (!visited[i][j] &amp;&amp; grid[i][j] == '1') {\n                    result++;\n                    bfs(grid, visited, i, j);\n                }\n            }\n        }\n        return result;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#_13","title":"\u7075\u8336\u5c71\u827e\u5e9c\u8bfe\u7a0b","text":""},{"location":"Problem/programmercarl/algorithm/#_14","title":"\u76f8\u5411\u53cc\u6307\u9488","text":"<p>acwing\u7684\u601d\u8def\u662f\u5f15\u5165j -1\u8fd9\u4e2a\u5de7\u5999\u7684\u6280\u5de7\u6765\u4e0d\u65ad\u63a7\u5236\u53f3\u6307\u9488\u7684\u79fb\u52a8</p> <p>\u800c\u7075\u8336\u5c71\u827e\u5e9c\u7684\u505a\u6cd5\u662f\u540c\u65f6\u63a7\u5236\u5de6\u53f3\u6307\u9488\uff0c\u7531\u4e8e\u6570\u7ec4\u6709\u5e8f\uff0c\u90a3\u4e48\u5f53\u548c\u6bd4target\u5927\u7684\u65f6\u5019\u5c31\u79fb\u52a8\u53f3\u6307\u9488\uff0c\u548c\u6bd4target\u5c0f\u7684\u65f6\u5019\u5c31\u79fb\u52a8\u5de6\u6307\u9488</p>"},{"location":"Problem/programmercarl/algorithm/#167-ii-","title":"167. \u4e24\u6570\u4e4b\u548c II - \u8f93\u5165\u6709\u5e8f\u6570\u7ec4","text":"<p>\u65f6\u95f4\u590d\u6742\u5ea6O(n)</p> <p>\u7a7a\u95f4\u590d\u6742\u5ea6O(1)</p>"},{"location":"Problem/programmercarl/algorithm/#acwing","title":"acwing\u505a\u6cd5","text":"<pre><code>class Solution {\npublic:\n    vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; numbers, int target) {\n        vector&lt;int&gt; res;\n        for (int i = 0, j = numbers.size() - 1; i &lt; j; i++) {\n            while (j - 1 &gt; i &amp;&amp; numbers[i] + numbers[j - 1] &gt;= target) j--;\n            if (numbers[i] + numbers[j] == target) res.push_back(i + 1), res.push_back(j + 1); \n        }\n        // if (!res.empty()) return {-1, -1};\n        return res;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#_15","title":"\u7075\u8336\u5c71\u827e\u5e9c","text":"<pre><code>class Solution {\npublic:\n    vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; numbers, int target) {\n        int l = 0;\n        int r = numbers.size() - 1;\n        while (l &lt; r) {\n            int sum = numbers[l] + numbers[r];\n            if (sum == target) return {l + 1, r + 1};\n            else if (sum &gt; target) r--;\n            else l++;\n        }\n        return {l + 1, r + 1}; //\u8fd9\u53e5\u8bdd\u7528\u4e0d\u5230\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#15","title":"15. \u4e09\u6570\u4e4b\u548c","text":""},{"location":"Problem/programmercarl/algorithm/#acwing_1","title":"acwing","text":"<pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; threeSum(vector&lt;int&gt;&amp; nums) {\n        vector&lt;vector&lt;int&gt;&gt; res;\n        sort(nums.begin(), nums.end());\n        for (int i = 0; i &lt; nums.size() - 1; i++) {\n            if (i &amp;&amp; nums[i] == nums[i - 1]) continue;\n            for (int j = i + 1, k = nums.size() - 1; j &lt; k; j++) {\n                if (j &gt;= i + 2 &amp;&amp; nums[j] == nums[j - 1]) continue;\n                while (k - 1 &gt; j &amp;&amp; nums[i] + nums[j] + nums[k - 1] &gt;= 0) k--;\n                if (nums[i] + nums[j] + nums[k] == 0) res.push_back({nums[i], nums[j], nums[k]});\n            }\n        }\n        return res;\n    }\n}; \n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#_16","title":"\u7075\u8336\u5c71\u827e\u5e9c","text":"<pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; threeSum(vector&lt;int&gt;&amp; nums) {\n        vector&lt;vector&lt;int&gt;&gt; res;\n        sort(nums.begin(), nums.end());\n        for (int i = 0; i &lt; nums.size() - 2; i++) {\n            int l = i + 1, r = nums.size() - 1;\n            if (i &amp;&amp; nums[i - 1] == nums[i]) continue;\n            while (l &lt; r) {\n                int s = nums[i] + nums[l] + nums[r];\n                if (s == 0) {\n                    res.push_back({nums[i], nums[l], nums[r]});\n                    r--;\n                    while (r &lt; nums.size() - 1 &amp;&amp; nums[r] == nums[r + 1]) r--;\n                }\n                else if (s &gt; 0) r--;\n                else l++;\n            }\n        }\n        return res;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#_17","title":"\u76f8\u5411\u53cc\u6307\u9488","text":""},{"location":"Problem/programmercarl/algorithm/#11","title":"11. \u76db\u6700\u591a\u6c34\u7684\u5bb9\u5668","text":"<p>\u65f6\u95f4\u590d\u6742\u5ea6: On</p> <pre><code>class Solution {\npublic:\n    int maxArea(vector&lt;int&gt;&amp; height) {\n        int res = 0;\n        int l = 0, r = height.size() - 1;\n        while (l &lt; r) {\n            int hl = height[l], hr = height[r];\n            res = max(res, (r - l) * min(hl, hr));\n            printf(\"r: %d; l: %d; res: %d\\n\", r, l, res);\n            if (height[l] &lt; height[r] &amp;&amp; l &lt; r) l++;\n            else if (height[l] &gt;= height[r] &amp;&amp; l &lt; r) r--;\n        }\n        return res;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#42","title":"42. \u63a5\u96e8\u6c34","text":"<p>\u9700\u8981\u89c2\u5bdf\u5230\u6027\u8d28\uff1a\u6bcf\u4e2a\u683c\u5b50\u4e0a\u9762\u63a5\u7684\u6c34\u5c31\u662f\u5de6\u53f3\u4e24\u8fb9\u5404\u81ea\u6700\u5927\u503c\u7684\u6700\u5c0f\u503c\u51cf\u53bb\u8fd9\u4e2a\u683c\u5b50\u7684\u9ad8\u5ea6</p>"},{"location":"Problem/programmercarl/algorithm/#_18","title":"\u7b2c\u4e00\u79cd\u505a\u6cd5\u662f\u524d\u540e\u7f00\u5206\u89e3","text":"<pre><code>class Solution {\npublic:\n    int trap(vector&lt;int&gt;&amp; height) {\n        vector&lt;int&gt; pre(height.size());\n        vector&lt;int&gt; suf(height.size());\n        int res = 0;\n        pre[0] = height[0];\n        suf[height.size() - 1] =height[height.size() - 1];\n        for (int i = 1; i &lt; height.size(); i++) pre[i] = max(pre[i - 1], height[i]);\n        for (int i = height.size() - 2; i &gt;= 0; i --) suf[i] = max(suf[i + 1], height[i]);\n        for (int i = 0; i &lt; height.size(); i++) {\n            res += min(pre[i], suf[i]) - height[i];\n        }\n        return res;\n    }\n}; \n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#_19","title":"\u7b2c\u4e8c\u79cd\u505a\u6cd5\u662f\u53cc\u6307\u9488","text":"<pre><code>class Solution {\npublic:\n    int trap(vector&lt;int&gt;&amp; height) {\n        int ans = 0;\n        int l = 0, r = height.size() - 1;\n        int lmax = height[0], rmax = height[height.size() - 1];\n        while (l &lt; r) {\n            lmax = max(lmax, height[l]), rmax = max(rmax, height[r]);\n            if (lmax &lt;= rmax) {\n                ans += lmax - height[l];\n                l++;\n            }\n            else {\n                ans += rmax - height[r];\n                r--;\n            }\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#209_1","title":"209. \u957f\u5ea6\u6700\u5c0f\u7684\u5b50\u6570\u7ec4","text":"<p>\u65f6\u95f4\u590d\u6742\u5ea6O(n)</p> <pre><code>class Solution {\npublic:\n    int minSubArrayLen(int target, vector&lt;int&gt;&amp; nums) {\n        int i = 0, j = 0, ans = nums.size() + 1,  res = 0;\n        while (j &lt; nums.size()) {\n            res += nums[j];\n            while (res &gt;= target) {\n                ans = min(ans, j - i + 1);\n                res -= nums[i];\n                i++;\n            }\n            j++;\n        }\n        return (ans &lt;= n) ? ans : 0;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#713-k","title":"713. \u4e58\u79ef\u5c0f\u4e8e K \u7684\u5b50\u6570\u7ec4","text":"<pre><code>class Solution {\npublic:\n    int numSubarrayProductLessThanK(vector&lt;int&gt;&amp; nums, int k) {\n        // \u6211\u4eec\u9700\u8981\u5173\u6ce8\u7684\u662f\u6240\u6709\u4ee5\u53f3\u7aef\u70b9\u4e3a\u7ec8\u70b9\u7684\u6570\u7ec4\u7684\u6700\u957f\u7684\u957f\u5ea6\n        // \u6ce8\u610f\u8bfb\u9898\u662f\u4e25\u683c\u5c0f\u4e8e\n        if (k &lt;= 1) return 0;\n        int l = 0, r = 0;\n        int prod = 1;\n        int res = 0;\n        while (r &lt; nums.size()) {\n            prod *= nums[r];\n            while (prod &gt;= k) {\n                prod /= nums[l];\n                l++;\n            }\n            res += r - l + 1;\n            r++;\n        }\n        return res;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#3","title":"3. \u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32","text":"<p>\u6ce8\u610f\u54c8\u5e0c\u8868\u7684\u521d\u59cb\u503c\u662f0</p> <p>\u5e76\u4e14\u53ef\u4ee5\u7528s.empty()\u6765\u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u4e3a\u7a7a</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n)</p> <p>\u7531\u4e8e\u5b57\u7b26\u662fascii\u7801\uff0c\u6700\u591a\u53ea\u6709128\u4e2a\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u5c06\u7a7a\u95f4\u590d\u6742\u5ea6\u770b\u6210O(128)</p> <pre><code>class Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n        if (s.empty()) return 0;\n        unordered_map&lt;char, int&gt; hash;\n        int l = 0, r = 0;\n        int res = 1;\n        while (r &lt; s.size()) {\n            hash[s[r]]++;\n            while (hash[s[r]] &gt; 1) {\n                hash[s[l]]--;\n                l++;\n            }\n            res = max(res, r - l + 1);\n            r++;\n        }\n        return res;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#_20","title":"\u4e8c\u5206\u67e5\u627e","text":""},{"location":"Problem/programmercarl/algorithm/#34_1","title":"34. \u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u67e5\u627e\u5143\u7d20\u7684\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e","text":"<pre><code>class Solution {\npublic:\n    vector&lt;int&gt; searchRange(vector&lt;int&gt;&amp; nums, int target) {\n        vector&lt;int&gt; res;\n        // \u6ce8\u610f\u5224\u7a7a\uff01\u4e0d\u7136\u627e\u95ee\u9898\u975e\u5e38\u6d6a\u8d39\u65f6\u95f4\uff01\n        if (nums.size() == 0) return {-1, -1};\n        int l = 0, r = nums.size() - 1;\n        //\u5148\u627e\u5de6\u7aef\u70b9\n        while (l &lt; r) {\n            int mid = (l + r) &gt;&gt; 1;\n            if (nums[mid] &lt; target) l = mid + 1;\n            else r = mid;\n        }\n        if (nums[l] == target) res.push_back(l);\n        else return {-1, -1};\n        // \u627e\u53f3\u7aef\u70b9\n        l = 0, r = nums.size() - 1;\n        while (l &lt; r) {\n            int mid = (l + r + 1) &gt;&gt; 1;\n            if (nums[mid] &gt; target) r = mid - 1;\n            else l = mid; // l = mid \u5f88\u5371\u9669\n        }\n        if (nums[l] == target) res.push_back(l);\n        else return {-1, -1};\n\n        return res;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#153","title":"153. \u5bfb\u627e\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u6700\u5c0f\u503c","text":"<p>\u6709\u5e8f\u6570\u7ec4\u65cb\u8f6c\u540e\u505a\u9898\u7684\u6280\u5de7\u662f</p> <pre><code>class Solution {\npublic:\n    int findMin(vector&lt;int&gt;&amp; nums) {\n        // \u76f4\u63a5\u5206\u7c7b\u8ba8\u8bba\u753b\u56fe\uff0c\u4e3b\u8981\u5c31\u662f\u4e09\u79cd\u60c5\u51b5\uff0c\u5de6\u8fb9\u957f\uff0c\u53f3\u8fb9\u957f\uff0c\u4ee5\u53ca\u6ca1\u6709\u65cb\u8f6c\n        int l = 0, r = nums.size() - 1;\n        while (l &lt; r) {\n            int mid = (l + r) &gt;&gt; 1;\n            if (nums[mid] &gt; nums[nums.size() - 1]) l = mid + 1;\n            else r = mid;\n        }\n        return nums[l];\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#33","title":"33. \u641c\u7d22\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4","text":""},{"location":"Problem/programmercarl/algorithm/#_21","title":"\u7b2c\u4e00\u79cd\u505a\u6cd5\u662f\u5bf9\u7740\u4e09\u4e2a\u5750\u6807\u70b9\u5f3a\u884c\u5206\u7c7b","text":"<pre><code>class Solution {\npublic:\n    int search(vector&lt;int&gt;&amp; nums, int target) {\n        int l = 0, r = nums.size() - 1;\n        while (l &lt; r) {\n            int mid = (l + r) &gt;&gt; 1;\n            if (nums[mid] &lt;= nums[nums.size() - 1]) {\n                if (target &gt; nums[nums.size() - 1]) r = mid - 1;\n                else if (target &lt;= nums[nums.size() - 1] &amp;&amp; target &gt; nums[mid]) l = mid + 1;\n                else r =  mid;\n            } else {\n                if (target &lt;= nums[nums.size() - 1]) l = mid + 1;\n                else if (target &lt;= nums[mid]) r = mid;\n                else l = mid + 1; \n            }\n        }\n        if (nums[l] == target) return l;\n        else return -1;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#_22","title":"\u7b2c\u4e8c\u79cd\u505a\u6cd5\u662f\u5148\u4e8c\u5206\u51fa\u65cb\u8f6c\u6570\u7ec4\u7684\u5206\u754c\u70b9\uff0c\u7136\u540e\u518d\u5728\u7279\u5b9a\u7684\u6bb5\u4e0a\u4e0d\u65ad\u4e8c\u5206\u627e\u51fa\u9700\u8981\u7684\u6570","text":"<pre><code>class Solution {\npublic:\n    int search(vector&lt;int&gt;&amp; nums, int target) {\n        int l = 0, r = nums.size() - 1;\n        while (l &lt; r) {\n            int mid = (l + r + 1) &gt;&gt; 1;\n            if (nums[mid] &gt;= nums[0]) l = mid;\n            else r = mid - 1;\n        }\n        if (target &gt;= nums[0]) l = 0;\n        else l = r + 1, r = nums.size() - 1;\n        while (l &lt; r) {\n            int mid = (l + r) &gt;&gt; 1;\n            if (nums[mid] &gt;= target) r = mid;\n            else l = mid + 1; // \u8fd9\u91ccl\u6709\u51fa\u754c\u7684\u98ce\u9669\uff0c\u6240\u4ee5return\u7684\u65f6\u5019\u9700\u8981return\u7684\u662fr\uff0c\u800c\u4e0d\u80fd\u662fl\n        }\n        if (nums[r] == target) return r;\n        else return -1;\n    }\n};*\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#_23","title":"\u53cd\u8f6c\u94fe\u8868","text":""},{"location":"Problem/programmercarl/algorithm/#206","title":"206. \u53cd\u8f6c\u94fe\u8868","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        if (head == NULL) return head;\n        ListNode* a = head;\n        ListNode* b = head-&gt;next;\n        while (b != NULL) {\n            ListNode* c = b-&gt;next;\n            b-&gt;next = a;\n            a = b;\n            b = c;\n        }\n        head-&gt;next = NULL;\n        return a;\n    }\n};\n\n\ntemplate &lt;typename T&gt;\nclass SinglyLinkedList {\nprivate:\n    class Node {\n    public:\n        T data;\n        Node* next;\n    };\n\n    Node* head;\n    size_t size;\n\npublic:\n    // Constructors\n    SinglyLinkedList();\n    SinglyLinkedList(const T&amp; initialData);\n\n    // Other methods\n    void pushFront(const T&amp; value);\n    void popFront();\n    bool isEmpty() const;\n    size_t getSize() const;\n    // Add more methods as needed\n};\n\ntemplate &lt;typename T&gt;\nclass SinglyLinkedList {\nprivate:\n    class Node {\n    public:\n        T data;\n        Node* next;\n        Node(const T&amp; value) : data(value), next(nullptr) {}\n    };\n\n    Node* head;\n    size_t size;\n\npublic:\n    // Constructors\n    SinglyLinkedList() : head(nullptr), size(0) {}\n\n    SinglyLinkedList(const T&amp; initialValue) : head(nullptr), size(0) {\n        pushFront(initialValue);\n    }\n\n    // Destructor\n    ~SinglyLinkedList() {\n        while (head) {\n            Node* temp = head;\n            head = head-&gt;next;\n            delete temp;\n        }\n    }\n\n    // Public methods\n    void pushFront(const T&amp; value) {\n        Node* newNode = new Node(value);\n        newNode-&gt;next = head;\n        head = newNode;\n        size++;\n    }\n\n    void popFront() {\n        if (head) {\n            Node* temp = head;\n            head = head-&gt;next;\n            delete temp;\n            size--;\n        }\n    }\n\n    void append(const T&amp; value) {\n        Node* newNode = new Node(value);\n        if (!head) {\n            head = newNode;\n        } else {\n            Node* current = head;\n            while (current-&gt;next) {\n                current = current-&gt;next;\n            }\n            current-&gt;next = newNode;\n        }\n        size++;\n    }\n\n    // Other methods like insert, remove, search, size, print, etc.\n    // ...\n\n    // Getter for size\n    size_t getSize() const {\n        return size;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#92-ii","title":"92. \u53cd\u8f6c\u94fe\u8868 II","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* reverseBetween(ListNode* head, int left, int right) {\n        if (head == NULL || head-&gt;next == NULL) return head;\n        ListNode* dummy = new ListNode(-1);\n        dummy-&gt;next = head;\n        ListNode* a = dummy;\n        for (int i = 1; i &lt; left; i++) a = a-&gt;next;\n        ListNode* b = a-&gt;next;\n        ListNode* c = b-&gt;next;\n        for (int i = 0; i &lt; right - left; i++) {\n            ListNode* d = c-&gt;next;\n            c-&gt;next = b;\n            b = c;\n            c = d;\n        }\n        a-&gt;next-&gt;next = c;\n        a-&gt;next = b;\n        return dummy-&gt;next;\n\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#_24","title":"\u5feb\u6162\u6307\u9488","text":""},{"location":"Problem/programmercarl/algorithm/#876","title":"876. \u94fe\u8868\u7684\u4e2d\u95f4\u7ed3\u70b9","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\n// \u8fd9\u9053\u9898\u5f88\u660e\u663e\u9700\u8981\u901a\u8fc7\u5947\u6570\u548c\u5076\u6570\u5206\u522b\u5206\u6790\n// \u5947\u6570\u60c5\u51b5\u7b80\u5355\uff1a1,2,3 \u5feb\u6307\u9488+2\uff0c\u800c\u6162\u6307\u9488+1\uff0cfast-&gt;next == NULL\u65f6\u505c\u4e0b\n// \u5076\u6570\u60c5\u51b5\uff1a1, 2 \u8fd9\u79cd\u60c5\u51b5\u4ecd\u7136\u9700\u8981\u5feb\u6307\u9488+2\uff0c\u6162\u6307\u9488\u52a01\u56e0\u4e3a\u6709\u4e24\u4e2a\u4e2d\u95f4\u8282\u70b9\u7684\u8bdd\uff0c\u8fd4\u56de\u7684\u65f6\u7b2c\u4e8c\u4e2a\u4e2d\u95f4\u8282\u70b9\n// \u800c\u5076\u6570\u60c5\u51b5\u4e2d\u5feb\u6307\u9488\u4f1a\u6307\u5411NULL\uff0c\u8fd9\u4e2a\u65f6\u5019\u5c31\u8981\u505c\u4e0b fast-&gt;next == NULL\npublic:\n    ListNode* middleNode(ListNode* head) {\n        ListNode *fast = head;\n        ListNode *slow = head;\n        while (fast != NULL &amp;&amp; fast-&gt;next != NULL) {\n            fast = fast-&gt;next-&gt;next;\n            slow = slow-&gt;next;\n        }\n        return slow;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#141","title":"141. \u73af\u5f62\u94fe\u8868","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    bool hasCycle(ListNode *head) {\n        ListNode *fast = head;\n        ListNode *slow = head;\n        // \u4f7f\u7528\u5feb\u6162\u6307\u9488\u7684\u65f6\u5019\uff0c\u5982\u679cfast+2,slow+1\uff0c\u90a3\u4e48\u5b9e\u9645\u4e0a\u6bcf\u6b21\u8ffd\u53ca\u7684\u8ddd\u79bb\u5c31\u662f1\uff0c\u4e0d\u7528\u62c5\u5fc3fast\u4f1a\u8d85\u8fc7slow\n        while (fast != NULL &amp;&amp; fast-&gt;next != NULL) {\n            fast = fast-&gt;next-&gt;next;\n            slow = slow-&gt;next;\n            if (fast == slow) return true; // \u8981\u5728\u6bcf\u6b21\u79fb\u52a8\u6307\u9488\u540e\u6bd4\u8f83\u662f\u5426\u8ffd\u53ca\u6210\u529f\n        }\n        return false;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#142-ii","title":"142. \u73af\u5f62\u94fe\u8868 II","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode *detectCycle(ListNode *head) {\n        // \u5165\u73af\u524d\u7684\u957f\u5ea6\u65f6a\uff0c\u76f8\u9047\u65f6\u73af\u5185\u5df2\u7ecf\u8d70\u8fc7b\uff0c\u73af\u5185\u8fd8\u5269\u4e0bc\n        // \u5feb\u6307\u9488\u8d70\u8fc7\u7684\u8def a + k (b + c)\n        // \u6162\u6307\u9488\u8d70\u8fc7\u7684\u8def a + b\n        // 2(a + b) = a + k(b + c)\n        // a - c = (k - 1)(b + c)\n        // \u5982\u679chead\u548c\u6162\u6307\u9488\u540c\u65f6\u8d70a\u7684\u8def\uff0c\u90a3\u4e48head\u4f1a\u5230\u5165\u73af\u70b9\uff0c\u800c\u6162\u6307\u9488\u4f1a\u5728\u8f6c\u4e86(k - 1)\u5708\u4e4b\u540e\u5230\u5165\u73af\u70b9\n        ListNode *fast = head, * slow = head;\n        while (true) {\n            if (fast == NULL || fast-&gt;next == NULL) return NULL;\n            fast = fast-&gt;next-&gt;next;\n            slow = slow-&gt;next;\n            if (fast == slow) break;\n        }\n        ListNode *dummy = head;\n        while (fast != dummy) {\n            fast = fast-&gt;next;\n            dummy = dummy-&gt;next;\n        }\n        return dummy;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#143","title":"143. \u91cd\u6392\u94fe\u8868","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    void reorderList(ListNode* head) {\n        ListNode *fast = head, *slow = head;\n        while (fast != NULL &amp;&amp; fast-&gt;next != NULL) {\n            fast = fast-&gt;next-&gt;next;\n            slow = slow-&gt;next;\n        }\n        fast = slow;\n        slow = NULL;\n        while (fast != NULL) {\n            ListNode *temp = fast-&gt;next;\n            fast-&gt;next = slow;\n            slow = fast;\n            fast = temp;\n        }\n\n        fast = head;\n\n        while (fast-&gt;next != NULL &amp;&amp; slow-&gt;next != NULL) {\n            ListNode *l = fast-&gt;next;\n            ListNode *r = slow-&gt;next;\n            fast-&gt;next = slow;\n            slow-&gt;next = l;\n            fast = l;\n            slow = r;\n        }\n\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#_25","title":"\u524d\u540e\u6307\u9488","text":""},{"location":"Problem/programmercarl/algorithm/#237","title":"237. \u5220\u9664\u94fe\u8868\u4e2d\u7684\u8282\u70b9","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    void deleteNode(ListNode* node) {\n        // \u56e0\u4e3a\u4e0d\u662f\u94fe\u8868\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u8282\u70b9\uff0c\u800c\u4e14\u53ea\u8981\u4fdd\u8bc1\u6240\u6709\u503c\u552f\u4e00\u5373\u53ef\n        // \u90a3\u4e48\u5c06\u4e0b\u4e00\u4e2a\u503c\u590d\u5236\u5230\u8fd9\u4e2a\u8282\u70b9\uff0c\u7136\u540e\u5220\u53bb\u4e0b\u4e00\u4e2a\u8282\u70b9\u5c31\u884c\u4e86\n        node-&gt;val = node-&gt;next-&gt;val;\n        node-&gt;next = node-&gt;next-&gt;next;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#19-n","title":"19. \u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2c N \u4e2a\u7ed3\u70b9","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* removeNthFromEnd(ListNode* head, int n) {\n        // \u9996\u5148\u8981\u8003\u8651\u5934\u8282\u70b9\u4f1a\u4e0d\u4f1a\u53d8\n        ListNode *dummy = new ListNode(-1, head);\n        ListNode *fast = dummy, *slow = dummy;\n        for (int i = 0; i &lt; n; i++) {\n            fast = fast-&gt;next;\n        }\n        while (fast != NULL &amp;&amp; fast-&gt;next != NULL) {\n            fast = fast-&gt;next;\n            slow = slow-&gt;next;\n        }\n        slow-&gt;next = slow-&gt;next-&gt;next;\n        return dummy-&gt;next;\n\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#83","title":"83. \u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* deleteDuplicates(ListNode* head) {\n        ListNode *curr = head;\n        while (curr != NULL) {\n            while (curr-&gt;next != NULL &amp;&amp; curr-&gt;val == curr-&gt;next-&gt;val) curr-&gt;next = curr-&gt;next-&gt;next;\n            curr = curr-&gt;next;\n        }\n        return head;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#82-ii","title":"82. \u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20 II","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* deleteDuplicates(ListNode* head) {\n        ListNode *dummy = new ListNode(-1, head);\n        ListNode *curr = dummy;\n        while (curr) {\n            if (curr-&gt;next != NULL &amp;&amp; curr-&gt;next-&gt;next != NULL &amp;&amp;curr-&gt;next-&gt;val == curr-&gt;next-&gt;next-&gt;val) {\n                int same = curr-&gt;next-&gt;val;\n                while (curr-&gt;next != NULL &amp;&amp; curr-&gt;next-&gt;val == same) {\n                    curr-&gt;next = curr-&gt;next-&gt;next;\n                }\n            } \n            else {\n                curr = curr-&gt;next;\n            }\n        }\n        return dummy-&gt;next;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#_26","title":"\u4e8c\u53c9\u6811 \u9012\u5f52","text":"<p>\u6808\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u5c31\u662f\u6700\u5148\u8fdb\u53bb\u7684\u6700\u540e\u51fa\u6765</p>"},{"location":"Problem/programmercarl/algorithm/#104","title":"104. \u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6","text":""},{"location":"Problem/programmercarl/algorithm/#_27","title":"\u9012\u5f52\u505a\u6cd5","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int maxDepth(TreeNode* root) {\n        if (root == NULL) return 0;\n        return max(maxDepth(root-&gt;left), maxDepth(root-&gt;right)) + 1;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#dfs_1","title":"dfs\u505a\u6cd5","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\n    // ans\u8fd9\u91cc\u662fSolution\u8fd9\u4e2a\u7c7b\u7684\u6210\u5458\u53d8\u91cf\uff0c\u5728\u6574\u4e2aSolution\u7684\u751f\u547d\u5468\u671f\u4e2d\u4e00\u76f4\u5b58\u5728\n    // \u6240\u4ee5ans\u8fd9\u91cc\u76f8\u5f53\u4e8eSolution\u4e2d\u7684\u5168\u5c40\u53d8\u91cf\n    // \u5b9e\u73b0\u4e86\u591a\u6b21\u8c03\u7528 dfs \u51fd\u6570\u7684\u8fc7\u7a0b\u4e2d\u7d2f\u79ef\u5e76\u7ef4\u62a4\u4e00\u4e2a\u5168\u5c40\u7684\u6700\u5927\u6df1\u5ea6\u503c\n    int ans = 0;\n    void dfs(TreeNode *node, int count) {\n        if (node == nullptr) return;\n        count++;\n        ans = max(ans, count);\n        dfs(node-&gt;left, count);\n        dfs(node-&gt;right, count);\n    }\npublic:\n    int maxDepth(TreeNode* root) {\n        dfs(root, 0);\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#100","title":"100. \u76f8\u540c\u7684\u6811","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool isSameTree(TreeNode* p, TreeNode* q) {\n        if (p == nullptr || q == nullptr) return p == q;\n        return p-&gt;val == q-&gt;val &amp;&amp; isSameTree(p-&gt;left, q-&gt;left) &amp;&amp; isSameTree(p-&gt;right, q-&gt;right);\n\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#101","title":"101. \u5bf9\u79f0\u4e8c\u53c9\u6811","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\n    bool check(TreeNode *a, TreeNode *b) {\n        if (a == nullptr || b == nullptr) return a == b;\n        return (a-&gt;val == b-&gt;val) &amp;&amp; check(a-&gt;left, b-&gt;right) &amp;&amp; check(a-&gt;right, b-&gt;left);\n    }\npublic:\n\n    bool isSymmetric(TreeNode* root) {\n        return check(root-&gt;left, root-&gt;right);\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#110","title":"110. \u5e73\u8861\u4e8c\u53c9\u6811","text":""},{"location":"Problem/programmercarl/algorithm/#_28","title":"\u7b2c\u4e00\u79cd\uff1a\u5728\u9012\u5f52\u5730\u8fc7\u7a0b\u4e2d\u7ef4\u62a4\u6811\u7684\u5e73\u8861","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\n    // \u7528-1\u6765\u5b9a\u4e49\u201c\u4e0d\u5e73\u8861\u201d\u7684\u6811\n    // \u5982\u679c\u5728\u67d0\u4e2a\u70b9\u5df2\u7ecf\u5f00\u59cb\u4e0d\u5e73\u8861\u4e86\uff0c\u90a3\u4e48\u5c31\u8981\u4e0d\u65ad\u5730\u5f80\u4e0a\u8fd4\u56de-1\n    int getHeight(TreeNode *root) {\n        if (root == nullptr) return 0;\n        int left = getHeight(root-&gt;left);\n        if (left == -1) return -1;\n        int right = getHeight(root-&gt;right);\n        if (right == -1 || abs(left - right) &gt; 1) return -1;\n        return max(left, right) + 1;\n    }\npublic:\n    bool isBalanced(TreeNode* root) {\n        return getHeight(root) != -1;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#_29","title":"\u7b2c\u4e8c\u79cd\uff1a\uff08\u4e00\u822c\u7684\u505a\u6cd5\uff09\u6bcf\u4e00\u6b21\u90fd\u53bb\u9012\u5f52\u627e\u51fa\u6bcf\u4e2a\u70b9\u7684\u9ad8\u5ea6","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\n    int height(TreeNode* root) {\n        if (root == nullptr) return 0;\n        return max(height(root-&gt;left), height(root-&gt;right)) + 1;\n    }\npublic:\n    bool isBalanced(TreeNode* root) {\n        if (root == nullptr) return true;\n        else {\n            return abs(height(root-&gt;left) - height(root-&gt;right)) &lt;= 1 &amp;&amp; isBalanced(root-&gt;left) &amp;&amp; isBalanced(root-&gt;right);\n        }\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#199","title":"199. \u4e8c\u53c9\u6811\u7684\u53f3\u89c6\u56fe","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\n    vector&lt;int&gt;ans;\n    void find(TreeNode* root, int d) {\n        if (root == nullptr) return;\n        if (d == ans.size()) ans.push_back(root-&gt;val);\n        find(root-&gt;right, d + 1);\n        find(root-&gt;left, d + 1);\n    }\npublic:\n    vector&lt;int&gt; rightSideView(TreeNode* root) {\n        // \u9700\u8981\u5148\u9012\u5f52\u53f3\u5b50\u6811\uff0c\u7136\u540e\u518d\u9012\u5f52\u5de6\u5b50\u6811\n        // \u5199\u4e00\u4e2a\u9012\u5f52\u51fd\u6570\uff0c\u5982\u679c\u8fd9\u4e2a\u8282\u70b9\u7684\u6df1\u5ea6\u548c\u7b54\u6848\u7684\u957f\u5ea6\u76f8\u7b49\uff0c\u90a3\u4e48\u9700\u8981\u5c06\u8fd9\u4e2a\u8282\u70b9\u52a0\u5165\u5230\u7b54\u6848\u4e2d\u53bb\n        find(root, 0);\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#_30","title":"\u9a8c\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811","text":""},{"location":"Problem/programmercarl/algorithm/#98_1","title":"98. \u9a8c\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811","text":""},{"location":"Problem/programmercarl/algorithm/#_31","title":"\u524d\u5e8f\u904d\u5386","text":"<p>\u5728\u6574\u4e2a\u904d\u5386\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5148\u8bbf\u95ee\u8282\u70b9\u7684\u503c\uff08\u5224\u65ad\u662f\u5426\u7b26\u5408\u4e0a\u9762\u4f20\u4e0b\u6765\u7684\u8981\u6c42\uff09\u518d\u9012\u5f52\u5de6\u53f3\u5b50\u6811\u7684\u505a\u6cd5\u53eb\u505a\u524d\u5e8f\u904d\u5386</p> <p>\u6700\u4fbf\u6377\u5199\u6cd5</p> <pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool isValidBST(TreeNode* root, long left = LONG_MIN, long right = LONG_MAX) {\n        if (root == nullptr) return true;\n        long x= root-&gt;val;\n        return left &lt; x &amp;&amp; x &lt; right &amp;&amp; isValidBST(root-&gt;left, left, x) &amp;&amp; isValidBST(root-&gt;right, x, right);\n    }\n};\n</code></pre> <pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\n    // \u8fd9\u4e2a\u51fd\u6570\u7ef4\u6301\u7684\u662f\u6bcf\u4e2a\u8282\u70b9\u9700\u8981\u5927\u4e8e\u7684\u503c\uff08left\uff09\u548c\u9700\u8981\u5c0f\u4e8e\u7684\u503c\uff08right\uff09\n    bool dfs(TreeNode* root, long left, long right) {\n        if (!root) return true;\n        if (root-&gt;val &lt;= left || root-&gt;val &gt;= right) return false;\n        // \u56e0\u4e3aroot\u7684\u5de6\u513f\u5b50\u9700\u8981\u5c0f\u4e8eroot\u7684\u503c\uff0c\u6240\u4ee5\u66f4\u65b0right\n        return dfs(root-&gt;left, left, root-&gt;val) &amp;&amp; dfs(root-&gt;right, root-&gt;val, right);\n    }\npublic:\n    bool isValidBST(TreeNode* root) {\n        return dfs(root, LONG_MIN, LONG_MAX);\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#_32","title":"\u524d\u5e8f\u904d\u5386\u7b2c\u4e09\u79cd\u5199\u6cd5","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\n    vector&lt;int&gt; dfs(TreeNode* root) {\n        vector&lt;int&gt; res = {1, root-&gt;val, root-&gt;val};\n        if (root-&gt;left) {\n            vector&lt;int&gt; t = dfs(root-&gt;left);\n            if (root-&gt;val &lt;= t[2] || t[0] == 0) res[0] = 0;\n            res[1] = min(t[1], res[1]);\n            res[2] = max(t[2], res[2]);\n        }\n        if (root-&gt;right) {\n            vector&lt;int&gt; t = dfs(root-&gt;right);\n            if (root-&gt;val &gt;= t[1] || t[0] == 0) res[0] = 0;\n            res[1] = min(t[1], res[1]);\n            res[2] = max(t[2], res[2]);\n        }\n        return res;\n    }\npublic:\n    bool isValidBST(TreeNode* root) {\n        if (!root) return false;\n        return dfs(root)[0];\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#_33","title":"\u4e2d\u5e8f\u904d\u5386","text":"<p>\u5982\u679c\u5728\u6bcf\u4e2a\u8282\u70b9\uff0c\u90fd\u5148\u904d\u5386\u5de6\u5b50\u6811\uff0c\u7136\u540e\u518d\u904d\u5386\u53f3\u5b50\u6811\uff0c\u90a3\u4e48\u5c31\u80fd\u5f97\u5230\u4e00\u4e2a\u4e25\u683c\u9012\u589e\u7684\u6570\u7ec4</p> <pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\n    long pre = LONG_MIN;\npublic:\n    // \u4e2d\u5e8f\u904d\u5386\n    // \u7531\u4e8e\u8fd9\u91cc\u7684\u4ee3\u7801\u65f6\u5148\u6267\u884c!isValidBST\u8fd9\u4e00\u6b65\u7684\uff0c\u6240\u4ee5\u8fd9\u91cc\u662f\u5148\u6cbf\u7740\u5de6\u5b50\u6811\u4e00\u8def\u5411\u4e0b\uff0c\u7136\u540e\u518d\u662f\u53f3\u5b50\u6811\n    // \u6240\u4ee5\u904d\u5386\u5230\u7684\u503c\u6709\u5355\u8c03\u9012\u589e\u7684\u6027\u8d28\n    // \u800c\u5168\u5c40\u53d8\u91cfpre\u7ef4\u62a4\u7684\u5c31\u662f\u4e00\u8def\u4e0a\u7684\u6700\u5927\u503c\uff0c\n    \u6240\u6709\u88ab\u904d\u5386\u5230\u7684\u8282\u70b9\uff0c\u65e0\u8bba\u662f\u5de6\u5b50\u6811\u8fd8\u662f\u53f3\u5b50\u6811\u90fd\u9700\u8981\u6bd4\u904d\u5386\u5230\u65f6\u7684\u6700\u5927\u503cpre\u5927\u5c31\u884c\u4e86\n    bool isValidBST(TreeNode* root) {\n        if (root == nullptr) {\n            return true;\n        }\n        if (!isValidBST(root-&gt;left) || root-&gt;val &lt;= pre) return false;\n        pre = root-&gt;val;\n        return isValidBST(root-&gt;right);\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#_34","title":"\u540e\u7eed\u904d\u5386","text":"<p>\u5728\u540e\u5e8f\u904d\u5386\u4e2d\uff0c\u9012\u5f52\u8c03\u7528\u53d1\u751f\u5728\u5904\u7406\u5f53\u524d\u8282\u70b9\u4e4b\u524d</p> <p>\u6ce8\u610f\u7ed3\u6784\u5316\u7ed1\u5b9a\u672c\u8eab\u662f\u4e0eauto\u5173\u8054\u7d27\u5bc6\u7684\u8bed\u6cd5\u7279\u6027\uff0c\u5982\u679c\u4e0d\u4f7f\u7528auto\uff0c\u5c31\u4e0d\u8981\u4f7f\u7528\u7ed3\u6784\u5316\u7ed1\u5b9a</p> <p>\u7ed3\u6784\u5316\u7ed1\u5b9a\u7684\u7528\u6cd5\uff1a<code>auto[l_min, l_max] = dfs(node-&gt;left);</code></p> <p>\u5982\u679c\u4e0d\u4f7f\u7528auto\u548c\u7ed3\u6784\u5316\u7ed1\u5b9a\u7684\u8bdd\uff0c\u5c31\u8981\u4f7f\u7528\uff1a</p> <pre><code>pair&lt;long, long&gt; left_result = dfs(node-&gt;left);\n        long l_min = left_result.first;\n        long l_max = left_result.second;\n</code></pre> <pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\n    pair&lt;long, long&gt; dfs(TreeNode* root) {\n        // \u6ce8\u610f\uff1a\u78b0\u5230\u7a7a\u8282\u70b9\u8fd4\u56de\u7684\u662f{LONG_MAX, LONG_MIN}\n        if (root == nullptr) return {LONG_MAX, LONG_MIN};\n        auto[l_min, l_max] = dfs(root-&gt;left);\n        auto[r_min, r_max] = dfs(root-&gt;right);\n        long x = root-&gt;val;\n        // \u800c\u78b0\u5230\u9519\u8bef\u7684\u8fd4\u56de\u5c31\u662f{LONG_MIN, LONG_MAX}\uff0c\u8fd9\u6837\u53ea\u8981\u6709\u9519\uff0c\u4e0a\u9762\u7684\u8282\u70b9\u5c31\u90fd\u662f\u9519\u8bef\u7684\n        if (x &lt;= l_max || x &gt;= r_min) return {LONG_MIN, LONG_MAX};\n        return {min(l_min, x), max(r_max, x)};\n\n    }\npublic:\n    bool isValidBST(TreeNode* root) {\n        return dfs(root).second != LONG_MAX;\n    }\n};mo\n</code></pre> <p>\u524d\u5e8f\u904d\u5386\uff08Preorder Traversal\uff09\uff0c\u4e2d\u5e8f\u904d\u5386\uff08Inorder Traversal\uff09\u548c\u540e\u5e8f\u904d\u5386\uff08Postorder Traversal\uff09\u90fd\u662f\u4e8c\u53c9\u6811\u7684\u4e0d\u540c\u904d\u5386\u65b9\u5f0f\uff0c\u5b83\u4eec\u7684\u533a\u522b\u5728\u4e8e\u8282\u70b9\u7684\u8bbf\u95ee\u987a\u5e8f\u3002</p> <ol> <li> <p>\u524d\u5e8f\u904d\u5386\uff1a</p> </li> <li> <p>\u8bbf\u95ee\u5f53\u524d\u8282\u70b9\u3002</p> </li> <li>\u9012\u5f52\u904d\u5386\u5de6\u5b50\u6811\u3002</li> <li>\u9012\u5f52\u904d\u5386\u53f3\u5b50\u6811\u3002</li> </ol> <p>\u7528\u4f8b\u5b50\u6765\u8bf4\u660e\uff0c\u8003\u8651\u4ee5\u4e0b\u4e8c\u53c9\u6811\uff1a</p> <pre><code>    1\n   / \\\n  2   3\n / \\\n4   5\n</code></pre> <p>\u524d\u5e8f\u904d\u5386\u7ed3\u679c\uff1a1 -&gt; 2 -&gt; 4 -&gt; 5 -&gt; 3</p> <ol> <li> <p>\u4e2d\u5e8f\u904d\u5386\uff1a</p> </li> <li> <p>\u9012\u5f52\u904d\u5386\u5de6\u5b50\u6811\u3002</p> </li> <li>\u8bbf\u95ee\u5f53\u524d\u8282\u70b9\u3002</li> <li>\u9012\u5f52\u904d\u5386\u53f3\u5b50\u6811\u3002</li> </ol> <p>\u7528\u4f8b\u5b50\u6765\u8bf4\u660e\uff0c\u540c\u6837\u7684\u4e8c\u53c9\u6811\uff1a</p> <p>\u4e2d\u5e8f\u904d\u5386\u7ed3\u679c\uff1a4 -&gt; 2 -&gt; 5 -&gt; 1 -&gt; 3</p> <ol> <li> <p>\u540e\u5e8f\u904d\u5386\uff1a</p> </li> <li> <p>\u9012\u5f52\u904d\u5386\u5de6\u5b50\u6811\u3002</p> </li> <li>\u9012\u5f52\u904d\u5386\u53f3\u5b50\u6811\u3002</li> <li>\u8bbf\u95ee\u5f53\u524d\u8282\u70b9\u3002</li> </ol> <p>\u518d\u6b21\u4ee5\u76f8\u540c\u7684\u4e8c\u53c9\u6811\u4e3a\u4f8b\uff1a</p> <p>\u540e\u5e8f\u904d\u5386\u7ed3\u679c\uff1a4 -&gt; 5 -&gt; 2 -&gt; 3 -&gt; 1</p> <p>\u8fd9\u4e09\u79cd\u904d\u5386\u65b9\u5f0f\u5206\u522b\u63cf\u8ff0\u4e86\u5728\u904d\u5386\u4e8c\u53c9\u6811\u65f6\u8bbf\u95ee\u8282\u70b9\u7684\u4e0d\u540c\u987a\u5e8f\u3002\u524d\u5e8f\u904d\u5386\u4ece\u6839\u8282\u70b9\u5f00\u59cb\uff0c\u7136\u540e\u4f9d\u6b21\u904d\u5386\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u3002\u4e2d\u5e8f\u904d\u5386\u9996\u5148\u904d\u5386\u5de6\u5b50\u6811\uff0c\u7136\u540e\u8bbf\u95ee\u5f53\u524d\u8282\u70b9\uff0c\u6700\u540e\u904d\u5386\u53f3\u5b50\u6811\u3002\u540e\u5e8f\u904d\u5386\u9996\u5148\u904d\u5386\u5de6\u5b50\u6811\uff0c\u7136\u540e\u904d\u5386\u53f3\u5b50\u6811\uff0c\u6700\u540e\u8bbf\u95ee\u5f53\u524d\u8282\u70b9\u3002</p>"},{"location":"Problem/programmercarl/algorithm/#236_1","title":"236. \u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n        if (root == nullptr || root == p || root == q) return root;\n        TreeNode* left = lowestCommonAncestor(root-&gt;left, p, q);\n        TreeNode* right = lowestCommonAncestor(root-&gt;right, p, q);\n        if (left == nullptr) return right;\n        if (right == nullptr) return left; \n        // \u4e24\u8fb9\u90fd\u6709\u7684\u60c5\u51b5\u53ea\u80fd\u6709\u4e00\u79cd\uff1a\u90a3\u5c31\u662f\u4ed6\u4eec\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\n        return root;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#235_1","title":"235. \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\n\nclass Solution {\npublic:\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n        // \u56e0\u4e3a\u662f\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u90a3\u4e48\u6ca1\u6709\u4e24\u4e2a\u8282\u70b9\u4f1a\u76f8\u540c\u7684\u503c\uff0c\u5e76\u4e14\u5177\u6709\u5355\u8c03\u6027\n        int x = root-&gt;val;\n        if (p-&gt;val &lt; x &amp;&amp; q-&gt;val &lt; x) return lowestCommonAncestor(root-&gt;left, p, q);\n        if (p-&gt;val &gt; x &amp;&amp; q-&gt;val &gt; x) return lowestCommonAncestor(root-&gt;right, p, q);\n        // \u5982\u679cp\u548cq\u4e00\u4e2a\u6bd4root\u5927\uff0c\u4e00\u4e2a\u6bd4root\u5c0f\uff0c\u90a3\u4e48root\u5fc5\u5b9a\u662f\u4ed6\u4eec\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\uff0c\u6ca1\u6709\u4f8b\u5916\uff01\n        return root;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#_35","title":"\u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386","text":""},{"location":"Problem/programmercarl/algorithm/#102","title":"102. \u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386","text":""},{"location":"Problem/programmercarl/algorithm/#vector","title":"\u4f7f\u7528\u666e\u901a\u7684vector","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; levelOrder(TreeNode* root) {\n        if (!root) return {};\n        vector&lt;vector&lt;int&gt;&gt; ans;\n        vector&lt;TreeNode*&gt; curr = {root};\n        while (curr.size()) {\n            vector&lt;TreeNode*&gt; nxt;\n            vector&lt;int&gt; vals;\n            for (TreeNode* node : curr) {\n                vals.push_back(node-&gt;val);\n                if (node-&gt;left) nxt.push_back(node-&gt;left);\n                if (node-&gt;right) nxt.push_back(node-&gt;right);\n            }\n            curr = move(nxt);\n            ans.emplace_back(vals);\n        }\n        return ans;\n\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#_36","title":"\u4f7f\u7528\u961f\u5217","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; levelOrder(TreeNode* root) {\n        if (root == nullptr) return {};\n        vector&lt;vector&lt;int&gt;&gt; ans;\n        queue&lt;TreeNode*&gt; curr;\n        curr.push(root);\n        while (!curr.empty()) {\n            vector&lt;int&gt; vals;\n            for (int n = curr.size(); n &gt; 0; n--) {\n                auto node = curr.front();\n                curr.pop();\n                vals.push_back(node-&gt;val);\n                if (node-&gt;left) curr.push(node-&gt;left);\n                if (node-&gt;right) curr.push(node-&gt;right);  \n            }\n            ans.emplace_back(vals);\n        }\n        return ans;\n    }\n\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#103","title":"103. \u4e8c\u53c9\u6811\u7684\u952f\u9f7f\u5f62\u5c42\u5e8f\u904d\u5386","text":""},{"location":"Problem/programmercarl/algorithm/#vector_1","title":"\u4f7f\u7528vector","text":"<p>\u6ce8\u610f\u4f7f\u7528emplace_back()\uff0c\u6548\u7387\u4f1a\u6bd4push_back()\u9ad8\u5f88\u591a</p> <pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; zigzagLevelOrder(TreeNode* root) {\n        if (root == nullptr) return {};\n        vector&lt;vector&lt;int&gt;&gt; ans;\n        vector&lt;TreeNode*&gt; curr = {root};\n        for (bool even = false; !curr.empty(); even = !even) {\n            vector&lt;TreeNode*&gt; next;\n            vector&lt;int&gt; vals;\n            for (TreeNode* node : curr) {\n                vals.push_back(node-&gt;val);\n                if (node-&gt;left) next.push_back(node-&gt;left);\n                if (node-&gt;right) next.push_back(node-&gt;right);\n            }\n            curr = move(next);\n            if (even) reverse(vals.begin(), vals.end());\n            ans.emplace_back(vals);\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#_37","title":"\u4f7f\u7528\u961f\u5217","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; zigzagLevelOrder(TreeNode* root) {\n        if (root == nullptr) return {};\n        vector&lt;vector&lt;int&gt;&gt; ans;\n        queue&lt;TreeNode*&gt; curr;\n        curr.push(root);\n        for (bool even = false; !curr.empty(); even = !even) {\n            vector&lt;int&gt; vals;\n            for (int i = curr.size(); i &gt; 0; i--) {\n                TreeNode* node = curr.front();\n                curr.pop();\n                vals.push_back(node-&gt;val);\n                if (node-&gt;left) curr.push(node-&gt;left);\n                if (node-&gt;right) curr.push(node-&gt;right);\n            }\n            if (even) reverse(vals.begin(), vals.end());\n            ans.emplace_back(vals);\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#513","title":"513. \u627e\u6811\u5de6\u4e0b\u89d2\u7684\u503c","text":""},{"location":"Problem/programmercarl/algorithm/#_38","title":"\u4ece\u5de6\u5230\u53f3\u904d\u5386\uff0c\u7136\u540e\u6700\u540e\u4e00\u5c42\u7684\u7b2c\u4e00\u4e2a\u5c31\u662f","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int findBottomLeftValue(TreeNode* root) {\n        int ans;\n        queue&lt;TreeNode*&gt; curr;\n        curr.push(root);\n        while (!curr.empty()) {\n            ans = curr.front()-&gt;val;\n            for (int i = curr.size(); i &gt; 0; i--) {\n                TreeNode* node = curr.front();\n                curr.pop();\n                if (node-&gt;left) curr.push(node-&gt;left);\n                if (node-&gt;right) curr.push(node-&gt;right);\n            }\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#_39","title":"\u4ece\u53f3\u5f80\u5de6\u904d\u5386","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int findBottomLeftValue(TreeNode* root) {\n        int ans;\n        queue&lt;TreeNode*&gt; curr;\n        curr.push(root);\n        while (!curr.empty()) {\n            ans = curr.front()-&gt;val;\n            for (int i = curr.size(); i &gt; 0; i--) {\n                TreeNode* node = curr.front();\n                curr.pop();\n                if (node-&gt;left) curr.push(node-&gt;left);\n                if (node-&gt;right) curr.push(node-&gt;right);\n            }\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#1_1","title":"\u56de\u6eaf\u7b97\u6cd5\u5957\u8def1\uff1a\u5b50\u96c6\u578b\u56de\u5f52","text":"<p>\u539f\u95ee\u9898\uff1a\u6784\u9020\u4e00\u4e2a\u957f\u5ea6\u4e3an\u7684\u5b57\u7b26\u4e32</p> <p>\u8fc7\u7a0b\uff1a\u679a\u4e3e\u4e00\u4e2a\u5b57\u6bcd</p> <p>\u5b50\u95ee\u9898\uff1a\u6784\u9020\u4e00\u4e2a\u957f\u5ea6\u4e3an-1\u7684\u5b57\u7b26\u4e32</p> <p>\u5f53\u5b50\u95ee\u9898\u548c\u539f\u95ee\u9898\u662f\u76f8\u4f3c\u7684\uff0c\u8fd9\u79cd\u4ece\u539f\u95ee\u9898\u5230\u5b50\u95ee\u9898\u7684\u8fc7\u7a0b\u9002\u5408\u7528\u9012\u5f52\u89e3\u51b3</p> <p>\u56de\u6eaf\u6709\u4e00\u4e2a\u589e\u91cf\u6784\u9020\u7b54\u6848\u7684\u8fc7\u7a0b\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u901a\u5e38\u7528\u9012\u5f52\u5b9e\u73b0</p> <p>\u53ea\u8981\u5c06\u8fb9\u754c\u6761\u4ef6\u548c\u975e\u8fb9\u754c\u6761\u4ef6\u903b\u8f91\u5199\u5bf9\uff0c\u5c31\u80fd\u4fdd\u8bc1\u5199\u7684\u7b97\u6cd5\u662f\u5bf9\u7684</p> <p>\u56de\u6eaf\u95ee\u9898\u7684\u505a\u6cd5\uff1a</p> <p>\u7528\u4e00\u4e2apath\u6570\u7ec4\u8bb0\u5f55\u8def\u5f84\u4e0a\u7684\u5b57\u6bcd</p> <p>\u56de\u6eaf\u4e09\u95ee\uff1a</p> <ol> <li>\u5f53\u524d\u64cd\u4f5c\uff0c\u679a\u4e3epath[i]\u8981\u586b\u5165\u7684\u5b57\u6bcd</li> <li>\u5b50\u95ee\u9898\uff1f\u6784\u9020\u5b57\u7b26\u4e32&gt;= i\u7684\u90e8\u5206</li> <li>\u4e0b\u4e00\u4e2a\u5b50\u95ee\u9898\uff1f\u6784\u9020\u5b57\u7b26\u4e32&gt;= i + 1\u7684\u90e8\u5206</li> </ol> <p>dfs(i) -&gt; dfs(i + 1)\uff0c\u8fd9\u91cc\u7684i\u7684\u610f\u601d\u662f\u8003\u8651\u5230\u4e86&gt;= i \u7684\u90e8\u5206</p>"},{"location":"Problem/programmercarl/algorithm/#17","title":"17. \u7535\u8bdd\u53f7\u7801\u7684\u5b57\u6bcd\u7ec4\u5408","text":""},{"location":"Problem/programmercarl/algorithm/#acwing_2","title":"acwing\u5199\u6cd5","text":"<pre><code>class Solution {\npublic:\n    vector&lt;string&gt; ans;\n    vector&lt;string&gt; map = {\n        \"\", \"\", \"abc\", \"def\",\n        \"ghi\", \"jkl\", \"mno\",\n        \"pqrs\", \"tuv\", \"wxyz\"\n    };\n    vector&lt;string&gt; letterCombinations(string digits) {\n        if (digits.empty()) return ans;\n        dfs(digits, 0, \"\");\n        return ans;\n    }\n    void dfs(string&amp; digits, int n, string path) {\n        if (n == digits.size()) {\n            ans.push_back(path);\n        }\n        else {\n            for (char c : map[digits[n] - '0']) {\n                dfs(digits, n + 1, path + c);\n            }\n        }\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#_40","title":"\u7075\u8336\u5c71\u827e\u5e9c\u5199\u6cd5","text":"<pre><code>class Solution {\n    string map[10] = {\"\", \"\", \"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqrs\", \"tuv\", \"wxyz\"};\npublic:\n    vector&lt;string&gt; letterCombinations(string digits) {\n        int n = digits.length();\n        if (n == 0) return {};\n        vector&lt;string&gt; ans;\n        // \u521d\u59cb\u5316n\u4e2a\u5b57\u7b26\uff0c\u7136\u540e\u521d\u59cb\u5316\u6240\u6709\u5b57\u6bcd\u4e3a0\n        string path(n, 0);\n        // function&lt;void(int)&gt;\u8868\u793a\u662f\u4e00\u4e2a\u51fd\u6570\u6a21\u677f\n        // \u8fd4\u56de\u7684\u662fvoid \u8f93\u5165\u7684\u662fint\n        // [&amp;]\u8868\u793a\u51fd\u6570\u5185\u80fd\u591f\u8c03\u7528\u6240\u6709\u5916\u90e8\u53d8\u91cf\u7684\u5f15\u7528\n        // int i \u8868\u793a\u8f93\u5165\u7684\u53d8\u91cf\u662fi\n        function&lt;void(int)&gt; dfs = [&amp;] (int i) {\n            if (i == n) {\n                ans.emplace_back(path);\n                return;\n            }\n            for (char c : map[digits[i] - '0']) {\n                path[i] = c;\n                dfs(i + 1);\n            }\n        };\n        dfs(0);\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#78","title":"78. \u5b50\u96c6","text":""},{"location":"Problem/programmercarl/algorithm/#function","title":"\u5c06function\u5199\u5728\u5916\u9762\uff0c\u6bd4\u8f83\u9ebb\u70e6\uff0c\u4e0d\u63a8\u8350","text":"<pre><code>class Solution {\npublic:\n    vector&lt;int&gt; path;\n    vector&lt;vector&lt;int&gt;&gt; ans;\n    vector&lt;vector&lt;int&gt;&gt; subsets(vector&lt;int&gt;&amp; nums) {\n        int k = nums.size();\n        dfs(0, k,nums);\n        return ans;\n    }\n    void dfs(int n, int k, vector&lt;int&gt;&amp; nums) {\n        if (n == k) {\n            ans.push_back(path);\n        }\n        else {\n            dfs(n + 1, k, nums);\n            path.push_back(nums[n]);\n            dfs(n + 1, k, nums);\n            path.pop_back();\n        }\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#lambda","title":"lambda\u51fd\u6570\uff0c\u5199\u5728\u91cc\u9762\uff0c\u63a8\u8350","text":"<pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; subsets(vector&lt;int&gt;&amp; nums) {\n        vector&lt;int&gt; path;\n        vector&lt;vector&lt;int&gt;&gt; ans;\n        int u = nums.size();\n        function&lt;void(int)&gt; dfs = [&amp;] (int i) {\n            if (i == u) {\n                ans.push_back(path);\n                return;\n            }\n            else {\n                dfs(i + 1);\n                path.push_back(nums[i]);\n                dfs(i + 1);\n                path.pop_back();\n            }\n        };\n        dfs(0);\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#_41","title":"\u679a\u4e3e\u9012\u5f52","text":"<pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; subsets(vector&lt;int&gt;&amp; nums) {\n        vector&lt;int&gt; path;\n        vector&lt;vector&lt;int&gt;&gt; ans;\n        int u = nums.size();\n        function&lt;void(int)&gt; dfs = [&amp;] (int i) {\n            ans.push_back(path);\n            if (i == u) {\n                return;\n            }\n            for (int j = i; j &lt; u; j ++) {\n                path.push_back(nums[j]);\n                dfs(j + 1);\n                path.pop_back();\n            }\n\n        };\n        dfs(0);\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#_42","title":"\u7ec4\u5408\u578b\u56de\u6eaf \u526a\u679d","text":""},{"location":"Problem/programmercarl/algorithm/#77","title":"77. \u7ec4\u5408","text":""},{"location":"Problem/programmercarl/algorithm/#_43","title":"\u7075\u8336\u5c71\u827e\u5e9c\u505a\u6cd5+\u526a\u679d","text":"<pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; combine(int n, int k) {\n        vector&lt;vector&lt;int&gt;&gt; ans;\n        vector&lt;int&gt; path;\n        function&lt;void(int)&gt; dfs = [&amp;] (int i) {\n            int d = k - path.size(); // d\u662f\u8fd8\u9700\u8981\u591a\u5c11\u4e2a\n            if (d == 0) {\n                ans.emplace_back(path);\n                return;\n            }\n            for (int j = i; j &gt;= d; j--) {\n                path.push_back(j);\n                dfs(j - 1);\n                path.pop_back();\n            }\n        };\n        dfs(n);\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#dfs_2","title":"dfs\u8fc7\u7a0b\u4e2d\u679a\u4e3e\u4e0b\u4e00\u4e2a\u6570\u9009\u54ea\u4e2a","text":"<pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; combine(int n, int k) {\n        vector&lt;vector&lt;int&gt;&gt; ans;\n        vector&lt;int&gt; path;\n        function&lt;void(int, int)&gt; dfs = [&amp;] (int start, int curr) {\n            if (curr == k) {\n                ans.emplace_back(path);\n                return;\n            }\n            for (int i = start; i &lt;= n; i++) {\n                path.push_back(i);\n                dfs(i + 1, curr + 1);\n                path.pop_back();\n            }\n        };\n        dfs(1, 0);\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#_44","title":"\u9009\u6216\u8005\u4e0d\u9009\u7684\u505a\u6cd5","text":"<pre><code>class Solution {\npublic:\nvoid dfs(int u, int curr) {\n\n}\n    vector&lt;vector&lt;int&gt;&gt; combine(int n, int k) {\n        vector&lt;vector&lt;int&gt;&gt; ans;\n        vector&lt;int&gt; path;\n        function&lt;void(int, int)&gt; dfs = [&amp;] (int u, int curr) {\n            if (curr == k) {\n                ans.emplace_back(path);\n                return;\n            }\n            if (u &lt;= n) dfs(u + 1, curr);\n            path.push_back(u);\n            if (u &lt;= n) dfs(u + 1, curr + 1);\n            path.pop_back();\n        };\n        dfs(1, 0);\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#216-iii","title":"216. \u7ec4\u5408\u603b\u548c III","text":""},{"location":"Problem/programmercarl/algorithm/#_45","title":"\u679a\u4e3e\u4e0b\u4e2a\u6570\u9009\u54ea\u4e2a","text":"<pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; combinationSum3(int k, int n) {\n        vector&lt;vector&lt;int&gt;&gt; ans;\n        vector&lt;int&gt; path;\n        function&lt;void(int, int)&gt; dfs = [&amp;] (int i, int t) {\n            int d = k - path.size();\n            if (t &lt; 0 || t &gt; (i + i - d + 1) * d / 2) return;\n            if (d == 0) {\n                ans.emplace_back(path);\n                return;\n            }\n            for (int j = i; j &gt;= d; --j) {\n                path.push_back(j);\n                dfs(j - 1, t - j);\n                path.pop_back();\n            }\n\n        };\n        dfs(9, n);\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#_46","title":"\u9009\u6216\u4e0d\u9009\u7684\u505a\u6cd5","text":"<pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; combinationSum3(int k, int n) {\n        vector&lt;vector&lt;int&gt;&gt; ans;\n        vector&lt;int&gt; path;\n        function&lt;void(int, int)&gt; dfs = [&amp;] (int t, int u) {\n            int d = k - path.size();\n            if (d == 0 &amp;&amp; t == 0) {\n                ans.emplace_back(path);\n                return;\n            }\n            // \u9700\u8981\u526a\u679d\n            // \u5982\u679ctarget\u5c0f\u4e8e0\u4e86\u76f4\u63a5\u8fd4\u56de\n            // \u5982\u679c\u63a5\u4e0b\u6765\u7684\u8fde\u7eed\u6700\u5927\u7684\u548c\u90fd\u8fbe\u4e0d\u5230target\u7684\u8bdd\uff0c\u4e5f\u76f4\u63a5\u8fd4\u56de\n            if (t &lt; 0 || t &gt; (u + u - d + 1) * d / 2) return;\n            // \u4f7f\u7528\u9009\u62e9\u4e0e\u5426\u6765\u505a\n            // \u526a\u679d\uff1a\u5982\u679c\u5269\u4e0b\u7684\u4e2a\u6570\u4e0d\u8db3\u4e5f\u76f4\u63a5return\n            // \u4e0d\u9009\u62e9\u73b0\u5728\u8fd9\u4e2a\u6570\n            // \u56e0\u4e3a\u5269\u4e0b\u7684\u6bcf\u4e2a\u6570\u90fd\u9009\u62e9\u7684\u8bdd\uff0cu\u73b0\u5728\u7684\u6700\u5c0f\u503c\u662fd + 1\uff0c\u6240\u4ee5\u8fd9\u91cc\u7684\u6761\u4ef6\u662fu&gt;d\n            if (u &gt; d) dfs(t, u - 1);\n            // \u9009\u62e9\u73b0\u5728\u8fd9\u4e2a\u6570\n            // \u800c\u5269\u4e0b\u7684\u6bcf\u4e2a\u6570\u90fd\u9009\u62e9\u7684\u8bdd\uff0c\u5e76\u4e14\u9009\u62e9\u73b0\u5728\u8fd9\u4e2a\u6570\uff0c\u90a3\u4e48u\u6700\u5c0f\u662fd\n            // \u5982\u679cd&gt;u\u7684\u8bdd\uff0c\u56de\u6f0f\u6389\u4e00\u79cd\u60c5\u51b5\n            if (u &gt;= d) {\n                path.push_back(u);\n                t -= u;\n                dfs(t, u - 1);\n                t += u;\n                path.pop_back();\n            }\n        };\n        dfs(n, 9);\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#22_1","title":"22. \u62ec\u53f7\u751f\u6210","text":"<pre><code>class Solution {\npublic:\n    vector&lt;string&gt; generateParenthesis(int n) {\n        vector&lt;string&gt; ans;\n        string path;\n        function&lt;void(int, int)&gt; dfs = [&amp;] (int l, int r) {\n            if (l == 0 &amp;&amp; r == 0) {\n                ans.emplace_back(path);\n                return;\n            }\n            if (r &gt; l) {\n                path.push_back(')');\n                dfs(l, r - 1);\n                path.pop_back();\n            }\n            if (l &gt; 0) {\n                path.push_back('(');\n                dfs(l - 1, r);\n                path.pop_back();\n            }\n        };\n        dfs(n, n);\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#301","title":"301. \u5220\u9664\u65e0\u6548\u7684\u62ec\u53f7","text":"<p>\u5408\u6cd5\u62ec\u53f7\u5e8f\u5217\u9700\u8981\u6ee1\u8db3\u7684\u6761\u4ef6\uff1a</p> <ol> <li>\u5de6\u53f3\u62ec\u53f7\u6570\u91cf\u76f8\u540c</li> <li>\u62ec\u53f7\u5e8f\u5217\u4efb\u610f\u4e00\u4e2a\u524d\u7f00\u4e2d\u5de6\u62ec\u53f7\u6570\u91cf&gt;=\u53f3\u62ec\u53f7\u6570\u91cf</li> </ol> <p>l\u8868\u793a\u5f53\u524d\u5de6\u62ec\u53f7\u6570\u91cf\u6bd4\u53f3\u62ec\u53f7\u6570\u91cf\u591a\u591a\u5c11\u4e2a</p> <p>r\u8868\u793a\u5f53\u524d\u8981\u5220\u6389\u591a\u5c11\u4e2a\u53f3\u62ec\u53f7</p> <p>\u5faa\u73af\u7ed3\u675f\u65f6\uff0cl\u8868\u793a\u8981\u5220\u6389\u7684\u5de6\u62ec\u53f7\u7684\u6570\u91cf\uff0cr\u8868\u793a\u8981\u5220\u6389\u7684\u989d\u53f3\u62ec\u53f7\u7684\u6570\u91cf</p>"},{"location":"Problem/programmercarl/algorithm/#acwing_3","title":"acwing\u5199\u6cd5","text":"<pre><code>class Solution {\npublic:\n    vector&lt;string&gt; ans;\n    vector&lt;string&gt; removeInvalidParentheses(string s) {\n        int l = 0, r = 0;\n        for (auto x : s) {\n            if (x == '(') l++;\n            else if (x == ')') {\n                if (l == 0) r++;\n                else l--;\n            }\n        }\n        dfs(s, 0, \"\", 0, l, r);\n        return ans;\n    }\n    void dfs(string&amp; s, int u, string path, int cnt, int l, int r) {\n        if (u == s.size()) {\n            if (!cnt) ans.push_back(path);\n            return;\n        }\n        if (s[u] != '(' &amp;&amp; s[u] != ')') dfs(s, u + 1, path + s[u], cnt, l, r);\n        else if (s[u] == '(') {\n            int k = u;\n            while (k &lt; s.size() &amp;&amp; s[k] == '(') k++;\n            l -= k -u;\n            // for-loop\u91cc\u662f\u679a\u4e3ek-u+1\u79cd\u53ef\u80fd\uff0c\u4ecek-u\u4e2a\u5b57\u7b26\u5168\u5220\uff0c\u5230k-u\u4e2a\u5b57\u7b26\u5168\u7559\u3002\u4eba\u4e3a\u89c4\u5b9a\u8fd9\u79cd\u987a\u5e8f\uff0c\u76ee\u7684\u5728\u4e8e\u526a\u679d\u3002\n            // \u6bcf\u6b21dfs()\u5b8c\u540e\uff0c\u4e0d\u8bba\u6709\u6ca1\u6709\u6709\u6548path\uff0c\u90fd\u4f1a\u56de\u6eaf\u5230\u4e0a\u5c42dfs()\uff0c\u53ef\u7406\u89e3\u4e3a\u6062\u590d\u73b0\u573a\u3002\n            for (int i = k - u; i &gt;= 0; i--) {\n                if (l &gt;= 0) dfs(s, k, path, cnt, l, r);\n                path += '(';\n                cnt++, l++;\n            }\n        } else if (s[u] == ')') {\n            int k = u;\n            while (k &lt; s.size() &amp;&amp; s[k] == ')') k++;\n            r -= k - u;\n            for (int i = k - u; i &gt;= 0; i--) {\n                if (cnt &gt;= 0 &amp;&amp; r &gt;= 0) dfs(s, k, path, cnt, l, r);\n                path += ')';\n                cnt--, r++;\n            }\n        }\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#_47","title":"\u529b\u6263\u7f51\u53cb\u5199\u6cd5\uff08\u6284\u7684\uff0c\u8fd8\u6ca1\u81ea\u5df1\u5b9e\u8df5\uff09","text":"<pre><code>class Solution {\npublic:\n    unordered_set&lt;string&gt; unique;\n    vector&lt;string&gt; removeInvalidParentheses(string s) {\n        vector&lt;string&gt; ans;\n        int l = 0; // \u5de6\u62ec\u53f7\u9700\u8981\u5220\u9664\u7684\u6570\u91cf\uff1b\n        int r = 0; // \u53f3\u62ec\u53f7\u9700\u8981\u5220\u9664\u7684\u6570\u91cf\uff1b\n        for (int i = 0; i &lt; s.size(); i++) {\n            if (s[i] == '(') l++; // \u9047\u5230\u5de6\u62ec\u53f7\u8ba1\u6570\uff1b\u5982\u679c\u6709\u5339\u914d\u7684\u53f3\u62ec\u53f7\uff0c\u53ef\u4ee5\u62b5\u6d88\uff1b\n            // \u62b5\u6d88\u4e0d\u4e86\u7684\u90fd\u662f\u6211\u4eec\u9700\u8981\u5220\u9664\u7684\u5de6\u62ec\u53f7\n            else if (s[i] == ')') {\n                // \u5de6\u62ec\u53f7\u4e3a0\uff1b\u6b64\u65f6\u9047\u5230\u53f3\u62ec\u53f7\u4e00\u5b9a\u662f\u5339\u914d\u4e0d\u4e86\u7684\uff0c\u9700\u8981\u5220\u9664\u7684\n                if (l == 0) r++;\n\n                // \u5339\u914d\u6389\u4e00\u4e2a\u5de6\u62ec\u53f7\uff0c\u76f8\u5f53\u4e8e\u51fa\u6808\n                else l--;\n            }\n\n        }\n        string t = \"\";\n        dfs(s, t, 0, l, r, 0, 0);\n        for (auto s : unique) {\n            ans.emplace_back(s);\n        }\n        return ans;\n    }\n    void dfs(string&amp; s, string&amp; t, int i, int l, int r, int lcnt, int rcnt) {\n        if (i == s.size()) {\n            // \u9012\u5f52\u7ec8\u70b9\uff1b \u7528set\u53bb\u91cd\n            if (l == 0 &amp;&amp; r == 0) unique.insert(t);\n            return;\n        }\n        // \u8df3\u8fc7\u5de6\u53f3\u62ec\u53f7\uff0c\u4f46\u5269\u4e0b\u9700\u8981\u5220\u9664\u7684\u62ec\u53f7\u4e0d\u80fd\u5c0f\u4e8e0\n        if (s[i] == '(' &amp;&amp; l &gt; 0) {\n            dfs(s, t, i + 1, l - 1, r, lcnt, rcnt);\n        }\n        if (s[i] == ')' &amp;&amp; r &gt; 0) {\n            dfs(s, t, i + 1, l, r - 1, lcnt, rcnt);\n        }\n         // \u4fdd\u7559\u5f53\u524d\u5b57\u7b26\uff1b\u53ef\u80fd\u662f\u62ec\u53f7\uff0c\u4e5f\u53ef\u80fd\u662f\u5b57\u6bcd\n        t.push_back(s[i]);\n        if (s[i] != '(' &amp;&amp; s[i] != ')') {\n            // \u5982\u679c\u662f\u5b57\u6bcd\uff0c\u4e0d\u7528\u5904\u7406\n            dfs(s, t, i + 1, l, r, lcnt, rcnt);\n        } else if (s[i] == '(') {\n            // \u5982\u679c\u662f\u5de6\u62ec\u53f7\uff0c\u6211\u4eec\u66f4\u65b0\u5de6\u62ec\u53f7\u7684\u6570\u91cf\n            dfs(s, t, i + 1, l, r, lcnt + 1, rcnt);\n        } else if (s[i] == ')' &amp;&amp; rcnt &lt; lcnt) {\n            // \u8fd9\u4e00\u6b65\u5b9e\u9645\u4e0a\u662f\u628a\u53f3\u62ec\u53f7\u591a\u4f59\u7684\u5206\u652f\u526a\u9664\uff1b \u53ea\u6709 rcnt &lt; lcnt \u6211\u4eec\u624d\u6709\u5fc5\u8981\u7ee7\u7eed\u9012\u5f52\n            // \u907f\u514d\u51fa\u73b0 `)(` \u8fd9\u6837\u7684\u60c5\u51b5\n            dfs(s, t, i + 1, l, r, lcnt, rcnt + 1);\n        }\n        // \u6062\u590d\u73b0\u573a\n        t.pop_back();\n    }\n};\n</code></pre> <pre><code>class Solution {\npublic:\n    TreeNode* balanceBST(TreeNode* root) {\n        if (root == nullptr) return root;\n        root-&gt;left = balanceBST(root-&gt;left);\n        root-&gt;right = balanceBST(root-&gt;right);\n\n        // \u540e\u5e8f\u5904\u7406\u903b\u8f91\n        int balanceFactor = getHeight(root-&gt;left) - getHeight(root-&gt;right);\n        if (balanceFactor &gt; 1){\n            int lblance = getHeight(root-&gt;left-&gt;left) - getHeight(root-&gt;left-&gt;right);\n            if (lblance &lt; 0) root-&gt;left = leftRotate(root-&gt;left);\n            root = rightRotate(root);\n            return balanceBST(root);\n        }else if(balanceFactor &lt; -1){\n            // \u68c0\u67e5\u53f3\u5b50\u6811\n            int rblance = getHeight(root-&gt;right-&gt;left) - getHeight(root-&gt;right-&gt;right);\n            if (rblance &gt; 0) root-&gt;right = rightRotate(root-&gt;right);\n            root = leftRotate(root);\n            return balanceBST(root);\n        }\n        return root;\n    }\n\n    TreeNode* leftRotate(TreeNode* root){\n        if (root == nullptr || root-&gt;right == nullptr) return root;\n        TreeNode* right = root-&gt;right;\n        TreeNode* rightLeft = root-&gt;right-&gt;left;\n        root-&gt;right = rightLeft;\n        right-&gt;left = root;\n        return right; \n    }\n\n    TreeNode* rightRotate(TreeNode* root){\n        if (root == nullptr || root-&gt;left == nullptr) return root;\n        TreeNode* left = root-&gt;left;\n        TreeNode* leftRight = root-&gt;left-&gt;right;\n        root-&gt;left = leftRight;\n        left-&gt;right = root;\n        return left;\n    }\n\n    int getHeight(TreeNode* root){\n        if (root == nullptr) return 0;\n        return max(getHeight(root-&gt;left),getHeight(root-&gt;right)) + 1;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#_48","title":"\u6392\u5217\u884c\u56de\u6eaf","text":""},{"location":"Problem/programmercarl/algorithm/#46","title":"46. \u5168\u6392\u5217","text":"<pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; permute(vector&lt;int&gt;&amp; nums) {\n        vector&lt;vector&lt;int&gt;&gt; ans;\n        vector&lt;int&gt; path(nums.size());\n        vector&lt;bool&gt; mark(nums.size(), false);\n        function&lt;void(int)&gt; dfs = [&amp;] (int i) {\n            if (i == nums.size()) {\n                ans.emplace_back(path);\n                return;\n            }\n            for (int j = 0; j &lt; nums.size(); j++) {\n                if (mark[j] == false) {\n                    path[i] = nums[j];\n                    mark[j] = true;\n                    dfs(i + 1);\n                    mark[j] = false;\n                }\n            }\n        };\n        dfs(0);\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#51-n","title":"51. N \u7687\u540e","text":"<pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;string&gt;&gt; solveNQueens(int n) {\n        // \u601d\u8003\uff1a\u5982\u4f55\u53ea\u67e5\u8be2\u4e00\u6b21\u5c31\u80fd\u8868\u793a\u5bf9\u89d2\u7ebf\u4e0a\u51fa\u73b0\u8fc7Q\n        // \u5de6\u4e0a\u53f3\u4e0b\u5982\u4f55\u5bf9\u89d2\u7ebf\u5982\u4f55\u8868\u793a\uff1f\n\n        // \u4ee5\u7b2c0\u884c\uff0c\u7b2c2\u683c\u4e0a\u653eQ\u4e3a\u4f8b (i, j)\n        // \u5de6\u4e0a\u53f3\u4e0b\uff1a j - i + n (\u8fd9\u91cc+n\u662f\u56e0\u4e3aj - i)\n        // \u53f3\u4e0a\u5de6\u4e0b j + i\n\n        vector&lt;vector&lt;string&gt;&gt; ans;\n        vector&lt;int&gt; tmp;\n        // \u8bf7\u4e00\u5b9a\u4e0d\u8981\u5fd8\u8bb0\u4f7f\u7528\u4e0b\u9762\u8fd9\u79cdstring\u6570\u7ec4\u7684\u58f0\u660e\u65b9\u6cd5\n        // vector&lt;string&gt; path(n, string(n, '.'));\n\n        // vector&lt;string&gt; path;\n        // for (int i = 0; i &lt; n; i++ ) {\n        //     for (int j =0;j &lt; n ;j++) {\n        //         path[i][j] ='.';\n        //     }\n        // }\n        vector&lt;string&gt; path(n);\n        for (int i = 0; i &lt; n; i++) {\n                path[i] = string(n, '.');\n        }\n        vector&lt;bool&gt; col(n, false), dg(2 * n, false), udg(2 * n, false);\n\n        function&lt;void(int)&gt; dfs = [&amp;] (int i) {\n            if (i == n) {\n                ans.emplace_back(path);\n                return;\n            }\n            for (int j = 0; j &lt; n; j++) {\n                if (!col[j] &amp;&amp; !dg[j + i] &amp;&amp; !udg[j - i + n]) {\n                    path[i][j] = 'Q';\n                    col[j] = dg[j + i] = udg[j - i + n] = true;\n                    dfs(i + 1);\n                    col[j] = dg[j + i] = udg[j - i + n] = false;\n                    path[i][j] = '.';\n                }\n            }\n        };\n        dfs(0);\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/algorithm/#52-n-ii","title":"52. N \u7687\u540e II","text":"<pre><code>class Solution {\npublic:\n    int totalNQueens(int n) {\n        int total = 0;\n        vector&lt;string&gt; path(n, string(n, '.'));\n        vector&lt;bool&gt; col(2 * n, false), dg(2 * n, false), udg(2 * n, false);\n        function&lt;void(int)&gt; dfs = [&amp;] (int i) {\n            if (i == n) {\n                total++;\n                return;\n            }\n            for (int j = 0; j &lt; n; j++) {\n                if (!col[j] &amp;&amp; !dg[i + j] &amp;&amp; !udg[i - j + n]) {\n                    path[i][j] = 'Q';\n                    col[j] = dg[i + j] = udg[i - j + n] = true;\n                    dfs(i + 1);\n                    path[i][j] = '.';\n                    col[j] = dg[i + j] = udg[i - j + n] = false; \n                }\n            }\n\n        };\n        dfs(0);\n        return total;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/","title":"\u4e8c\u5237\u4ee3\u7801\u968f\u60f3\u5f55","text":""},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#_2","title":"\u6570\u7ec4","text":""},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#2","title":"2. \u4e8c\u5206\u67e5\u627e","text":"<p>\u4e8c\u5206\u67e5\u627e\u53ea\u8981\u8bb0\u4f4f\u5206\u522b\u4e8c\u5206\u5de6\u8fb9\u754c\u548c\u53f3\u8fb9\u754c\u7684\u4ee3\u7801\u5373\u53ef</p> <pre><code>int searchLeft(vector&lt;int&gt;&amp; nums, int target) {\n       int l = 0, r = nums.size() - 1;\n       // \u5bfb\u627e\u5de6\u8fb9\u754c\uff08\u5373\u5927\u4e8e\u7b49\u4e8e\uff09\uff0c\u5bf9\u4e8er\u6765\u8bf4\u5c31\u662f\u7cca\u6d82\u8d26\uff0c\u4f46\u662fl\u975e\u5e38\u6e05\u695a\uff0c\u5c31\u662f\u5f53\u5c0f\u4e8e\u65f6\uff0cl\u5fc5\u5b9a\u9700\u8981+1\n       while (l &lt; r) {\n           int mid = (l + r) &gt;&gt; 1;\n           if (nums[mid] &lt; target) l = mid + 1;\n           else r = mid;\n       }\n       return l;\n    }\n    int searchRight(vector&lt;int&gt;&amp; nums, int target) {\n        int l = 0, r = nums.size() - 1;\n        while (l &lt; r) {\n            int mid = (l + r + 1) &gt;&gt; 1;\n            // \u5bfb\u627e\u53f3\u8fb9\u754c\uff08\u5c0f\u4e8e\u7b49\u4e8e\uff09\uff0c\u90a3\u4e48\u76f4\u63a5\u770b\u5927\u4e8e\u7684\u60c5\u51b5\n            if (nums[mid] &gt; target) r = mid - 1;\n            else l = mid;\n        }\n        return l;\n    }\n</code></pre>"},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#704-binary-search","title":"704. Binary Search","text":"<pre><code>class Solution {\npublic:\n    int search(vector&lt;int&gt;&amp; nums, int target) {\n        int l = 0, r = nums.size() -1;\n        while (l &lt; r) {\n            int mid = (l + r + 1) &gt;&gt; 1;\n            if (nums[mid] &gt; target) r = mid - 1;\n            else l = mid;\n        }\n        if (nums[l] == target) return l;\n        else return -1;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#35-search-insert-position","title":"35. Search Insert Position","text":"<pre><code>class Solution {\npublic:\n    int searchInsert(vector&lt;int&gt;&amp; nums, int target) {\n        int l = 0, r = nums.size() - 1;\n        while (l &lt; r) {\n            int mid = (l + r) &gt;&gt; 1;\n            if (nums[mid] &gt;= target) r = mid;\n            else l = mid + 1; \n        }\n        printf(\"%d %d\", l, r);\n        if (nums[l] == target) return l;\n        else if (l == nums.size() - 1 &amp;&amp; target &gt; nums[l]) return l + 1;\n        else return l;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#34-find-first-and-last-position-of-element-in-sorted-array","title":"34. Find First and Last Position of Element in Sorted Array","text":"<pre><code>class Solution {\npublic:\n    int searchLeft(vector&lt;int&gt;&amp; nums, int target) {\n       int l = 0, r = nums.size() - 1;\n       // \u5bfb\u627e\u5de6\u8fb9\u754c\uff08\u5373\u5927\u4e8e\u7b49\u4e8e\uff09\uff0c\u5bf9\u4e8er\u6765\u8bf4\u5c31\u662f\u7cca\u6d82\u8d26\uff0c\u4f46\u662fl\u975e\u5e38\u6e05\u695a\uff0c\u5c31\u662f\u5f53\u5c0f\u4e8e\u65f6\uff0cl\u5fc5\u5b9a\u9700\u8981+1\n       while (l &lt; r) {\n           int mid = (l + r) &gt;&gt; 1;\n           if (nums[mid] &lt; target) l = mid + 1;\n           else r = mid;\n       }\n       return l;\n    }\n    int searchRight(vector&lt;int&gt;&amp; nums, int target) {\n        int l = 0, r = nums.size() - 1;\n        while (l &lt; r) {\n            int mid = (l + r + 1) &gt;&gt; 1;\n            // \u5bfb\u627e\u53f3\u8fb9\u754c\uff08\u5c0f\u4e8e\u7b49\u4e8e\uff09\uff0c\u90a3\u4e48\u76f4\u63a5\u770b\u5927\u4e8e\u7684\u60c5\u51b5\n            if (nums[mid] &gt; target) r = mid - 1;\n            else l = mid;\n        }\n        return l;\n    }\n    vector&lt;int&gt; searchRange(vector&lt;int&gt;&amp; nums, int target) {\n        if (!nums.size()) return {-1, -1};\n        int l = searchLeft(nums, target);\n        int r = searchRight(nums, target);\n        if (nums[l] == target &amp;&amp; nums[r] == target) return {l, r};\n        else return {-1, -1};\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#69-sqrtx","title":"69. Sqrt(x)","text":"<pre><code>class Solution {\npublic:\n    int mySqrt(int x) {\n        if (x == 0) return 0;\n        long l = 1, r = x;\n        while (l &lt; r) {\n            long long mid = (l + r + 1) &gt;&gt; 1;\n            if (mid * mid &gt; x) r = mid - 1;\n            else l = mid;\n        }\n        return l;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#367-valid-perfect-square","title":"367. Valid Perfect Square","text":"<pre><code>class Solution {\npublic:\n    bool isPerfectSquare(int num) {\n        long long l = 0, r = num;\n        while (l &lt; r) {\n            long long mid = (l + r + 1) &gt;&gt; 1;\n            if (mid * mid &gt; num) r = mid - 1;\n            else l = mid;\n        }\n        return l * l == num;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#3","title":"3. \u79fb\u9664\u5143\u7d20","text":"<p>\u79fb\u52a8\u5143\u7d20\u5230\u540e\u9762\u53bb\u6216\u8005\u53ea\u9700\u8981\u8ba9\u524d\u9762\u7684\u6570\u7ec4\u4fdd\u6301\u67d0\u79cd\u6027\u8d28\uff0c\u90a3\u4e48\u5c31\u4f1a\u7528\u5230nums[j++] = nums[i]</p>"},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#27-remove-element","title":"27. Remove Element","text":"<pre><code>class Solution {\npublic:\n    int removeElement(vector&lt;int&gt;&amp; nums, int val) {\n        int j = 0;\n        for (int i = 0; i &lt; nums.size(); i++) {\n            if (nums[i] != val) {\n                nums[j++] = nums[i];\n            }\n        }\n        return j;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#26-remove-duplicates-from-sorted-array","title":"26. Remove Duplicates from Sorted Array","text":"<p>\u601d\u8def\u540c\u4e0a</p> <pre><code>class Solution {\npublic:\n    int removeDuplicates(vector&lt;int&gt;&amp; nums) {\n        int j = 1;\n        for (int i = 1; i &lt; nums.size(); i++) {\n            if (nums[i] != nums[i - 1]) nums[j++] = nums[i];\n        }\n        return j;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#283-move-zeroes","title":"283. Move Zeroes","text":"<pre><code>class Solution {\npublic:\n    void moveZeroes(vector&lt;int&gt;&amp; nums) {\n        int j = 0;\n        for (int i = 0; i &lt; nums.size(); i++) {\n            if (nums[i] != 0) nums[j++] = nums[i];\n        }\n        for (; j &lt; nums.size(); j++) nums[j] = 0;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#844-backspace-string-compare","title":"844. Backspace String Compare","text":"<p>\u7b2c\u4e00\u79cd\u89e3\u6cd5\uff1a\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(1)\uff0c\u63a8\u8350\uff01</p> <pre><code>class Solution {\npublic:\n    void getString(string&amp; s) {\n        int slow = 0;\n        for (int i = 0; i &lt; s.size(); i++) {\n            if (s[i] != '#') {\n                s[slow++] = s[i];\n            } else if (slow &gt; 0) {\n                slow--;\n            };\n        }\n        s.resize(slow);\n    }\n    bool backspaceCompare(string s, string t) {\n        getString(s);\n        getString(t);\n        return s == t;\n    }\n};\n</code></pre> <p>\u7b2c\u4e8c\u79cd\u89e3\u6cd5\uff1a</p> <pre><code>class Solution {\npublic:\n    string getString(string&amp; s) {\n        string res;\n        for (auto c : s) {\n            if (c == '#') {\n                if (res.size()) res.pop_back();\n            } else {\n                res += c;\n            }\n        }\n        return res;\n    }\n    bool backspaceCompare(string s, string t) {\n        return getString(s) == getString(t);\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#977-squares-of-a-sorted-array","title":"977. Squares of a Sorted Array","text":"<pre><code>class Solution {\npublic:\n    vector&lt;int&gt; sortedSquares(vector&lt;int&gt;&amp; nums) {\n        int n = nums.size();\n        vector&lt;int&gt; ans(n);\n        int pos = n - 1;\n        for (int i = 0, j = nums.size() - 1; i &lt;= j; ) {\n            int left = nums[i] * nums[i];\n            int right = nums[j] * nums[j];\n            if (left &gt; right) {\n                ans[pos] = left;\n                i++;\n            }\n            else {\n                ans[pos] = right;\n                j--;\n            }\n            pos--;\n        }\n        return ans;\n    }\n};\n</code></pre> <p>\u6216\u8005\u76f4\u63a5sort\uff0csort\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u65f6nlogn</p> <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; sortedSquares(vector&lt;int&gt;&amp; nums) {\n        for (int i = 0; i &lt; nums.size(); i++) {\n            nums[i] = pow(nums[i], 2);\n        }\n        sort(nums.begin(), nums.end());\n        return nums;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#4","title":"4. \u6709\u5e8f\u6570\u7ec4\u7684\u5e73\u65b9","text":""},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#977-squares-of-a-sorted-array_1","title":"977. Squares of a Sorted Array","text":"<pre><code>class Solution {\npublic:\n    vector&lt;int&gt; sortedSquares(vector&lt;int&gt;&amp; nums) {\n        int n = nums.size();\n        vector&lt;int&gt; ans(n);\n        int pos = n - 1;\n        for (int i = 0, j = nums.size() - 1; i &lt;= j; ) {\n            int left = nums[i] * nums[i];\n            int right = nums[j] * nums[j];\n            if (left &gt; right) {\n                ans[pos] = left;\n                i++;\n            }\n            else {\n                ans[pos] = right;\n                j--;\n            }\n            pos--;\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#5","title":"5. \u957f\u5ea6\u6700\u5c0f\u7684\u5b50\u6570\u7ec4","text":"<p>\u6ed1\u52a8\u7a97\u53e3\u5e0c\u671b\u5f97\u5230\u7684\u662f\u4ee5\u53f3\u7aef\u70b9\u7ed3\u5c3e\u7684\u7b26\u5408\u67d0\u4e00\u6761\u4ef6\u7684\u7a97\u53e3\uff0c\u5e76\u4e14\u9700\u8981\u904d\u5386\u6574\u4e2a\u6570\u7ec4</p> <p>\u56e0\u6b64\u4f53\u4f1a<code>for (;r &lt; nums.size(); r++)</code>\u7684\u5de7\u5999\uff01</p> <pre><code>class Solution {\npublic:\n    int minSubArrayLen(int target, vector&lt;int&gt;&amp; nums) {\n        int l = 0, r = 0, sum = 0;\n        int res = 1e9 + 10;\n        for (;r &lt; nums.size(); r++) {\n            sum += nums[r];\n            while (l &lt;= r &amp;&amp; sum &gt;= target) {\n                res = min(res, r - l + 1);\n                sum -= nums[l];\n                l++;\n            }\n        }\n        if (res &gt; 1e9) return 0;\n        return res;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#76-minimum-window-substring","title":"76. Minimum Window Substring","text":"<pre><code>class Solution {\npublic:\n    string minWindow(string s, string t) {\n        // \u9700\u8981\u4f7f\u7528total \u6765\u8bb0\u5f55\u8fd8\u9700\u8981\u5339\u914d\u7684\u5b57\u7b26\u79cd\u7c7b\u6570\n        // vector&lt;int&gt; c1(60), c2(60);\n        // \u540c\u6837\u7684\u5b57\u6bcd\u53ea\u8981c1\u4e2d\u7684\u6bd4c2\u4e2d\u7684\u5927\uff0c\u90a3\u4e48\u6307\u9488\u5c31\u53ef\u4ee5\u66f4\u65b0\n        // a-z\u5bf9\u5e940-25\uff0cA-Z\u5bf9\u5e9426-51\n        int m = s.size(), n = t.size();\n        vector&lt;int&gt; c1(60), c2(60);\n        int total = 0;\n        int min = INT_MAX;\n        string ans;\n        for (char ch : t) {\n            if (++c2[getId(ch)] == 1) {\n                total++;\n            }\n        }\n        for (int i = 0, j = 0; i &lt; m; i++) {\n            if (++c1[getId(s[i])] == c2[getId(s[i])]) {\n                total--;\n            }\n            while (j &lt; i) {\n                int idx2 = getId(s[j]);\n                if (c1[idx2] &gt; c2[idx2] &amp;&amp; --c1[idx2] &gt;= 0) j++;\n                else break;\n            }\n            if (total == 0 &amp;&amp; (ans.empty() || ans.length() &gt; i - j + 1)) ans = s.substr(j, i - j + 1);\n\n        }\n        return ans;\n\n    }\n    int getId(char ch) {\n        return ch &gt;= 'A' &amp;&amp; ch &lt;= 'Z' ? ch - 'A' + 26 : ch - 'a';\n    }\n\n};\n</code></pre>"},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#904-fruit-into-baskets","title":"904. Fruit Into Baskets","text":"<pre><code>class Solution {\npublic:\n    int totalFruit(vector&lt;int&gt;&amp; fruits) {\n        unordered_map&lt;int, int&gt; hash;\n        int ans = 0;\n        int n = fruits.size();\n        for (int i = 0, j = 0; i &lt; n; i++) {\n            hash[fruits[i]]++;\n            while (hash.size() &gt; 2) {\n                if (--hash[fruits[j]] == 0) {\n                    hash.erase(fruits[j]);\n                }\n                j++;\n            }\n            ans = max(i - j + 1, ans);\n            cout &lt;&lt; hash.size() &lt;&lt; endl;\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#6","title":"6. \u87ba\u65cb\u77e9\u9635","text":"<pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; generateMatrix(int l) {\n        vector&lt;vector&lt;int&gt;&gt; ans(l, vector&lt;int&gt;(l));\n        vector&lt;int&gt; dx = {0, 1, 0, -1};\n        vector&lt;int&gt; dy = {1, 0, -1, 0};\n        for (int i = 1, x = 0, y = 0, n = 0; i &lt;= l * l; i++) {\n            ans[x][y] = i;\n            cout &lt;&lt; \"check\";\n            int checkX = x + dx[n % 4];\n            int checkY = y + dy[n % 4];\n            if (checkX &gt;= 0 &amp;&amp; checkX &lt; l &amp;&amp; checkY &gt;= 0 &amp;&amp; checkY &lt; l &amp;&amp; ans[checkX][checkY] == 0) {\n                x = checkX;\n                y = checkY;\n            } \n            else {\n                cout &lt;&lt; \"check1\";\n                n++;\n                x = x + dx[n % 4];\n                y = y + dy[n % 4];\n            }\n        }\n        return ans;\n\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#_3","title":"\u94fe\u8868","text":""},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#2_1","title":"2. \u79fb\u9664\u94fe\u8868\u5143\u7d20","text":""},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#203-remove-linked-list-elements","title":"203. Remove Linked List Elements","text":"<p>\u4f7f\u7528\u9012\u5f52\u7684\u65b9\u6cd5\uff1a</p> <pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* removeElements(ListNode* head, int val) {\n        // \u5148\u5904\u7406\u7279\u6b8a\u60c5\u51b5\u548c\u5230\u5934\u4e86\u7684\u60c5\u51b5\n        if (head == nullptr) return head;\n        // \u518d\u5904\u7406\u4e4b\u540e\u7684\u60c5\u51b5\n        head-&gt;next = removeElements(head-&gt;next, val);\n        // \u6700\u540e\u5904\u7406\u81ea\u8eab\u7684\u60c5\u51b5\n        if (head-&gt;val == val) return head-&gt;next;\n        else return head;\n    }\n};\n</code></pre> <p>\u4e0d\u63a8\u8350\u7684\u8fed\u4ee3\u65b9\u6cd5\uff1a</p> <pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* removeElements(ListNode* head, int val) {\n        ListNode* dummy = new ListNode(-1, head);\n        ListNode* temp = dummy;\n        while (temp-&gt;next != nullptr) {\n            if (temp-&gt;next-&gt;val == val) {\n                temp-&gt;next = temp-&gt;next-&gt;next;\n            } else temp = temp-&gt;next;\n        }\n        return dummy-&gt;next;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#3_1","title":"3. \u8bbe\u8ba1\u94fe\u8868","text":""},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#4_1","title":"4. \u7ffb\u8f6c\u94fe\u8868","text":""},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#206-reverse-linked-list","title":"206. Reverse Linked List","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        ListNode* prev = NULL;\n        ListNode* curr = head;\n        while (curr != nullptr) {\n            ListNode* tmp = curr-&gt;next;\n            curr-&gt;next = prev;\n            prev = curr;\n            curr = tmp;\n        }\n        return prev;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#5_1","title":"5. \u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9","text":""},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#24-swap-nodes-in-pairs","title":"24. Swap Nodes in Pairs","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* swapPairs(ListNode* head) {\n        ListNode* dummy = new ListNode(-1, head);\n        ListNode* curr = dummy;\n        while (curr &amp;&amp; curr-&gt;next &amp;&amp; curr-&gt;next-&gt;next) {\n            ListNode* tmp = curr-&gt;next-&gt;next;\n            curr-&gt;next-&gt;next = tmp-&gt;next;\n            tmp-&gt;next = curr-&gt;next;\n            curr-&gt;next = tmp;\n            curr = curr-&gt;next-&gt;next;\n        }\n        return dummy-&gt;next;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#6-n","title":"6. \u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2cN\u4e2a\u8282\u70b9","text":""},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#19-remove-nth-node-from-end-of-list","title":"19. Remove Nth Node From End of List","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* removeNthFromEnd(ListNode* head, int n) {\n        ListNode* dummy = new ListNode(-1, head);\n        ListNode *right = dummy, *left = dummy;\n        for (int i = 0; i &lt; n; i++) {\n            right = right-&gt;next;\n        }\n        while (right-&gt;next != nullptr) {\n            right = right-&gt;next;\n            left = left-&gt;next;\n        }\n        left-&gt;next = left-&gt;next-&gt;next;\n        return dummy-&gt;next;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#7","title":"7. \u94fe\u8868\u76f8\u4ea4","text":"<p>\u9762\u8bd5\u9898 02.07. Intersection of Two Linked Lists LCCI</p>"},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#_4","title":"\u4f7f\u7528\u54c8\u5e0c\u8868","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {\n        unordered_set&lt;ListNode *&gt; hash;\n        ListNode *tmp = headA;\n        while (tmp != nullptr) {\n            hash.insert(tmp);\n            tmp = tmp-&gt;next;\n        }\n        tmp = headB;\n        while (tmp != nullptr) {\n            if (hash.count(tmp)) {\n                return tmp;\n            }\n            tmp = tmp-&gt;next;\n        }\n        return nullptr;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#_5","title":"\u901a\u8fc7\u94fe\u8868\u7684\u957f\u5ea6\u7279\u6027\u6765\u505a","text":"<p>\u76f8\u4ea4\u4ee3\u8868\u7684\u662f\u540e\u9762\u6709\u4e00\u6bb5<code>\u957f\u5ea6\u76f8\u540c</code>\u7684\u90e8\u5206\u5b8c\u5168\u8ddf\u76f8\u540c</p> <p>a + c = m</p> <p>b + c = n</p> <p>A \u548cB\u5206\u522b\u7ecf\u8fc7a + c + b\u548cb + c +a\u4e4b\u540e\u4f1a\u5230\u8fbe\u76f8\u540c\u7684\u8282\u70b9</p> <p>\u5426\u5219\u5c31\u4f1a\u62b5\u8fbe\u76f8\u540c\u7684null</p> <pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {\n        if (headA == nullptr || headB == nullptr) return nullptr;\n        ListNode *a = headA, *b = headB;\n        while (a != b) {\n            if (a == nullptr) a = headB;\n            else a = a-&gt;next;\n            if (b == nullptr) b = headA;\n            else b = b-&gt;next;\n        }\n        return a;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#2_2","title":"\u901a\u8fc7\u94fe\u8868\u7684\u957f\u5ea6\u7279\u6027\u6765\u505a2","text":"<p>\u53ef\u4ee5\u6c42\u51fa\u4e24\u6761\u7684\u957f\u5ea6</p> <p>\u7136\u540e\u6c42\u51fa\u5dee\u503c</p> <p>\u7136\u540e\u957f\u7684\u90a3\u6761\u5148\u5230\u5dee\u503c\u5904</p> <p>\u7136\u540ea\u548cb\u540c\u65f6\u5f80\u540e\u9762\u8d70\u5fc5\u7136\u80fd\u8d70\u5230\u76f8\u540c\u7684\u8282\u70b9</p>"},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#8-ii","title":"8. \u73af\u5f62\u94fe\u8868II","text":""},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#142-linked-list-cycle-ii","title":"142. Linked List Cycle II","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode *detectCycle(ListNode *head) {\n        // \u5982\u679c\u53ea\u6709\u4e00\u4e2a\u73af\uff0c\u90a3\u4e48\u5feb\u6307\u9488\u662f\u6162\u6307\u9488\u4e24\u500d\u7684\u8bdd\uff0c\u4f1a\u76f8\u9047\u5728\u6700\u521d\u7684\u8d77\u70b9\n        // \u800c\u6709\u4e86\u975e\u73af\u7684\u90e8\u5206\uff0c\u4f1a\u76f8\u9047\u5728\u6162\u6307\u9488\u8fd8\u6ca1\u8d70\u5b8c\u4e00\u5708\u7684\u65f6\u5019\n        // \u5feb\u6307\u9488\u8d70\u8fc7\u7684\u8def= a + n(b + c) +b\n        // \u6162\u6307\u9488\u8d70\u8fc7\u7684\u8def= a + b\n        // 2a + 2b = a + (n + 1) b + nc\n        // a = (n - 1)b + (n - 1)c + c\n        // \u5982\u679chead\u548c\u6162\u6307\u9488\u540c\u65f6\u8d70a\u7684\u8def\uff0c\u90a3\u4e48head\u4f1a\u5230\u5165\u73af\u70b9\uff0c\u800c\u6162\u6307\u9488\u4f1a\u5728\u8f6c\u4e86(k - 1)\u5708\u4e4b\u540e\u5230\u5165\u73af\u70b9\n        ListNode *fast = head, *slow = head;\n        while (true) {\n            if (fast == nullptr || fast-&gt;next == nullptr) return nullptr;\n            fast = fast-&gt;next-&gt;next;\n            slow = slow-&gt;next;\n            if (fast == slow) break;\n        }\n        ListNode *curr = head;\n        while (curr != fast) {\n            fast = fast-&gt;next;\n            curr = curr-&gt;next;\n        }\n        return curr;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#_6","title":"\u54c8\u5e0c\u8868","text":""},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#2_3","title":"2. \u6709\u6548\u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd","text":""},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#242-valid-anagram","title":"242. Valid Anagram","text":"<pre><code>class Solution {\npublic:\n    bool isAnagram(string s, string t) {\n        vector&lt;int&gt; count(26);\n        for (char ch : s) count[ch - 'a']++;\n        for (char ch : t) count[ch - 'a']--;\n        for (int i = 0; i &lt; 26; i++) {\n            if (count[i]) return false;\n        }\n        return true;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#3_2","title":"3. \u4e24\u4e2a\u6570\u7ec4\u7684\u4ea4\u96c6","text":""},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#349-intersection-of-two-arrays","title":"349. Intersection of Two Arrays","text":"<pre><code>class Solution {\npublic:\n    vector&lt;int&gt; intersection(vector&lt;int&gt;&amp; nums1, vector&lt;int&gt;&amp; nums2) {\n        // \u5982\u679c\u8bb0\u5f55\u4e2a\u6570\u6ca1\u6709\u610f\u4e49\uff0c\u800c\u4e14\u9700\u8981\u7528\u5230\u552f\u4e00\u5143\u7d20\u6216\u8005\u4e0d\u91cd\u590d\u5143\u7d20\uff0c\u5c31\u53ef\u4ee5\u8003\u8651\u4f7f\u7528unordered_set\n        unordered_set&lt;int&gt; result_set;\n        unordered_set&lt;int&gt; nums1_set(nums1.begin(), nums1.end());\n        for (auto num : nums2) {\n            if (nums1_set.find(num) != nums1_set.end()) {\n                result_set.insert(num);\n            }\n        }\n        return vector&lt;int&gt;(result_set.begin(), result_set.end());\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#4_2","title":"4. \u5feb\u4e50\u6570","text":""},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#202-happy-number","title":"202. Happy Number","text":""},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#_7","title":"\u63a8\u8350\u4f7f\u7528\u5feb\u6162\u53cc\u6307\u9488","text":"<pre><code>class Solution {\npublic:\n    int getNext(int n) {\n        int sum = 0;\n        while (n) {\n            int digit = n % 10;\n            sum += digit * digit;\n            n /= 10;\n        }\n        return sum;\n    }\n    bool isHappy(int n) {\n        int slow = n, fast = n;\n        do {\n            slow = getNext(slow);\n            fast = getNext(getNext(fast));\n        } while(slow != fast);\n        return slow == 1;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#unordered_set","title":"\u4e0d\u63a8\u8350\u4f7f\u7528unordered_set","text":"<pre><code>class Solution {\npublic:\n    bool isHappy(int n) {\n        unordered_set&lt;int&gt; hash_set;\n        return isHappyHelper(n, hash_set);\n    }\nprivate:\n    bool isHappyHelper(int n, unordered_set&lt;int&gt;&amp; hash_set) {\n        if (n == 1) return true;\n        if (hash_set.find(n) != hash_set.end()) return false;\n        hash_set.insert(n);\n        int next = 0;\n        while (n) {\n            next += pow(n % 10, 2);\n            n /= 10;\n        }\n        return isHappyHelper(next, hash_set);\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#5_2","title":"5. \u4e24\u6570\u4e4b\u548c","text":""},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#1-two-sum","title":"1. Two Sum","text":"<pre><code>class Solution {\npublic:\n    vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) {\n        unordered_map&lt;int, int&gt; hash;\n        for (int i = 0; i &lt; nums.size(); i++) {\n            if (hash.count(target - nums[i])) {\n                return {i, hash[target - nums[i]]};\n            } \n            else {\n                hash[nums[i]] = i;\n            }\n\n        }\n        return {};\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#6-ii","title":"6. \u56db\u6570\u76f8\u52a0II","text":""},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#454-4sum-ii","title":"454. 4Sum II","text":"<pre><code>class Solution {\npublic:\n    int fourSumCount(vector&lt;int&gt;&amp; nums1, vector&lt;int&gt;&amp; nums2, vector&lt;int&gt;&amp; nums3, vector&lt;int&gt;&amp; nums4) {\n        // \u6b63\u5e38\u6765\u8bf4\u5c31\u662f\u4e09\u91cd\u5faa\u73af\u52a0\u4e0a\u54c8\u5e0c\u67e5\u8868\uff0c\u76f8\u5f53\u4e8en^3 + n\n        // \u5982\u679c\u60f3\u8981\u964d\u5230n^2\uff0c\u90a3\u4e48\u5c31\u662fnum1, nums2\u4e24\u91cd\u5faa\u73af\n        // \u9700\u8981nums3 + nums4 = -(num1 + nums2)\n        // \u89c2\u5bdf\u6700\u540e\u5b9e\u9645\u4e0a\u9700\u8981\u67e5\u627e\u7684\u662fnums3 + nums4\u7684\u548c\n        // \u6240\u4ee5\u5f00nums3 + nums4\u548c\u7684\u54c8\u5e0c\u8868\n        unordered_map&lt;int, int&gt; count;\n        for (auto c : nums3) {\n            for (auto d : nums4) {\n                count[c + d]++;\n            }\n        }\n        int res = 0;\n        for (auto a : nums1) {\n            for (auto b : nums2) {\n                res += count[- (a + b)];\n            }\n        }\n        return res;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#7_1","title":"7. \u8d4e\u91d1\u4fe1","text":""},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#383-ransom-note","title":"383. Ransom Note","text":"<p>\u7528\u6570\u7ec4\u5728\u7a7a\u95f4\u4e0a\u4f1a\u66f4\u597d\u4e00\u4e9b</p> <pre><code>class Solution {\npublic:\n    bool canConstruct(string ransomNote, string magazine) {\n        if (ransomNote.size() &gt; magazine.size()) return false;\n        vector&lt;int&gt; cnt(26);\n        // reference saves both time and space\n        for (char&amp; c : magazine) cnt[c - 'a']++;\n        for (char&amp; c : ransomNote) {\n            if (--cnt[c - 'a'] &lt; 0) return false;\n        }\n        return true;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#8","title":"8. \u4e09\u6570\u4e4b\u548c","text":""},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#15-3sum","title":"15. 3Sum","text":""},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#_8","title":"\u53cc\u6307\u9488\u6cd5\uff08\u63a8\u8350\uff09","text":"<pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; threeSum(vector&lt;int&gt;&amp; nums) {\n        vector&lt;vector&lt;int&gt;&gt; ans;\n        sort(nums.begin(), nums.end());\n        for (int i = 0; i &lt; nums.size() - 2; i++) {\n            if (i &gt; 0 &amp;&amp; nums[i] == nums[i - 1]) continue;\n            int j = i + 1, k = nums.size() - 1;\n            for (; j &lt; nums.size() - 1 &amp;&amp; j &lt; k; j++) {\n                if (j &gt; i + 1 &amp;&amp; nums[j] == nums[j - 1]) continue;\n                int sum = nums[i] + nums[j];\n                while (nums[k] &gt; -sum &amp;&amp; k &gt; j + 1) k--;\n                if (nums[k] == -sum) ans.push_back({nums[i], nums[j], nums[k]});\n            }\n        }\n        return ans;\n    }\n};\n</code></pre> <pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; threeSum(vector&lt;int&gt;&amp; nums) {\n        vector&lt;vector&lt;int&gt;&gt; res;\n        sort(nums.begin(), nums.end());\n        for (int i = 0; i &lt; nums.size() - 2; i++) {\n            int l = i + 1, r = nums.size() - 1;\n            if (i &amp;&amp; nums[i - 1] == nums[i]) continue;\n            while (l &lt; r) {\n                int s = nums[i] + nums[l] + nums[r];\n                if (s == 0) {\n                    res.push_back({nums[i], nums[l], nums[r]});\n                    r--;\n                    while (r &lt; nums.size() - 1 &amp;&amp; nums[r] == nums[r + 1]) r--;\n                }\n                else if (s &gt; 0) r--;\n                else l++;\n            }\n        }\n        return res;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#_9","title":"\u54c8\u5e0c\u6cd5\uff08\u4e0d\u662f\u975e\u5e38\u63a8\u8350\uff09","text":"<pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; threeSum(vector&lt;int&gt;&amp; nums) {\n        vector&lt;vector&lt;int&gt;&gt; ans;\n        unordered_map&lt;int, int&gt; hash;\n        sort(nums.begin(), nums.end());\n        for (int i = 0; i &lt; nums.size(); i++) hash[nums[i]] = i;\n        for (int i = 0; i &lt; nums.size() - 2; i++) {\n            if (i &gt; 0 &amp;&amp; nums[i] == nums[i - 1]) continue;\n            for (int j = i + 1; j &lt; nums.size() - 1; j++) {\n                if (j &gt; i + 1 &amp;&amp; nums[j] == nums[j - 1]) continue;\n                int sum = nums[i] + nums[j];\n                if (hash.count(-sum) &amp;&amp; hash[-sum] &gt; i &amp;&amp; hash[-sum] &gt; j) {\n                    ans.push_back({nums[i], nums[j], -sum});\n                }\n            }\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#9","title":"9. \u56db\u6570\u4e4b\u548c","text":""},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#18-4sum","title":"18. 4Sum","text":"<pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; fourSum(vector&lt;int&gt;&amp; nums, int target) {\n        vector&lt;vector&lt;int&gt;&gt; res;\n        if (nums.size() &lt; 4) return res;\n        sort(nums.begin(), nums.end());\n        for (int i = 0; i &lt; nums.size() - 3; i++) {\n            if (i &amp;&amp; nums[i] == nums[i - 1]) continue;\n            for (int j = i + 1; j &lt; nums.size() - 2; j++) {\n                if (j &gt;= i + 2 &amp;&amp; nums[j - 1] == nums[j]) continue;\n                for (int m = j + 1, n = nums.size() -1; m &lt; n; m++) {\n                    if (m &gt;= j + 2 &amp;&amp; nums[m - 1] == nums[m]) continue;\n                    while (m &lt; n - 1 &amp;&amp; (long long)nums[i] + nums[j] + nums[m] + nums[n -1] &gt;= target) n--;\n                    if ((long long)nums[i] + nums[j] + nums[m] + nums[n] == target) {\n                        res.push_back({nums[i], nums[j], nums[m], nums[n]});\n                    }\n                }\n            }\n        }\n        return res;\n    }\n};\n</code></pre> <pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; fourSum(vector&lt;int&gt;&amp; nums, int target) {\n        // \u5c0f\u4e8e\u56db\u4e2a\u7684\u4e2a\u6570\uff0c\u5fc5\u987b\u8981\u6392\u9664\n        if (nums.size() &lt; 4) return {};\n        vector&lt;vector&lt;int&gt;&gt; ans;\n        sort(nums.begin(), nums.end());\n        for (int i = 0; i &lt; nums.size() - 3; i++) {\n            if (i &gt; 0 &amp;&amp; nums[i] == nums[i - 1]) continue;\n            for (int j = i + 1; j &lt; nums.size() - 2; j++) {\n                if (j &gt; i + 1 &amp;&amp; nums[j] == nums[j - 1]) continue;\n                int l = j + 1, r = nums.size() - 1;\n                for (; l &lt; r &amp;&amp; l &lt; nums.size() - 1; l++) {\n                    if (l &gt; j + 1 &amp;&amp; nums[l] == nums[l - 1]) continue;\n                    long long sum = (long long)nums[i] + nums[j] + nums[l];\n                    long long aim = target - sum;\n                    while (nums[r] &gt; aim &amp;&amp; r &gt; l + 1) r--;\n                    if (nums[r] == aim) ans.push_back({nums[i], nums[j], nums[l], nums[r]}); \n                }\n            }\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#_10","title":"\u5b57\u7b26\u4e32","text":""},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#1","title":"1. \u53cd\u8f6c\u5b57\u7b26\u4e32","text":""},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#344-reverse-string","title":"344. Reverse String","text":"<pre><code>class Solution {\npublic:\n    void reverseString(vector&lt;char&gt;&amp; s) {\n        if (!s.size()) return;\n        int i = 0, j = s.size() - 1;\n        while (i &lt; j) {\n            swap(s[i], s[j]);\n            i++;\n            j--;\n        }\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#2-ii","title":"2. \u53cd\u8f6c\u5b57\u7b26\u4e32II","text":""},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#541-reverse-string-ii","title":"541. Reverse String II","text":"<pre><code>class Solution {\npublic:\n    string reverseStr(string s, int k) {\n        for (int i = 0; i &lt; s.size(); i += 2 * k) {\n            if (i + k &lt;= s.size()) {\n                reverse(s.begin() + i, s.begin() + i + k);\n            } \n            else {\n                reverse(s.begin() + i, s.end());\n            }\n        }\n        return s;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#3_3","title":"3. \u66ff\u6362\u6570\u5b57","text":"<pre><code>#include&lt;iostream&gt;\nusing namespace std;\nint main() {\n    string s;\n    while (cin &gt;&gt; s) {\n        int count = 0; // \u7edf\u8ba1\u6570\u5b57\u7684\u4e2a\u6570\n        int sOldSize = s.size();\n        for (int i = 0; i &lt; s.size(); i++) {\n            if (s[i] &gt;= '0' &amp;&amp; s[i] &lt;= '9') {\n                count++;\n            }\n        }\n        // \u6269\u5145\u5b57\u7b26\u4e32s\u7684\u5927\u5c0f\uff0c\u4e5f\u5c31\u662f\u6bcf\u4e2a\u7a7a\u683c\u66ff\u6362\u6210\"number\"\u4e4b\u540e\u7684\u5927\u5c0f\n        s.resize(s.size() + count * 5);\n        int sNewSize = s.size();\n        // \u4ece\u540e\u5148\u524d\u5c06\u7a7a\u683c\u66ff\u6362\u4e3a\"number\"\n        for (int i = sNewSize - 1, j = sOldSize - 1; j &lt; i; i--, j--) {\n            if (s[j] &gt; '9' || s[j] &lt; '0') {\n                s[i] = s[j];\n            } else {\n                s[i] = 'r';\n                s[i - 1] = 'e';\n                s[i - 2] = 'b';\n                s[i - 3] = 'm';\n                s[i - 4] = 'u';\n                s[i - 5] = 'n';\n                i -= 5;\n            }\n        }\n        cout &lt;&lt; s &lt;&lt; endl;\n    }\n}\n</code></pre>"},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#4_3","title":"4. \u7ffb\u8f6c\u5b57\u7b26\u4e32\u91cc\u7684\u5355\u8bcd","text":""},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#151-reverse-words-in-a-string","title":"151. Reverse Words in a String","text":"<p>\u60f3\u5c06\u53bb\u9664\u7a7a\u683c</p> <p>\u7136\u540e\u5c06\u6574\u4e2a\u5b57\u7b26\u4e32\u7ffb\u8f6c</p> <p>\u6700\u540e\u4e00\u4e2a\u4e00\u4e2a\u5355\u8bcd\u7ffb\u8f6c</p> <pre><code>class Solution {\npublic:\n    void manageSpaces (string&amp; s) {\n        int slow = 0;\n        for (int i = 0; i &lt; s.size(); i++) {\n            if (s[i] != ' ') {\n                while (i &lt; s.size() &amp;&amp; s[i] != ' ') {\n                    s[slow++] = s[i++];\n                }\n                s[slow++] = ' ';\n            }\n        }\n        s.resize(slow - 1);\n    }\n    string reverseWords(string s) {\n        manageSpaces(s);\n        reverse(s.begin(), s.end());\n        cout &lt;&lt; s &lt;&lt; endl;\n        for (int i = 0; i &lt; s.size(); i++) {\n            cout &lt;&lt; \"i: \" &lt;&lt; i &lt;&lt; endl;\n            if (s[i] != ' ') {\n                int j = i;\n                while (j &lt; s.size() &amp;&amp; s[j] != ' ') j++;\n                cout &lt;&lt; \"j: \" &lt;&lt; j &lt;&lt; endl;\n                reverse(s.begin() + i, s.begin() + j);\n                i = j;\n            }\n        }\n        return s;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#5_3","title":"5. \u53f3\u65cb\u8f6c\u5b57\u7b26\u4e32","text":"<p>\u53f3\u65cb\u4e24\u4e2a = \u6574\u4f53\u7ffb\u8f6c+\u524d\u540e\u5404\u81ea\u7ffb\u8f6c: de abc</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n#include &lt;string&gt;\nint main () {\n    int n;\n    std::string a;\n    std::cin &gt;&gt; n &gt;&gt; a;\n    reverse(a.begin(), a.end());\n    reverse(a.begin(), a.begin() + n);\n    reverse(a.begin() + n, a.end());\n    std::cout &lt;&lt; a &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre>"},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#6-strstr","title":"6. \u5b9e\u73b0strStr()","text":""},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#28-find-the-index-of-the-first-occurrence-in-a-string","title":"28. Find the Index of the First Occurrence in a String","text":"<p>\u63a8\u8350\u4f7f\u7528\u7684kmp</p> <pre><code>class Solution {\npublic:\n    int strStr(string haystack, string needle) {\n        int n = needle.size(), m = haystack.size();\n        vector&lt;int&gt; next(n, -1);\n        int j = -1;\n        for (int i = 1; i &lt; n; i++) {\n            while (j != -1 &amp;&amp; needle[i] != needle[j + 1]) {\n                j = next[j];\n            }\n            if (needle[i] == needle[j + 1]) j++;\n            next[i] = j;\n        }\n\n        for (int i = 0, j = -1; i &lt; m; i++) {\n            while (j != -1 &amp;&amp; haystack[i] != needle[j + 1]) {\n                j = next[j];\n            }\n            if (haystack[i] == needle[j + 1]) j++;\n            if (j == n - 1) {\n                return i - n + 1;\n            }\n        }\n        return -1;\n    }\n};\n</code></pre> <pre><code>class Solution {\npublic:\n    int strStr(string haystack, string needle) {\n        int n = haystack.size(), m = needle.size();\n        haystack = ' ' + haystack, needle = ' ' + needle;\n        vector&lt;int&gt; ne(m + 1);\n        // \u4e3a\u4ec0\u4e48\u4ecei = 2\u5f00\u59cb?\n        // abc\u73b0\u5728\u662f_abc\uff0c\u800cneedle[1]\u5c31\u662f'a'\u5fc5\u7136\u662f0\uff0c\u6240\u4ee5\u4ece2\u5f00\u59cb\n        // j\u4ee3\u8868\u5728\u7b2ci\u4e2a\u5b57\u6bcd\u4e4b\u524d\u5df2\u7ecf\u5339\u914d\u4e86\u7684\u5b57\u7b26\u4e2a\u6570\n        // \"_aba\" \"00\"\n        for (int i = 2, j = 0; i &lt;= m; i++) {\n            // while\u7684\u610f\u601d\u662f\uff0c\u5728\u7b2ci\u4e2a\u5b57\u6bcd\u4e4b\u524d\u6709\u5339\u914d\u7684\u5b57\u7b26\uff0c\u4f46\u662f\u7b2ci\u4e2a\u5b57\u7b26\u548c\u524dj\u4e2a\u5b57\u7b26\u5bf9\u4e0d\u4e0a\n            while (j &amp;&amp; needle[i] != needle[j + 1]) {\n                j = ne[j];\n            }\n            if (needle[i] == needle[j + 1]) {\n                j++;\n            }\n            ne[i] = j;\n        }\n\n        for (int i = 1, j = 0; i &lt;= n; i++) {\n            while (j &amp;&amp; haystack[i] != needle[j + 1]) {\n                j = ne[j];\n            }\n            if (haystack[i] == needle[j + 1]) {\n                j++;\n            }\n            //\u56e0\u4e3a\u53f3\u79fb\u8fc7\u4e86\uff0c\u6240\u4ee5\u8fd8\u5f97\u51cf\u4e00\n            if (j == m) return i - m + 1 - 1;\n        }\n        return -1;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#7_2","title":"7. \u91cd\u590d\u7684\u5b50\u5b57\u7b26\u4e32","text":""},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#459-repeated-substring-pattern","title":"459. Repeated Substring Pattern","text":"<p>\u66b4\u529b\u505a\u6cd5\uff1a</p> <pre><code>class Solution {\npublic:\n    bool repeatedSubstringPattern(string s) {\n        int n = s.size();\n        for (int i = 1; i * 2 &lt;= n; i++) {\n            if (n % i == 0) {\n                bool match = true;\n                for (int j = i; j &lt; n; j++) {\n                    if (s[j] != s[j - i]) {\n                        match = false;\n                        break;\n                    }\n                }\n                if (match)\n                    return true;\n            }\n        }\n        return false;\n    }\n};\n</code></pre> <p>\u5b57\u7b26\u4e32\u5339\u914d\u505a\u6cd5</p> <pre><code>class Solution {\npublic:\n    bool repeatedSubstringPattern(string s) {\n        return (s + s).find(s, 1) != s.size();\n    }\n};\n</code></pre> <p>kmp\u4ee3\u66fffind\u7684\u505a\u6cd5</p> <pre><code>class Solution {\npublic:\n    bool kmp(const string&amp; s, const string&amp; t) {\n        int n = s.size(), m = t.size();\n        vector&lt;int&gt; next(m, -1);\n        for (int i = 1, j = -1; i &lt; m; i++) {\n            while (j != -1 &amp;&amp; t[i] != t[j + 1]) {\n                j = next[j];\n            }\n            if (t[i] == t[j + 1]) j++;\n            next[i] = j;\n        }\n\n        for (int i = 1, j = -1; i &lt; n - 1; i++) {\n            while (j != -1 &amp;&amp; s[i] != t[j + 1]) {\n                j = next[j];\n            }\n            if (s[i] == t[j + 1]) j++;\n            if (j == m - 1 ) return true;\n        }\n        return false;\n    }\n    bool repeatedSubstringPattern(string s) {\n        return kmp(s + s, s);\n    }\n};\n</code></pre> <p>kmp\u4f18\u5316\u505a\u6cd5</p> <pre><code>class Solution {\npublic:\n    bool kmp(const string&amp; t) {\n        int m = t.size();\n        vector&lt;int&gt; next(m, -1);\n        for (int i = 1, j = -1; i &lt; m; i++) {\n            while (j != -1 &amp;&amp; t[i] != t[j + 1]) {\n                j = next[j];\n            }\n            if (t[i] == t[j + 1]) j++;\n            next[i] = j;\n        }\n\n        return next[m - 1] != -1 &amp;&amp; m % (m - next[m - 1] - 1) == 0;\n    }\n    bool repeatedSubstringPattern(string s) {\n        return kmp(s);\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#_11","title":"\u53cc\u6307\u9488\u6cd5\uff08\u6682\u65f6\u8df3\u8fc7\uff09","text":""},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#1_1","title":"1. \u79fb\u9664\u5143\u7d20","text":""},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#2_4","title":"2. \u53cd\u8f6c\u5b57\u7b26\u4e32","text":""},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#3_4","title":"3. \u66ff\u6362\u6570\u5b57","text":""},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#4_4","title":"4. \u7ffb\u8f6c\u5b57\u7b26\u4e32\u91cc\u7684\u5355\u8bcd","text":""},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#5_4","title":"5. \u7ffb\u8f6c\u94fe\u8868","text":""},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#6-n_1","title":"6. \u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2cN\u4e2a\u8282\u70b9","text":""},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#7_3","title":"7. \u94fe\u8868\u76f8\u4ea4","text":""},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#_12","title":"\u6808\u4e0e\u961f\u5217","text":"<p>\u6808\u662f\u5148\u8fdb\u540e\u51fa\uff0c\u50cf\u4e00\u4e2a\u5355\u53e3\u7684\u7f50\u5b50\uff0c\u6240\u4ee5\u5148\u653e\u8fdb\u53bb\u7684\u540e\u62ff\u51fa\u6765</p> <p>\u961f\u5217\u662f\u5148\u8fdb\u5148\u51fa\uff0c\u50cf\u53cc\u53e3\u7684\u7f50\u5b50\uff0c\u4ece\u4e0b\u9762\u63a5\u7740</p> <p>\u6808\u63d0\u4f9bpush \u548c pop \u7b49\u7b49\u63a5\u53e3\uff0c\u6240\u6709\u5143\u7d20\u5fc5\u987b\u7b26\u5408\u5148\u8fdb\u540e\u51fa\u89c4\u5219\uff0c\u6240\u4ee5\u6808\u4e0d\u63d0\u4f9b\u8d70\u8bbf\u529f\u80fd\uff0c\u4e5f\u4e0d\u63d0\u4f9b\u8fed\u4ee3\u5668(iterator)\u3002 \u4e0d\u50cf\u662fset \u6216\u8005map \u63d0\u4f9b\u8fed\u4ee3\u5668iterator\u6765\u904d\u5386\u6240\u6709\u5143\u7d20\u3002</p> <p>\u6808\u662fstack</p> <pre><code>queue, \u961f\u5217\uff0c\u5148\u8fdb\u5148\u51fa\uff0c\u6ca1\u6709clear\n    size()\n    empty()\n    push()  \u5411\u961f\u5c3e\u63d2\u5165\u4e00\u4e2a\u5143\u7d20\n    front()  \u8fd4\u56de\u961f\u5934\u5143\u7d20\n    back()  \u8fd4\u56de\u961f\u5c3e\u5143\u7d20\n    pop()  \u5f39\u51fa\u961f\u5934\u5143\u7d20\n    q = queue&lt;int&gt;(); \u80fd\u591f\u76f4\u63a5\u6e05\u7a7aq\uff0c\u800c\u4e0d\u9700\u8981\u7528\u5230clear\n\npriority_queue, \u4f18\u5148\u961f\u5217\uff0c\u9ed8\u8ba4\u662f\u5927\u6839\u5806\n    size()\n    empty()\n    push()  \u63d2\u5165\u4e00\u4e2a\u5143\u7d20\n    top()  \u8fd4\u56de\u5806\u9876\u5143\u7d20\n    pop()  \u5f39\u51fa\u5806\u9876\u5143\u7d20\n    \u5b9a\u4e49\u6210\u5c0f\u6839\u5806\u53ef\u4ee5\u5411\u91cc\u9762\u63d2\u5165-x\n    \u5b9a\u4e49\u6210\u5c0f\u6839\u5806\u7684\u65b9\u5f0f\uff1apriority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; q;\n\nstack, \u6808\n    size()\n    empty()\n    push()  \u5411\u6808\u9876\u63d2\u5165\u4e00\u4e2a\u5143\u7d20\n    top()  \u8fd4\u56de\u6808\u9876\u5143\u7d20\n    pop()  \u5f39\u51fa\u6808\u9876\u5143\u7d20\n</code></pre>"},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#2_5","title":"2. \u7528\u6808\u5b9e\u73b0\u961f\u5217","text":""},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#232-implement-queue-using-stacks","title":"232. Implement Queue using Stacks","text":"<pre><code>class MyQueue {\nprivate:\n    stack&lt;int&gt; inStack, outStack;\n    void inToOut() {\n        while (!inStack.empty()) {\n            outStack.push(inStack.top());\n            inStack.pop();\n        }\n    }\npublic:\n    MyQueue() {}\n\n    void push(int x) {\n        inStack.push(x);\n    }\n\n    int pop() {\n        if (outStack.empty()) {\n            inToOut();\n        }\n        int x = outStack.top();\n        outStack.pop();\n        return x;\n    }\n\n    int peek() {\n        if (outStack.empty()) {\n            inToOut();\n        }\n        return outStack.top(); \n    }\n\n    bool empty() {\n        return inStack.empty() &amp;&amp; outStack.empty();\n    }\n};\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * MyQueue* obj = new MyQueue();\n * obj-&gt;push(x);\n * int param_2 = obj-&gt;pop();\n * int param_3 = obj-&gt;peek();\n * bool param_4 = obj-&gt;empty();\n */\n</code></pre>"},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#3_5","title":"3. \u7528\u961f\u5217\u5b9e\u73b0\u6808","text":""},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#225-implement-stack-using-queues","title":"225. Implement Stack using Queues","text":"<pre><code>// \u53ea\u8981\u4fdd\u8bc1\u5165\u6808\u7684\u65f6\u5019\u6bcf\u4e2a\u5143\u7d20\u90fd\u5728\u961f\u52171\u7684\u6700\u524d\u9762\u5373\u53ef\nclass MyStack {\nprivate:\n    queue&lt;int&gt; q1, q2;\npublic:\n    MyStack() {}\n\n    void push(int x) {\n        q2.push(x);\n        while (!q1.empty()) {\n            q2.push(q1.front());\n            q1.pop();\n        }\n        swap(q1, q2);\n    }\n\n    int pop() {\n        int x = q1.front();\n        q1.pop();\n        return x;\n    }\n\n    int top() {\n        return q1.front();\n    }\n\n    bool empty() {\n        return q1.empty();\n    }\n};\n\n/**\n * Your MyStack object will be instantiated and called as such:\n * MyStack* obj = new MyStack();\n * obj-&gt;push(x);\n * int param_2 = obj-&gt;pop();\n * int param_3 = obj-&gt;top();\n * bool param_4 = obj-&gt;empty();\n */\n</code></pre>"},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#4_5","title":"4. \u6709\u6548\u7684\u62ec\u53f7","text":""},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#20-valid-parentheses","title":"20. Valid Parentheses","text":"<pre><code>class Solution {\npublic:\n    bool isValid(string s) {\n        stack&lt;char&gt; stk;\n\n        for (auto c : s) {\n            if (c == '(' || c == '[' || c == '{') stk.push(c);\n            else {\n                if (stk.size() &amp;&amp; abs(stk.top() - c) &lt;= 2) stk.pop();\n                else return false;\n            }\n        }\n\n        return stk.empty();\n    }\n};\n</code></pre> <p>### 5. \u5220\u9664\u5b57\u7b26\u4e32\u4e2d\u7684\u6240\u6709\u76f8\u90bb\u91cd\u590d\u9879</p>"},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#1047-remove-all-adjacent-duplicates-in-string","title":"1047. Remove All Adjacent Duplicates In String","text":"<pre><code>class Solution {\npublic:\n    string removeDuplicates(string s) {\n        string stack;\n        for (auto ch : s) {\n            if (stack.size() &amp;&amp; stack.back() == ch) {\n                stack.pop_back();\n            }\n            else {\n                stack.push_back(ch);\n            }\n        }\n        return stack;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#6_1","title":"6. \u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u6c42\u503c","text":""},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#7_4","title":"7. \u6ed1\u52a8\u7a97\u53e3\u6700\u5927\u503c","text":""},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#8-k","title":"8. \u524dk\u4e2a\u9ad8\u9891\u5143\u7d20","text":""},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#_13","title":"\u52a8\u6001\u89c4\u5212","text":""},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#_14","title":"\u57fa\u7840\u9898\u76ee","text":""},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#2_6","title":"2. \u6590\u6ce2\u90a3\u5951\u6570","text":""},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#509-fibonacci-number","title":"509. Fibonacci Number","text":"<pre><code>class Solution {\npublic:\n    int fib(int n) {\n        // f[i] = f[i - 1] + f[i - 2]\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        int f0 = 0;\n        int f1 = 1;\n        for (int i = 0; i &lt; n - 1; i++) {\n            int new_f = f0 + f1;\n            f0 = f1;\n            f1 = new_f;\n        }\n        return f1;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#3_6","title":"3. \u722c\u697c\u68af","text":""},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#70-climbing-stairs","title":"70. Climbing Stairs","text":"<pre><code>class Solution {\npublic:\n    int climbStairs(int n) {\n        if (n &lt;= 2) return n;\n        // f[i] = f[i - 1] + f[i - 2]\n        int f[n + 1];\n        f[1] = 1;\n        f[2] = 2;\n        for (int i = 3; i &lt;= n; i++) {\n            f[i] = f[i - 1] + f[i - 2];\n        }\n        return f[n];\n    }\n};\n</code></pre> <p>\u4f18\u5316\u4e00\u4e0b\u7a7a\u95f4\uff1a</p> <pre><code>class Solution {\npublic:\n    int climbStairs(int n) {\n        if (n &lt;= 2) return n;\n        // f[i] = f[i - 1] + f[i - 2]\n        // int f[n + 1];\n        int f1 = 1;\n        int f2 = 2;\n        for (int i = 3; i &lt;= n; i++) {\n            int f3 = f2 + f1;\n            f1 = f2;\n            f2 = f3;\n        }\n        return f2;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#4_6","title":"4. \u4f7f\u7528\u6700\u5c0f\u82b1\u8d39\u722c\u697c\u68af","text":""},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#746-min-cost-climbing-stairs","title":"746. Min Cost Climbing Stairs","text":"<pre><code>class Solution {\npublic:\n    int minCostClimbingStairs(vector&lt;int&gt;&amp; cost) {\n        int n = cost.size();\n        // f[i]\u4ee3\u8868\u7684\u662f\u6700\u5c0f\u82b1\u8d39\n        // f[i] = min(f[i - 1] + cost[i - 1], f[i - 2] + cost[i - 2]);\n        // \u9700\u8981\u5230\u8fbe\u7684\u662fcost.size() + 1\n        int f[n + 1];\n        f[0] = 0;\n        f[1] = 0;\n        for (int i = 2; i &lt; n + 1; i++) {\n            f[i] = min(f[i - 1] + cost[i - 1], f[i - 2] + cost[i - 2]);\n        }\n        return f[n];\n    }\n};\n</code></pre> <p>\u4f18\u5316\u4e00\u4e0b\u7a7a\u95f4\uff1a</p> <pre><code>class Solution {\npublic:\n    int minCostClimbingStairs(vector&lt;int&gt;&amp; cost) {\n        int n = cost.size();\n        // f[i]\u4ee3\u8868\u7684\u662f\u6700\u5c0f\u82b1\u8d39\n        // f[i] = min(f[i - 1] + cost[i - 1], f[i - 2] + cost[i - 2]);\n        // \u9700\u8981\u5230\u8fbe\u7684\u662fcost.size() + 1\n        // int f[n + 1];\n        int f0 = 0;\n        int f1 = 0;\n        for (int i = 2; i &lt; n + 1; i++) {\n            int new_f = min(f1 + cost[i - 1], f0 + cost[i - 2]);\n            f0 = f1;\n            f1 = new_f;\n        }\n        return f1;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#6_2","title":"6. \u4e0d\u540c\u8def\u5f84","text":""},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#62-unique-paths","title":"62. Unique Paths","text":"<pre><code>class Solution {\npublic:\n    int uniquePaths(int m, int n) {\n        vector&lt;vector&lt;int&gt;&gt; f(m, vector&lt;int&gt;(n));\n        // f[i][j] = f[i - 1]f[j] + f[i][j - 1]\n        f[0][0] = 1;\n        for (int i = 0; i &lt; m; i++) f[i][0] = 1;\n        for (int i = 0; i &lt; n; i++) f[0][i] = 1;\n        for (int i = 1; i &lt; m; i++) {\n            for (int j = 1; j &lt; n; j++) {\n                f[i][j] = f[i - 1][j] + f[i][j - 1];\n            }\n        }\n        return f[m - 1][n - 1];\n    }\n};\n</code></pre> <p>\u4f18\u5316\u7a7a\u95f4\uff1a</p> <pre><code>class Solution {\npublic:\n    int uniquePaths(int m, int n) {\n        vector&lt;int&gt; f(n);\n        // f[i][j] = f[i - 1]f[j] + f[i][j - 1]\n        // \u5c06[i]\u4f18\u5316\u6389\u56e0\u4e3a\u5bf9\u4e8e\u6bcf\u4e2a\u5faa\u73af\u6765\u8bf4f[i][j] = f[i - 1][j]\n        f[0] = 1;\n        // for (int i = 0; i &lt; m; i++) f[i][0] = 1;\n        for (int i = 0; i &lt; n; i++) f[i] = 1;\n        for (int i = 1; i &lt; m; i++) {\n            for (int j = 1; j &lt; n; j++) {\n                f[j] = f[j] + f[j - 1];\n            }\n        }\n        return f[n - 1];\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#7-ii","title":"7. \u4e0d\u540c\u8def\u5f84II","text":""},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#63-unique-paths-ii","title":"63. Unique Paths II","text":"<pre><code>class Solution {\npublic:\n    int uniquePathsWithObstacles(vector&lt;vector&lt;int&gt;&gt;&amp; obstacleGrid) {\n        int m = obstacleGrid.size();\n        int n = obstacleGrid[0].size();\n        vector&lt;vector&lt;int&gt;&gt; f(m, vector&lt;int&gt;(n));\n        if (obstacleGrid[0][0] == 1) return 0;\n        f[0][0] = 1;\n        for (int i = 1; i &lt; n; i++) f[0][i] = obstacleGrid[0][i] == 1 ? 0 : f[0][i - 1];\n        for (int i = 1; i &lt; m; i++) f[i][0] = obstacleGrid[i][0] == 1 ? 0 : f[i - 1][0];\n        for (int i = 1; i &lt; m; i++) {\n            for (int j = 1; j &lt; n; j++) {\n                f[i][j] = f[i - 1][j] + f[i][j - 1];\n                if (obstacleGrid[i][j] == 1) f[i][j] = 0;\n            }\n        }\n        return f[m - 1][n - 1];\n    }\n};\n</code></pre> <p>\u7528\u6eda\u52a8\u6570\u7ec4\u4f18\u5316\u4e00\u4e0b\u7a7a\u95f4\uff1a</p> <p>\u4e00\u5b9a\u4e00\u5b9a\u6ce8\u610f\u5bf9f[0]\u7684\u5904\u7406\uff01\uff01\uff01</p> <p>\u5728\u7a7a\u95f4\u4f18\u5316\u7248\u672c\u4e2dj \u5e94\u8be5\u4ece0\u5f00\u59cb\u5904\u7406\uff01\uff01 </p> <pre><code>class Solution {\npublic:\n    int uniquePathsWithObstacles(vector&lt;vector&lt;int&gt;&gt;&amp; obstacleGrid) {\n        int m = obstacleGrid.size();\n        int n = obstacleGrid[0].size();\n        // vector&lt;vector&lt;int&gt;&gt; f(m, vector&lt;int&gt;(n));\n        vector&lt;int&gt; f(n);\n        if (obstacleGrid[0][0] == 1) return 0;\n        f[0] = 1;\n        // for (int i = 1; i &lt; n; i++) f[0][i] = obstacleGrid[0][i] == 1 ? 0 : f[0][i - 1];\n        for (int i = 1; i &lt; n; i++) f[i] = obstacleGrid[0][i] == 1 ? 0 : f[i - 1];\n        // for (int i = 1; i &lt; m; i++) f[i][0] = obstacleGrid[i][0] == 1 ? 0 : f[i - 1][0];\n        for (int i = 1; i &lt; m; i++) {\n            for (int j = 0; j &lt; n; j++) {\n                if (j != 0) f[j] = f[j] + f[j - 1];\n                if (obstacleGrid[i][j] == 1) f[j] = 0;\n            }\n        }\n        return f[n - 1];\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#8_1","title":"8. \u6574\u6570\u62c6\u5206","text":""},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#343-integer-break","title":"343. Integer Break","text":"<pre><code>class Solution {\npublic:\n    int integerBreak(int n) {\n        // k\u662f\u5927\u4e8e0\u5c0f\u4e8ei\u7684\u6570\n        // f[i]\u8868\u793a\u7684\u662fi\u80fd\u5f97\u5230\u7684\u6700\u5927\u4e58\u79ef\n        // f[i] = max(f[i - k] * (k))\n        vector&lt;int&gt; f(59);\n        f[1] = 1;\n        for (int i = 2; i &lt; 59; i++) {\n            int tmp = 0;\n            for (int j = 1; j &lt; i; j++) {\n                tmp = max(f[j] * (i - j), tmp);\n                tmp = max(j * (i - j), tmp);\n            }\n            f[i] = tmp;\n        }\n        return f[n];\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#9_1","title":"9. \u4e0d\u540c\u7684\u4e8c\u53c9\u641c\u7d22\u6811","text":""},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#96-unique-binary-search-trees","title":"96. Unique Binary Search Trees","text":"<pre><code>class Solution {\npublic:\n    int numTrees(int n) {\n        // \u5229\u7528\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6027\u8d28\uff1a\u5728\u4efb\u610f\u5b50\u6811\u7684\u9876\u70b9\u5de6\u8fb9\u7684\u6570\u5fc5\u7136\u5c0f\u4e8e\u9876\u70b9\uff0c\u5728\u4efb\u610f\u5b50\u6811\u9876\u70b9\u53f3\u8fb9\u7684\u6570\u5fc5\u7136\u5927\u4e8e\u9876\u70b9\n        // \u76f4\u63a5\u5206\u5272\u6574\u6570\u6570\u6bb5\u8fdb\u884c\u5206\u5272\n        // f[k] = f[n - k] * f[0 - k - 1]\n\n        vector&lt;int&gt; f(20);\n        f[0] = 1;\n        f[1] = 1;\n\n        for (int i = 2; i &lt;= 19; i++) {\n            int sum = 0;\n            for (int j = 1; j &lt;= i; j++) {\n                sum += f[j - 1] * f[i - j];\n            }\n            f[i] = sum;\n        }\n        return f[n];\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#01","title":"01\u80cc\u5305","text":""},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#13","title":"13. \u5206\u5272\u7b49\u548c\u5b50\u96c6","text":""},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#416-partition-equal-subset-sum","title":"416. Partition Equal Subset Sum","text":"<pre><code>class Solution {\npublic:\n    bool canPartition(vector&lt;int&gt;&amp; nums) {\n        int sum = 0, size = nums.size();\n\n        for (int n : nums) sum += n;\n\n        if (sum % 2 == 1) return false;\n        else sum /= 2;\n\n        vector&lt;int&gt; f(sum + 1);\n\n        for (int i = 0; i &lt; sum + 1; i++) f[i] = 0;\n        // for (int i = 0; i &lt; size + 1; i++) f[i][0] = 0;\n\n        for (int i = 1; i &lt;= size; i++) {\n            for (int j = sum; j &gt;= nums[i - 1]; j--) {\n                // f[i][j] = f[i - 1][j];\n                f[j] = max(f[j], f[j - nums[i - 1]] + nums[i - 1]);\n            }\n        }\n        if (f[sum] == sum) return true;\n        else return false;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#14-ii","title":"14. \u6700\u540e\u4e00\u5757\u77f3\u5934\u7684\u91cd\u91cfII","text":""},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#1049-last-stone-weight-ii","title":"1049. Last Stone Weight II","text":"<pre><code>class Solution {\npublic:\n    int lastStoneWeightII(vector&lt;int&gt;&amp; stones) {\n        // \u505a\u5b8c\u4e4b\u540e\u7684\u5408\u6cd5\u6027\u8bc1\u660e\uff1a\u5b9e\u9645\u4e0a\u662f\u6700\u540e\u4e24\u5806\u77f3\u5934\u7684\u5dee\u503c\u6700\u5c0f\uff0c\u6240\u4ee52225\u8fd9\u4e2a\u60c5\u51b5\uff0c\u9700\u8981\u770b\u7684\u662f\u5dee\u7684\u7edd\u5bf9\u503c\u6700\u5c0f\u5373\u53efabs(5-2-2-2) = 1\u5c31\u884c\n\n\n        // \u6240\u6709\u7684\u65b9\u6848\u6700\u540e\u90fd\u80fd\u88ab\u5316\u7b80\u4e3a(x + x + x) - (y + y + y)\n        // \u8bc1\u660e\uff1a\u53ea\u8981\u5de6\u8fb9\u5927\u4e8e\u7b49\u4e8e\u53f3\u8fb9\uff0c\u5c31\u53ef\u4ee5\u505a\u5230\uff1b\u5982\u679c\u53f3\u8fb9\u5927\u4e8e\u5de6\u8fb9\uff0c\u90a3\u4e48\u4e92\u6362\u4f4d\u7f6e\u5373\u53ef\uff1b\n        // \u5982\u679c\u5de6\u8fb9\u7684\u6570\u91cf\u5927\u4e8e\u53f3\u8fb9\uff0c\u6bd4\u59822, 2, 2, 5\uff0c\u6700\u5c0f\u503c\u662f2+2+2-5\uff0c\u4e09\u4e2a2\u4e0d\u80fd\u878d\u5408\u600e\u4e48\u529e\uff1f\u2014\u2014\u5de6\u53f3\u4e92\u6362\u7b54\u6848\u4e00\u81f4\u7684\n        // \u6240\u4ee5\u6700\u540e\u53ea\u8981\u627e\u5230\u6240\u6709\u6570\u4e2d\u6700\u63a5\u8fd1\u603b\u548c\u4e00\u822c\u7684\u7ec4\u5408\u5373\u53ef\n        int sum = 0, n = stones.size();\n        for (auto stone : stones) sum += stone;\n        int ans = sum;\n        sum /= 2;\n        vector&lt;vector&lt;int&gt;&gt; f(n + 1, vector&lt;int&gt;(sum + 1));\n        // vector\u81ea\u52a8\u662f0\uff0c\u5c31\u4e0d\u8bbe\u7f6e\u4e86\n        for (int i = 1; i &lt; n + 1; i++) {\n            for (int j = 1; j &lt; sum + 1; j++) {\n                f[i][j] = f[i - 1][j];\n                if (j &gt;= stones[i - 1]) f[i][j] = max(f[i][j], f[i - 1][j - stones[i - 1]] + stones[i - 1]);\n            }\n        }\n        cout &lt;&lt; \"sum: \" &lt;&lt; sum &lt;&lt; endl;\n        cout &lt;&lt; \"ans: \" &lt;&lt; ans &lt;&lt; endl;\n        cout &lt;&lt; \"f[n][sum]: \" &lt;&lt; f[n][sum] &lt;&lt; endl;\n        return ans - f[n][sum] * 2;\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#16","title":"16. \u76ee\u6807\u548c","text":""},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#494-target-sum","title":"494. Target Sum","text":""},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#1_2","title":"1. \u4e8c\u7ef4\u76f4\u89c2\u5199\u6cd5","text":"<pre><code>class Solution {\npublic:\n    int findTargetSumWays(vector&lt;int&gt;&amp; nums, int target) {\n        // if (target &lt; -1000 || target &gt; 1000) return 0;\n        // \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u6570\u76f8\u5f53\u4e8e\u5bf9\u5e94\u4e24\u4e2a\u72b6\u6001\uff0c\u4e00\u4e2a\u662f\u52a0\u4e00\u4e2a\u662f\u51cf\uff0c\u5bf9\u5e94\u5230\u539f\u59cb01\u80cc\u5305\u4e2d\u4e00\u4e2a\u662f\u9009\u4e00\u4e2a\u662f\u4e0d\u9009\n        // f[i][j]\u8868\u793a\u7684\u662f\u52a0\u6216\u51cf\u7b2ci\u4e2a\u6570\uff0c\u5f97\u5230\u7684\u548c\u4e3aj\u7684\u96c6\u5408\uff0c\u4ee5\u53ca\u96c6\u5408\u7684\u6570\u91cf\n        // f[i][j] = f[i - 1][j - nums[i]] + f[i - 1][j + nums[i]]\n        // \u6ce8\u610f\u5230sum\u7684\u53d6\u503c\u8303\u56f4\u548ctarget\u7684\u53d6\u503c\u8303\u56f4\uff0c\u90a3\u4e48j\u7684\u53d6\u503c\u8303\u56f4\u5176\u5b9e\u662f-sum ~ sum\n        // j &gt;= -1000 &amp;&amp; j &lt;= 1000\n        int n = nums.size();\n        vector&lt;vector&lt;int&gt;&gt; f(n + 1, vector&lt;int&gt;(2001));\n        // -1000 + 1000 = 0\n        int Offset = 1000;\n        f[0][0 + Offset] = 1;\n        for (int i = 1; i &lt; n + 1; i++) {\n            for (int j = -1000; j &lt;= 1000 ; j++) {\n                if (j - nums[i - 1] &gt;= -1000) {\n                    f[i][j + Offset] += f[i - 1][j - nums[i - 1] + Offset];\n                }\n                if (j + nums[i - 1] &lt;= 1000) {\n                    f[i][j + Offset] += f[i - 1][j + nums[i - 1] + Offset];\n                }\n            }\n        }\n        return f[n][target + Offset];\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#2_7","title":"2. \u4e00\u7ef4\u63a8\u5bfc\u505a\u6cd5","text":"<pre><code>class Solution {\npublic:\n    int findTargetSumWays(vector&lt;int&gt;&amp; nums, int target) {\n        // \u603b\u548c\u4e3as\uff0c\u6b63\u6570\u548c\u4e3ap\uff0c\u8d1f\u6570\u548c-(s - p)\n        // p - (s - p) = target\n        // 2p = target + s\n        // p = (target + s) / 2\n        // f[i][j]\u5c31\u662f\u524di\u4e2a\u6570\u4e2d\uff0c\u548c\u7b49\u4e8ej\u7684\u65b9\u6848\uff0c\u5c5e\u6027\u662f\u65b9\u6848\u7684\u6570\u91cf\n        // p &gt;= 0 &amp;&amp; p &lt;= 1000\n        int sum = target, n = nums.size();\n        for (int num : nums) sum += num;\n        if (sum % 2 == 1 || sum &lt; 0) return 0;\n        sum /= 2;\n        vector&lt;vector&lt;int&gt;&gt; f(n + 1, vector&lt;int&gt;(sum + 1));\n        f[0][0] = 1;\n        for (int i = 1; i &lt;= n; i++) {\n            for (int j = 0; j &lt; sum + 1; j++) {\n                f[i][j] += f[i - 1][j];\n                if (j &gt;= nums[i - 1]) f[i][j] += f[i - 1][j - nums[i - 1]];\n            }\n        }\n        return f[n][sum];\n\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#3-dfs","title":"3. dfs\u505a\u6cd5","text":"<pre><code>class Solution {\npublic:\n    int findTargetSumWays(vector&lt;int&gt;&amp; nums, int target) {\n        // \u6240\u6709\u7684\u6b63\u6570\u548c\u4e3ap\uff0c\u6240\u6709\u7684\u8d1f\u6570\u548c\u4e3as - p\uff0c\u90a3\u4e48p - (s- p) = target\n        // \u6240\u4ee5\u6240\u6709\u6b63\u6570\u7684\u548cp = (target + s) / 2\n        target += accumulate(nums.begin(), nums.end(), 0);\n        if (target &lt; 0 || target % 2 == 1) return 0;\n        target /= 2;\n        int n = nums.size();\n        // n\u7684\u539f\u56e0\u662f\u53ea\u8981\u5728\u78b0\u5230\u6a2a\u5750\u6807\u5c0f\u4e8e0\u7684\u65f6\u5019\uff0c\u5982\u679ctarget\u53ea\u5269\u4e0b0\u4e86\u90a3\u4e48\u5c31\u8fd4\u56de1\uff0c\u5982\u679c\u5269\u4e0b\u8fd8\u6709\u591a\u4f59\uff0c\u90a3\u4e48\u8fd4\u56de0\n        // c++\u4e2dtrue\u662f1\uff0cfalse\u662f0\n        // target + 1\u7684\u539f\u56e0\u662f\u9700\u8981\u8ba1\u7b97\u7684\u65f6\u4ece0\u5230target\u7684\u6240\u6709\u65b9\u6848\u4e2a\u6570\n        vector&lt;vector&lt;int&gt;&gt; f(n, vector&lt;int&gt;(target + 1, -1));\n        function&lt;int(int, int)&gt; dfs = [&amp;] (int i, int c) -&gt; int{\n            if (i &lt; 0) return c == 0;\n            int &amp;res = f[i][c];\n            if (res != -1) return res;\n            if (nums[i] &gt; c) return res = dfs(i - 1, c);\n            else return res = dfs(i - 1, c) + dfs(i - 1, c - nums[i]);\n\n        };\n        return dfs(n - 1, target);\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#17","title":"17. \u4e00\u548c\u96f6 \uff08\u4e8c\u7ef4\u8d39\u7528\u7684\u80cc\u5305\u95ee\u9898\uff09","text":""},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#474-ones-and-zeroes","title":"474. Ones and Zeroes","text":"<pre><code>class Solution {\npublic:\n    int findMaxForm(vector&lt;string&gt;&amp; strs, int m, int n) {\n        vector&lt;vector&lt;int&gt;&gt; f(m + 1, vector&lt;int&gt;(n + 1));\n        for (auto str : strs) {\n            int zeros = 0, ones = 0;\n            for (auto c : str) {\n                if (c == '0') zeros++;\n                else ones++;\n            }\n            for (int i = m; i &gt;= zeros; i--) {\n                for (int j = n; j &gt;= ones; j--) {\n                    f[i][j] = max(f[i][j], f[i - zeros][j - ones] + 1);\n                }\n            }\n\n        }\n        return f[m][n];\n    }\n};\n</code></pre>"},{"location":"Problem/programmercarl/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#_15","title":"\u4e8c\u7ef4\u80cc\u5305\u95ee\u9898\u7684\u4ee3\u7801\u6a21\u677f","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nconst int N = 110;\n\nint n, V, M;\nint f[N][N];\nint main () {\n    cin &gt;&gt; n &gt;&gt; V &gt;&gt; M;\n    for (int i = 0; i &lt; n; i++) {\n        int v, m, w;\n        cin &gt;&gt; v &gt;&gt; m &gt;&gt; w;\n        for (int j = V; j &gt;= v; j--) {\n            for (int k = M; k &gt;= m; k--) {\n                f[j][k] = max(f[j][k], f[j - v][k - m] + w);\n            }\n        }\n    }\n    cout &lt;&lt; f[V][M] &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"Problem/skill/skills/","title":"\u4e00\u4e9b\u5c0f\u6280\u5de7","text":""},{"location":"Problem/skill/skills/#tips","title":"tips","text":"<ol> <li>\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\u7684\u5404\u4f4d\uff0c\u76f4\u63a5<code>char str[n]</code>\uff0c\u7136\u540e\u8f93\u51fa\u5373\u53ef\uff0c\u5f53\u6210int\u5904\u7406\u53cd\u800c\u9ebb\u70e6</li> </ol>"},{"location":"Problem/skill/skills/#c","title":"C++ \u4e2d\u5404\u79cd\u53d6\u6574","text":"<pre><code>// \u5f15\u5165\u5934\u6587\u4ef6\n#include &lt;cmath&gt;\n#incldue &lt;math.h&gt;\nfloor() // \u4e0d\u5927\u4e8e\u81ea\u53d8\u91cf\u7684\u6700\u5927\u6574\u6570\nceil() // \u4e0d\u5c0f\u4e8e\u81ea\u53d8\u91cf\u7684\u6700\u5927\u6574\u6570\nround() // \u56db\u820d\u4e94\u5165\nfix() // \u54110\u53d6\u6574\n</code></pre> <p>\u5411\u4e0a\u53d6\u6574\u6280\u5de7\uff1a</p> <pre><code>// \u6ce8\u610fC++\u91cc\u9762/\u662f\u5411\u4e0b\u53d6\u6574\uff0c\u53739/4=2\n#include &lt;cmath&gt;\nceil((double) 9 / 4) // \u8f93\u51fa3\n//\u6216\u8005\u4f7f\u7528\uff08\u88ab\u9664\u6570 + \u9664\u6570 - 1\uff09/\u9664\u6570 = \u5411\u4e0a\u53d6\u6574\nint res = (9 + 4 - 1) / 4 // \u8f93\u51fa3\n</code></pre>"},{"location":"Problem/skill/skills/#_2","title":"\u7b80\u5355\u7684\u53cc\u6307\u9488\u6765\u5c06\u6570\u7ec4\u4e2d\u7684\u5947\u5076\u8fdb\u884c\u5de6\u53f3\u5206\u7c7b","text":"<pre><code>// \u53cc\u6307\u9488\u6cd5\u5c06\u6240\u6709\u6570\u8fdb\u884c\u5947\u5076\u6392\u5e8f\uff0c\u5947\u6570\u5728\u5de6\u8fb9\uff0c\u5076\u6570\u5728\u53f3\u8fb9\n    int l = 0, r = 5;\n    while (l &lt; r) {\n        bool leftIsOdd = num[l] % 2 == 1;\n        bool rightIsEven = num[r] % 2 == 0;\n        if (leftIsOdd) {\n            l++;\n        } else if (rightIsEven) {\n            r--;\n        } else if (!leftIsOdd &amp; !rightIsEven) {\n            int tmp = num[l];\n            num[l] = num[r];\n            num[r] = tmp;\n        }\n    }\n</code></pre>"},{"location":"Problem/skill/skills/#c_1","title":"C++\u4e2d\u7edd\u5bf9\u503c","text":"<pre><code>#include &lt;iostream&gt; \u4e2d abs() \u5bf9\u6574\u6570\u8fdb\u884c\u7edd\u5bf9\u503c\n#include &lt;cmath&gt; \u4e2dfabs() \u5bf9\u6d6e\u70b9\u578b\u8fdb\u884c\u7edd\u5bf9\u503c\n</code></pre>"},{"location":"Problem/skill/skills/#_3","title":"\u8d28\u56e0\u6570\u95ee\u9898","text":"<p>tips\uff1a\u4f7f\u7528\u53cd\u8bc1\u6cd5\u6613\u5f97\uff0c\u4e00\u4e2a\u6570a\u53ea\u4f1a\u6709\u4e00\u4e2a\u5927\u4e8e<code>a^1/2\u7684\u56e0\u6570</code>\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u8ba8\u8bba\u4ece2\u5230<code>a^1/2</code>\u5c31\u884c\uff0c\u7136\u540e\u518d\u5355\u72ec\u8ba8\u8bba1\u548c\u5927\u4e8e\u6839\u53f7a\u7684\u60c5\u51b5\uff0c\u5343\u4e07\u4e0d\u8981\u5fd8\u8bb0\u5927\u4e8e\u6839\u53f7a\u7684\u90a3\u4e2a\u6570</p> <p>\u8d28\u56e0\u6570\u4e0d\u5305\u542b1\uff0c\u56e0\u6570\u5305\u542b1</p>"},{"location":"Problem/skill/skills/#acwing-867","title":"AcWing 867. \u5206\u89e3\u8d28\u56e0\u6570","text":"<p>\u7ed9\u5b9a n \u4e2a\u6b63\u6574\u6570 ai\uff0c\u5c06\u6bcf\u4e2a\u6570\u5206\u89e3\u8d28\u56e0\u6570\uff0c\u5e76\u6309\u7167\u8d28\u56e0\u6570\u4ece\u5c0f\u5230\u5927\u7684\u987a\u5e8f\u8f93\u51fa\u6bcf\u4e2a\u8d28\u56e0\u6570\u7684\u5e95\u6570\u548c\u6307\u6570\u3002</p>"},{"location":"Problem/skill/skills/#_4","title":"\u8f93\u5165\u683c\u5f0f","text":"<p>\u7b2c\u4e00\u884c\u5305\u542b\u6574\u6570 n\u3002</p> <p>\u63a5\u4e0b\u6765 n \u884c\uff0c\u6bcf\u884c\u5305\u542b\u4e00\u4e2a\u6b63\u6574\u6570 ai\u3002</p>"},{"location":"Problem/skill/skills/#_5","title":"\u8f93\u51fa\u683c\u5f0f","text":"<p>\u5bf9\u4e8e\u6bcf\u4e2a\u6b63\u6574\u6570 ai\uff0c\u6309\u7167\u4ece\u5c0f\u5230\u5927\u7684\u987a\u5e8f\u8f93\u51fa\u5176\u5206\u89e3\u8d28\u56e0\u6570\u540e\uff0c\u6bcf\u4e2a\u8d28\u56e0\u6570\u7684\u5e95\u6570\u548c\u6307\u6570\uff0c\u6bcf\u4e2a\u5e95\u6570\u548c\u6307\u6570\u5360\u4e00\u884c\u3002</p> <p>\u6bcf\u4e2a\u6b63\u6574\u6570\u7684\u8d28\u56e0\u6570\u5168\u90e8\u8f93\u51fa\u5b8c\u6bd5\u540e\uff0c\u8f93\u51fa\u4e00\u4e2a\u7a7a\u884c\u3002</p>"},{"location":"Problem/skill/skills/#_6","title":"\u6570\u636e\u8303\u56f4","text":"<p>1\u2264n\u2264100, 2\u2264ai\u22642\u00d7109</p>"},{"location":"Problem/skill/skills/#_7","title":"\u8f93\u5165\u6837\u4f8b\uff1a","text":"<pre><code>2\n6\n8\n</code></pre>"},{"location":"Problem/skill/skills/#_8","title":"\u8f93\u51fa\u6837\u4f8b\uff1a","text":"<pre><code>2 1\n3 1\n\n2 3\n</code></pre> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main () {\n    int n;\n    scanf(\"%d\", &amp;n);\n    while (n--) {\n        int a;\n        scanf(\"%d\", &amp;a);\n        for (int i = 2; i &lt;= a/i; i++) {\n            int e = 0;\n            if (a % i != 0) continue;\n            else {\n                while (a % i == 0) {\n                    e += 1;\n                    a /= i;\n                }\n            }\n            cout &lt;&lt; i &lt;&lt; ' ' &lt;&lt; e &lt;&lt; endl;\n        }\n        if (a &gt; 1) cout &lt;&lt; a &lt;&lt; ' ' &lt;&lt; 1 &lt;&lt; endl;\n        cout &lt;&lt; endl;\n    }\n\n}\n</code></pre>"},{"location":"Project/ant/","title":"Frontend","text":""},{"location":"Project/ant/#_1","title":"\u652f\u4ed8\u5b9d\u524d\u7aef\u524d\u950b\u8425","text":""},{"location":"Project/ant/#html-","title":"HTML - \u963f\u76f8","text":""},{"location":"Project/ant/#1-csbs","title":"1. CS/BS\u67b6\u6784","text":"<p>CS client server\u5ba2\u6237\u7aef\u5f00\u53d1\uff1a\uff08\u7f51\u7edc\u6e38\u620f\u3001\u804a\u5929\u8f6f\u4ef6\u3001\u89c6\u9891\u8f6f\u4ef6\uff09</p> <ol> <li> <p>\u7814\u53d1\u6210\u672c\u9ad8\uff0c\u4e0d\u540c\u5ba2\u6237\u7aef\uff0c\u4e0d\u540c\u8bed\u8a00</p> </li> <li> <p>\u5ba2\u6237\u7aef\u5b89\u88c5\u3001\u5347\u7ea7\u6210\u672c\u9ad8</p> </li> </ol> <p>BS browser server\uff1a\u76f4\u63a5\u7684\u7f51\u9875\u5185\u5bb9\uff08\u793e\u4ea4\u7f51\u7ad9\u3001\u641c\u7d22\u5f15\u64ce\u3001\u4e2a\u4eba\u535a\u5ba2\uff09</p> <ol> <li>\u8d44\u6e90\u52a0\u8f7d\u6162\uff0c\u4f9d\u8d56\u7f51\u901f</li> <li>\u7aef\u4fa7\u6e32\u67d3\u6027\u80fd\u76f8\u5bf9\u8f83\u5f31</li> <li>\u89e3\u51b3\u7814\u53d1\u6210\u672c\u9ad8\u7684\u95ee\u9898</li> <li>\u4e0d\u9700\u8981\u66f4\u65b0\u7684\u95ee\u9898\uff0c\u56e0\u4e3a\u7f51\u9875\u7248\u90fd\u662f\u76f4\u63a5\u62ff\u53d6\u7684</li> </ol> <p>\u72ed\u4e49\u7684\u524d\u7aef\uff1a</p> <p>HTML\uff1a\u9875\u9762\u5185\u5bb9</p> <p>CSS\uff1a\u9875\u9762\u592e\u89c6</p> <p>Javascript\uff1a\u9875\u9762\u903b\u8f91</p>"},{"location":"Project/ant/#2","title":"2. \u8de8\u5e73\u53f0\u5f00\u53d1","text":"<p>\u652f\u4ed8\u5b9d\u9996\u9875\u53ef\u4ee5\u4f7f\u7528\u652f\u4ed8\u5b9d\u6253\u5f00\u767e\u5ea6</p> <p>\u652f\u4ed8\u5b9d\u5b9e\u9645\u4e0a\u662f\u5185\u5d4c\u4e86\u4e00\u4e2a\u6d4f\u89c8\u5668</p> <p>\u542c\u8bf4\u624b\u673a\u4e0a\u7684APP\u91cd\u590d\u88c5\u4e86\u5341\u51e0\u4e2achrome\u5185\u6838</p> <p>\u6709\u4e9b\u8f6f\u4ef6\u4f1a\u76f4\u63a5\u8c03\u7528safari\u7684\u5185\u6838</p> <p>app\u4f53\u79ef\u5927\u7684\u539f\u56e0\u4e4b\u4e00</p> <p>\u5c0f\u7a0b\u5e8f\u4e5f\u5c5e\u4e8eweb\u6280\u672f</p> <p>\u652f\u4ed8\u5b9d\u7684\u5927\u90e8\u5206\u529f\u80fd\u90fd\u662f\u901a\u8fc7\u6d4f\u89c8\u5668\u52a0\u8f7d\u7684\uff0c\u5c31\u4e0d\u7528\u5173\u5fc3\u7cfb\u7edf\u662fIOS\u8fd8\u662fAndroid\uff0c\u8282\u7ea6\u4e86\u5f88\u5927\u7684\u6210\u672c</p> <p>\u5236\u7ea6\uff1a</p> <ol> <li>\u80fd\u8c03\u7528\u7684\u7cfb\u7edfapi\u6bd4\u8f83\u5c11\uff0c\u6bd4\u5982\u8c03\u7528\u62cd\u7167\u3001\u8bfb\u53d6\u6587\u4ef6--JS Bridge</li> <li>\u52a0\u8f7d\u7f51\u7edc\u901f\u5ea6\u8f83\u6162--\u79bb\u7ebf\u5305\u6280\u672f</li> <li>\u4f9d\u8d56\u6d4f\u89c8\u5668\u7684UI\u6e32\u67d3\uff0c\u6027\u80fd\u53d7\u9650\u4e8e\u6d4f\u89c8\u5668--\u540c\u5c42\u6e32\u67d3</li> </ol>"},{"location":"Project/ant/#3-nodejs","title":"3. Node.js","text":"<p>\u8ba9\u524d\u7aef\u4e0d\u4ec5\u5c40\u9650\u4e8e\u5ba2\u6237\u7aef</p> <p>\u670d\u52a1\u5668--\u7f51\u7edc--\u6d4f\u89c8\u5668--\u7f51\u9875\u5185\u5bb9</p> <p>\u6d4f\u89c8\u5668\uff1a\uff08C/C++\uff09</p> <ol> <li>\u8fde\u63a5\u7f51\u7edc</li> <li>\u6267\u884cHTML/CSS\u7ed8\u5236\u9875\u9762</li> <li>\u6267\u884cJS\u5904\u7406\u903b\u8f91</li> <li>\u672c\u5730\u6587\u4ef6\u7684\u8bfb\u53d6</li> </ol> <p>\u524d\u7aef\uff08HTML/CSS/Javascript\uff09</p> <ol> <li>\u5904\u7406UI\u4ea4\u4e92\u903b\u8f91</li> <li>\u8c03\u7528\u670d\u52a1\u7aef\u63a5\u53e3</li> <li>\u9875\u9762UI\u7684\u7ed8\u5236</li> </ol> <p>\u670d\u52a1\u5668\uff1a\uff08java/c++\uff09</p> <ol> <li>\u5904\u7406\u4e1a\u52a1\u903b\u8f91</li> <li>\u6570\u636e\u7684\u5929\u5220\u6539\u67e5</li> <li>\u672c\u5730\u6587\u4ef6\u7684\u8bfb\u5199</li> <li>\u63d0\u4f9b\u7f51\u7edc\u63a5\u53e3</li> </ol> <p>\u628a\u6d4f\u89c8\u5668\u8dd1\u5728\u4e91\u7aef\u5c31\u662fNode.js\u9700\u8981\u89e3\u51b3\u7684\u95ee\u9898</p> <p>\u8ba9javascript\u4e0d\u4ec5\u5c40\u9650\u4e8e\u5ba2\u6237\u7aef\u7684\u5f00\u53d1 </p>"},{"location":"Project/ant/#_2","title":"\u603b\u7ed3","text":"<p>\u72ed\u4e49\u7684\u524d\u7aef\uff1a\u5e94\u7528\u8f6f\u4ef6\u4e2d\u7684\u5c55\u793a\u548c\u7528\u6237\u4ea4\u4e92\u5f00\u53d1\u6280\u672f</p> <p>\u5e7f\u4e49\u7684\u524d\u7aef\uff1a\u8de8\u5e73\u53f0\u7684\u5e94\u7528\u5f00\u53d1\u6280\u672f\u3002\u6709\u975e\u6b63\u5f0f\u7684\u79f0\u547c\u201c\u5927\u524d\u7aef\u201d\u3002</p>"},{"location":"Project/ant/#chrome-devtools","title":"\u5de5\u5177\u73af\u5883: chrome Devtools","text":"<p>\u53ef\u89c6\u5316\u7684\u9875\u9762\u770b\u8bbe\u8ba1\u51fa\u6765\u7684\u7f51\u9875\u957f\u4ec0\u4e48\u6837</p> <p>\u6392\u67e5\u6545\u969c</p> <p>command+option+i</p> <p>\u6216\u8005\u53f3\u952e+\u68c0\u67e5</p> <p>windows f12</p> <p>\u4e3b\u8981\u7528\u5230\u5143\u7d20\u3001\u63a7\u5236\u53f0\u548c\u7f51\u7edc</p> <p>\u5143\u7d20\uff1a</p> <p>HTML\u63cf\u8ff0\u4e86\u7f51\u9875\u7684\u7ed3\u6784</p> <p>\u4e0b\u9762\u7684CSS\u63cf\u8ff0\u4e86\u957f\u4ec0\u4e48\u6837</p> <p>CSS\u91cc\u9762\u7684\u76d2\u6a21\u578b\uff1apadding\u5185\u8fb9\u8ddd\u3001margin\u5916\u8fb9\u8ddd\u3001border\u8fb9\u6846</p> <p>\u76f4\u63a5\u5728devtools\u8c03\u8bd5\u5373\u53ef</p> <p>\u63a7\u5236\u53f0\uff1a</p> <p>90%\u8981\u7528\u5230\u63a7\u5236\u53f0</p> <p>console.log() \u6253\u5370\u65e5\u5fd7\u51fa\u6765</p> <p></p> <p>\u76f4\u63a5\u5728console\u91cc\u9762\u6253\u5c31\u884c\uff1a</p> <p>\u70b9clear console\u5c31\u80fd\u76f4\u63a5\u6e05\u7a7aconsole</p> <pre><code>function add(left, right) {return left + right;}\n\n\nadd(1, 2)\n\n\u4f1a\u8fd4\u56de3\n\nMath.random() //\u7f16\u5199\u5c0f\u811a\u672c\u53ef\u4ee5\u5feb\u901f\u5199\u6210,0-1\u7684\u968f\u673a\u6570\nMath.random() * 10 //1-10\u7684\u968f\u673a\u6570\n</code></pre> <p>js\u662f\u5f31\u7c7b\u578b\u7684\u8bed\u8a00\uff0c\u4e0d\u8981\u6c42\u58f0\u660e\u53d8\u91cf\u7c7b\u578b</p> <p>\u7f51\u7edc\uff1a\u5e2e\u6211\u4eec\u77e5\u9053\u8fd9\u4e2a\u7f51\u7ad9\u5230\u5e95\u8bf7\u6c42\u4e86\u4e9b\u4ec0\u4e48\u4e1c\u897f</p> <p>\u6bd4\u5982\u505a\u722c\u866b\u4e5f\u53ef\u4ee5\u7528\u8fd9\u4e2a\u529f\u80fd</p> <p>\u6807\u5934\uff1a\u8bf7\u6c42\u7684header</p> <p>\u8f7d\u8377\uff1a\u4e0a\u4f20\u4e86\u54ea\u4e9b\u6570\u636epayload</p> <p>\u54cd\u5e94\uff1a\u65b0\u7684html\u4ee3\u7801</p> <p>\u4e0a\u9762\u6709\u8fc7\u6ee4\u529f\u80fd\uff0c\u91cc\u9762\u7684\u56fe\u7247\u5fc5\u7136\u662f\u6700\u9ad8\u6e05\u7684\u56fe\u7247</p>"},{"location":"Project/ant/#vscode","title":"\u5de5\u5177\u73af\u5883\uff1aVScode","text":"<p>\u5c3d\u91cf\u4e0d\u8981\u8f93\u5165\u4e2d\u6587\u548c\u7a7a\u683c</p> <p>\u65b0\u5efahtml\u6587\u4ef6\u540e\uff0c\u8f93\u5165\u611f\u53f9\u53f7\u5c31\u80fd\u751f\u6210html\u7684\u4e1c\u897f</p> <p>code spell checker\u63d2\u4ef6</p> <p>live server\u53f3\u952ehtml\u6587\u4ef6\u76f4\u63a5open with live server\u5c31\u884c</p> <p>\u67e5\u770b-\u89c6\u56fe-\u7ec8\u7aef</p> <p>warp ---\u4e0b\u4e00\u4ee3\u7ec8\u7aef</p> <pre><code>node -v\nnpm -v\nnode ./hello.js // \u53ef\u4ee5\u76f4\u63a5\u7528node\u8dd1js\u4ee3\u7801\n</code></pre> <p>\u65b0\u5efaserver</p> <pre><code>const http = require('node:http');\n\n// Create a local server to receive data from\nconst server = http.createServer((req, res) =&gt; {\n  res.writeHead(200, { 'Content-Type': 'application/json' });\n  res.end(JSON.stringify({\n    data: 'Hello World!'\n  }));\n});\n\nserver.listen(8000);\n</code></pre> <p>node\u76f4\u63a5\u8dd1\u4e86\u6d4f\u89c8\u5668\uff0c\u8ba9js\u53d8\u6210\u7f16\u5199\u670d\u52a1\u7aef\u7684\u8bed\u8a00</p> <p>\u4e2a\u4eba\u672c\u5730\uff1a127.0.0.1:</p> <p>npm\u53ef\u4ee5\u5e2e\u6211\u4eec\u4e0b\u8f7d\u522b\u4eba\u7684\u4ee3\u7801</p> <p>\u8fd9\u4e2arequest\u529f\u80fd\u5fc5\u987b\u8981npm\u4e0b\u8f7d\u4e4b\u540e\u624d\u80fd\u4f7f\u7528</p> <pre><code>npm install request\n</code></pre> <pre><code>const http = require('http');\nconst request = require('request')\n\n// Create a local server to receive data from\nconst server = http.createServer((req, res) =&gt; {\n  request.get('https://baidu.com', {}, (err, rs, body) =&gt; {\n    res.writeHead(200, { 'Content-Type': 'text/html' });\n    res.end(body);\n  })\n\n});\n\nserver.listen(8000);\n</code></pre>"},{"location":"Project/ant/#html","title":"HTML\u521d\u63a2","text":"<p>\u6765\u81eaTim Berners-Lee \u82f1\u56fd\u8ba1\u7b97\u673a\u79d1\u5b66\u5bb6\uff0c\u4e07\u7ef4\u7f51\u4e4b\u7236</p> <p>\u79d1\u7814\u4eba\u5458\u67e5\u9605\u548c\u5171\u4eab\u6750\u6599\u592a\u4f4e\u6548</p> <p>35\u5c81\u53d1\u660e\u4e86world wide web\u8ba9\u4eba\u4eec\u53ef\u4ee5\u81ea\u7531\u5206\u4eab\u77e5\u8bc6\u548c\u60f3\u6cd5\u7684\u6280\u672f\u89e3\u51b3\u65b9\u6848</p> <p>HTML \u8d85\u6587\u672c\u6807\u8bb0\u8bed\u8a00-\u5982\u4f55\u5b58\u50a8\u548c\u5c55\u793a</p> <p>URI \u7edf\u4e00\u8d44\u6e90\u5b9a\u4f4d\u7b26\uff0c\u7f51\u7edc\u4e2d\u8d44\u6e90\u7684\u552f\u4e00\u5730\u5740-\u5982\u4f55\u627e\u5230</p> <p>HTTP \u8d85\u6587\u672c\u4f20\u8f93\u534f\u8bae-\u5982\u4f55\u4f20\u8f93</p> <p>1990\u5e74\uff0c\u6d4f\u89c8\u5668\u8bde\u751f\uff0cTim\u5728NeXT\u7535\u8111</p> <p>1994\u5e74\uff0c\u7f51\u666f\u516c\u53f8\u6210\u7acb\uff0c\u7b2c\u4e00\u6b3e\u5546\u4e1a\u6d4f\u89c8\u5668Nestcape Navigator-\u6d4f\u89c8\u5668\u5546\u4e1a\u5316</p> <p>\u57282012\u5e74\u524d\u5e76\u6ca1\u6709\u7279\u522b\u53d1\u5c55</p> <p>Html 2012\u5e74\u6709html5</p> <p>node 2009\u5e74\u51fa\u73b0</p> <p>html5\u6709\u66f4\u591a\u8bed\u4e49\u5316\u7684\u6807\u7b7e\u3001\u66f4\u4fbf\u6377\u66f4\u5f3a\u7684\u591a\u5a92\u4f53\u80fd\u529b\uff0c\u4ee5\u53ca\u7ed8\u56fe\u3001\u5730\u7406\u4f4d\u7f6e\u3001\u6570\u636e\u7f13\u5b58\u7684\u80fd\u529b</p> <p>\u203ahtml\u662f\u7531\u5143\u7d20\u7ec4\u6210</p> <p>\u5143\u7d20\u7531\u6807\u7b7e\u52a0\u5185\u5bb9\u7ec4\u6210\u7684</p> <p>\u5143\u7d20\u53ef\u4ee5\u76f8\u4e92\u5d4c\u5957</p> <p>\u5143\u7d20\uff1a</p> <pre><code>&lt;br/&gt;  \u6362\u884c\u5143\u7d20\n&lt;h1&gt;&lt;/h1&gt; \u6807\u9898\n&lt;img src='xxxxx'/&gt; \u56fe\u7247\u5143\u7d20\n&lt;p&gt;&lt;/p&gt; \u8868\u793a\u6bb5\u843d\n&lt;a&gt;&lt;/a&gt;\u8d85\u94fe\u63a5 \n&lt;a href=\"https://taobao.com\"&gt;\u6dd8\u5b9d\u7f51&lt;/a&gt;\n\n&lt;span&gt;&lt;/span&gt; \u4e00\u822c\u7528\u4e8e\u5bf9\u4e8e\u90e8\u5206\u6bb5\u7684\u5185\u5bb9\u8fdb\u884c\u7ec4\u5408\n&lt;div&gt;&lt;/div&gt;\u8868\u793a\u533a\u5757\uff0c\u4e00\u822c\u7528\u4e8e\u805a\u5408\u5143\u7d20\n&lt;meta name=\"author\" content=\"\u4e50\u9a70\"&gt;\n\n\u6709\u5e8f\u5217\u8868\n&lt;ol&gt;\n  &lt;li&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n\u65e0\u5e8f\u5217\u8868\n&lt;ul&gt;\n  &lt;li&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\u8bf4\u660e\u5217\u8868\n&lt;dl&gt;\n  &lt;dt&gt;&lt;/dt&gt;\n  &lt;dd&gt;&lt;/dd&gt;\n&lt;/dl&gt;\n\u5bfc\u822a\u680f\n&lt;nav&gt;\n  &lt;a href=\"\"&gt;&lt;/a&gt;\n&lt;/nav&gt;\n</code></pre> <p>H1-h6\u6807\u9898</p> <p>\u5143\u7d20\u5c5e\u6027\u53ea\u80fd\u7528\u5728\u5f00\u59cb\u6807\u7b7e\u6216\u5355\u4e2a\u6807\u7b7e\uff0c\u4e0d\u80fd\u7528\u4e8e\u7ed3\u675f\u6807\u7b7e</p> <p>\u6709\u4e00\u4e9b\u662f\u5168\u5c40\u5c5e\u6027\uff0c\u53ef\u7528\u4e8e\u6240\u6709\u7684html\u5143\u7d20\uff0c\u6bd4\u5982id\u3001class\u3001style</p> <p>meta\u5143\u7d20\u6807\u7b7e\u4e0d\u9700\u8981\u95ed\u5408\u6807\u7b7e\uff0c\u4ec5\u8bbe\u7f6e\u5728head\u5143\u7d20\u4e2d</p> <p>viewport\u79fb\u52a8\u5f00\u53d1\u6709\u8da3\u7684\u5730\u65b9</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n    &lt;script src=\"hello.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;\u4e50\u9a70&lt;/h1&gt;\n    &lt;h2&gt;Charles Chi Le&lt;/h2&gt;\n    &lt;p&gt;\u4e13\u4e1a\uff1a\u751f\u7269\u533b\u5b66&lt;/p&gt;&gt;\n    &lt;a href=\"https://charleschile.com\"&gt;\u70b9\u51fb\u524d\u5f80\u4e50\u9a70\u7684\u4e2a\u4ebablog&lt;/a&gt;\n    &lt;p&gt;&lt;/p&gt;\n    &lt;img src=\"WechatIMG313.jpeg\", width=\"300\"&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>\u73b0\u5728\u7528\u8868\u683c\u5143\u7d20\u8d8a\u6765\u8d8a\u5c11\u4e86\uff0c\u56e0\u4e3a\u6027\u80fd\u4e0d\u884c</p> <p>\u8bed\u4e49\u5316\u6807\u7b7e\uff1a</p> <p></p> <p>\u8868\u5355\u5143\u7d20\uff1a\u8868\u5355\u5143\u7d20\u5728\u7f51\u9875\u4e2d\u4e3b\u8981\u8d1f\u8d23\u6570\u636e\u91c7\u96c6\u7684\u529f\u80fd</p> <p>\u6bd4\u8f83\u590d\u6742\u7684\u4e00\u4e2a\u5143\u7d20</p> <p>input\u662f\u6700\u5e38\u89c1\u7684\u8868\u5355\u5143\u7d20</p> <pre><code>&lt;form&gt;\n First name:&lt;br&gt;\n&lt;input type=\"text\" name=\"firstname\" place&gt;\n&lt;br&gt;\n Last name:&lt;br&gt;\n&lt;input type=\"text\" name=\"lastname\"&gt;\n&lt;/form&gt; \n</code></pre> <p></p> <p></p> <p></p> <p></p>"},{"location":"Project/ant/#_3","title":"\u5f00\u53d1\u56fe\u4e66\u7ba1\u7406\u7cfb\u7edf","text":"<ol> <li>\u9996\u9875\u663e\u793a</li> <li>\u4e0a\u4f20\u56fe\u7247</li> </ol> <p>\u5206\u800c\u6cbb\u4e4b\u3001\u6a21\u5757\u62c6\u5206</p> <p>2\u4e2ahtml</p> <p>\u9996\u9875\u4e09\u4e2a\u5927\u7248\u5757</p> <p>\u4ea7\u54c1\u7ecf\u7406\u6587\u6863\u6807\u6ce8\u597d</p> <p>\u516c\u5171\u90e8\u5206\u5c31\u662f\u4ee3\u7801\u53ef\u4ee5\u590d\u7528\u7684\u90e8\u5206</p> <p>\u753b\u5eca\u505a\u597d\u5de6\u53f3\u6eda\u52a8</p> <p>\u5217\u8868</p> <p>\u4eca\u5929\u5c06html\u7684\u90e8\u5206\u5199\u51fa\u6765</p> <ul> <li>\u6253\u5f00\u6587\u6863\u540e\u6267\u884cnpm install</li> <li>npm run 0-init</li> </ul> <p>Target = blank\u662f\u91cd\u65b0\u5f00\u4e00\u4e2a\u9875\u9762\uff0c\u7136\u540e\u8df3\u8f6c</p>"},{"location":"Project/ant/#css","title":"CSS","text":"<p>cascade tyle sheets</p> <p>p\uff1a\u9009\u62e9\u5668</p> <p>color\uff1a\u5c5e\u6027</p> <p>red\uff1a</p> <pre><code>p {\n  color: red;\n  width: 500px;\n  border: 1px splid black;\n}\n</code></pre> <p>CSS\u7684\u5386\u53f2</p> <p>\u6bd4html\u665a\u597d\u51e0\u5e74</p> <p>1994\u5e74\u63d0\u51fa\u6700\u521d\u7684\u5efa\u8bae</p> <p>2001\u5e74\u5fae\u8f6f\u53d1\u5e03IE6\u6210\u4e3a\u524d\u7aef\u5de5\u7a0b\u5e08\u7684\u5669\u68a6</p> <p>\u8981\u517c\u5bb9IE6</p> <p>2003\u5e74\u63a8\u51faCSS\u7985\u610f\u82b1\u56ed</p> <p>11\u5e74CSS3</p> <p>background: green;</p> <p>Opacity: 0.5; \u900f\u660e\u5ea650%</p> <p>CSS</p> <p>\u5bf9div\u4e0d\u4f1a\u751f\u6548</p> <p>hover\u4e0b\u5212\u7ebf\u53bb\u6389\u7684\u5c5e\u6027</p> <p>visited\u8bbf\u95ee\u8fc7\u7684</p> <p>padding: 10px 15px 15px 5px;</p> <p>\uff08\u4e0a\u53f3\u4e0b\u5de6\uff09</p> <p>px\u50cf\u7d20 css\u4e2d\u6700\u57fa\u672c\u7684\u5355\u4f4d</p> <p>%\u57fa\u4e8e\u7236\u4f53\u5927\u5c0f\u767e\u5206\u6bd4\u7f29\u653e</p> <pre><code>img {\n  width: 10%;\n  height: 20vw\n}\n</code></pre> <p>\u6d4f\u89c8\u5668\u7684\u5c3a\u5bf8\u5927\u5c0f\uff1a\u89c6\u53e3</p> <p>\u539f\u59cb\u5c3a\u5bf8\uff1a\u56fe\u7247\u9ed8\u8ba4\u662f\u6709\u5c3a\u5bf8\u7684</p> <p>\u5982\u4f55\u6539\u53d8img\u5143\u7d20\u5927\u5c0f\u89c6\u53e3\u5bbd\u9ad8\u7684\u4e00\u534a\uff0c\u968f\u89c6\u53e3\u53d8\u5316\u800c\u53d8\u5316</p> <pre><code>img {\n  width: 50vw;\n  height: 50vh;\n}\n</code></pre> <pre><code>p {\n  background: rgba(222, 222, 222, 0.5);\n}\n</code></pre> <p>\u8fd8\u6709RGBA\u989c\u8272\uff0c\u6700\u540e\u4e00\u4f4d\u8868\u793a\u900f\u660e\u5ea6</p> <pre><code>p {\n  font-family:\n}\n</code></pre> <p>\u6587\u672c\u7684\u5e03\u5c40\uff1atext-align</p> <p>Vertical-align\u5782\u76f4\u5bf9\u9f50</p> <p>css\u6587\u672c\uff1aline-height\u884c\u95f4\u8ddd</p> <p>\u5f00\u53d1\u91cc\u9762\u884c\u9ad8\u9ed8\u8ba4</p> <p>line-height: 1.5;</p>"},{"location":"Project/ant/#1677ff","title":"1677ff\u8682\u8681\u7684\u54c1\u724c\u8272","text":"<p>\u5feb\u6377\u8f93\u5165\u7c7b\u578b\uff1a Img.\u540d\u5b57 + tab</p> <p>\u6216\u8005p.title + tab</p> <p>dotted\\dashed\\solid</p> <p>\u5706\u89d2\uff1a</p> <p>Border-radius</p> <pre><code>.box {\n  border-radius: 30px;\n}\n</code></pre> <p>\u8bbe\u7f6e\u621050%\u5c31\u662f\u4e00\u4e2a\u5706\u5f62</p> <p>Background-size: contain\u4fdd\u6301\u6a2a\u7eb5\u6bd4</p> <p>Background-size: cover\u5b8c\u5168\u8986\u76d6\u80cc\u666f</p> <pre><code>div {\n  background-repeat:no-repeat; //\u53d6\u6d88\u91cd\u590d\u6e32\u67d3\n\n}\n</code></pre> <p>\u6ce8\u91ca\u7684\u5feb\u6377\u952ecommand+/</p> <pre><code>box-shadow\n</code></pre> <p>\u901a\u914d\u7b26*</p> <pre><code>* {\n  border-size:\n}\n</code></pre> <p>Content-box</p> <p>\u548cborder-box</p> <p>260\\200</p> <pre><code>.content-box {\n    width: 200px;\n    height: 200px;\n    margin: 20px;\n    padding: 20px;\n    border: 10px solid #1677ff;\n    box-sizing: content-box;\n    background: gold;\n  }\n  .border-box {\n    width: 200px;\n    height: 200px;\n    margin: 20px;\n    padding: 20px;\n    border: 10px solid #1677ff;\n    box-sizing: border-box;\n    background: gold;\n  }\n</code></pre> <p>overflow\u63a7\u5236\u6ea2\u51fa\u884c\u4e3a</p> <p>overflow-x \u548c-y \u7528\u6765\u63a7\u5236\u6cbf\u7740x\u8f74\u5212\u52a8</p> <p>White-space: \u6362\u884c</p> <p>\u76f8\u5bf9\u5b9a\u4f4d\uff1arelative</p> <pre><code>.box {\n  position: relative;\n  top: 20px;\n}\n</code></pre> <p>\u7edd\u5bf9\u5b9a\u4f4d\uff1aabsolute</p> <p>\u4ece\u6b63\u5e38\u5e03\u5c40\u6d41\u4e2d\u79fb\u51fa\uff0c\u53d8\u6210\u5355\u72ec\u7684\u4e00\u4e2a\u56fe\u5c42</p> <p>\u56fa\u5b9a\u5e03\u5c40\uff1afixed</p> <p>\u50cf\u78c1\u8d34\u4e00\u6837\uff0c\u5728\u5c4f\u5e55\u4e0a\u7684\u4f4d\u7f6e\u4e0d\u4f1a\u53d8\u52a8</p> <p>Z-index\uff1a\u5c55\u793a\u5143\u7d20\u7684\u987a\u5e8f</p> <p>\u8d8a\u5c0f\u56fe\u5c42\u8d8a\u5728\u4e0b\u9762</p> <p>\u6587\u5b57\u5782\u76f4+\u6c34\u5e73\u5c45\u4e2d</p> <p>Line-height</p> <p>flex\u5e03\u5c40\uff1ajustify-content</p> <p>\u5b9a\u4e49\u4e86\u4e3b\u8f74\u4e0a\u7684\u5bf9\u9f50\u65b9\u5f0f</p> <p>\u5584\u4e8e\u7528\u641c\u7d22\u5f15\u64ce\uff1a</p> <p>flex\u7684\u901f\u67e5https://www.webhek.com/apps/flex-cheatsheet</p> <p>transform</p> <p>\u5411\u5de6\u5782\u76f4\u5411\u4e0a\u79fb\u52a8\u5c31\u662f\u53d6\u8d1f\u53f7\u5373\u53ef</p> <p>Scale(10)\u653e\u592710\u500d</p> <p>\u8fc7\u6e21\uff1a\u4e00\u4e2a\u5143\u7d20\u5728\u4e0d\u540c\u72b6\u6001\u4e4b\u95f4\u5207\u6362\u7684\u65f6\u5019\u5b9a\u4e49\u4e0d\u540c\u7684\u8fc7\u6e21\u6548\u679c</p> <pre><code>ant:hover {\n\n}\n</code></pre> <p>\u52a8\u753banimation\u76f8\u8f83\u4e8e\u811a\u672c\u5b9e\u73b0\u52a8\u753b\u6280\u672f\uff0c\u6bd4\u8f83\u7b80\u5355\u3001\u6d41\u7545\u3001\u9ad8\u6027\u80fd</p> <pre><code>&lt;!-- &lt;style&gt;\n    &lt;!-- \u8986\u76d6\u6d4f\u89c8\u5668\u9ed8\u8ba4\u6837\u5f0f --&gt;\n\n\n    .card-list {\n        display: flex;\n        flex-direction: row;\n        justify-content: center;\n        align-items: center;\n    }\n    .box-submit-img {\n        width: 200px;\n        height: 200px;\n        object-fit: contain;\n    }\n    .card {\n        display: inline-block;\n        width: 200px;\n        height:300px;\n        margin: 50px 8px;\n        padding: 8px;\n        border-radius: 8px;\n        box-shadow: 0 30px 30px 0 rgba(140, 153, 191, 0.20);\n    }\n    .box-img {\n        width: 200px;\n        height: 100px;\n        object-fit: cover;\n    }\n    .box-title {\n        margin: 12px auto;\n        font-size: 24px;\n        font-weight: bold;\n    }\n    .box-author {\n        margin: 6px auto;\n        font-size: 16px;\n    }\n    .box-desc {\n        margin: 6px auto;\n        font-size: 16px;\n    }\n&lt;/style&gt; --&gt;\n</code></pre>"},{"location":"Project/ant/#javascript","title":"JavaScript","text":""},{"location":"Project/ant/#javascript_1","title":"\u4ec0\u4e48\u662fjavascript","text":"<p>\u6700\u65e9\u7684\u754c\u9762\u4e0d\u9700\u8981javascript\uff0c\u5c31\u662f\u540e\u7aef\u76f4\u63a5\u62c9html\u8868\u5355\uff0c\u62fc\u5728\u4e00\u8d77\u5c31\u884c</p> <p>\u73b0\u5728javascript\u53ef\u4ee5\u5b9e\u73b03D\u6e32\u67d3</p> <p>java\u548cjavascript\u7684\u5173\u7cfb</p> <p>\u96f7\u950b\u548c\u96f7\u5cf0\u5854\u7684\u5173\u7cfb</p> <p>\u6f14\u5316\u8def\u5f84\u633a\u7279\u522b\u7684</p> <p>js\u53ef\u4ee5\u901a\u8fc7html\u6807\u7b7e\u76f4\u63a5\u5f15\u5165</p>"},{"location":"Project/ant/#javascript_2","title":"javascript\u8bed\u8a00\u57fa\u7840","text":"<p>\u56fe\u7075\u5b8c\u5907\uff1a\u53ef\u4ee5\u8ba1\u7b97\u6240\u6709\u53ef\u8ba1\u7b97\u7684\u95ee\u9898</p> <p>javascript\u662f\u56fe\u7075\u5b8c\u5907\u7684</p> <p>sql\u3001html\u5c31\u4e0d\u662f\u56fe\u7075\u5b8c\u5907\u7684\u989d</p> <p>C++\u548cjava\u80af\u5b9a\u662f\u56fe\u7075\u5b8c\u5907\u7684</p> <p>js\u4ee3\u7801\u91cc\u9762\uff0c\u53d8\u91cf\u7684\u5b9a\u4e49\u5c3d\u91cf\u4e0d\u8981\u4f7f\u7528var\u4e86\uff1a</p> <pre><code>test = '1';\nif (test) {\n  var test = 2;\n}\nconsole.log(test); // \u8f93\u51fa\u7684\u662f2\n</code></pre> <p>\u5efa\u8bae\u4f7f\u7528const\u548clet</p> <p>js\u662f\u5f31\u7c7b\u578b\u7684\uff0c\u90fd\u53ef\u4ee5\u76f4\u63a5\u7528let\u5b9a\u4e49</p> <p>string \u53cc\u5f15\u53f7\u6216\u8005\u5355\u5f15\u53f7</p> <p>number</p> <p>boolean</p> <p>null</p> <p>undefined</p> <p>\u7b49\u4e8e == </p> <p>\u5168\u7b49\u4e8e ===</p> <pre><code>3 == 3; // true\n3 == '3'; // true\n3 === 3; // true\n3 === '3'; // false\n</code></pre> <p>\u5c3d\u91cf\u4f7f\u7528\u5168\u7b49\u4e8e</p> <pre><code>&lt;!-- &lt;li class=\"gallary-item\"&gt;\n                    &lt;img src=\"./data/pic/pic-1.png\" /&gt;\n                    &lt;p class=\"name\"&gt;\u843d\u65e5&lt;/p&gt;\n                    &lt;p class=\"photographer\"&gt;by \u8682\u8681&lt;/p&gt;\n                    &lt;p class=\"desc\"&gt;\u957f\u6cb3\u843d\u65e5\u5706&lt;/p&gt;\n                &lt;/li&gt;\n                &lt;li class=\"gallary-item\"&gt;\n                    &lt;img src=\"./data/pic/pic-2.png\" /&gt;\n                    &lt;p class=\"name\"&gt;\u7901\u77f3&lt;/p&gt;\n                    &lt;p class=\"photographer\"&gt;by \u8682\u8681&lt;/p&gt;\n                    &lt;p class=\"desc\"&gt;\u4e1c\u4e34\u78a3\u77f3\uff0c\u4ee5\u89c2\u6ca7\u6d77&lt;/p&gt;\n                &lt;/li&gt;\n                &lt;li class=\"gallary-item\"&gt;\n                    &lt;img src=\"./data/pic/pic-3.png\" /&gt;\n                    &lt;p class=\"name\"&gt;\u6ce2\u6d6a&lt;/p&gt;\n                    &lt;p class=\"photographer\"&gt;by \u8682\u8681&lt;/p&gt;\n                    &lt;p class=\"desc\"&gt;\u6728\u843d\u96c1\u55f7\u55f7\uff0c\u6d1e\u5ead\u6ce2\u6d6a\u9ad8&lt;/p&gt;\n                &lt;/li&gt; --&gt;\n</code></pre> <p>\u62d3\u5c55\uff1atypescript\uff0c\u517c\u5bb9js\u8bed\u6cd5</p>"},{"location":"Project/ant/#windowdom","title":"window\u548cdom","text":"<p>DOM\uff0c\u5373\u4e3a Document Object Model\uff0c\u662f\u7528\u4e8e\u63a7\u5236\u6587\u6863\u7684\u6807\u51c6\u5bf9\u8c61\u3002DOM \u548c\u8be5\u9875\u9762\u8f7d\u5165\u7684 html \u6587\u6863\u662f\u5bf9\u5e94\u7684\u3002DOM \u662f\u4e07\u7ef4\u7f51\u8054\u76df\uff08W3C\uff09\u7684\u6807\u51c6\uff0c\u5f53\u524d\u7531 WHATWG \u548c W3C \u5171\u540c\u7ef4\u62a4\u3002</p>"},{"location":"Project/ant/#json","title":"JSON\u548c\u7f51\u7edc\u8bf7\u6c42","text":"<p>JavaScript Object Notation (JSON)</p> <p>\u6570\u636e\u89c4\u8303\u7684\u683c\u5f0f</p> <pre><code>{\n  \"name\": \"\u6ce2\u6d6a\",\n  \"photographer\": \"\u8682\u8681\",\n  \"desc\": \"\u6728\u843d\u96c1\u55f7\u55f7\uff0c\u6d1e\u5ead\u6ce2\u6d6a\u9ad8\",\n  \"picPath\": \"data/pic/pic-3.png\"\n}\n</code></pre> <pre><code>{   \n  \"numberType\": 1,\n  \"stringType\": \"string\",\n  \"booleanType\": false,\n  \"arrayType\": [\"string\",false,1],\n  \"objectType\": {},\n  \"nullType\": null\n}\n</code></pre> <p>\u8bf7\u6c42\u662f\u9700\u8981\u65f6\u95f4\u7684</p> <p>\u6d4f\u89c8\u5668\u662f\u5355\u7ebf\u7a0b\u7684</p> <p>\u6d4f\u89c8\u5668\u7684\u8bbe\u8ba1\u4e2d\u6709\u5f02\u6b65\u8fd9\u4e2a\u6982\u5ff5</p> <p>\u7ebf\u7a0b\u4e0d\u4f1a\u963b\u585e</p>"},{"location":"Project/ant/#nodejs","title":"Node.js","text":"<p>\u96f6\u542f</p>"},{"location":"Project/ant/#nodejs_1","title":"node.js\u6982\u8ff0","text":"<p>js\u662f\u8fd0\u884c\u5728\u6d4f\u89c8\u5668\u5f53\u4e2d\u7684</p> <p>Node.js\u662fjavascript\u7684\u4e00\u79cd\u8fd0\u884c\u73af\u5883</p> <p>\u662f\u5c06v8\u5f15\u64ce\u52a0\u5de5\u6210\u53ef\u4ee5\u5728\u4efb\u4f55\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u8fd0\u52a8\u7684javascript\u7684\u5e73\u53f0</p> <p>\u684c\u9762\u5e94\u7528\uff1a\u8bed\u96c0\u3001\u9489\u9489\u3001vscode\u90fd\u662f\u57fa\u4e8enode\u5f00\u53d1\u7684</p> <p>javascript\u6709\u722c\u866b\u6a21\u5757</p>"},{"location":"Project/ant/#nodejs_2","title":"node.js\u57fa\u7840","text":"<p>\u7b2c\u4e00\u6b65\uff1a</p> <pre><code>npm -init -y\nnode hello.js\n</code></pre> <p>1\u3001\u4f7f\u2f64 require(\u2018os\u2019) \u5f15\u2f64\u2f00\u4e2a Node.js \u5185\u7f6e\u6a21\u5757 os 2\u3001\u8c03\u2f64 os \u6a21\u5757\u7684 platform() \u2f45\u6cd5\u83b7\u53d6\u64cd\u4f5c\u7cfb\u7edf\u5e73\u53f0\u7c7b\u578b</p> <pre><code>const os = require('os'); // os\u662f\u5185\u7f6e\u6a21\u5757\nconsole.log(os.platform()); // darwin mac\u5e73\u53f0\n</code></pre> <p>\u540c\u6b65\u548c\u5f02\u6b65</p> <p>\u540c\u6b65\uff1a\u6309\u7167\u4ee3\u7801\u987a\u5e8f\u6267\u884c</p> <p>\u5f02\u6b65\uff1a\u4e0d\u6309\u7167\u4ee3\u7801\u987a\u5e8f\u6267\u884c\uff0c\u5f02\u6b65\u7684\u6267\u884c\u6548\u7387\u66f4\u9ad8</p> <p>js\u662f\u5355\u7ebf\u7a0b\u7684\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5f02\u6b65\u7f16\u7a0b\u6765\u540c\u65f6\u6267\u884c\u591a\u4e2a\u4efb\u52a1</p> <p>\u6587\u4ef6IO\u3001\u7f51\u7edc\u8bf7\u6c42\u3001dom\u6e32\u67d3\u3001canvas\u7ed8\u5236\u3001\u8fdb\u7a0b\u95f4\u901a\u4fe1</p> <p>\u5b9e\u73b0\u65b9\u5f0f\uff1acallback\u3001promise\u3001generator\u3001async/await </p> <p>\u53d1\u5e03/\u8ba2\u9605\u6a21\u578b\u7b80\u4ecb</p> <p>\u4e8b\u4ef6\u76d1\u542c\u2192\u4e8b\u4ef6\u5bf9\u8c61\u2190\u4e8b\u4ef6\u53d1\u5e03</p> <p>\u53d1\u9001\u8005\u5c06\u6d88\u606f\u53d1\u9001\u5230\u6307\u5b9a\u5730\u65b9</p> <p>\u6d88\u606f\u5c06\u88ab\u901a\u77e5\u7ed9\u6307\u5b9a\u7684\u63a5\u53d7\u8005</p> <p>\u4e00\u4e2a\u5bf9\u8c61\u80fd\u76d1\u542c\u7684\u4e8b\u4ef6\u53ef\u4ee5\u662f\u591a\u4e2a\u7684\uff1a\u5355\u51fb\u3001\u53cc\u51fb\u7b49\u7b49</p> <p>\u53d1\u5e03\u53d1\u5e03\u8ba2\u9605\u7684\u7528\u6cd5</p> <pre><code>const EventEmiter = require('events');\nconst eventEmiter = new EventEmiter; // \u5b9e\u4f8b\u5316\n\neventEmiter.on('notice', (msg)=&gt;{\n    console.log('I have received a message: ', msg);\n})\n//setTime\u662f\u4e00\u4e2a\u5f02\u6b65\u961f\u5217\nsetTimeout(() =&gt; {\n    eventEmiter.emit('notice', 'hello') // \u8fd9\u4e00\u884c\u540e\u6267\u884c\n}, 3000);  // 3\u79d2\u949f\uff0c\u5373\u4f7f\u6539\u62100\uff0c\u4e5f\u4f1a\u662f\u540e\u6267\u884c\n//\u5355\u7ebf\u7a0b\uff0c\u4efb\u52a1\u961f\u5217{task1, task2}    \u5f02\u6b65\u961f\u5217{task1, task2}\n// \u53ea\u6709\u6240\u6709\u7684\u540c\u6b65\u4efb\u52a1\u961f\u5217\u6267\u884c\u5b8c\u6bd5\u4e4b\u540e\uff0c\u624d\u4f1a\u6267\u884c\u5f02\u6b65\u961f\u5217\n\nconsole.log('hello');  // \u8fd9\u4e00\u884c\u5148\u6267\u884c\uff0c\u5f02\u6b65\n</code></pre> <p>\u5f02\u6b65\u6587\u4ef6\u8bfb\u5199</p> <pre><code>const fs = require('fs'); // file system\n\n// \u5728node\u91cc\u9762\u7ecf\u5e38\u662ferr first\u7684\uff0c\u5c31\u662f\u7b2c\u4e00\u4e2a\u53c2\u6570\u662ferr\uff0c\u7136\u540e\u6709\u9519\u8bef\u7684\u8bdd\u4f1a\u7b2c\u4e00\u65f6\u95f4\u5c31throw\u6389\nfs.readFile('a.txt', 'utf-8', (err, data) =&gt; {\n    if (err) throw err;\n    console.log(data); // \u7136\u540e\u518d\u6267\u884c\u8fd9\u884c\u4ee3\u7801  \n});\n\nconsole.log('reading file ...'); // \u5148\u6267\u884c\u8fd9\u884c\u4ee3\u7801\n</code></pre> <p>\u540c\u6b65\u6587\u4ef6\u8bfb\u5199</p> <p>\u5e26sync\u5c31\u4f1a\u6267\u884c\u540c\u6b65\u6587\u4ef6\u8bfb\u5199\uff0c\u5373\u53ea\u6709\u6267\u884c\u5b8c\u4e0a\u4e00\u884c\u4ee3\u7801\u624d\u4f1a\u7ee7\u7eed\u6267\u884c\u4e0b\u9762\u4e00\u884c\u4ee3\u7801</p> <pre><code>const fs = require('fs');\n// \u540c\u6b65\u5199\u5165\nfs.writeFileSync('a.txt', 'Hello Node.js!', 'utf-8');\n// \u540c\u6b65\u8bfb\u53d6\nconst data = fs.readFileSync('a.txt','utf-8');\n\nconsole.log(data); // \u5148\u6267\u884c\u8bfb\u53d6\u6587\u4ef6\u7684\u64cd\u4f5c\n\nconsole.log('reading file...'); // \u6700\u540e\u6267\u884c\u6253\u5370\u65e5\u5fd7\n</code></pre> <p>\u901a\u5e38\u6211\u4eec\u4f1a\u4f7f\u7528\u5f02\u6b65\u6765\u7f16\u7a0b\uff0c\u9632\u6b62\u540e\u7eed\u5835\u585e</p> <p>\u8bfb\u53d6\u6587\u4ef6\u5730\u5740</p> <pre><code>const fs = require('fs');\nconst path = require('path');\n\nconsole.log(__dirname); ///Users/lechi/Desktop/Frontend/demo, \u6253\u5370\u6587\u4ef6\u6240\u5728\u7684\u8def\u5f84\n\nlet filePath = path.join(__dirname, 'data', 'obj.json');\nconsole.log(filePath); \n</code></pre> <p>\u8bfb\u53d6json\u5e76\u5199\u5165json\u6587\u4ef6\u4e2d</p> <pre><code>const fs = require('fs');\nconst path = require('path');\n\nconst obj = [\n    {\n      \"name\": \"\u6ce2\u6d6a\",\n      \"photographer\": \"\u8682\u8681\",\n      \"desc\": \"\u6728\u843d\u96c1\u55f7\u55f7\uff0c\u6d1e\u5ead\u6ce2\u6d6a\u9ad8\",\n      \"picPath\": \"data/pic/pic-3.png\"\n    },\n    {\n      \"name\": \"\u843d\u65e5\",\n      \"photographer\": \"\u8682\u8681\",\n      \"desc\": \"\u957f\u6cb3\u843d\u65e5\u5706\",\n      \"picPath\": \"data/pic/pic-1.png\"\n    },\n    {\n      \"name\": \"\u7901\u77f3\",\n      \"photographer\": \"\u8682\u8681\",\n      \"desc\": \"\u4e1c\u4e34\u78a3\u77f3\uff0c\u4ee5\u89c2\u6ca7\u6d77\",\n      \"picPath\": \"data/pic/pic-2.png\"\n    }\n  ]\n\n\nconst filePath = path.join(__dirname, 'data', 'obj.json')\n\nfs.writeFile(filePath, JSON.stringify(obj,null,2), (err, data) =&gt;{\n    if (err) {\n        console.log('write fail');\n    }\n    else {\n        console.log('write success');\n    }\n});\n\nconsole.log(filePath);\n</code></pre> <p>\u81ea\u5df1\u5199\u6a21\u5757</p> <p>\u5728add\u7684js\u6587\u4ef6\u91cc\uff1a</p> <pre><code>exports.add = (x,y) =&gt; {\n    return x + y;\n};\n</code></pre> <p>\u7136\u540e\u8c03\u7528\u81ea\u5df1\u7684\u6a21\u5757</p> <pre><code>const compute = require('./add')\n// \u6216\u8005const{add} = require('/add')\nconst sum = compute.add(1, 2)\nconsole.log(sum);\n</code></pre> <p>npm</p> <p>\u662f\u5305\u7ba1\u7406\u7cfb\u7edf</p> <p>npm\u9ed8\u8ba4\u968f\u7740node\u4e00\u8d77\u5b89\u88c5</p> <p>npm\u63d0\u4f9b\u547d\u4ee4\u884c\u5de5\u5177\u7528\u4e8e\u7ba1\u7406\u6a21\u5757</p> <p>Json.stringfy</p> <p>json.parse</p>"},{"location":"Project/ant/#nodejs-web","title":"node.js web\u670d\u52a1","text":"<p>\u5b89\u88c5express\uff0c\u5e76\u4e14\u66f4\u65b0package.json\u4e2d\u7684\u4f9d\u8d56\uff1a</p> <pre><code>npm i express -S\n</code></pre> <p>http\u534f\u8bae\u7b80\u4ecb\uff1a\uff08request\u3001response\uff09</p> <p>http\u662f\u6587\u672c\u534f\u8bae\uff0c\u4e00\u6b21http\u8bf7\u6c42\u5206\u4e3a\u8bf7\u6c42\u548c\u76f8\u5e942\u4e2a\u9636\u6bb5</p> <p>\u5efa\u7acb\u4e00\u4e2a\u7b80\u5355\u7684express\u670d\u52a1</p> <pre><code>const express = require('express')\nconst app = express()\n\napp.get('/', function (req, res) {\n  res.send('Hello World')\n})\n// 80\u7aef\u53e3\u662f\u9ed8\u8ba4\u7aef\u53e3\napp.listen(80, ()=&gt;{\n    console.log('app is serving on port 80...');\n})\n</code></pre> <p>\u5982\u4f55\u5728\u7f16\u8f91\u540e\u81ea\u52a8\u91cd\u542f\u670d\u52a1\uff1f</p> <p>\u8bbf\u95ee\u9759\u6001\u8d44\u6e90</p> <p>static\u6307\u5b9a\u76ee\u5f55\u5373\u53ef</p> <p>\u65e2\u8bbf\u95ee\u9759\u6001\u8d44\u6e90\u53c8\u65b0\u5efa\u63a5\u53e3</p> <pre><code>const express = require('express')\nconst app = express()\n\n\napp.use(express.static('web'))\n\napp.get('/hello', function (req,res) {\n    res.send('Hello Node')\n})\n\n\napp.listen(3000, ()=&gt;{\n    console.log('app is serving on port 3000...');\n})\n</code></pre>"},{"location":"Project/ant/#_4","title":"\u56fe\u7247\u7ba1\u7406\u7cfb\u7edf","text":"<pre><code>    const res = await fetch('/pic/list');\n    const pics = await res.json();\n    pics.forEach(appendPic);\n</code></pre> <p>Index.js:</p> <pre><code>function $(selector) {\n    return document.querySelector(selector);\n  }\n\n  function appendPic(item) {\n    // const { name, desc } = item || {};\n\n    // \u8865\u5145 html \u7684\u751f\u6210\u903b\u8f91\n    const html = `&lt;li class=\"gallary-item\"&gt;\n    &lt;img src=\"${item.picPath}\" /&gt;\n    &lt;p class=\"name\"&gt;${item.name}&lt;/p&gt;\n    &lt;p class=\"photographer\"&gt;by ${item.photographer}&lt;/p&gt;\n    &lt;p class=\"desc\"&gt;${item.desc}&lt;/p&gt;\n  &lt;/li&gt;`;\n\n    $('#pics').innerHTML += html;\n  }\n\n  async function fetchPics() {\n    // \u540e\u7eed pics \u7684\u5185\u5bb9\u901a\u8fc7\u8bf7\u6c42\u540e\u7aef\u83b7\u53d6\n    // const pics = [\n    //   {\n    //     name: '\u6ce2\u6d6a',\n    //     photographer: '\u8682\u8681',\n    //     desc: '\u6728\u843d\u96c1\u55f7\u55f7\uff0c\u6d1e\u5ead\u6ce2\u6d6a\u9ad8',\n    //     picPath: 'data/pic/pic-3.png',\n    //   },\n    //   {\n    //     name: '\u843d\u65e5',\n    //     photographer: '\u8682\u8681',\n    //     desc: '\u957f\u6cb3\u843d\u65e5\u5706',\n    //     picPath: 'data/pic/pic-1.png',\n    //   },\n    //   {\n    //     name: '\u7901\u77f3',\n    //     photographer: '\u8682\u8681',\n    //     desc: '\u4e1c\u4e34\u78a3\u77f3\uff0c\u4ee5\u89c2\u6ca7\u6d77',\n    //     picPath: 'data/pic/pic-2.png',\n    //   },\n    // ];\n\n    // let pics = [];\n\n    const res = await fetch('/web/data/data.json');\n    const pics = await res.json();\n    pics.forEach(appendPic);\n\n\n\n\n    // fetch('/web/data/data.json').then(function(res) {\n    //     return res.json();\n    // }).then((pics) =&gt;{\n    //     pics.forEach(appendPic);\n    // });\n\n    // \u4fee\u6539\u4e3a\u5faa\u73af\uff0c\u53ef\u4ee5\u4f7f\u7528 for\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 forEach\n    // pics.forEach(appendPic);\n    // appendPic(pics[0]);\n    // appendPic(pics[1]);\n    // appendPic(pics[2]);\n  }\n\n  fetchPics();\n</code></pre>"},{"location":"Project/bytedance/%E7%AC%AC%E4%BA%94%E5%B1%8A%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E9%9D%92%E8%AE%AD%E8%90%A5%E5%90%8E%E7%AB%AF%E4%B8%93%E5%9C%BA/","title":"\u7b2c\u4e94\u5c4a\u5b57\u8282\u8df3\u52a8\u9752\u8bad\u8425\u540e\u7aef\u4e13\u573a\u7b14\u8bb0","text":""},{"location":"Project/bytedance/%E7%AC%AC%E4%BA%94%E5%B1%8A%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E9%9D%92%E8%AE%AD%E8%90%A5%E5%90%8E%E7%AB%AF%E4%B8%93%E5%9C%BA/#115-go-","title":"1/15 Go\u8bed\u8a00\u57fa\u7840-\u57fa\u7840\u8bed\u6cd5","text":""},{"location":"Project/bytedance/%E7%AC%AC%E4%BA%94%E5%B1%8A%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E9%9D%92%E8%AE%AD%E8%90%A5%E5%90%8E%E7%AB%AF%E4%B8%93%E5%9C%BA/#go","title":"\u5b89\u88c5Go\u8bed\u8a00","text":"<p>\u522b\u7528brew\u5b9e\u5728\u662f\u592a\u6162\u4e86\uff0c\u76f4\u63a5\u53bb\u5b98\u7f51\u4e0b\u8f7d\u5373\u53ef</p>"},{"location":"Project/bytedance/%E7%AC%AC%E4%BA%94%E5%B1%8A%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E9%9D%92%E8%AE%AD%E8%90%A5%E5%90%8E%E7%AB%AF%E4%B8%93%E5%9C%BA/#vscode-go","title":"\u5b89\u88c5vscode go\u7684\u63d2\u4ef6","text":"<p>\u76f4\u63a5\u641c\u7d22go\u5373\u53ef</p>"},{"location":"Project/bytedance/%E7%AC%AC%E4%BA%94%E5%B1%8A%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E9%9D%92%E8%AE%AD%E8%90%A5%E5%90%8E%E7%AB%AF%E4%B8%93%E5%9C%BA/#go_1","title":"go\u8bed\u8a00\u5723\u7ecf","text":"<p>https://books.studygolang.com/gopl-zh/ch0/ch0-01.html</p>"},{"location":"Project/bytedance/%E7%AC%AC%E4%BA%94%E5%B1%8A%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E9%9D%92%E8%AE%AD%E8%90%A5%E5%90%8E%E7%AB%AF%E4%B8%93%E5%9C%BA/#go_2","title":"go\u8bed\u8a00\u5b66\u4e60\u8def\u5f84","text":"<p>https://bytedance.feishu.cn/docs/doccn3SFTuFIAVr4CDZGx48KKdd</p>"},{"location":"Tool/","title":"Tool","text":"<p>Abstract</p> <p>\u8fd9\u91cc\u662f\u8ba1\u7b97\u673a\u76f8\u5173\u7684\u4e00\u4e9b\u5de5\u5177\u4f7f\u7528\u7684\u8bf4\u660e</p> <p>\u6b63\u5728\u4e0d\u65ad\u603b\u7ed3\u66f4\u65b0\u7b14\u8bb0\u4e2d...</p>"},{"location":"Tool/#table-of-contents","title":"Table of Contents","text":"<ul> <li> <p>MIT The Missing Semester of Your CS education</p> <ul> <li>MIT notes</li> </ul> </li> <li> <p>Systematic review and meta-analysis</p> <ul> <li>Notes</li> </ul> </li> </ul>"},{"location":"Tool/MIT/missing_semester/","title":"MIT The Missing Semester of Your CS Education","text":""},{"location":"Tool/MIT/missing_semester/#information","title":"information","text":"<p>\u8bfe\u7a0b\u5730\u5740\uff1ahttps://missing-semester-cn.github.io/</p> <ul> <li>\u91cd\u70b9\u719f\u6089 <code>Git</code> <code>GitHub</code> <code>make</code> <code>gdb</code>/<code>lldb</code> <code>VS Code</code> <code>Markdown</code></li> </ul>"},{"location":"Tool/MIT/missing_semester/#course-overview-shell","title":"Course overview + Shell","text":"<p>Shell: \u5b83\u5141\u8bb8\u4f60\u6267\u884c\u7a0b\u5e8f\uff0c\u8f93\u5165\u5e76\u83b7\u53d6\u67d0\u79cd\u534a\u7ed3\u6784\u5316\u7684\u8f93\u51fa\u3002</p> <p>Bourne Again SHell, \u7b80\u79f0 \u201cbash\u201d </p> <ol> <li><code>date</code></li> </ol> <p>\u5b83\u6253\u5370\u51fa\u4e86\u5f53\u524d\u7684\u65e5\u671f\u548c\u65f6\u95f4</p> <p>2023\u5e74 2\u670818\u65e5 \u661f\u671f\u516d 10\u65f637\u520636\u79d2 CST</p> <ol> <li><code>echo hello</code></li> </ol> <p><code>echo</code> \u7a0b\u5e8f\u5c06<code>hello</code>\u53c2\u6570\u6253\u5370\u51fa\u6765</p> <p>\u6ce8\u610f\u53c2\u6570\u91cc\u9762\u4e0d\u5e94\u8be5\u6709\u7a7a\u683c\uff0c\u5982\u679c\u60a8\u5e0c\u671b\u4f20\u9012\u7684\u53c2\u6570\u4e2d\u5305\u542b\u7a7a\u683c\uff08\u4f8b\u5982\u4e00\u4e2a\u540d\u4e3a My Photos \u7684\u6587\u4ef6\u5939\uff09\uff0c\u60a8\u8981\u4e48\u7528\u4f7f\u7528\u5355\u5f15\u53f7\uff0c\u53cc\u5f15\u53f7\u5c06\u5176\u5305\u88f9\u8d77\u6765\uff0c\u8981\u4e48\u4f7f\u7528\u8f6c\u4e49\u7b26\u53f7 <code>\\</code> \u8fdb\u884c\u5904\u7406\uff08<code>My\\ Photos</code>\uff09\u3002</p> <p>\u6bd4\u5982<code>echo Hello\\ World</code></p> <pre><code>\u279c  try mkdir My Photos\n\u279c  try ls\nMy     Photos\n\u279c  try mkdir My\\ Photos\n\u279c  try ls\nMy        My Photos Photos\n</code></pre> <ol> <li>Shell \u6307\u4ee4\u641c\u7d22\u7684\u8def\u5f84</li> </ol> <pre><code>\u279c  ~ echo $PATH\n/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/go/bin:/Library/Apple/usr/bin\n\u279c  ~ which echo\necho: shell built-in command\n\u279c  ~ /bin/echo $PATH\n/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/go/bin:/Library/Apple/usr/bin\n</code></pre> <ol> <li>\u5728shell\u4e2d\u5bfc\u822a</li> </ol> <p>shell \u4e2d\u7684\u8def\u5f84\u662f\u4e00\u7ec4\u88ab\u5206\u5272\u7684\u76ee\u5f55\uff0c\u5728 Linux \u548c macOS \u4e0a\u4f7f\u7528 <code>/</code> \u5206\u5272\uff0c\u800c\u5728Windows\u4e0a\u662f <code>\\</code>\u3002</p> <p>\u8def\u5f84 <code>/</code> \u4ee3\u8868\u7684\u662f\u7cfb\u7edf\u7684\u6839\u76ee\u5f55\uff0c\u5982\u679c\u67d0\u4e2a\u8def\u5f84\u4ee5 <code>/</code> \u5f00\u5934\uff0c\u90a3\u4e48\u5b83\u662f\u4e00\u4e2a \u7edd\u5bf9\u8def\u5f84\uff0c\u5176\u4ed6\u7684\u90fd\u662f \u76f8\u5bf9\u8def\u5f84 \u3002\u5982\u679c\u67d0\u4e2a\u8def\u5f84\u4ee5 <code>/</code> \u5f00\u5934\uff0c\u90a3\u4e48\u5b83\u662f\u4e00\u4e2a \u7edd\u5bf9\u8def\u5f84\uff0c\u5176\u4ed6\u7684\u90fd\u662f \u76f8\u5bf9\u8def\u5f84 \u3002</p> <pre><code>\u279c  ~ pwd\n/Users/charleschile\n\u279c  ~ cd /home\n\u279c  /home pwd\n/home\n\u279c  /home cd ..\n\u279c  / pwd\n/\n\u279c  / cd ./home\n\u279c  /home pwd\n/home\n\u279c  /home cd\n\u279c  ~\n</code></pre> <ol> <li>\u67e5\u770b\u6307\u5b9a\u76ee\u5f55\u4e0b\u5305\u542b\u54ea\u4e9b\u6587\u4ef6\uff0c\u6211\u4eec\u4f7f\u7528 <code>ls</code> \u547d\u4ee4</li> </ol> <pre><code>\u279c  Desktop ls\nCodes                                     Personal File                             \u8349\u7a3f.docx                                 \u622a\u5c4f2023-02-16 17.39.05.png               \u5173\u952e\u8bcd\uff1a.md\nICA.docx                                  blockchain.md                             \u8349\u7a3f2.docx                                \u622a\u5c4f2023-02-17 08.44.15.png\nMale infertility as a window to health.md \u6bd5\u8bbe                                      \u622a\u5c4f2023-02-15 11.48.28.png               \u4ea4\u6613\u8bb0\u5f55.md\n\u279c  Desktop ls -l\ntotal 1248\ndrwxr-xr-x@  6 charleschile  staff     192  1 18 11:36 Codes\n-rw-r--r--@  1 charleschile  staff  260007  2 16 18:56 ICA.docx\n-rw-r--r--@  1 charleschile  staff    2292  2 17 01:13 Male infertility as a window to health.md\ndrwxrwxrwx  13 charleschile  staff     416  1 13 12:43 Personal File\n-rw-r--r--@  1 charleschile  staff   13623  2  7 11:35 blockchain.md\ndrwxrwxrwx@ 15 charleschile  staff     480  2 17 08:44 \u6bd5\u8bbe\n-rw-r--r--@  1 charleschile  staff   15101  2 16 15:08 \u8349\u7a3f.docx\n-rw-r--r--@  1 charleschile  staff   13410  2 17 04:51 \u8349\u7a3f2.docx\n-rw-r--r--@  1 charleschile  staff   22919  2 15 11:48 \u622a\u5c4f2023-02-15 11.48.28.png\n-rw-r--r--@  1 charleschile  staff  105133  2 16 17:39 \u622a\u5c4f2023-02-16 17.39.05.png\n-rw-r--r--@  1 charleschile  staff  183011  2 17 08:44 \u622a\u5c4f2023-02-17 08.44.15.png\n-rw-r--r--@  1 charleschile  staff    1018  2 10 12:26 \u4ea4\u6613\u8bb0\u5f55.md\n-rw-r--r--@  1 charleschile  staff     828  1 26 23:10 \u5173\u952e\u8bcd\uff1a.md\n</code></pre> <p><code>ls -l</code>\u8fd9\u4e2a\u53c2\u6570\u53ef\u4ee5\u66f4\u52a0\u8be6\u7ec6\u5730\u5217\u51fa\u76ee\u5f55\u4e0b\u6587\u4ef6\u6216\u6587\u4ef6\u5939\u7684\u4fe1\u606f\u3002\u9996\u5148\uff0c\u672c\u884c\u7b2c\u4e00\u4e2a\u5b57\u7b26 <code>d</code> \u8868\u793a <code>missing</code> \u662f\u4e00\u4e2a\u76ee\u5f55\u3002\u7136\u540e\u63a5\u4e0b\u6765\u7684\u4e5d\u4e2a\u5b57\u7b26\uff0c\u6bcf\u4e09\u4e2a\u5b57\u7b26\u6784\u6210\u4e00\u7ec4\u3002 \uff08<code>rwx</code>\uff09. \u5b83\u4eec\u5206\u522b\u4ee3\u8868\u4e86\u6587\u4ef6\u6240\u6709\u8005\uff08<code>missing</code>\uff09\uff0c\u7528\u6237\u7ec4\uff08<code>users</code>\uff09 \u4ee5\u53ca\u5176\u4ed6\u6240\u6709\u4eba\u5177\u6709\u7684\u6743\u9650\u3002\u5176\u4e2d <code>-</code> \u8868\u793a\u8be5\u7528\u6237\u4e0d\u5177\u5907\u76f8\u5e94\u7684\u6743\u9650\u3002\u4ece\u4e0a\u9762\u7684\u4fe1\u606f\u6765\u770b\uff0c\u53ea\u6709\u6587\u4ef6\u6240\u6709\u8005\u53ef\u4ee5\u4fee\u6539\uff08<code>w</code>\uff09\uff0c<code>missing</code> \u6587\u4ef6\u5939 \uff08\u4f8b\u5982\uff0c\u6dfb\u52a0\u6216\u5220\u9664\u6587\u4ef6\u5939\u4e2d\u7684\u6587\u4ef6\uff09\u3002\u4e3a\u4e86\u8fdb\u5165\u67d0\u4e2a\u6587\u4ef6\u5939\uff0c\u7528\u6237\u9700\u8981\u5177\u5907\u8be5\u6587\u4ef6\u5939\u4ee5\u53ca\u5176\u7236\u6587\u4ef6\u5939\u7684\u201c\u641c\u7d22\u201d\u6743\u9650\uff08\u4ee5\u201c\u53ef\u6267\u884c\u201d\uff1a<code>x</code>\uff09\u6743\u9650\u8868\u793a\u3002\u4e3a\u4e86\u5217\u51fa\u5b83\u7684\u5305\u542b\u7684\u5185\u5bb9\uff0c\u7528\u6237\u5fc5\u987b\u5bf9\u8be5\u6587\u4ef6\u5939\u5177\u5907\u8bfb\u6743\u9650\uff08<code>r</code>\uff09\u3002\u5bf9\u4e8e\u6587\u4ef6\u6765\u8bf4\uff0c\u6743\u9650\u7684\u610f\u4e49\u4e5f\u662f\u7c7b\u4f3c\u7684\u3002\u6ce8\u610f\uff0c<code>/bin</code> \u76ee\u5f55\u4e0b\u7684\u7a0b\u5e8f\u5728\u6700\u540e\u4e00\u7ec4\uff0c\u5373\u8868\u793a\u6240\u6709\u4eba\u7684\u7528\u6237\u7ec4\u4e2d\uff0c\u5747\u5305\u542b <code>x</code> \u6743\u9650\uff0c\u4e5f\u5c31\u662f\u8bf4\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u6267\u884c\u8fd9\u4e9b\u7a0b\u5e8f\u3002</p> <p>\u6bd4\u5982<code>drwxr-xr-x</code>\u4ee3\u8868\u8fd9\u662f\u4e00\u4e2a\u6587\u4ef6\u5939\uff0c<code>rwx</code>\u4ee3\u8868\u6587\u4ef6\u5939\u7684\u6240\u6709\u8005\u80fd\u591f\u8bfb\u3001\u5199\u3001\u641c\u7d22\u8fd9\u4e2a\u6587\u4ef6\u5939\u91cc\u7684\u5185\u5bb9\uff0c<code>r-x</code>\u4ee3\u8868\u7528\u6237\u7ec4\u53ea\u80fd\u8bfb\u548c\u641c\u7d22\uff0c\u4e0b\u4e00\u4e2a<code>r-x</code>\u4ee3\u8868\u5176\u4ed6\u6240\u6709\u4eba\u4e5f\u53ea\u80fd\u8bfb\u548c\u641c\u7d22</p> <ol> <li>\u6587\u4ef6\u7684\u79fb\u52a8\u548c\u91cd\u547d\u540d</li> </ol> <p>\u5b9e\u9645\u4e0a\u5c06\u6587\u4ef6\u5728\u540c\u4e00\u4e2a\u76ee\u5f55\u4e0b\u79fb\u52a8\u5c31\u76f8\u5f53\u4e8e\u66f4\u6539\u4e86\u6587\u4ef6\u540d\uff1a</p> <pre><code>mv test.md try.md\n//\u5b9e\u9645\u4e0a\u5c06test.md \u6539\u540d\u6210\u4e86try.md\n</code></pre> <p>\u6587\u4ef6\u79fb\u52a8\u6587\u4ef6\u5939\u5e76\u4e14\u6539\u540d\uff1a</p> <pre><code>\u279c  try mv try.md ../test/test.md\n</code></pre> <ol> <li>\u62f7\u8d1d\u6587\u4ef6</li> </ol> <pre><code>\u279c  test cp test.md try.md\n</code></pre> <ol> <li>\u65b0\u5efa\u6587\u4ef6\u5939</li> </ol> <pre><code>\u279c  test mkdir test1\n</code></pre> <ol> <li>\u5c55\u793a\u7a0b\u5e8f\u7684\u7528\u6237\u624b\u518c</li> </ol> <pre><code>man ls\n</code></pre> <ol> <li>\u4f7f\u7528<code>&gt;</code>\u548c<code>&lt;</code>\u5728\u7a0b\u5e8f\u4e4b\u95f4\u521b\u5efa\u8fde\u63a5    <pre><code>\u279c  test cat test.md\ntest%\n\u279c  test echo hello &gt; test.md\n\u279c  test cat test.md\nhello\n\n\n\n\u279c  test cat &lt; test.md\nhello\n\u279c  test cat &lt; test.md &gt; test2.md\n\u279c  test cat test2.md\nhello\n</code></pre></li> </ol> <p>\u4f7f\u7528<code>|</code>\u5c06\u4e00\u4e2a\u7a0b\u5e8f\u7684\u8f93\u51fa\u548c\u53e6\u5916\u4e00\u4e2a\u7a0b\u5e8f\u7684\u8f93\u5165\u8fde\u63a5\u8d77\u6765</p> <p><code>tail -n1</code>\u662f\u53d6\u51fa\u6700\u540e\u4e00\u884c\u7684\u5185\u5bb9</p> <pre><code>\u279c  ~ ls -l /\ntotal 9\ndrwxrwxr-x  35 root  admin  1120  2 16 13:53 Applications\ndrwxr-xr-x  67 root  wheel  2144  1 14 08:34 Library\ndrwxr-xr-x@  9 root  wheel   288 12  2 16:43 System\ndrwxr-xr-x   5 root  admin   160 12  2 16:43 Users\ndrwxr-xr-x   3 root  wheel    96  2 18 09:46 Volumes\ndrwxr-xr-x@ 38 root  wheel  1216 12  2 16:43 bin\ndrwxr-xr-x   2 root  wheel    64 12  2 16:43 cores\ndr-xr-xr-x   3 root  wheel  4430  2 18 09:46 dev\nlrwxr-xr-x@  1 root  wheel    11 12  2 16:43 etc -&gt; private/etc\nlrwxr-xr-x   1 root  wheel    25  2 18 09:46 home -&gt; /System/Volumes/Data/home\ndrwxr-xr-x   2 root  wheel    64 12  2 16:43 opt\ndrwxr-xr-x   6 root  wheel   192  2 18 09:46 private\ndrwxr-xr-x@ 65 root  wheel  2080 12  2 16:43 sbin\nlrwxr-xr-x@  1 root  wheel    11 12  2 16:43 tmp -&gt; private/tmp\ndrwxr-xr-x@ 11 root  wheel   352 12  2 16:43 usr\nlrwxr-xr-x@  1 root  wheel    11 12  2 16:43 var -&gt; private/var\n\u279c  ~ ls -l / | tail -n1\nlrwxr-xr-x@  1 root  wheel    11 12  2 16:43 var -&gt; private/var\n</code></pre>"},{"location":"Tool/MIT/missing_semester/#shell-tools-and-scripting","title":"Shell Tools and Scripting","text":""},{"location":"Tool/git/git/","title":"git \u4f7f\u7528","text":""},{"location":"Tool/git/git/#git_1","title":"\u4e00\u3001git\u662f\u4ec0\u4e48","text":""},{"location":"Tool/git/git/#githubhttp","title":"\u914d\u7f6egithub\u7684http\u7aef\u53e3","text":"<p>\u5728vpn\u7684\u914d\u7f6e<code>yaml</code>\u6587\u4ef6\u4e2d\uff0c\u53ef\u4ee5\u627e\u5230<code>mixed-port:7890</code></p> <p>\u6240\u4ee5\u9700\u8981\u5728\u7ec8\u7aef\u8bbe\u7f6egit\u7684http\u7aef\u53e3: <pre><code>git config --global http.proxy '127.0.0.1:7890'\n\ngit config --global https.proxy '127.0.0.1:7890'\n</code></pre></p> <p>\u5728\u53d6\u6d88\u5168\u5c40\u4ee3\u7406\u4e4b\u540e</p> <p>\u9700\u8981\u5c06\u4ee3\u7406\u7aef\u53e3\u5173\u95ed: <pre><code>git config --global --unset http.proxy\n\ngit config --global --unset https.proxy\n</code></pre></p>"},{"location":"Tool/git/git/#githubssh-key","title":"\u914d\u7f6egithub\u7684ssh key","text":""},{"location":"Tool/git/git/#github","title":"\u914d\u7f6egithub\u7684\u7528\u6237\u8bbe\u7f6e","text":"<pre><code>\u279c  ~ git config --global user.name charleschile\n\u279c  ~ git config --global user.email charles.chi.le@outlook.com\n</code></pre>"},{"location":"Tool/git/git/#ssh-key","title":"\u751f\u6210\u81ea\u5df1\u7684ssh-key","text":"<pre><code>\u279c  ~ ssh-keygen -t rsa -b 4096 -C charles.chi.le@outlook.com\n</code></pre> <p>\u6ce8\u610f\u8f93\u5165\u597d\u4e0a\u9762\u8fd9\u6761\u547d\u4ee4\u540e\uff0c\u4e00\u76f4\u6309\u56de\u8f66\uff0c\u4ec0\u4e48\u90fd\u4e0d\u7528\u8f93\u5165</p> <pre><code>Generating public/private rsa key pair.\nEnter file in which to save the key (/Users/charleschile/.ssh/id_rsa):\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\n\nYour identification has been saved in /Users/charleschile/.ssh/id_rsa\nYour public key has been saved in /Users/charleschile/.ssh/id_rsa.pub\nThe key fingerprint is:\nSHA256:MFuYaD/EEt+oNtc9nU+ssySqrMohTghqDg53F1uXVIs charles.chi.le@outlook.com\nThe key's randomart image is:\n+---[RSA 4096]----+\n|    .       .    |\n|     = =   o .   |\n|    + X o E .    |\n|   . = * o o o   |\n|.   + * S = o o  |\n|+  . o = . . +   |\n|*oo . o   . + .  |\n|O+ o o   . o o   |\n| +o...o..   .    |\n+----[SHA256]-----+\n</code></pre> <p>\u62f7\u8d1d~/.ssh/id_rsa.pub\u7684\u8f93\u5165\u5230\u526a\u5207\u677f\uff08\u5373\u62f7\u8d1d\u516c\u94a5\u5185\u5bb9\uff09</p> <pre><code>\u279c  ~ cat /Users/charleschile/.ssh/id_rsa.pub\n</code></pre> <p>\u62f7\u8d1d\u5373\u53ef</p>"},{"location":"Tool/git/git/#githubssh-key_1","title":"\u914d\u7f6egithub\u7684ssh key","text":"<p>\u6253\u5f00https://github.com/settings/keys</p> <p>New \u4e00\u4e2assh key</p>"},{"location":"Tool/mac/remacbook/","title":"MacBook \u73af\u5883\u914d\u7f6e","text":""},{"location":"Tool/mac/remacbook/#_1","title":"\u914d\u7f6e\u53c2\u8003","text":"<p>macOS Setup Guide</p>"},{"location":"Tool/mac/remacbook/#_2","title":"\u524d\u7f6e\u4e0b\u8f7d","text":"<p>\u5fae\u4fe1\u3001qq\u3001chrome\u3001glados\u3001office365\u5957\u4ef6(\u76f4\u63a5\u4eceapp store\u4e0b\u8f7d\u5373\u53ef)\u3001typora</p> <p>Magnet(xiangxijie\u7684\u89c6\u9891\u91cc\u9762\u51fa\u73b0)</p>"},{"location":"Tool/mac/remacbook/#xcode","title":"Xcode\u4e0b\u8f7d","text":"<p>\u60f3\u4e0b\u8f7dhomebrew\u5c31\u5fc5\u987b\u8981\u4e0b\u8f7dXcode..</p> <p>\u76f4\u63a5\u4eceapp store\u4e0b\u8f7dxcode\u5373\u53ef\uff0c\u5e94\u8be5\u662f\u8981\u5f88\u4e45\u7684</p> <pre><code>sudo xcode-select --install\n</code></pre>"},{"location":"Tool/mac/remacbook/#homebrew","title":"homebrew","text":"<p>\u7136\u540e\u53c2\u8003</p> <p>https://zhuanlan.zhihu.com/p/30704752</p> <pre><code>/bin/zsh -c \"$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)\"\n</code></pre> <p>\u4f1a\u9047\u5230\u62a5\u9519:</p> <pre><code>fatal: not in a git directory\nError: Command failed with exit 128: git\n</code></pre> <p>\u89e3\u51b3\u65b9\u6cd5\uff1a</p> <p>\u5148\u67e5\u770bbrew\u7684version</p> <pre><code>brew -v\n</code></pre> <p>\u7136\u540e\u770b\u5230\u63d0\u793a\uff1a(\u76f4\u63a5\u8dd1\u4e0b\u9762\u4e24\u884c\u4ee3\u7801)</p> <pre><code>git config --global --add safe.directory /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core\ngit config --global --add safe.directory /usr/local/Homebrew/Library/Taps/homebrew/homebrew-cask\n</code></pre>"},{"location":"Tool/mac/remacbook/#iterm2","title":"iTerm2","text":"<pre><code>brew install --cask iterm2\n</code></pre>"},{"location":"Tool/mac/remacbook/#iterm2_1","title":"\u914d\u7f6eiTerm2","text":"<p>\u53c2\u8003\u7f51\u7ad9https://zhuanlan.zhihu.com/p/550022490 \u53c2\u8003\u914d\u7f6e\u4e3b\u9898</p>"},{"location":"Tool/mac/remacbook/#nerd-font","title":"\u6216\u8005\u53ef\u4ee5\u76f4\u63a5\u53c2\u8003nerd-font\u7684\u5b98\u65b9\u4ed3\u5e93","text":"<p>https://github.com/ryanoasis/nerd-fonts#option-4-homebrew-fonts <pre><code>brew tap homebrew/cask-fonts\nbrew install font-hack-nerd-font\n</code></pre></p>"},{"location":"Tool/mac/remacbook/#_3","title":"\u66f4\u6362\u5b57\u4f53","text":"<p>\u53c2\u8003\u7f51\u7ad9:https://zhuanlan.zhihu.com/p/361282459</p>"},{"location":"Tool/mac/remacbook/#git","title":"git","text":"<pre><code>brew install git\n</code></pre>"},{"location":"Tool/mac/remacbook/#zsh","title":"zsh","text":"<pre><code>brew install zsh\n</code></pre> <p>\u7136\u540e\u53c2\u8003\uff1ahttps://zhuanlan.zhihu.com/p/35283688</p> <pre><code># \u8fd9\u4e2a\u547d\u4ee4\u6765\u67e5\u770b\u6211\u4eec\u7684\u7535\u8111\u4e0a\u662f\u5426\u5b89\u88c5\u4e86 Zsh \nzsh --version\n</code></pre> <pre><code># \u67e5\u770b\u7cfb\u7edf\u5f53\u524d\u6240\u6709\u7684 shell\ncat /etc/shells\n\n# \u67e5\u770b\u5f53\u524d\u7684shell\necho $SHELL\n</code></pre> <pre><code>sh -c \"$(curl -fsSL https://gitee.com/mirrors/oh-my-zsh/raw/master/tools/install.sh)\"\n</code></pre> <p>\u539f\u914d\u7f6e\u6587\u4ef6</p> <pre><code># If you come from bash you might have to change your $PATH.\n# export PATH=$HOME/bin:/usr/local/bin:$PATH\n\n# Path to your oh-my-zsh installation.\nexport ZSH=\"$HOME/.oh-my-zsh\"\n\n# Set name of the theme to load --- if set to \"random\", it will\n# load a random theme each time oh-my-zsh is loaded, in which case,\n# to know which specific one was loaded, run: echo $RANDOM_THEME\n# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes\nZSH_THEME=\"powerlevel10k/powerlevel10k\"\n\n# Set list of themes to pick from when loading at random\n# Setting this variable when ZSH_THEME=random will cause zsh to load\n# a theme from this variable instead of looking in $ZSH/themes/\n# If set to an empty array, this variable will have no effect.\n# ZSH_THEME_RANDOM_CANDIDATES=( \"robbyrussell\" \"agnoster\" )\n\n# Uncomment the following line to use case-sensitive completion.\n# CASE_SENSITIVE=\"true\"\n\n# Uncomment the following line to use hyphen-insensitive completion.\n# Case-sensitive completion must be off. _ and - will be interchangeable.\n# HYPHEN_INSENSITIVE=\"true\"\n\n# Uncomment one of the following lines to change the auto-update behavior\n# zstyle ':omz:update' mode disabled  # disable automatic updates\n# zstyle ':omz:update' mode auto      # update automatically without asking\n# zstyle ':omz:update' mode reminder  # just remind me to update when it's time\n\n# Uncomment the following line to change how often to auto-update (in days).\n# zstyle ':omz:update' frequency 13\n\n# Uncomment the following line if pasting URLs and other text is messed up.\n# DISABLE_MAGIC_FUNCTIONS=\"true\"\n\n# Uncomment the following line to disable colors in ls.\n# DISABLE_LS_COLORS=\"true\"\n\n# Uncomment the following line to disable auto-setting terminal title.\n# DISABLE_AUTO_TITLE=\"true\"\n\n# Uncomment the following line to enable command auto-correction.\n# ENABLE_CORRECTION=\"true\"\n\n# Uncomment the following line to display red dots whilst waiting for completion.\n# You can also set it to another string to have that shown instead of the default red dots.\n# e.g. COMPLETION_WAITING_DOTS=\"%F{yellow}waiting...%f\"\n# Caution: this setting can cause issues with multiline prompts in zsh &lt; 5.7.1 (see #5765)\n# COMPLETION_WAITING_DOTS=\"true\"\n\n# Uncomment the following line if you want to disable marking untracked files\n# under VCS as dirty. This makes repository status check for large repositories\n# much, much faster.\n# DISABLE_UNTRACKED_FILES_DIRTY=\"true\"\n\n# Uncomment the following line if you want to change the command execution time\n# stamp shown in the history command output.\n# You can set one of the optional three formats:\n# \"mm/dd/yyyy\"|\"dd.mm.yyyy\"|\"yyyy-mm-dd\"\n# or set a custom format using the strftime function format specifications,\n# see 'man strftime' for details.\n# HIST_STAMPS=\"mm/dd/yyyy\"\n\n# Would you like to use another custom folder than $ZSH/custom?\n# ZSH_CUSTOM=/path/to/new-custom-folder\n\n# Which plugins would you like to load?\n# Standard plugins can be found in $ZSH/plugins/\n# Custom plugins may be added to $ZSH_CUSTOM/plugins/\n# Example format: plugins=(rails git textmate ruby lighthouse)\n# Add wisely, as too many plugins slow down shell startup.\nplugins=(git)\n\nsource $ZSH/oh-my-zsh.sh\n\n# User configuration\n\n# export MANPATH=\"/usr/local/man:$MANPATH\"\n\n# You may need to manually set your language environment\n# export LANG=en_US.UTF-8\n\n# Preferred editor for local and remote sessions\n# if [[ -n $SSH_CONNECTION ]]; then\n#   export EDITOR='vim'\n# else\n#   export EDITOR='mvim'\n# fi\n\n# Compilation flags\n# export ARCHFLAGS=\"-arch x86_64\"\n\n# Set personal aliases, overriding those provided by oh-my-zsh libs,\n# plugins, and themes. Aliases can be placed here, though oh-my-zsh\n# users are encouraged to define aliases within the ZSH_CUSTOM folder.\n# For a full list of active aliases, run `alias`.\n#\n# Example aliases\n# alias zshconfig=\"mate ~/.zshrc\"\n# alias ohmyzsh=\"mate ~/.oh-my-zsh\"\n</code></pre>"},{"location":"Tool/mac/remacbook/#vscode","title":"vscode","text":"<pre><code>brew install --cask visual-studio-code\n</code></pre>"},{"location":"Tool/mac/remacbook/#python","title":"python","text":"<pre><code>brew install python\n</code></pre> <pre><code>pip3 install mkdocs-material -i https://pypi.tuna.tsinghua.edu.cn/simple\n</code></pre>"},{"location":"Tool/mac/remacbook/#git_1","title":"\u5982\u4f55\u5c06\u547d\u4ee4\u884c\u4e2d\u7684git\u63d0\u793a\u8bed\u8a00\u6539\u4e3a\u82f1\u6587","text":"<p>https://blog.csdn.net/michael_wgy_/article/details/105858848</p>"},{"location":"Tool/mac/remacbook/#macvscodecpp","title":"\u8ba4\u8bc6mac\u6587\u4ef6\u5e76\u5207\u914d\u7f6evscode\u7f16\u5199cpp","text":"<p>\u53c2\u7167yangxijie\u7684\u6559\u7a0b</p> <p>Install c/c++ \u548ccode runner\u63d2\u4ef6</p> <p><code>vscode-icons-mac</code>\uff1a\u8c03\u6574\u6587\u4ef6\u7ba1\u7406\u5668\u90a3\u91cc\u7684\u56fe\u6807</p> <p><code>Bracket Pair Colorizer</code>\uff1a\u5c06\u767d\u8272\u7684\u62ec\u53f7\u53d8\u4e3a\u5339\u914d\u7684\u5f69\u8272</p>"},{"location":"Tool/mac/troubleshooting/","title":"Mac Troubleshooting","text":""},{"location":"Tool/mac/troubleshooting/#ipad","title":"iPad\u5728\u968f\u822a\u72b6\u6001\u4e0b\u5206\u8fa8\u7387\u7684\u66f4\u6539","text":"<p>\u53c2\u8003\uff1ahttps://blog.csdn.net/wyx963323759/article/details/125003461</p> <p>\u89e3\u51b3\u65b9\u6848\uff1a\u901a\u8fc7 displayplacer \u53ef\u4ee5\u7075\u6d3b\u8c03\u6574 ipad \u7684\u4f4d\u7f6e\uff0c\u662f\u5426\u65cb\u8f6c\uff0c\u4ee5\u53ca\u5206\u8fa8\u7387\u8bbe\u7f6e</p>"},{"location":"Tool/mac/troubleshooting/#displayplacer","title":"displayplacer \u5b89\u88c5","text":"<pre><code>brew tap jakehilborn/jakehilborn &amp;&amp; brew install displayplacer\n</code></pre>"},{"location":"Tool/mac/troubleshooting/#displayplacer_1","title":"displayplacer \u8bbe\u7f6e","text":"<p>\u67e5\u770b\u5f53\u524d\u591a\u5c4f\u8be6\u7ec6\u53c2\u6570:</p> <pre><code>displayplacer list\n</code></pre> <p>\u66f4\u6539iPad\u7684\u5206\u8fa8\u7387\uff1a</p> <pre><code>displayplacer \"id:6161706C-6950-6164-0000-053900000000 res:1112x834 hz:60 color_depth:4 origin:(0,0) degree:0\"\n</code></pre> <p>\u73b0\u5728\u4e09\u53f0\u663e\u793a\u5668\u7684\u53c2\u6570\uff1a</p> <pre><code>displayplacer \"id:FB5C2A5F-8168-BD9A-131D-7B9A493CA81C res:1920x1080 hz:144 color_depth:8 scaling:off origin:(0,0) degree:0\" \"id:748363EE-ED26-C6C5-82A3-0EE425DFD994 res:1680x1050 color_depth:4 scaling:on origin:(1920,0) degree:0\" \"id:6161706C-6950-6164-0000-053900000000 res:1112x834 hz:60 color_depth:4 scaling:on origin:(3600,789) degree:0\"\n</code></pre> <p>\u539f\u59cb\u53c2\u6570\uff1a <pre><code>displayplacer \"id:748363EE-ED26-C6C5-82A3-0EE425DFD994 res:1680x1050 color_depth:4 enabled:true scaling:on origin:(0,0) degree:0\" \"id:FB5C2A5F-8168-BD9A-131D-7B9A493CA81C res:1920x1080 hz:60 color_depth:8 enabled:true scaling:off origin:(1680,0) degree:0\" \"id:D02F83A2-B7BC-6AD5-FE14-E2A880478F1D res:2560x1600 hz:60 color_depth:8 enabled:true scaling:off origin:(3600,808) degree:0\"\n</code></pre> \u82f9\u679c\u672c\u8eab\uff1a <pre><code>displayplacer \"id:748363EE-ED26-C6C5-82A3-0EE425DFD994 res:1680x1050 color_depth:4 enabled:true scaling:on origin:(0,0) degree:0\"\n</code></pre> \u5927\u5c4f\u5e55\uff1a <pre><code>displayplacer \"id:FB5C2A5F-8168-BD9A-131D-7B9A493CA81C res:1920x1080 hz:60 color_depth:8 enabled:true scaling:off origin:(1680,0) degree:0\"\n</code></pre></p> <p>\u526f\u5c4f\uff1a <pre><code>displayplacer \"id:D02F83A2-B7BC-6AD5-FE14-E2A880478F1D res:2560x1600 hz:60 color_depth:8 enabled:true scaling:off origin:(1920,808) degree:0\"\n</code></pre></p> <p>\u4fee\u6539\u540e\uff1a \u5927\u5c4f\u5e55\uff1a <pre><code>displayplacer \"id:FB5C2A5F-8168-BD9A-131D-7B9A493CA81C res:1920x1080 hz:60 color_depth:4 enabled:true scaling:off origin:(1680,0) degree:0\"\n</code></pre></p> <p>\u526f\u5c4f\uff1a <pre><code>displayplacer \"id:D02F83A2-B7BC-6AD5-FE14-E2A880478F1D res:1440x900 hz:60 color_depth:4 enabled:true scaling:on origin:(1920,808) degree:0\"\n</code></pre></p>"},{"location":"Tool/mkdocs/MkDocs%20Material/","title":"\u4ece0\u5f00\u59cb\u90e8\u7f72\u4e00\u4e2aMaterial for MkDocs \u4e2a\u4eba\u7b14\u8bb0","text":""},{"location":"Tool/mkdocs/MkDocs%20Material/#1","title":"1. \u8d44\u6599","text":"<ul> <li> <p>MkDocs-Material\u5b98\u65b9github\u4ed3\u5e93</p> </li> <li> <p>MkDocs-Material\u5b98\u65b9\u7f51\u7ad9</p> </li> </ul>"},{"location":"Tool/mkdocs/MkDocs%20Material/#2","title":"2. \u5efa\u7acb\u7f51\u7ad9","text":"<p>\u5982\u679c\u5bf9python\u719f\u6089\u7684\u8bdd\uff0c\u5b98\u7f51\u63a8\u8350\u4f7f\u7528<code>pip</code>\u8fdb\u884c\u4e0b\u8f7d\u5b89\u88c5</p>"},{"location":"Tool/mkdocs/MkDocs%20Material/#1_1","title":"1. \u65b0\u5efa\u4e00\u4e2a\u4e2a\u4eba\u7b14\u8bb0\u7684\u6587\u4ef6\u5730\u5740\u5730\u5740","text":""},{"location":"Tool/mkdocs/MkDocs%20Material/#2-getting-started","title":"2. getting started","text":"<p>\u5728terminal\u4e2d\u8f93\u5165:</p> <pre><code>pip install mkdocs-material\n</code></pre> <p>\u6216\u8005\u5982\u679c\u4f7f\u7528pycharm\u7684\u8bdd\uff0c\u53ef\u4ee5\u76f4\u63a5\u5728<code>Preference-Project-Python Interpreter</code>\u4e2d\u6dfb\u52a0<code>mkdocs-material</code></p>"},{"location":"Tool/mkdocs/MkDocs%20Material/#3-creating-your-site","title":"3. creating your site","text":"<p>\u5728\u81ea\u5df1\u4e2a\u4eba\u7b14\u8bb0\u7684\u5730\u5740\u4e0b\uff0c\u5728terminal\u4e2d\u8f93\u5165:</p> <pre><code>mkdocs new .\n</code></pre> <p>\u4f1a\u8df3\u51fa\u4e24\u884c\u63d0\u793a\uff1a</p> <pre><code>INFO     -  Writing config file: ./mkdocs.yml\nINFO     -  Writing initial docs: ./docs/index.md\n</code></pre> <p>\u5373\u751f\u6210\u4e86\u4e24\u4e2a\u6587\u4ef6<code>./mkdocs.yml</code>\u548c<code>./docs/index.md</code></p>"},{"location":"Tool/mkdocs/MkDocs%20Material/#4-minimal-configuration","title":"4. Minimal configuration","text":"<p>\u5728<code>mkdocs.yml</code>\u6587\u4ef6\u4e2d\u52a0\u5165:</p> <pre><code>theme:\n  name: material\n</code></pre> <p>\u5982\u679c\u4f7f\u7528vscode\uff0c\u90a3\u4e48\u53ef\u4ee5\u4e0b\u8f7dYAML\u63d2\u4ef6</p> <p>\u4e0b\u8f7d\u597dYAML\u63d2\u4ef6\u540e\uff0c\u70b9\u51fb\u63d2\u4ef6\u9875\u9762\u7684\u8bbe\u7f6e\u6309\u94ae\u9009\u62e9\u6269\u5c55\u8bbe\u7f6e\u9009\u9879</p> <p>\u5728\u65b0\u9875\u9762\u4e2d\u9009\u62e9<code>\u5728setting.json\u4e2d\u7f16\u8f91</code></p> <p>\u4fee\u6539\u9875\u9762\u4e2dyaml\u7684\u8bbe\u7f6e\u4e3a:</p> <pre><code>{\n    \"yaml.schemas\": {\n      \"https://squidfunk.github.io/mkdocs-material/schema.json\": \"mkdocs.yml\"\n    },\n    \"yaml.customTags\": [\n\n      \"!ENV scalar\",\n      \"!ENV sequence\",\n      \"tag:yaml.org,2002:python/name:materialx.emoji.to_svg\",\n      \"tag:yaml.org,2002:python/name:materialx.emoji.twemoji\",\n      \"tag:yaml.org,2002:python/name:pymdownx.superfences.fence_code_format\"\n    ]\n  }\n</code></pre>"},{"location":"Tool/mkdocs/MkDocs%20Material/#5-mkdocs-materiallive-preview-serverlive-server","title":"5. \u9884\u89c8\u7f51\u7ad9\uff08mkdocs-material\u63d0\u4f9blive preview server\uff0c\u53ef\u4ee5\u5728\u4fee\u6539\u66f4\u6539\u540e\u81ea\u52a8\u66f4\u65b0\uff0c\u548clive server\u7c7b\u4f3c\uff09","text":"<p>\u6ce8\u610f\u5728vscode\u4e2d\u53ef\u4ee5\u4f7f\u7528markdown all in one \u63d2\u4ef6\uff0c\u4f7f\u7528<code>shift + ctrl + v</code>\u5373\u8bfe\u9884\u89c8\u5e76\u4e14\u7f16\u8f91markdown\u6587\u4ef6</p> <p>\u5728\u7ec8\u7aef\u8f93\u5165\u5373\u53ef\uff1a</p> <pre><code>mkdocs serve --dirtyreload\n</code></pre> <p>\u6ce8\u610f\u8fd9\u91cc\u7684<code>--dirtyload</code>\u540e\u7f00\u662f\u4e3a\u4e86\u5904\u7406\u5927\u6587\u4ef6\u9879\u76ee\uff0c\u5e73\u65f6\u4f7f\u7528\u65f6\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528<code>mkdocs serve</code></p>"},{"location":"Tool/mkdocs/MkDocs%20Material/#6","title":"6. \u5efa\u7acb\u7f51\u9875","text":"<p>\u7ed3\u675f\u7f16\u8f91\u540e\u53ef\u4ee5\u5728\u7ec8\u7aef\u8f93\u5165:</p> <pre><code>mkdocs build\n</code></pre> <p>\u4f1a\u8df3\u51fa\u4ee5\u4e0b\u4fe1\u606f:</p> <pre><code>INFO     -  Cleaning site directory\nINFO     -  Building documentation to directory: /Users/lechi/Desktop/Codes/personalBlog/site\nINFO     -  Documentation built in 0.32 seconds\n</code></pre> <p>\u5373\u5728\u81ea\u5df1\u7684\u6587\u4ef6\u5939\u4e0b\u65b0\u5efa\u4e86\u4e00\u4e2asite\u6587\u4ef6\u5939\uff0c\u91cc\u9762\u5305\u542b\u7740<code>build</code>\u751f\u6210\u7684\u9759\u6001\u7f51\u9875\u7684\u6240\u6709\u5185\u5bb9</p>"},{"location":"Tool/mkdocs/MkDocs%20Material/#8","title":"8. \u53d1\u5e03\u9875\u9762","text":"<p>\u5728bash\u7ec8\u7aef\u8f93\u5165\u4ee5\u4e0b   \u6ce8\u610f\u5728push\u524d\u5148\u8c03\u6574vpn <pre><code>git add .\ngit commit -m \"message\"\ngit push\nmkdocs gh-deploy\n</code></pre></p>"},{"location":"Tool/mkdocs/MkDocs%E7%BE%8E%E5%8C%96/","title":"Material for MkDocs \u7684\u7f8e\u5316","text":"<p>\u4ee5\u4e0b\u90fd\u662f\u5728mkdocs.yml\u4e0b\u66f4\u6539</p>"},{"location":"Tool/mkdocs/MkDocs%E7%BE%8E%E5%8C%96/#1","title":"1. \u4fee\u6539\u989c\u8272","text":""},{"location":"Tool/mkdocs/MkDocs%E7%BE%8E%E5%8C%96/#yml","title":"\u4fee\u6539\u989c\u8272\u5b8c\u6bd5\u540e\u7684yml\u6587\u4ef6\uff08\u4f9b\u53c2\u8003\uff09\uff1a","text":"<pre><code>site_name: My Docs\n\nextra_css:\n  - stylesheets/extra.css\n\ntheme:\n  name: material\n  palette:\n    - media: \"(prefers-color-scheme: light)\"\n      scheme: default\n      toggle:\n        icon: material/weather-sunny\n        name: Switch to happy mode\n      accent: pink\n\n    # Palette toggle for dark mode\n    - media: \"(prefers-color-scheme: dark)\"\n      scheme: slate\n      toggle:\n        icon: material/weather-night\n        name: Switch to light mode\n      primary: blue grey\n      accent: pink\n</code></pre>"},{"location":"Tool/mkdocs/MkDocs%E7%BE%8E%E5%8C%96/#schemelightdark","title":"\u4fee\u6539scheme\uff08\u5373light\u548cdark\u4e24\u79cd\u4e3b\u9898\uff09","text":"<p>\u4fee\u6539<code>scheme</code>\u5c5e\u6027\u5373\u53ef\uff0c\u5206\u4e3adefault\u548cslate</p>"},{"location":"Tool/mkdocs/MkDocs%E7%BE%8E%E5%8C%96/#_1","title":"\u4fee\u6539\u6807\u9898\u680f\u989c\u8272","text":"<p>\u4fee\u6539<code>primary\u5c5e\u6027\u5373\u53ef</code></p>"},{"location":"Tool/mkdocs/MkDocs%E7%BE%8E%E5%8C%96/#_2","title":"\u4fee\u6539\u4ea4\u4e92\u5143\u7d20\u989c\u8272\uff0c\u5982\u94fe\u63a5","text":"<p>\u4fee\u6539<code>accent</code>\u5c5e\u6027\u5373\u53ef</p>"},{"location":"Tool/mkdocs/MkDocs%E7%BE%8E%E5%8C%96/#_3","title":"\u5207\u6362\u4e3b\u9898\u8bbe\u7f6e","text":"<p>\u5982\u4e0b\u4fee\u6539\uff1a</p> <pre><code>theme:\n  palette: \n\n    # Palette toggle for light mode\n    - scheme: default\n      toggle:\n        icon: material/brightness-7 \n        name: Switch to dark mode\n\n    # Palette toggle for dark mode\n    - scheme: slate\n      toggle:\n        icon: material/brightness-4\n        name: Switch to light mode\n</code></pre> <p>icon\u4e5f\u53ef\u4ee5\u8bbe\u7f6e</p>"},{"location":"Tool/mkdocs/MkDocs%E7%BE%8E%E5%8C%96/#_4","title":"\u8bbe\u7f6e\u4e3b\u9898\u6309\u7167\u6d4f\u89c8\u8005\u7cfb\u7edf\u4e3b\u9898\u81ea\u52a8\u5207\u6362","text":"<pre><code>media: \"(prefers-color-scheme: light)\"\n</code></pre>"},{"location":"Tool/mkdocs/MkDocs%E7%BE%8E%E5%8C%96/#_5","title":"\u81ea\u5b9a\u4e49\u989c\u8272","text":"<p>\u9009\u989c\u8272\u7f51\u7ad9\uff1ahttps://materialui.co/colors</p> <p>\u8be6\u7ec6\u8bf4\u660ecss\u6587\u4ef6\u5f15\u5165\uff1ahttps://squidfunk.github.io/mkdocs-material/customization/</p> <p>extra.css\u6587\u4ef6\u793a\u4f8b\uff1a</p> <pre><code>:root {\n  --md-primary-fg-color:        #EE0F0F;\n  --md-primary-fg-color--light: #ECB7B7;\n  --md-primary-fg-color--dark:  #90030C;\n}\n</code></pre> <p>Medics.yml\u6587\u4ef6\u793a\u4f8b\uff1a</p> <pre><code>extra_css:\n  - stylesheets/extra.css\n</code></pre>"},{"location":"Tool/mkdocs/MkDocs%E7%BE%8E%E5%8C%96/#2","title":"2. \u4fee\u6539\u5bfc\u822a\u680f","text":"<p>\u542f\u7528instant loading\u8fbe\u5230\u6240\u6709\u5185\u90e8\u94fe\u63a5\u4e0a\u7684\u70b9\u51fb\u5c06\u88ab\u62e6\u622a\u5e76\u901a\u8fc7XHR\u53d1\u9001\uff0c\u800c\u65e0\u9700\u5b8c\u5168\u91cd\u65b0\u52a0\u8f7d\u9875\u9762\u7684\u76ee\u7684\uff1a</p> <pre><code>theme:\n  features:\n    - navigation.instant\n</code></pre> <p>\u5f53anchor tracking\u88ab\u542f\u7528\u65f6\uff0c\u5730\u5740\u680f\u4e2d\u7684URL\u4f1a\u81ea\u52a8\u66f4\u65b0\u6d3b\u52a8\u951a\uff0c\u5982\u76ee\u5f55\u4e2d\u7a81\u51fa\u663e\u793a\u7684\u90a3\u6837:</p> <pre><code>theme:\n  features:\n    - navigation.tracking\n</code></pre>"},{"location":"Tool/mkdocs/MkDocs%E7%BE%8E%E5%8C%96/#_6","title":"\u6253\u5f00\u5bfc\u822a\u680f","text":"<pre><code>theme:\n  features:\n    - navigation.tabs\n</code></pre>"},{"location":"Tool/mkdocs/MkDocs%E7%BE%8E%E5%8C%96/#_7","title":"\u4fee\u6539\u5b57\u4f53","text":""},{"location":"Tool/mkdocs/Online%20personal%20notebook%20plan/","title":"Online personal notebook plan","text":""},{"location":"Tool/mkdocs/Online%20personal%20notebook%20plan/#_1","title":"\u5173\u4e8e\u4e2a\u4eba\u7b14\u8bb0\u7684\u5e03\u5c40\u548c\u7ec4\u6210","text":"<p>\u4ee5\u4e0b\u4e3a\u53c2\u8003\u8fc7\u7684\u4e2a\u4eba\u7b14\u8bb0\u6216\u8005\u535a\u5ba2\uff0c\u4ee5\u53ca\u4ed6\u4eec\u7684\u7ec4\u6210\uff1a</p>"},{"location":"Tool/mkdocs/Online%20personal%20notebook%20plan/#1","title":"1. \u6768\u5e0c\u6770\u7684\u4e2a\u4eba\u7f51\u7ad9","text":"<p>https://yang-xijie.github.io \u53c2\u8003\u90e8\u5206\uff1a\u5173\u4e8e\uff08\u4e2a\u4eba\u90e8\u5206\u3001\u7f51\u7ad9\u6784\u5efa\u8bf4\u660e\u3001\u6d4b\u8bd5\u6587\u6863\uff09\u3001\u8f6c\u8f7d\u6587\u7ae0\u3001\u4e09\u6b21\u5143\uff08\u968f\u7b14\u3001\u6587\u7ae0\u3001\u6587\u5b66\u3001\u7231\u597d\uff09\u3001\u5f00\u53d1\uff08\u6280\u672f\u6808\u6574\u7406\uff09\u3001\u535a\u5ba2</p>"},{"location":"Tool/mkdocs/Online%20personal%20notebook%20plan/#2-isshikis-notebook","title":"2. Isshiki\u4fee's Notebook","text":"<p>https://note.isshikih.top/</p> <p>\u53c2\u8003\u90e8\u5206\uff1a\u5c01\u9762\uff08\u989c\u8272\u4e3b\u9898&amp;\u591c\u95f4\u6a21\u5f0f\uff09\u3001\u6280\u672f\u4ea4\u6d41\uff08\u5e38\u7528\u5de5\u5177\uff09\u3001\u8bfe\u7a0b\u7b14\u8bb0</p>"},{"location":"Tool/mkdocs/Online%20personal%20notebook%20plan/#3","title":"3. \u9e64\u7fd4\u4e07\u91cc\u7684\u7b14\u8bb0\u672c","text":"<p>\u53c2\u8003\u90e8\u5206\uff1ahome\\computer science\\web\\others</p>"},{"location":"Tool/mkdocs/Online%20personal%20notebook%20plan/#4-sakuratsuyu","title":"4. sakuratsuyu","text":"<p>\u53c2\u8003\u90e8\u5206\uff1ahttps://sakuratsuyu.github.io/Note/</p>"},{"location":"Tool/mkdocs/Online%20personal%20notebook%20plan/#_2","title":"\u603b\u7ed3\uff1a","text":""},{"location":"Tool/mkdocs/Online%20personal%20notebook%20plan/#home-page","title":"\u4e3b\u9875\uff08Home Page\uff09","text":"<p>\u6b22\u8fce\u90e8\u5206\u3001\u989c\u8272\u4e3b\u9898&amp;\u591c\u95f4\u6a21\u5f0f</p>"},{"location":"Tool/mkdocs/Online%20personal%20notebook%20plan/#computer-science-course","title":"\u8bfe\u7a0b\u7b14\u8bb0 (Computer Science Course)","text":""},{"location":"Tool/mkdocs/Online%20personal%20notebook%20plan/#programming-problem","title":"\u7b97\u6cd5\u5237\u9898 (Programming Problem)","text":""},{"location":"Tool/mkdocs/Online%20personal%20notebook%20plan/#software-development-project","title":"\u9879\u76ee\u5f00\u53d1(Software Development Project)","text":"<p>\u6280\u672f\u6808\u6574\u7406\u3001\u53c2\u4e0e\u9879\u76ee</p>"},{"location":"Tool/mkdocs/Online%20personal%20notebook%20plan/#reprinted-article","title":"\u8f6c\u8f7d\u6587\u7ae0\uff08Reprinted Article\uff09","text":""},{"location":"Tool/mkdocs/Online%20personal%20notebook%20plan/#tool","title":"\u5de5\u5177(Tool)","text":""},{"location":"Tool/mkdocs/Online%20personal%20notebook%20plan/#blog","title":"\u751f\u6d3b\u535a\u5ba2(Blog)","text":"<p>\u968f\u7b14\u3001\u6587\u7ae0\u3001\u6587\u5b66\u3001\u7231\u597d</p>"},{"location":"Tool/mkdocs/Online%20personal%20notebook%20plan/#about-others","title":"\u5173\u4e8e(About &amp; Others)","text":"<p>\u4e2a\u4eba\u90e8\u5206\u3001\u7f51\u7ad9\u6784\u5efa\u8bf4\u660e\u3001\u6d4b\u8bd5\u6587\u6863</p>"},{"location":"Tool/resume/resume/","title":"Resume","text":""},{"location":"Tool/resume/resume/#latex-resume-remplate","title":"LaTex resume remplate","text":"<p>https://github.com/treyhunner/resume</p>"},{"location":"Tool/resume/resume/#resumecls","title":"resume.cls","text":"<pre><code>% resume.cls\n\n% \\documentstyle{resume}\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n% Copyright (C) 2010 by Trey Hunner\n%\n% Copying and distribution of this file, with or without modification,\n% are permitted in any medium without royalty provided the copyright\n% notice and this notice are preserved.  This file is offered as-is,\n% without any warranty.\n%\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\n\\ProvidesClass{resume}[2010/07/10 v0.9 Resume class]\n\n\\LoadClass[11pt,letterpaper]{article}\n\n\\usepackage[parfill]{parskip}       % Do not indent paragraphs\n\\usepackage{array}                  % required for boldface tabular columns\n\\usepackage{ifthen}\n\n\\nofiles                            % .aux files are not needed for resumes\n\\pagestyle{empty}                   % resumes do not need page numbers\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n% HEADINGS: Commands for printing name and address\n\n\\def \\name#1{\\def\\@name{#1}}        % \\name command can be used to set name\n\\def \\@name {}                      % Set \\@name to empty by default\n\n\\def \\addressSep {$\\diamond$}         % Set default address seperator\n\n% One or two address lines can be specified \n\\let \\@addressone \\relax\n\\let \\@addresstwo \\relax\n\n% \\address command can be used to set first and second address (optional)\n\\def \\address #1{\n  \\@ifundefined{@addresstwo}{\n    \\def \\@addresstwo {#1}\n  }{\n    \\def \\@addressone {#1}\n  }\n}\n\n% \\printaddress is used to style an address line (given as input)\n\\def \\printaddress #1{\n  \\begingroup\n    \\def \\\\ {\\addressSep\\ }\n    \\centerline{#1}\n  \\endgroup\n  \\par\n  \\addressskip\n}\n\n% \\printname is used to print the name as a page header\n\\def \\printname {\n  \\begingroup\n    \\centerline{\\textbf{\\MakeUppercase{\\namesize\\@name}}}\n  \\endgroup\n  \\par\n  \\nameskip\n}\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n% DOCUMENT: Create the head of the document\n\n\\AtBeginDocument{                     % Begin document\n  \\printname                        % Print the name specified with \\name\n  \\@ifundefined{@addressone}{}{     % Print the first address if specified\n    \\printaddress{\\@addressone}}\n  \\@ifundefined{@addresstwo}{}{     % Print the second address if specified\n    \\printaddress{\\@addresstwo}}\n}\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n% SECTIONS: Create section headings\n\n% Used to create large resume section\n\\newenvironment{rSection}[1]{\n  \\sectionskip\n  \\textbf{\\MakeUppercase{#1}}\n  \\sectionlineskip\n  \\hrule\n  \\begin{list}{}{\n    \\setlength{\\leftmargin}{1.5em}\n  }\n  \\item[]\n}{\n  \\end{list}\n}\n\n% Used to format job listing\n\\newenvironment{rSubsection}[4]{\n  %%%%%%%%%%%%%%%%%%%%%% Default Layout: %%%%%%%%%%%%%%%%%%%%%%%%\n  %%    Employer (bold)                     Dates (regular)    %%\n  %%    Title (emphasis)                Location (emphasis)    %%\n  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n  \\textbf{#1}                 \\hfill                  {    #2}% Stop a space\n  \\ifthenelse{\\equal{#3}{}}{}{\n  \\\\\n  \\emph{#3}                \\hfill                  \\emph{#4}% Stop a space\n  }\\smallskip\n  % \\cdot used for bullets, items non-indented\n  \\begin{list}{$\\cdot$}{\\leftmargin=0em}\n  \\itemsep -0.5em \\vspace{-0.5em}\n}{\n  \\end{list}\n  \\vspace{0.5em}\n}\n\n\\def\\namesize{\\huge}\n\\def\\nameskip{\\medskip}\n\\def\\addressskip{\\smallskip}\n\\def\\sectionskip{\\bigskip}\n\\def\\sectionlineskip{\\medskip}\n</code></pre>"},{"location":"Tool/resume/resume/#resumetex","title":"resume.tex","text":"<pre><code>\\documentclass{resume}\n\n\\usepackage[left=0.75in,top=0.6in,right=0.75in,bottom=0.6in]{geometry}\n\n\\name{John Q. Public}\n\\address{ 4489 Oxford Lane \\\\ San Antonio, PA 90024  }\n\\address{ 555~$\\cdot$~356~$\\cdot$~7936 \\\\ jpublic@example.edu }\n\n\\def\\nameskip{\\bigskip}\n\\def\\sectionskip{\\medskip}\n\n\\begin{document}\n\n  \\begin{rSection}{Education}\n    {\\bf University of California, Berkeley} \\hfill {\\em June 2004} \\\\ \n    { B.S. in Computer Science \\&amp; Engineering } \\\\\n    { Minor in Linguistics } \\smallskip \\\\\n    { Member of Eta Kappa Nu } \\\\\n    { Member of Upsilon Pi Epsilon } \\\\\n    Overall GPA: 5.678\n  \\end{rSection}\n\n  \\begin{rSection}{Experience}\n\n    \\begin{rSubsection}{ACME, Inc}{October 2010 - Present}{Web Developer}{Palo Alto, CA}\n    \\item Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec a diam lectus.\n    \\item Donec et mollis dolor. Praesent et diam eget libero Adobe Coldfusion egestas mattis sit amet vitae augue.\n    \\item Nam tincidunt congue enim, ut porta lorem Microsoft SQL lacinia consectetur.\n    \\item Donec ut libero sed arcu vehicula ultricies a non tortor. Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n    \\item Pellentesque auctor nisi id magna consequat JavaScript sagittis.\n    \\item Aliquam at massa ipsum. Quisque bash bibendum purus convallis nulla ultrices ultricies.\n    \\end{rSubsection}\n\n    \\begin{rSubsection}{AJAX Hosting}{December 2009 - October 2010}{Lead Developer}{Austin, TX}\n    \\item Aenean ut gravida lorem. Ut turpis felis, Perl pulvinar a semper sed, adipiscing id dolor.\n    \\item Curabitur dapibus enim sit amet elit pharetra tincidunt website feugiat nisl imperdiet. Ut convallis AJAX libero in urna ultrices accumsan.\n    \\item Cum sociis natoque penatibus et magnis dis MySQL parturient montes, nascetur ridiculus mus.\n    \\item In rutrum accumsan ultricies. Mauris vitae nisi at sem facilisis semper ac in est.\n    \\item Nullam cursus suscipit nisi, et ultrices justo sodales nec. Fusce venenatis facilisis lectus ac semper.\n    \\end{rSubsection}\n\n    \\begin{rSubsection}{TinySoft}{January 2008 - April 2010}{Web Designer \\&amp; Developer}{Gainesville, GA}\n    \\item Vivamus PostgreSQL fermentum semper porta. Nunc diam velit PHP, adipiscing ut tristique vitae\n    \\item Maecenas convallis ullamcorper ultricies stylesheets.\n    \\item Quisque mi metus, unit tests CSS ornare sit amet fermentum et, tincidunt et orci.\n    \\item Curabitur venenatis pulvinar tellus gravida ornare. Sed et erat faucibus nunc euismod ultricies ut id\n    \\end{rSubsection}\n\n  \\end{rSection}\n\n  \\begin{rSection}{Technical Strengths}\n    \\begin{tabular}{ @{} &gt;{\\bfseries}l @{\\hspace{6ex}} l }\n      Computer Languages &amp; Prolog, Haskell, AWK, Erlang, Scheme, ML \\\\\n      Protocols \\&amp; APIs &amp; XML, JSON, SOAP, REST \\\\\n      Databases &amp; MySQL, PostgreSQL, Microsoft SQL \\\\\n      Tools &amp; SVN, Vim, Emacs\n    \\end{tabular}\n  \\end{rSection}\n\n\\end{document}\n</code></pre>"},{"location":"Tool/sublime/sublime/","title":"sublime\u7684\u8bbe\u7f6e","text":""},{"location":"Tool/sublime/sublime/#packagecontrol","title":"\u5b89\u88c5PackageControl","text":"<p>\u70b9\u51fb\u4e0a\u65b9\u5de5\u5177\u680f Tools - Install Package Control</p> <p>\u4e0b\u8f7dCppFastOlympicCoding</p>"},{"location":"Tool/sublime/sublime/#fira-code","title":"\u4e0b\u8f7dfira-code","text":"<p>\u524d\u5f80github\u5c06\u9700\u8981\u7684zip\u5305\u4e0b\u8f7d\u4e0b\u6765\uff0c\u7136\u540e\u53f3\u952eopen\u5c31\u884c</p>"},{"location":"Tool/sublime/sublime/#install-package","title":"\u4e0d\u80fd\u4f7f\u7528install package \u7684\u89e3\u51b3\u529e\u6cd5","text":"<p>\u539f\u56e0\u662fmacOS\u7684\u7248\u672c\u592a\u9ad8\u5bfc\u81f4\u6ca1\u6709\u65e7\u7248\u7684SSL\u4e86</p> <p>\u800csublime\u9700\u8981\u4f9d\u8d56openSSL1\u6216\u80052</p> <p>\u53c2\u8003<code>https://github.com/wbond/package_control/issues/1612</code></p> <pre><code>brew install openssl@1.1 &amp;&amp; ln -sf $(set -- `brew --cellar openssl@1.1`/1.1.1? &amp;&amp; echo \"$1\")/lib/libcrypto.dylib /usr/local/lib/\n</code></pre> <p>\u5373\u53ef</p>"},{"location":"Tool/systematicReview/bilibilil/","title":"B\u7ad9\u6559\u7a0b","text":""},{"location":"Tool/systematicReview/bilibilil/#metarmeta","title":"\u3010meta\u5206\u6790\u89c6\u9891\u6559\u7a0b\u3011\u57fa\u4e8eR\u8bed\u8a00\u7684meta\u5206\u6790","text":""},{"location":"Tool/systematicReview/bilibilil/#1-rmeta","title":"1. \u57fa\u4e8er\u8bed\u8a00\u7684meta\u5206\u6790","text":"<p>meta-analysis</p> <p>\u5bf9\u4e0d\u540c\u7814\u7a76\u7ed3\u679c\u8fdb\u884c\u6536\u96c6\u3001\u5408\u5e76\u53ca\u7edf\u8ba1\u5206\u6790\u7684\u65b9\u6cd5</p> <p>\u5c06\u4ee5\u5f80\u7684\u7814\u7a76\u7ed3\u679c\u66f4\u4e3a\u5ba2\u89c2\u5730\u603b\u548c\u53cd\u6620\u51fa\u6765</p> <p>\u52a0\u6743\u5e73\u5747</p>"},{"location":"Tool/systematicReview/bilibilil/#_1","title":"\u5f02\u8d28\u6027","text":"<p>\u7edf\u8ba1\u5b66\u5f02\u8d28\u6027\uff1a</p> <p>Q\u7edf\u8ba1\u91cf\u4ee5\u53caI2\u7edf\u8ba1\u91cf\u53ef\u4ee5\u68c0\u9a8c\u5f02\u8d28\u6027\uff08\u8d8a\u5927\u8d8a\u5f02\u8d28\uff09</p>"},{"location":"Tool/systematicReview/bilibilil/#1","title":"1. \u9009\u9898","text":""},{"location":"Tool/systematicReview/bilibilil/#2","title":"2. \u6587\u732e\u68c0\u7d22","text":"<p>MEDLINE, cochranne library, Ovid, embase, web of science, pubmed</p> <p>pubmed MeSH\u4e3b\u9898\u8bcd\u68c0\u7d22</p>"},{"location":"Tool/systematicReview/bilibilil/#3-r","title":"3. R\u4f5c\u56fe","text":"<p>\u68ee\u6797\u56fe\u3001\u6f0f\u6597\u56fe\u3001\u654f\u611f\u6027\u5206\u6790\u548c\u4e9a\u7ec4\u5206\u6790\u5c55\u793a\uff08\u836f\u654f\uff09</p>"},{"location":"Tool/systematicReview/bilibilil/#2-metar","title":"2. \u4f20\u7edf\u610f\u4e49\u4e0a\u7684meta\u5206\u6790\u5728r\u4e0a\u7684\u5b9e\u73b0","text":"<p>Q\u68c0\u9a8c0.05</p> <p>I2\u68c0\u9a8c 40%\uff1f</p> <p>fixed effect model \u56fa\u5b9a\u6548\u5e94\u6a21\u578b</p> <p>random effect model \u968f\u673a\u6548\u5e94\u6a21\u578b</p>"},{"location":"Tool/systematicReview/bilibilil/#3-metar","title":"3. \u8bca\u65ad\u6027\u5b9e\u9a8c\u7684meta\u5206\u6790\u5728r\u4e2d\u7684\u5b9e\u73b0","text":""},{"location":"Tool/systematicReview/bilibilil/#4-rrob","title":"4. \u5982\u4f55\u7528r\u505a\u51fa\u504f\u501a\u98ce\u9669\u8bc4\u4f30\u56fe\uff08ROB\uff09","text":""},{"location":"Tool/systematicReview/bilibilil/#5-rmeta","title":"5. \u5982\u4f55\u7528r\u8bed\u8a00\u5b9e\u73b0\u7d2f\u79efmeta\u5206\u6790","text":""},{"location":"Tool/systematicReview/bilibilil/#_2","title":"B\u7ad9\u6559\u7a0b","text":""},{"location":"Tool/systematicReview/bilibilil/#_3","title":"\u7cfb\u7edf\u6027\u6587\u732e\u7efc\u8ff0\u5199\u4f5c\u6559\u7a0b","text":""},{"location":"Tool/systematicReview/bilibilil/#1_1","title":"1. \u4ec0\u4e48\u662f\u6587\u732e\u7efc\u8ff0","text":""},{"location":"Tool/systematicReview/bilibilil/#2_1","title":"2. \u4e3a\u4ec0\u4e48\u8981\u5199\u6587\u732e\u7efc\u8ff0","text":""},{"location":"Tool/systematicReview/bilibilil/#3","title":"3. \u6587\u732e\u7efc\u8ff0\u5206\u7c7b","text":""},{"location":"Tool/systematicReview/bilibilil/#4","title":"4. \u7cfb\u7edf\u6027\u7efc\u8ff0\u662f\u4ec0\u4e48","text":""},{"location":"Tool/systematicReview/bilibilil/#5","title":"5. \u7cfb\u7edf\u6027\u7efc\u8ff0\u600e\u4e48\u5199","text":""},{"location":"Tool/systematicReview/bilibilil/#_4","title":"\u56fe\u4e66\u9986\u7cbe\u51c6\u83b7\u53d6\u751f\u7269\u533b\u5b66\u6587\u732e\u8bb2\u5ea7","text":""},{"location":"Tool/systematicReview/bilibilil/#1_2","title":"1. \u573a\u666f\u76ee\u7684","text":"<p>\u627e\u5230\u611f\u5174\u8da3\u3001research gap\uff0c\u627e\u5230\u7814\u7a76\u65b9\u5411</p> <p>The meta-analysis of exercise for osteoarthritis --- \uff08\u6c42\u5168\uff09</p>"},{"location":"Tool/systematicReview/bilibilil/#2_2","title":"2. \u6587\u732e\u7c7b\u578b","text":"<p>\u56fe\u4e66\u9986\u9986\u85cf\u8d44\u6e90</p> <p>\u641c\u7d22\u5f15\u64ce\uff1agoogle scholar</p> <p>Meta-analysis\u9700\u8981\u9ad8\u8d28\u91cf\u7684\u5b9e\u9a8c\u6587\u732e</p>"},{"location":"Tool/systematicReview/bilibilil/#3_1","title":"3. \u83b7\u53d6\u65b9\u5f0f","text":"<p>\u751f\u7269\u533b\u5b66\u4e3b\u8981\u7684\u6570\u636e\u5e93\uff1apubmed, medline, embase, cbm\uff08\u4e2d\u56fd\u7684pbmed\uff09, web of science</p> <p>pubmed \u57fa\u672c\u4e0a\u4f1a\u5305\u542bmedline</p> <p>embase\u548cpubmed\u6709\u90e8\u5206\u4ea4\u96c6</p> <p>web of science\uff08\u6709\u6838\u5fc3\u7b49\u7ea7\uff0c\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u7b5b\u9009\u51fa\u9ad8\u8d28\u91cf\u7684\u671f\u520a\uff09</p>"},{"location":"Tool/systematicReview/bilibilil/#4_1","title":"4. \u68c0\u7d22\u65b9\u6cd5","text":"<p>pubmed\u6536\u5f55\u8303\u56f4\uff1amedline, old-midline(1950-1965, \u6ca1\u6709MeSH\u5b57\u6bb5), pre-medline </p>"},{"location":"Tool/systematicReview/bilibilil/#1_3","title":"1. \u68c0\u7d22\u8bcd\u7684\u9009\u62e9\u4e0e\u6269\u5145","text":"<p>\u81ea\u7136\u8bed\u8a00\u68c0\u7d22 -- \u81ea\u7531\u8bcd</p> <p>\u4eba\u5de5\u8bed\u8a00\u68c0\u7d22 -- \u4e3b\u9898\u8bcd \uff08\u51c6\u786e\u3001\u800c\u4e14\u641e\u5b9a\u4e86\u540c\u4e49\u8bcd\uff0c\u4f46\u662f\u6709\u5f88\u591a\u8fd8\u6ca1\u8fdb\u884c\u8fc7MeSH\u6807\u6ce8\u7684\u6587\u7ae0\uff09</p>"},{"location":"Tool/systematicReview/bilibilil/#2_3","title":"2. \u68c0\u7d22\u5f0f\u7684\u7f16\u5236","text":""},{"location":"Tool/systematicReview/bilibilil/#3_2","title":"3. \u68c0\u7d22\u65b9\u6cd5\u7684\u9009\u62e9","text":""},{"location":"Tool/systematicReview/bilibilil/#4_2","title":"4. \u68c0\u7d22\u7b56\u7565\u7684\u8c03\u6574","text":""},{"location":"Tool/systematicReview/bilibilil/#dissertation-meta-analysis-of-the-relationship-between-male-infertility-and-plasma-entrogen-and-plasma-androgen-concentration","title":"Dissertation: Meta-analysis of the relationship between male infertility and plasma entrogen and plasma androgen concentration","text":"<p>also, the sperm count and the sperm quality</p> <p>\u5173\u952e\u8bcd\u786e\u5b9a\u6cd5\uff1a</p> <p>male infertility</p> <p>plasma entrogen, androgen</p> <p>PICO\u786e\u5b9a\u6cd5\uff1a</p> <p>participant: male infertility</p> <p>intervention</p> <p>compare</p> <p>outcome</p> \u5173\u952e\u8bcd \u4e3b\u9898\u8bcd \u81ea\u7531\u8bcd male infertility aspermia, asthenozoospermia, azoospermia, oligospermia, sertoli Cell-Only Syndrome, teratozoospermia sperm count androgens dihydrotestosterone, nandrolone, oxandrolone, oxymetholone, stanozolol, testosterone estrogen"},{"location":"Tool/systematicReview/bilibilil/#_5","title":"\u4e3b\u9898\u8bcd\u786e\u8ba4","text":"<p>\u4f7f\u7528pubmed mesh database\u786e\u8ba4\u4e3b\u9898\u8bcd</p>"},{"location":"Tool/systematicReview/bilibilil/#male-infertilityhttpswwwncbinlmnihgovmesh68007248","title":"\u5173\u952e\u8bcdmale infertility\uff08https://www.ncbi.nlm.nih.gov/mesh/68007248\uff09","text":"<p>MeSH\u4e3b\u9898\u8bcdtree</p> <p>Aspermia, Asthenozoospermia, Azoospermia, Oligospermia, Sertoli Cell-Only Syndrome, Teratozoospermia</p>"},{"location":"Tool/systematicReview/bilibilil/#sperm-count-httpswwwncbinlmnihgovmesh68013076","title":"\u5173\u952e\u8bcdsperm count \uff08https://www.ncbi.nlm.nih.gov/mesh/68013076\uff09","text":"<p>\u6ca1\u6709\u5176\u4ed6\u81ea\u7531\u8bcd</p>"},{"location":"Tool/systematicReview/bilibilil/#androgens-httpswwwncbinlmnihgovmesh68000728","title":"\u5173\u952e\u8bcdandrogens \uff08https://www.ncbi.nlm.nih.gov/mesh/68000728\uff09","text":"<p>https://www.ncbi.nlm.nih.gov/mesh/82000728 \uff08[Pharmacological Action]\uff09</p> <p>Dihydrotestosterone, Nandrolone, Oxandrolone, Oxymetholone, Stanozolol, Testosterone</p>"},{"location":"Tool/systematicReview/bilibilil/#estrogen-httpswwwncbinlmnihgovmesh68004967","title":"\u5173\u952e\u8bcdestrogen \uff08https://www.ncbi.nlm.nih.gov/mesh/68004967\uff09","text":"<p>https://www.ncbi.nlm.nih.gov/mesh/82004967\uff08[Pharmacological Action]\uff09</p> <p>Chlorotrianisene (MeSH Term) Coumestrol (MeSH Term) Dienestrol (MeSH Term) Diethylstilbestrol (MeSH Term) Epimestrol (MeSH Term) Equol (MeSH Term) Estradiol (MeSH Term) Estrogenic Steroids, Alkylated (MeSH Term) Estrogens, Conjugated (USP) (MeSH Term) Estrogens, Esterified (USP) (MeSH Term) Estrone (MeSH Term) Ethinyl Estradiol (MeSH Term) Genistein (MeSH Term) Hexestrol (MeSH Term) Mestranol (MeSH Term) Quinestrol (MeSH Term) Zearalenone (MeSH Term) Zeranol (MeSH Term)</p>"},{"location":"Tool/systematicReview/bilibilil/#sperm-count","title":"\u5173\u952e\u8bcdsperm count","text":"<p>((male infertility) OR (sperm count)) AND ((androgen) OR (estrogen))</p> <p>((\"Infertility, Male\"[Mesh]) OR (\"Sperm Count\"[Mesh])) AND ((\"Androgens\"[Mesh]) OR (\"Androgens\" [Pharmacological Action]) OR (\"Estrogens\"[Mesh]) OR (\"Estrogens\" [Pharmacological Action]))</p>"},{"location":"Tool/systematicReview/jhu/","title":"JHU Introduction to Systematic Review and Meta-Analysis","text":""},{"location":"Tool/systematicReview/jhu/#module-1-introduction","title":"Module 1 Introduction","text":""},{"location":"Tool/systematicReview/jhu/#module-2-framing-the-question","title":"Module 2 Framing the Question","text":""},{"location":"Tool/systematicReview/jhu/#module-3-searching-principles-and-bias-assessment","title":"Module 3 Searching Principles and Bias Assessment","text":""},{"location":"Tool/systematicReview/jhu/#module-4-minimizing-metabias-qualitative-synthesis-and-interpreting-results","title":"Module 4 Minimizing Metabias, Qualitative Synthesis, and Interpreting Results","text":""},{"location":"Tool/systematicReview/jhu/#module-5-planning-the-meta-analysis-and-statistical-methods","title":"Module 5 Planning the Meta-analysis and Statistical Methods","text":""},{"location":"Tool/systematicReview/jhu/#module-6-wrap-up-and-final-peer-review-assignment","title":"Module 6 Wrap Up and Final Peer Review Assignment","text":""},{"location":"Tool/systematicReview/notes/","title":"Notes for My Dissertation","text":"<ul> <li> 1. \u5b66\u4e60JHU \u7684 Introduction to Systematic Review and Meta-Analysis</li> </ul> <p>\u5173\u4e8er\u8bed\u8a00\u7684meta\u5206\u6790\uff0cgoogle\u641c\u7d22meta analysis r tutorial</p> <p>\u4e0b\u8f7d\u4e86\u4e00\u672cmeta-analysis with R</p>"},{"location":"Tool/vim/vim/","title":"Vim","text":""},{"location":"Tool/vim/vim/#neovim","title":"Neovim","text":""},{"location":"Tool/vim/vim/#_1","title":"\u53c2\u8003\u6559\u7a0b","text":"<p>https://www.bilibili.com/video/BV1Td4y1578E/?spm_id_from=333.1007.top_right_bar_window_history.content.click&amp;vd_source=eef58fdde5150dcee73d678306f9cd48</p>"},{"location":"Tool/vim/vim/#neovim_1","title":"\u4e0b\u8f7dneovim","text":"<pre><code>brew install neovim\n</code></pre>"},{"location":"Tool/vim/vim/#lua","title":"\u80cc\u666f\uff1aLua","text":"<p>Lua \u662f\u4e00\u4e2a\u5c0f\u5de7\u7684\u811a\u672c\u8bed\u8a00\u3002\u4f5c\u8005\u662f\u5df4\u897f\u4eba\u3002\u8be5\u8bed\u8a00\u7684\u8bbe\u8ba1\u76ee\u7684\u662f\u4e3a\u4e86\u5d4c\u5165\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u4ece\u800c\u4e3a\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u7075\u6d3b\u7684\u6269\u5c55\u548c\u5b9a\u5236\u529f\u80fd\u3002</p> <p>Lua \u7531\u6807\u51c6 C \u7f16\u5199\u800c\u6210\uff0c\u4ee3\u7801\u7b80\u6d01\u4f18\u7f8e\uff0c\u51e0\u4e4e\u5728\u6240\u6709\u64cd\u4f5c\u7cfb\u7edf\u548c\u5e73\u53f0\u4e0a\u90fd\u53ef\u4ee5\u7f16\u8bd1\uff0c\u8fd0\u884c\u3002</p> <p>Lua \u811a\u672c\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u88ab C/C++ \u4ee3\u7801\u8c03\u7528\uff0c\u4e5f\u53ef\u4ee5\u53cd\u8fc7\u6765\u8c03\u7528 C/C++ \u7684\u51fd\u6570\uff0c\u8fd9\u4f7f\u5f97 Lua \u5728\u5e94\u7528\u7a0b\u5e8f\u4e2d\u53ef\u4ee5\u88ab\u5e7f\u6cdb\u5e94\u7528\u3002\u4e0d\u4ec5\u4ec5\u4f5c\u4e3a\u6269\u5c55\u811a\u672c\uff0c\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u666e\u901a\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u4ee3\u66ff XML,Ini \u7b49\u6587\u4ef6\u683c\u5f0f\uff0c\u5e76\u4e14\u66f4\u5bb9\u6613\u7406\u89e3\u548c\u7ef4\u62a4\u3002</p>"},{"location":"Tool/vim/vim/#lua-annotation","title":"lua annotation","text":"<p>Lua\u4e2d\u6709\u4e24\u79cd\u6ce8\u91ca\uff1a\u884c\u6ce8\u91ca\u548c\u5757\u6ce8\u91ca\u3002 \u884c\u6ce8\u91ca\u4ee5\u201c--\u201d\u5f00\u5934\uff0c\u53ef\u4ee5\u6ce8\u91ca\u8fd9\u4e00\u884c\u540e\u9762\u7684\u5185\u5bb9\u3002 \u5757\u6ce8\u91ca\u4ee5\u201c--[[\u201d\u5f00\u59cb\uff0c\u4ee5\u201c--]]\u201d\u7ed3\u5c3e\uff0c\u53ef\u4ee5\u6ce8\u91ca\u8fd9\u4e2a\u8303\u56f4\u5185\u7684\u6574\u4e2a\u5185\u5bb9\uff1b\u5757\u6ce8\u91ca\u53ef\u4ee5\u6ce8\u91ca\u591a\u884c\u5185\u5bb9\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u793a\u4f8b\uff1a</p> <pre><code>print(\"hello\")\n-- \u8fd9\u662f\u884c\u6ce8\u91ca\n--[[\n\u8fd9\u662f\u5757\u6ce8\u91ca\uff0c\n\u5757\u6ce8\u91ca\u53ef\u4ee5\n\u6ce8\u91ca\u591a\u884c\uff01\n--]]\n</code></pre>"},{"location":"Tool/vim/vim/#vim-syntax","title":"vim syntax","text":"<pre><code>-- source the init.lua again\n:so\n</code></pre>"},{"location":"Tool/vim/vim/#all-the-commands-used-to-customize-the-neovim","title":"All the commands used to customize the neovim","text":""},{"location":"Tool/vim/vim/#terminal-commands","title":"terminal commands","text":"<pre><code>mkdir .config/nvim\n# \u521b\u5efa\u7a7a\u6587\u4ef6\ntouch init.lua \nmkdir .config/\n</code></pre>"},{"location":"Tool/vim/vim/#initlua","title":"init.lua","text":"<pre><code>vim.opt.relativenumber = true\nvim.opt.number = true\n</code></pre>"},{"location":"Tool/vim/vim/#neovim-ide-from-scratch","title":"Neovim IDE from Scratch","text":"<p>\u53c2\u8003youtube\u89c6\u9891</p> <p>https://www.youtube.com/watch?v=ctH-a-1eUME&amp;list=PLhoH5vyxr6Qq41NFL4GvhFp-WLd5xzIzZ</p> <p>github\u4ed3\u5e93\uff1a</p> <p>https://github.com/LunarVim/Neovim-from-scratch/tree/01-options</p> <pre><code>\u279c  ~ git clone git@github.com:ChristianChiarulli/Neovim-from-scratch.git ~/.config/nvim\n</code></pre> <p>\u8fd9\u662f\u4f7f\u7528vim\u7f16\u8f91\u7684\u7b2c\u4e00\u884c\u6587\u5b57</p>"},{"location":"Tool/vim/vim/#neovim-as-an-ide-for-r","title":"neovim as an IDE for R","text":"<p>How to use Neovim or VIM Editor as an IDE for R</p>"}]}